
server_meteo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007740  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000210  08007850  08007850  00017850  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007a60  08007a60  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  08007a60  08007a60  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007a60  08007a60  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007a60  08007a60  00017a60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007a64  08007a64  00017a64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08007a68  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001638  20000074  08007adc  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200016ac  08007adc  000216ac  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   000199fb  00000000  00000000  0002009d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003834  00000000  00000000  00039a98  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000015d0  00000000  00000000  0003d2d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001438  00000000  00000000  0003e8a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00017a8e  00000000  00000000  0003fcd8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000ffdd  00000000  00000000  00057766  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0007e04b  00000000  00000000  00067743  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000e578e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005d9c  00000000  00000000  000e580c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000074 	.word	0x20000074
 800012c:	00000000 	.word	0x00000000
 8000130:	08007838 	.word	0x08007838

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000078 	.word	0x20000078
 800014c:	08007838 	.word	0x08007838

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <vApplicationStackOverflowHook>:
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);
void vApplicationMallocFailedHook(void);

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 8000160:	b480      	push	{r7}
 8000162:	b083      	sub	sp, #12
 8000164:	af00      	add	r7, sp, #0
 8000166:	6078      	str	r0, [r7, #4]
 8000168:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 800016a:	bf00      	nop
 800016c:	370c      	adds	r7, #12
 800016e:	46bd      	mov	sp, r7
 8000170:	bc80      	pop	{r7}
 8000172:	4770      	bx	lr

08000174 <vApplicationMallocFailedHook>:
/* USER CODE END 4 */

/* USER CODE BEGIN 5 */
__weak void vApplicationMallocFailedHook(void)
{
 8000174:	b480      	push	{r7}
 8000176:	af00      	add	r7, sp, #0
   demo application. If heap_1.c or heap_2.c are used, then the size of the
   heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
   FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
   to query the size of free heap space that remains (although it does not
   provide information on how the remaining heap might be fragmented). */
}
 8000178:	bf00      	nop
 800017a:	46bd      	mov	sp, r7
 800017c:	bc80      	pop	{r7}
 800017e:	4770      	bx	lr

08000180 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000180:	b480      	push	{r7}
 8000182:	b085      	sub	sp, #20
 8000184:	af00      	add	r7, sp, #0
 8000186:	60f8      	str	r0, [r7, #12]
 8000188:	60b9      	str	r1, [r7, #8]
 800018a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800018c:	68fb      	ldr	r3, [r7, #12]
 800018e:	4a06      	ldr	r2, [pc, #24]	; (80001a8 <vApplicationGetIdleTaskMemory+0x28>)
 8000190:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000192:	68bb      	ldr	r3, [r7, #8]
 8000194:	4a05      	ldr	r2, [pc, #20]	; (80001ac <vApplicationGetIdleTaskMemory+0x2c>)
 8000196:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000198:	687b      	ldr	r3, [r7, #4]
 800019a:	2240      	movs	r2, #64	; 0x40
 800019c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}                   
 800019e:	bf00      	nop
 80001a0:	3714      	adds	r7, #20
 80001a2:	46bd      	mov	sp, r7
 80001a4:	bc80      	pop	{r7}
 80001a6:	4770      	bx	lr
 80001a8:	20000090 	.word	0x20000090
 80001ac:	200000e4 	.word	0x200000e4

080001b0 <vApplicationGetTimerTaskMemory>:
/* USER CODE BEGIN GET_TIMER_TASK_MEMORY */
static StaticTask_t xTimerTaskTCBBuffer;
static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];
  
void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize )  
{
 80001b0:	b480      	push	{r7}
 80001b2:	b085      	sub	sp, #20
 80001b4:	af00      	add	r7, sp, #0
 80001b6:	60f8      	str	r0, [r7, #12]
 80001b8:	60b9      	str	r1, [r7, #8]
 80001ba:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 80001bc:	68fb      	ldr	r3, [r7, #12]
 80001be:	4a06      	ldr	r2, [pc, #24]	; (80001d8 <vApplicationGetTimerTaskMemory+0x28>)
 80001c0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
 80001c2:	68bb      	ldr	r3, [r7, #8]
 80001c4:	4a05      	ldr	r2, [pc, #20]	; (80001dc <vApplicationGetTimerTaskMemory+0x2c>)
 80001c6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 80001c8:	687b      	ldr	r3, [r7, #4]
 80001ca:	2280      	movs	r2, #128	; 0x80
 80001cc:	601a      	str	r2, [r3, #0]
  /* place for user code */
}                   
 80001ce:	bf00      	nop
 80001d0:	3714      	adds	r7, #20
 80001d2:	46bd      	mov	sp, r7
 80001d4:	bc80      	pop	{r7}
 80001d6:	4770      	bx	lr
 80001d8:	200001e4 	.word	0x200001e4
 80001dc:	20000238 	.word	0x20000238

080001e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001e0:	b5b0      	push	{r4, r5, r7, lr}
 80001e2:	b0a2      	sub	sp, #136	; 0x88
 80001e4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001e6:	f001 fc4d 	bl	8001a84 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001ea:	f000 f89f 	bl	800032c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001ee:	f000 f943 	bl	8000478 <MX_GPIO_Init>
  MX_SPI1_Init();
 80001f2:	f000 f8e1 	bl	80003b8 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 80001f6:	f000 f915 	bl	8000424 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  DWT_Init(); // счётчик для микросекундных пауз
 80001fa:	f000 fcbf 	bl	8000b7c <DWT_Init>
  pipe_pool_id = osPoolCreate(osPool(pipe_pool));
 80001fe:	483d      	ldr	r0, [pc, #244]	; (80002f4 <main+0x114>)
 8000200:	f003 fda0 	bl	8003d44 <osPoolCreate>
 8000204:	4602      	mov	r2, r0
 8000206:	4b3c      	ldr	r3, [pc, #240]	; (80002f8 <main+0x118>)
 8000208:	601a      	str	r2, [r3, #0]
  //MX_USB_DEVICE_Init();
  /* USER CODE END 2 */

  /* Create the mutex(es) */
  /* definition and creation of unixtimeMutex */
  osMutexDef(unixtimeMutex);
 800020a:	2300      	movs	r3, #0
 800020c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8000210:	2300      	movs	r3, #0
 8000212:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  unixtimeMutexHandle = osMutexCreate(osMutex(unixtimeMutex));
 8000216:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800021a:	4618      	mov	r0, r3
 800021c:	f003 fd7a 	bl	8003d14 <osMutexCreate>
 8000220:	4602      	mov	r2, r0
 8000222:	4b36      	ldr	r3, [pc, #216]	; (80002fc <main+0x11c>)
 8000224:	601a      	str	r2, [r3, #0]
  /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* Create the timer(s) */
  /* definition and creation of osUnixTimer */
  osTimerDef(osUnixTimer, CallbackUnixTimer);
 8000226:	4b36      	ldr	r3, [pc, #216]	; (8000300 <main+0x120>)
 8000228:	67bb      	str	r3, [r7, #120]	; 0x78
 800022a:	2300      	movs	r3, #0
 800022c:	67fb      	str	r3, [r7, #124]	; 0x7c
  osUnixTimerHandle = osTimerCreate(osTimer(osUnixTimer), osTimerPeriodic, NULL);
 800022e:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8000232:	2200      	movs	r2, #0
 8000234:	2101      	movs	r1, #1
 8000236:	4618      	mov	r0, r3
 8000238:	f003 fcf2 	bl	8003c20 <osTimerCreate>
 800023c:	4602      	mov	r2, r0
 800023e:	4b31      	ldr	r3, [pc, #196]	; (8000304 <main+0x124>)
 8000240:	601a      	str	r2, [r3, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* definition and creation of msgUnixTimer */
  osMessageQDef(msgUnixTimer, 16, uint32_t);
 8000242:	4b31      	ldr	r3, [pc, #196]	; (8000308 <main+0x128>)
 8000244:	f107 0468 	add.w	r4, r7, #104	; 0x68
 8000248:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800024a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  msgUnixTimerHandle = osMessageCreate(osMessageQ(msgUnixTimer), NULL);
 800024e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8000252:	2100      	movs	r1, #0
 8000254:	4618      	mov	r0, r3
 8000256:	f003 fe74 	bl	8003f42 <osMessageCreate>
 800025a:	4602      	mov	r2, r0
 800025c:	4b2b      	ldr	r3, [pc, #172]	; (800030c <main+0x12c>)
 800025e:	601a      	str	r2, [r3, #0]

  /* definition and creation of msgPipeAlloc */
  osMessageQDef(msgPipeAlloc, 16, uint32_t);
 8000260:	4b29      	ldr	r3, [pc, #164]	; (8000308 <main+0x128>)
 8000262:	f107 0458 	add.w	r4, r7, #88	; 0x58
 8000266:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000268:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  msgPipeAllocHandle = osMessageCreate(osMessageQ(msgPipeAlloc), NULL);
 800026c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000270:	2100      	movs	r1, #0
 8000272:	4618      	mov	r0, r3
 8000274:	f003 fe65 	bl	8003f42 <osMessageCreate>
 8000278:	4602      	mov	r2, r0
 800027a:	4b25      	ldr	r3, [pc, #148]	; (8000310 <main+0x130>)
 800027c:	601a      	str	r2, [r3, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityIdle, 0, 64);
 800027e:	4b25      	ldr	r3, [pc, #148]	; (8000314 <main+0x134>)
 8000280:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8000284:	461d      	mov	r5, r3
 8000286:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000288:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800028a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800028e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000292:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000296:	2100      	movs	r1, #0
 8000298:	4618      	mov	r0, r3
 800029a:	f003 fc60 	bl	8003b5e <osThreadCreate>
 800029e:	4602      	mov	r2, r0
 80002a0:	4b1d      	ldr	r3, [pc, #116]	; (8000318 <main+0x138>)
 80002a2:	601a      	str	r2, [r3, #0]

  /* definition and creation of myRadio */
  osThreadDef(myRadio, StartRadio, osPriorityAboveNormal, 0, 128);
 80002a4:	4b1d      	ldr	r3, [pc, #116]	; (800031c <main+0x13c>)
 80002a6:	f107 0420 	add.w	r4, r7, #32
 80002aa:	461d      	mov	r5, r3
 80002ac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80002ae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80002b0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80002b4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myRadioHandle = osThreadCreate(osThread(myRadio), NULL);
 80002b8:	f107 0320 	add.w	r3, r7, #32
 80002bc:	2100      	movs	r1, #0
 80002be:	4618      	mov	r0, r3
 80002c0:	f003 fc4d 	bl	8003b5e <osThreadCreate>
 80002c4:	4602      	mov	r2, r0
 80002c6:	4b16      	ldr	r3, [pc, #88]	; (8000320 <main+0x140>)
 80002c8:	601a      	str	r2, [r3, #0]

  /* definition and creation of unixTimeCounter */
  osThreadDef(unixTimeCounter, StartUnixTimeCounter, osPriorityNormal, 0, 128);
 80002ca:	4b16      	ldr	r3, [pc, #88]	; (8000324 <main+0x144>)
 80002cc:	1d3c      	adds	r4, r7, #4
 80002ce:	461d      	mov	r5, r3
 80002d0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80002d2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80002d4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80002d8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  unixTimeCounterHandle = osThreadCreate(osThread(unixTimeCounter), NULL);
 80002dc:	1d3b      	adds	r3, r7, #4
 80002de:	2100      	movs	r1, #0
 80002e0:	4618      	mov	r0, r3
 80002e2:	f003 fc3c 	bl	8003b5e <osThreadCreate>
 80002e6:	4602      	mov	r2, r0
 80002e8:	4b0f      	ldr	r3, [pc, #60]	; (8000328 <main+0x148>)
 80002ea:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80002ec:	f003 fc30 	bl	8003b50 <osKernelStart>
 
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80002f0:	e7fe      	b.n	80002f0 <main+0x110>
 80002f2:	bf00      	nop
 80002f4:	080079f0 	.word	0x080079f0
 80002f8:	200013a8 	.word	0x200013a8
 80002fc:	20001428 	.word	0x20001428
 8000300:	08000a51 	.word	0x08000a51
 8000304:	200013b0 	.word	0x200013b0
 8000308:	08007850 	.word	0x08007850
 800030c:	20001584 	.word	0x20001584
 8000310:	2000142c 	.word	0x2000142c
 8000314:	0800786c 	.word	0x0800786c
 8000318:	200013a0 	.word	0x200013a0
 800031c:	08007890 	.word	0x08007890
 8000320:	20001400 	.word	0x20001400
 8000324:	080078bc 	.word	0x080078bc
 8000328:	20001520 	.word	0x20001520

0800032c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800032c:	b580      	push	{r7, lr}
 800032e:	b090      	sub	sp, #64	; 0x40
 8000330:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000332:	f107 0318 	add.w	r3, r7, #24
 8000336:	2228      	movs	r2, #40	; 0x28
 8000338:	2100      	movs	r1, #0
 800033a:	4618      	mov	r0, r3
 800033c:	f006 fe37 	bl	8006fae <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000340:	1d3b      	adds	r3, r7, #4
 8000342:	2200      	movs	r2, #0
 8000344:	601a      	str	r2, [r3, #0]
 8000346:	605a      	str	r2, [r3, #4]
 8000348:	609a      	str	r2, [r3, #8]
 800034a:	60da      	str	r2, [r3, #12]
 800034c:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800034e:	2301      	movs	r3, #1
 8000350:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000352:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000356:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000358:	2300      	movs	r3, #0
 800035a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800035c:	2301      	movs	r3, #1
 800035e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000360:	2302      	movs	r3, #2
 8000362:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000364:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000368:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800036a:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800036e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000370:	f107 0318 	add.w	r3, r7, #24
 8000374:	4618      	mov	r0, r3
 8000376:	f001 fe5b 	bl	8002030 <HAL_RCC_OscConfig>
 800037a:	4603      	mov	r3, r0
 800037c:	2b00      	cmp	r3, #0
 800037e:	d001      	beq.n	8000384 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000380:	f000 fb98 	bl	8000ab4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000384:	230f      	movs	r3, #15
 8000386:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000388:	2302      	movs	r3, #2
 800038a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800038c:	2300      	movs	r3, #0
 800038e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000390:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000394:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000396:	2300      	movs	r3, #0
 8000398:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800039a:	1d3b      	adds	r3, r7, #4
 800039c:	2102      	movs	r1, #2
 800039e:	4618      	mov	r0, r3
 80003a0:	f002 f8c6 	bl	8002530 <HAL_RCC_ClockConfig>
 80003a4:	4603      	mov	r3, r0
 80003a6:	2b00      	cmp	r3, #0
 80003a8:	d001      	beq.n	80003ae <SystemClock_Config+0x82>
  {
    Error_Handler();
 80003aa:	f000 fb83 	bl	8000ab4 <Error_Handler>
  }
}
 80003ae:	bf00      	nop
 80003b0:	3740      	adds	r7, #64	; 0x40
 80003b2:	46bd      	mov	sp, r7
 80003b4:	bd80      	pop	{r7, pc}
	...

080003b8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80003b8:	b580      	push	{r7, lr}
 80003ba:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80003bc:	4b17      	ldr	r3, [pc, #92]	; (800041c <MX_SPI1_Init+0x64>)
 80003be:	4a18      	ldr	r2, [pc, #96]	; (8000420 <MX_SPI1_Init+0x68>)
 80003c0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80003c2:	4b16      	ldr	r3, [pc, #88]	; (800041c <MX_SPI1_Init+0x64>)
 80003c4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80003c8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80003ca:	4b14      	ldr	r3, [pc, #80]	; (800041c <MX_SPI1_Init+0x64>)
 80003cc:	2200      	movs	r2, #0
 80003ce:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80003d0:	4b12      	ldr	r3, [pc, #72]	; (800041c <MX_SPI1_Init+0x64>)
 80003d2:	2200      	movs	r2, #0
 80003d4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80003d6:	4b11      	ldr	r3, [pc, #68]	; (800041c <MX_SPI1_Init+0x64>)
 80003d8:	2200      	movs	r2, #0
 80003da:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80003dc:	4b0f      	ldr	r3, [pc, #60]	; (800041c <MX_SPI1_Init+0x64>)
 80003de:	2200      	movs	r2, #0
 80003e0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80003e2:	4b0e      	ldr	r3, [pc, #56]	; (800041c <MX_SPI1_Init+0x64>)
 80003e4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80003e8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80003ea:	4b0c      	ldr	r3, [pc, #48]	; (800041c <MX_SPI1_Init+0x64>)
 80003ec:	2218      	movs	r2, #24
 80003ee:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80003f0:	4b0a      	ldr	r3, [pc, #40]	; (800041c <MX_SPI1_Init+0x64>)
 80003f2:	2200      	movs	r2, #0
 80003f4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80003f6:	4b09      	ldr	r3, [pc, #36]	; (800041c <MX_SPI1_Init+0x64>)
 80003f8:	2200      	movs	r2, #0
 80003fa:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80003fc:	4b07      	ldr	r3, [pc, #28]	; (800041c <MX_SPI1_Init+0x64>)
 80003fe:	2200      	movs	r2, #0
 8000400:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000402:	4b06      	ldr	r3, [pc, #24]	; (800041c <MX_SPI1_Init+0x64>)
 8000404:	220a      	movs	r2, #10
 8000406:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000408:	4804      	ldr	r0, [pc, #16]	; (800041c <MX_SPI1_Init+0x64>)
 800040a:	f002 fa5d 	bl	80028c8 <HAL_SPI_Init>
 800040e:	4603      	mov	r3, r0
 8000410:	2b00      	cmp	r3, #0
 8000412:	d001      	beq.n	8000418 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000414:	f000 fb4e 	bl	8000ab4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000418:	bf00      	nop
 800041a:	bd80      	pop	{r7, pc}
 800041c:	20001524 	.word	0x20001524
 8000420:	40013000 	.word	0x40013000

08000424 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000424:	b580      	push	{r7, lr}
 8000426:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000428:	4b11      	ldr	r3, [pc, #68]	; (8000470 <MX_USART1_UART_Init+0x4c>)
 800042a:	4a12      	ldr	r2, [pc, #72]	; (8000474 <MX_USART1_UART_Init+0x50>)
 800042c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800042e:	4b10      	ldr	r3, [pc, #64]	; (8000470 <MX_USART1_UART_Init+0x4c>)
 8000430:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000434:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000436:	4b0e      	ldr	r3, [pc, #56]	; (8000470 <MX_USART1_UART_Init+0x4c>)
 8000438:	2200      	movs	r2, #0
 800043a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800043c:	4b0c      	ldr	r3, [pc, #48]	; (8000470 <MX_USART1_UART_Init+0x4c>)
 800043e:	2200      	movs	r2, #0
 8000440:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000442:	4b0b      	ldr	r3, [pc, #44]	; (8000470 <MX_USART1_UART_Init+0x4c>)
 8000444:	2200      	movs	r2, #0
 8000446:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000448:	4b09      	ldr	r3, [pc, #36]	; (8000470 <MX_USART1_UART_Init+0x4c>)
 800044a:	220c      	movs	r2, #12
 800044c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800044e:	4b08      	ldr	r3, [pc, #32]	; (8000470 <MX_USART1_UART_Init+0x4c>)
 8000450:	2200      	movs	r2, #0
 8000452:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000454:	4b06      	ldr	r3, [pc, #24]	; (8000470 <MX_USART1_UART_Init+0x4c>)
 8000456:	2200      	movs	r2, #0
 8000458:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800045a:	4805      	ldr	r0, [pc, #20]	; (8000470 <MX_USART1_UART_Init+0x4c>)
 800045c:	f003 f946 	bl	80036ec <HAL_UART_Init>
 8000460:	4603      	mov	r3, r0
 8000462:	2b00      	cmp	r3, #0
 8000464:	d001      	beq.n	800046a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000466:	f000 fb25 	bl	8000ab4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800046a:	bf00      	nop
 800046c:	bd80      	pop	{r7, pc}
 800046e:	bf00      	nop
 8000470:	200013c0 	.word	0x200013c0
 8000474:	40013800 	.word	0x40013800

08000478 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000478:	b580      	push	{r7, lr}
 800047a:	b088      	sub	sp, #32
 800047c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800047e:	f107 0310 	add.w	r3, r7, #16
 8000482:	2200      	movs	r2, #0
 8000484:	601a      	str	r2, [r3, #0]
 8000486:	605a      	str	r2, [r3, #4]
 8000488:	609a      	str	r2, [r3, #8]
 800048a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800048c:	4b38      	ldr	r3, [pc, #224]	; (8000570 <MX_GPIO_Init+0xf8>)
 800048e:	699b      	ldr	r3, [r3, #24]
 8000490:	4a37      	ldr	r2, [pc, #220]	; (8000570 <MX_GPIO_Init+0xf8>)
 8000492:	f043 0310 	orr.w	r3, r3, #16
 8000496:	6193      	str	r3, [r2, #24]
 8000498:	4b35      	ldr	r3, [pc, #212]	; (8000570 <MX_GPIO_Init+0xf8>)
 800049a:	699b      	ldr	r3, [r3, #24]
 800049c:	f003 0310 	and.w	r3, r3, #16
 80004a0:	60fb      	str	r3, [r7, #12]
 80004a2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80004a4:	4b32      	ldr	r3, [pc, #200]	; (8000570 <MX_GPIO_Init+0xf8>)
 80004a6:	699b      	ldr	r3, [r3, #24]
 80004a8:	4a31      	ldr	r2, [pc, #196]	; (8000570 <MX_GPIO_Init+0xf8>)
 80004aa:	f043 0320 	orr.w	r3, r3, #32
 80004ae:	6193      	str	r3, [r2, #24]
 80004b0:	4b2f      	ldr	r3, [pc, #188]	; (8000570 <MX_GPIO_Init+0xf8>)
 80004b2:	699b      	ldr	r3, [r3, #24]
 80004b4:	f003 0320 	and.w	r3, r3, #32
 80004b8:	60bb      	str	r3, [r7, #8]
 80004ba:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004bc:	4b2c      	ldr	r3, [pc, #176]	; (8000570 <MX_GPIO_Init+0xf8>)
 80004be:	699b      	ldr	r3, [r3, #24]
 80004c0:	4a2b      	ldr	r2, [pc, #172]	; (8000570 <MX_GPIO_Init+0xf8>)
 80004c2:	f043 0304 	orr.w	r3, r3, #4
 80004c6:	6193      	str	r3, [r2, #24]
 80004c8:	4b29      	ldr	r3, [pc, #164]	; (8000570 <MX_GPIO_Init+0xf8>)
 80004ca:	699b      	ldr	r3, [r3, #24]
 80004cc:	f003 0304 	and.w	r3, r3, #4
 80004d0:	607b      	str	r3, [r7, #4]
 80004d2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80004d4:	4b26      	ldr	r3, [pc, #152]	; (8000570 <MX_GPIO_Init+0xf8>)
 80004d6:	699b      	ldr	r3, [r3, #24]
 80004d8:	4a25      	ldr	r2, [pc, #148]	; (8000570 <MX_GPIO_Init+0xf8>)
 80004da:	f043 0308 	orr.w	r3, r3, #8
 80004de:	6193      	str	r3, [r2, #24]
 80004e0:	4b23      	ldr	r3, [pc, #140]	; (8000570 <MX_GPIO_Init+0xf8>)
 80004e2:	699b      	ldr	r3, [r3, #24]
 80004e4:	f003 0308 	and.w	r3, r3, #8
 80004e8:	603b      	str	r3, [r7, #0]
 80004ea:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(IND_GPIO_Port, IND_Pin, GPIO_PIN_RESET);
 80004ec:	2200      	movs	r2, #0
 80004ee:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80004f2:	4820      	ldr	r0, [pc, #128]	; (8000574 <MX_GPIO_Init+0xfc>)
 80004f4:	f001 fd54 	bl	8001fa0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, CSN_Pin|CE_Pin, GPIO_PIN_RESET);
 80004f8:	2200      	movs	r2, #0
 80004fa:	f44f 7140 	mov.w	r1, #768	; 0x300
 80004fe:	481e      	ldr	r0, [pc, #120]	; (8000578 <MX_GPIO_Init+0x100>)
 8000500:	f001 fd4e 	bl	8001fa0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : IND_Pin */
  GPIO_InitStruct.Pin = IND_Pin;
 8000504:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000508:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800050a:	2301      	movs	r3, #1
 800050c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800050e:	2300      	movs	r3, #0
 8000510:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000512:	2302      	movs	r3, #2
 8000514:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(IND_GPIO_Port, &GPIO_InitStruct);
 8000516:	f107 0310 	add.w	r3, r7, #16
 800051a:	4619      	mov	r1, r3
 800051c:	4815      	ldr	r0, [pc, #84]	; (8000574 <MX_GPIO_Init+0xfc>)
 800051e:	f001 fbe5 	bl	8001cec <HAL_GPIO_Init>

  /*Configure GPIO pin : RF24_IRQ_Pin */
  GPIO_InitStruct.Pin = RF24_IRQ_Pin;
 8000522:	2301      	movs	r3, #1
 8000524:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000526:	4b15      	ldr	r3, [pc, #84]	; (800057c <MX_GPIO_Init+0x104>)
 8000528:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800052a:	2301      	movs	r3, #1
 800052c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(RF24_IRQ_GPIO_Port, &GPIO_InitStruct);
 800052e:	f107 0310 	add.w	r3, r7, #16
 8000532:	4619      	mov	r1, r3
 8000534:	4810      	ldr	r0, [pc, #64]	; (8000578 <MX_GPIO_Init+0x100>)
 8000536:	f001 fbd9 	bl	8001cec <HAL_GPIO_Init>

  /*Configure GPIO pins : CSN_Pin CE_Pin */
  GPIO_InitStruct.Pin = CSN_Pin|CE_Pin;
 800053a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800053e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000540:	2301      	movs	r3, #1
 8000542:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000544:	2300      	movs	r3, #0
 8000546:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000548:	2302      	movs	r3, #2
 800054a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800054c:	f107 0310 	add.w	r3, r7, #16
 8000550:	4619      	mov	r1, r3
 8000552:	4809      	ldr	r0, [pc, #36]	; (8000578 <MX_GPIO_Init+0x100>)
 8000554:	f001 fbca 	bl	8001cec <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 8000558:	2200      	movs	r2, #0
 800055a:	2105      	movs	r1, #5
 800055c:	2006      	movs	r0, #6
 800055e:	f001 fb9a 	bl	8001c96 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000562:	2006      	movs	r0, #6
 8000564:	f001 fbb3 	bl	8001cce <HAL_NVIC_EnableIRQ>

}
 8000568:	bf00      	nop
 800056a:	3720      	adds	r7, #32
 800056c:	46bd      	mov	sp, r7
 800056e:	bd80      	pop	{r7, pc}
 8000570:	40021000 	.word	0x40021000
 8000574:	40011000 	.word	0x40011000
 8000578:	40010c00 	.word	0x40010c00
 800057c:	10210000 	.word	0x10210000

08000580 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	b084      	sub	sp, #16
 8000584:	af00      	add	r7, sp, #0
 8000586:	4603      	mov	r3, r0
 8000588:	80fb      	strh	r3, [r7, #6]
  if (GPIO_Pin == GPIO_PIN_0)
 800058a:	88fb      	ldrh	r3, [r7, #6]
 800058c:	2b01      	cmp	r3, #1
 800058e:	d135      	bne.n	80005fc <HAL_GPIO_EXTI_Callback+0x7c>
  {
	  static uint8_t rx_ready;
	  static uint8_t status;
	  static uint8_t pipeNo;
	  status = whatHappened();
 8000590:	f000 fda5 	bl	80010de <whatHappened>
 8000594:	4603      	mov	r3, r0
 8000596:	461a      	mov	r2, r3
 8000598:	4b1b      	ldr	r3, [pc, #108]	; (8000608 <HAL_GPIO_EXTI_Callback+0x88>)
 800059a:	701a      	strb	r2, [r3, #0]
	  rx_ready = status & (1 << RX_DR);
 800059c:	4b1a      	ldr	r3, [pc, #104]	; (8000608 <HAL_GPIO_EXTI_Callback+0x88>)
 800059e:	781b      	ldrb	r3, [r3, #0]
 80005a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80005a4:	b2da      	uxtb	r2, r3
 80005a6:	4b19      	ldr	r3, [pc, #100]	; (800060c <HAL_GPIO_EXTI_Callback+0x8c>)
 80005a8:	701a      	strb	r2, [r3, #0]
	  if (rx_ready){
 80005aa:	4b18      	ldr	r3, [pc, #96]	; (800060c <HAL_GPIO_EXTI_Callback+0x8c>)
 80005ac:	781b      	ldrb	r3, [r3, #0]
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	d025      	beq.n	80005fe <HAL_GPIO_EXTI_Callback+0x7e>
		  while( available(&pipeNo)){              // Read all available payloads
 80005b2:	e01c      	b.n	80005ee <HAL_GPIO_EXTI_Callback+0x6e>
			struct ReceivedData *pPipeData  = osPoolAlloc(pipe_pool_id);
 80005b4:	4b16      	ldr	r3, [pc, #88]	; (8000610 <HAL_GPIO_EXTI_Callback+0x90>)
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	4618      	mov	r0, r3
 80005ba:	f003 fc20 	bl	8003dfe <osPoolAlloc>
 80005be:	60f8      	str	r0, [r7, #12]
			pPipeData->pipeNo = pipeNo;
 80005c0:	4b14      	ldr	r3, [pc, #80]	; (8000614 <HAL_GPIO_EXTI_Callback+0x94>)
 80005c2:	781a      	ldrb	r2, [r3, #0]
 80005c4:	68fb      	ldr	r3, [r7, #12]
 80005c6:	701a      	strb	r2, [r3, #0]
			status = getPayloadSize();
 80005c8:	f000 fc6c 	bl	8000ea4 <getPayloadSize>
 80005cc:	4603      	mov	r3, r0
 80005ce:	461a      	mov	r2, r3
 80005d0:	4b0d      	ldr	r3, [pc, #52]	; (8000608 <HAL_GPIO_EXTI_Callback+0x88>)
 80005d2:	701a      	strb	r2, [r3, #0]
			read( &pPipeData->data, sizeof(struct meteo_data_struct));
 80005d4:	68fb      	ldr	r3, [r7, #12]
 80005d6:	3304      	adds	r3, #4
 80005d8:	211c      	movs	r1, #28
 80005da:	4618      	mov	r0, r3
 80005dc:	f000 fd6c 	bl	80010b8 <read>

			osMessagePut(msgPipeAllocHandle, (uint32_t)pPipeData, 0);
 80005e0:	4b0d      	ldr	r3, [pc, #52]	; (8000618 <HAL_GPIO_EXTI_Callback+0x98>)
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	68f9      	ldr	r1, [r7, #12]
 80005e6:	2200      	movs	r2, #0
 80005e8:	4618      	mov	r0, r3
 80005ea:	f003 fcd3 	bl	8003f94 <osMessagePut>
		  while( available(&pipeNo)){              // Read all available payloads
 80005ee:	4809      	ldr	r0, [pc, #36]	; (8000614 <HAL_GPIO_EXTI_Callback+0x94>)
 80005f0:	f000 fd40 	bl	8001074 <available>
 80005f4:	4603      	mov	r3, r0
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	d1dc      	bne.n	80005b4 <HAL_GPIO_EXTI_Callback+0x34>
  else
    {
      __NOP();

    }
}
 80005fa:	e000      	b.n	80005fe <HAL_GPIO_EXTI_Callback+0x7e>
      __NOP();
 80005fc:	bf00      	nop
}
 80005fe:	bf00      	nop
 8000600:	3710      	adds	r7, #16
 8000602:	46bd      	mov	sp, r7
 8000604:	bd80      	pop	{r7, pc}
 8000606:	bf00      	nop
 8000608:	20000438 	.word	0x20000438
 800060c:	20000439 	.word	0x20000439
 8000610:	200013a8 	.word	0x200013a8
 8000614:	2000043a 	.word	0x2000043a
 8000618:	2000142c 	.word	0x2000142c

0800061c <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b082      	sub	sp, #8
 8000620:	af00      	add	r7, sp, #0
 8000622:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	HAL_GPIO_TogglePin(GPIOC,IND_Pin);
 8000624:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000628:	4803      	ldr	r0, [pc, #12]	; (8000638 <StartDefaultTask+0x1c>)
 800062a:	f001 fcd1 	bl	8001fd0 <HAL_GPIO_TogglePin>
    osDelay(500);
 800062e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000632:	f003 fae0 	bl	8003bf6 <osDelay>
	HAL_GPIO_TogglePin(GPIOC,IND_Pin);
 8000636:	e7f5      	b.n	8000624 <StartDefaultTask+0x8>
 8000638:	40011000 	.word	0x40011000
 800063c:	00000000 	.word	0x00000000

08000640 <StartRadio>:

/* USER CODE BEGIN Header_StartRadio */

/* USER CODE END Header_StartRadio */
void StartRadio(void const * argument)
{
 8000640:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000642:	b095      	sub	sp, #84	; 0x54
 8000644:	af0a      	add	r7, sp, #40	; 0x28
 8000646:	61f8      	str	r0, [r7, #28]
  /* USER CODE BEGIN StartRadio */

	  receiver_init();
 8000648:	f000 ff06 	bl	8001458 <receiver_init>
	  uint8_t res = isChipConnected(); // проверяет подключён ли модуль к SPI
 800064c:	f000 fcaa 	bl	8000fa4 <isChipConnected>
 8000650:	4603      	mov	r3, r0
 8000652:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	  static char str[100] = {0,};
	  snprintf(str, 64, "Connected: %s\n", res ? "OK" : "NOT OK");
 8000656:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800065a:	2b00      	cmp	r3, #0
 800065c:	d001      	beq.n	8000662 <StartRadio+0x22>
 800065e:	4ba0      	ldr	r3, [pc, #640]	; (80008e0 <StartRadio+0x2a0>)
 8000660:	e000      	b.n	8000664 <StartRadio+0x24>
 8000662:	4ba0      	ldr	r3, [pc, #640]	; (80008e4 <StartRadio+0x2a4>)
 8000664:	4aa0      	ldr	r2, [pc, #640]	; (80008e8 <StartRadio+0x2a8>)
 8000666:	2140      	movs	r1, #64	; 0x40
 8000668:	48a0      	ldr	r0, [pc, #640]	; (80008ec <StartRadio+0x2ac>)
 800066a:	f006 fca9 	bl	8006fc0 <sniprintf>
	  HAL_UART_Transmit(&huart1, (uint8_t*)str, strlen(str), 1000);
 800066e:	489f      	ldr	r0, [pc, #636]	; (80008ec <StartRadio+0x2ac>)
 8000670:	f7ff fd6e 	bl	8000150 <strlen>
 8000674:	4603      	mov	r3, r0
 8000676:	b29a      	uxth	r2, r3
 8000678:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800067c:	499b      	ldr	r1, [pc, #620]	; (80008ec <StartRadio+0x2ac>)
 800067e:	489c      	ldr	r0, [pc, #624]	; (80008f0 <StartRadio+0x2b0>)
 8000680:	f003 f881 	bl	8003786 <HAL_UART_Transmit>

	  res = NRF_Init(); // инициализация
 8000684:	f000 fc18 	bl	8000eb8 <NRF_Init>
 8000688:	4603      	mov	r3, r0
 800068a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if defined( SERIAL_DEBUG)
	  snprintf(str, 64, "Init: %s\n", res > 0 && res < 255 ? "OK" : "NOT OK");
 800068e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000692:	2b00      	cmp	r3, #0
 8000694:	d005      	beq.n	80006a2 <StartRadio+0x62>
 8000696:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800069a:	2bff      	cmp	r3, #255	; 0xff
 800069c:	d001      	beq.n	80006a2 <StartRadio+0x62>
 800069e:	4b90      	ldr	r3, [pc, #576]	; (80008e0 <StartRadio+0x2a0>)
 80006a0:	e000      	b.n	80006a4 <StartRadio+0x64>
 80006a2:	4b90      	ldr	r3, [pc, #576]	; (80008e4 <StartRadio+0x2a4>)
 80006a4:	4a93      	ldr	r2, [pc, #588]	; (80008f4 <StartRadio+0x2b4>)
 80006a6:	2140      	movs	r1, #64	; 0x40
 80006a8:	4890      	ldr	r0, [pc, #576]	; (80008ec <StartRadio+0x2ac>)
 80006aa:	f006 fc89 	bl	8006fc0 <sniprintf>
	  HAL_UART_Transmit(&huart1, (uint8_t*)str, strlen(str), 1000);
 80006ae:	488f      	ldr	r0, [pc, #572]	; (80008ec <StartRadio+0x2ac>)
 80006b0:	f7ff fd4e 	bl	8000150 <strlen>
 80006b4:	4603      	mov	r3, r0
 80006b6:	b29a      	uxth	r2, r3
 80006b8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006bc:	498b      	ldr	r1, [pc, #556]	; (80008ec <StartRadio+0x2ac>)
 80006be:	488c      	ldr	r0, [pc, #560]	; (80008f0 <StartRadio+0x2b0>)
 80006c0:	f003 f861 	bl	8003786 <HAL_UART_Transmit>
#endif
	  ////////////// SET ////////////////

	  setPALevel(RF24_PA_LOW);
 80006c4:	2001      	movs	r0, #1
 80006c6:	f000 fe49 	bl	800135c <setPALevel>
	  //uint8_t status = getPALevel();
	  //setAutoAck(false);
	  setPayloadSize(sizeof(struct meteo_data_struct));
 80006ca:	201c      	movs	r0, #28
 80006cc:	f000 fbd6 	bl	8000e7c <setPayloadSize>
	  enableDynamicPayloads();
 80006d0:	f000 fdce 	bl	8001270 <enableDynamicPayloads>
	  enableAckPayload();
 80006d4:	f000 fdec 	bl	80012b0 <enableAckPayload>
	  setChannel(106);
 80006d8:	206a      	movs	r0, #106	; 0x6a
 80006da:	f000 fbc1 	bl	8000e60 <setChannel>
		  openWritingPipe(pipe_addresses[0]);
 80006de:	a474      	add	r4, pc, #464	; (adr r4, 80008b0 <StartRadio+0x270>)
 80006e0:	e9d4 3400 	ldrd	r3, r4, [r4]
 80006e4:	4618      	mov	r0, r3
 80006e6:	4621      	mov	r1, r4
 80006e8:	f000 fd08 	bl	80010fc <openWritingPipe>
		  openReadingPipe(1,pipe_addresses[1]); //0xF0F0F0F0E1LL);
 80006ec:	a472      	add	r4, pc, #456	; (adr r4, 80008b8 <StartRadio+0x278>)
 80006ee:	e9d4 3400 	ldrd	r3, r4, [r4]
 80006f2:	461a      	mov	r2, r3
 80006f4:	4623      	mov	r3, r4
 80006f6:	2001      	movs	r0, #1
 80006f8:	f000 fd22 	bl	8001140 <openReadingPipe>
		  openReadingPipe(2,pipe_addresses[2]);
 80006fc:	a470      	add	r4, pc, #448	; (adr r4, 80008c0 <StartRadio+0x280>)
 80006fe:	e9d4 3400 	ldrd	r3, r4, [r4]
 8000702:	461a      	mov	r2, r3
 8000704:	4623      	mov	r3, r4
 8000706:	2002      	movs	r0, #2
 8000708:	f000 fd1a 	bl	8001140 <openReadingPipe>
		  openReadingPipe(3,pipe_addresses[3]);
 800070c:	a46e      	add	r4, pc, #440	; (adr r4, 80008c8 <StartRadio+0x288>)
 800070e:	e9d4 3400 	ldrd	r3, r4, [r4]
 8000712:	461a      	mov	r2, r3
 8000714:	4623      	mov	r3, r4
 8000716:	2003      	movs	r0, #3
 8000718:	f000 fd12 	bl	8001140 <openReadingPipe>
		  openReadingPipe(4,pipe_addresses[4]);
 800071c:	a46c      	add	r4, pc, #432	; (adr r4, 80008d0 <StartRadio+0x290>)
 800071e:	e9d4 3400 	ldrd	r3, r4, [r4]
 8000722:	461a      	mov	r2, r3
 8000724:	4623      	mov	r3, r4
 8000726:	2004      	movs	r0, #4
 8000728:	f000 fd0a 	bl	8001140 <openReadingPipe>
		  openReadingPipe(5,pipe_addresses[5]);
 800072c:	a46a      	add	r4, pc, #424	; (adr r4, 80008d8 <StartRadio+0x298>)
 800072e:	e9d4 3400 	ldrd	r3, r4, [r4]
 8000732:	461a      	mov	r2, r3
 8000734:	4623      	mov	r3, r4
 8000736:	2005      	movs	r0, #5
 8000738:	f000 fd02 	bl	8001140 <openReadingPipe>
		  CreateNullAck(1);
 800073c:	2001      	movs	r0, #1
 800073e:	f000 ff35 	bl	80015ac <CreateNullAck>
		  writeAckPayload(1,&pipeData[1].ackData, sizeof(struct server_ack ));
 8000742:	221c      	movs	r2, #28
 8000744:	496c      	ldr	r1, [pc, #432]	; (80008f8 <StartRadio+0x2b8>)
 8000746:	2001      	movs	r0, #1
 8000748:	f000 fdd2 	bl	80012f0 <writeAckPayload>
		  CreateNullAck(2);
 800074c:	2002      	movs	r0, #2
 800074e:	f000 ff2d 	bl	80015ac <CreateNullAck>
		  writeAckPayload(2,&pipeData[2].ackData, sizeof(struct server_ack ));
 8000752:	221c      	movs	r2, #28
 8000754:	4969      	ldr	r1, [pc, #420]	; (80008fc <StartRadio+0x2bc>)
 8000756:	2002      	movs	r0, #2
 8000758:	f000 fdca 	bl	80012f0 <writeAckPayload>
		  CreateNullAck(3);
 800075c:	2003      	movs	r0, #3
 800075e:	f000 ff25 	bl	80015ac <CreateNullAck>
		  writeAckPayload(3,&pipeData[3].ackData, sizeof(struct server_ack ));
 8000762:	221c      	movs	r2, #28
 8000764:	4966      	ldr	r1, [pc, #408]	; (8000900 <StartRadio+0x2c0>)
 8000766:	2003      	movs	r0, #3
 8000768:	f000 fdc2 	bl	80012f0 <writeAckPayload>
		  CreateNullAck(4);
 800076c:	2004      	movs	r0, #4
 800076e:	f000 ff1d 	bl	80015ac <CreateNullAck>
		  writeAckPayload(4,&pipeData[4].ackData, sizeof(struct server_ack ));
 8000772:	221c      	movs	r2, #28
 8000774:	4963      	ldr	r1, [pc, #396]	; (8000904 <StartRadio+0x2c4>)
 8000776:	2004      	movs	r0, #4
 8000778:	f000 fdba 	bl	80012f0 <writeAckPayload>
		  CreateNullAck(5);
 800077c:	2005      	movs	r0, #5
 800077e:	f000 ff15 	bl	80015ac <CreateNullAck>
		  writeAckPayload(5,&pipeData[5].ackData, sizeof(struct server_ack ));
 8000782:	221c      	movs	r2, #28
 8000784:	4960      	ldr	r1, [pc, #384]	; (8000908 <StartRadio+0x2c8>)
 8000786:	2005      	movs	r0, #5
 8000788:	f000 fdb2 	bl	80012f0 <writeAckPayload>
		  //writeAckPayload(3,&pipeData[3].ackData, sizeof(struct server_ack ));
		  startListening();
 800078c:	f000 fc20 	bl	8000fd0 <startListening>
  for(;;)
  {
	  	//static uint8_t pipeLine;
	  	static char strT[8];

	  		event = osMessageGet(msgPipeAllocHandle, osWaitForever);
 8000790:	4b5e      	ldr	r3, [pc, #376]	; (800090c <StartRadio+0x2cc>)
 8000792:	6819      	ldr	r1, [r3, #0]
 8000794:	4c5e      	ldr	r4, [pc, #376]	; (8000910 <StartRadio+0x2d0>)
 8000796:	f107 0308 	add.w	r3, r7, #8
 800079a:	f04f 32ff 	mov.w	r2, #4294967295
 800079e:	4618      	mov	r0, r3
 80007a0:	f003 fc38 	bl	8004014 <osMessageGet>
 80007a4:	f107 0308 	add.w	r3, r7, #8
 80007a8:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80007ac:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	  		if(event.status == osEventMessage)
 80007b0:	4b57      	ldr	r3, [pc, #348]	; (8000910 <StartRadio+0x2d0>)
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	2b10      	cmp	r3, #16
 80007b6:	d1eb      	bne.n	8000790 <StartRadio+0x150>
	  		{
	  			struct ReceivedData *pPipeData = event.value.p;
 80007b8:	4b55      	ldr	r3, [pc, #340]	; (8000910 <StartRadio+0x2d0>)
 80007ba:	685b      	ldr	r3, [r3, #4]
 80007bc:	623b      	str	r3, [r7, #32]
	  			PackDataToAck(pPipeData);
 80007be:	6a38      	ldr	r0, [r7, #32]
 80007c0:	f000 fe58 	bl	8001474 <PackDataToAck>
				writeAckPayload(pPipeData->pipeNo,&pipeData[pPipeData->pipeNo].ackData, sizeof(struct server_ack ));
 80007c4:	6a3b      	ldr	r3, [r7, #32]
 80007c6:	7818      	ldrb	r0, [r3, #0]
 80007c8:	6a3b      	ldr	r3, [r7, #32]
 80007ca:	781b      	ldrb	r3, [r3, #0]
 80007cc:	461a      	mov	r2, r3
 80007ce:	4613      	mov	r3, r2
 80007d0:	005b      	lsls	r3, r3, #1
 80007d2:	4413      	add	r3, r2
 80007d4:	011b      	lsls	r3, r3, #4
 80007d6:	3310      	adds	r3, #16
 80007d8:	4a4e      	ldr	r2, [pc, #312]	; (8000914 <StartRadio+0x2d4>)
 80007da:	4413      	add	r3, r2
 80007dc:	3304      	adds	r3, #4
 80007de:	221c      	movs	r2, #28
 80007e0:	4619      	mov	r1, r3
 80007e2:	f000 fd85 	bl	80012f0 <writeAckPayload>
				startListening();
 80007e6:	f000 fbf3 	bl	8000fd0 <startListening>

#if defined( SERIAL_DEBUG)
	  			unixtimeToString( pPipeData->data.meteo_data.measurement_time,(char*)&strT);
 80007ea:	6a3b      	ldr	r3, [r7, #32]
 80007ec:	68db      	ldr	r3, [r3, #12]
 80007ee:	494a      	ldr	r1, [pc, #296]	; (8000918 <StartRadio+0x2d8>)
 80007f0:	4618      	mov	r0, r3
 80007f2:	f000 f965 	bl	8000ac0 <unixtimeToString>

	  			snprintf(str, 100, "\r\npipe %i got: T=%i P=%i H=%i state=%i power=%i q=%i type=%i delay=%lius  time= %s Vcc=%i\r\n",
	  			pPipeData->pipeNo,
 80007f6:	6a3b      	ldr	r3, [r7, #32]
 80007f8:	781b      	ldrb	r3, [r3, #0]
	  			snprintf(str, 100, "\r\npipe %i got: T=%i P=%i H=%i state=%i power=%i q=%i type=%i delay=%lius  time= %s Vcc=%i\r\n",
 80007fa:	469c      	mov	ip, r3
	  			pPipeData->data.meteo_data.T,
 80007fc:	6a3b      	ldr	r3, [r7, #32]
 80007fe:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
	  			snprintf(str, 100, "\r\npipe %i got: T=%i P=%i H=%i state=%i power=%i q=%i type=%i delay=%lius  time= %s Vcc=%i\r\n",
 8000802:	4619      	mov	r1, r3
				pPipeData->data.meteo_data.P,
 8000804:	6a3b      	ldr	r3, [r7, #32]
 8000806:	8a5b      	ldrh	r3, [r3, #18]
	  			snprintf(str, 100, "\r\npipe %i got: T=%i P=%i H=%i state=%i power=%i q=%i type=%i delay=%lius  time= %s Vcc=%i\r\n",
 8000808:	4618      	mov	r0, r3
				pPipeData->data.meteo_data.H,
 800080a:	6a3b      	ldr	r3, [r7, #32]
 800080c:	8a9b      	ldrh	r3, [r3, #20]
	  			snprintf(str, 100, "\r\npipe %i got: T=%i P=%i H=%i state=%i power=%i q=%i type=%i delay=%lius  time= %s Vcc=%i\r\n",
 800080e:	461c      	mov	r4, r3
				pPipeData->data.state,
 8000810:	6a3b      	ldr	r3, [r7, #32]
 8000812:	7e9b      	ldrb	r3, [r3, #26]
	  			snprintf(str, 100, "\r\npipe %i got: T=%i P=%i H=%i state=%i power=%i q=%i type=%i delay=%lius  time= %s Vcc=%i\r\n",
 8000814:	461d      	mov	r5, r3
				pPipeData->data.power,
 8000816:	6a3b      	ldr	r3, [r7, #32]
 8000818:	7edb      	ldrb	r3, [r3, #27]
	  			snprintf(str, 100, "\r\npipe %i got: T=%i P=%i H=%i state=%i power=%i q=%i type=%i delay=%lius  time= %s Vcc=%i\r\n",
 800081a:	461e      	mov	r6, r3
				pPipeData->data.query,
 800081c:	6a3b      	ldr	r3, [r7, #32]
 800081e:	7e1b      	ldrb	r3, [r3, #24]
	  			snprintf(str, 100, "\r\npipe %i got: T=%i P=%i H=%i state=%i power=%i q=%i type=%i delay=%lius  time= %s Vcc=%i\r\n",
 8000820:	607b      	str	r3, [r7, #4]
				pPipeData->data.type_of_data,
 8000822:	6a3b      	ldr	r3, [r7, #32]
 8000824:	7e5b      	ldrb	r3, [r3, #25]
	  			snprintf(str, 100, "\r\npipe %i got: T=%i P=%i H=%i state=%i power=%i q=%i type=%i delay=%lius  time= %s Vcc=%i\r\n",
 8000826:	603b      	str	r3, [r7, #0]
 8000828:	6a3b      	ldr	r3, [r7, #32]
 800082a:	685b      	ldr	r3, [r3, #4]
				pPipeData->data.round_tripDelay,
				  //pPipeData->data.unixtime,
				strT,
				pPipeData->data.vcc);
 800082c:	6a3a      	ldr	r2, [r7, #32]
 800082e:	7f12      	ldrb	r2, [r2, #28]
	  			snprintf(str, 100, "\r\npipe %i got: T=%i P=%i H=%i state=%i power=%i q=%i type=%i delay=%lius  time= %s Vcc=%i\r\n",
 8000830:	9209      	str	r2, [sp, #36]	; 0x24
 8000832:	4a39      	ldr	r2, [pc, #228]	; (8000918 <StartRadio+0x2d8>)
 8000834:	9208      	str	r2, [sp, #32]
 8000836:	9307      	str	r3, [sp, #28]
 8000838:	683a      	ldr	r2, [r7, #0]
 800083a:	9206      	str	r2, [sp, #24]
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	9305      	str	r3, [sp, #20]
 8000840:	9604      	str	r6, [sp, #16]
 8000842:	9503      	str	r5, [sp, #12]
 8000844:	9402      	str	r4, [sp, #8]
 8000846:	9001      	str	r0, [sp, #4]
 8000848:	9100      	str	r1, [sp, #0]
 800084a:	4663      	mov	r3, ip
 800084c:	4a33      	ldr	r2, [pc, #204]	; (800091c <StartRadio+0x2dc>)
 800084e:	2164      	movs	r1, #100	; 0x64
 8000850:	4826      	ldr	r0, [pc, #152]	; (80008ec <StartRadio+0x2ac>)
 8000852:	f006 fbb5 	bl	8006fc0 <sniprintf>
#endif
	  			//ShowMessage(str);
    			osPoolFree(pipe_pool_id,pPipeData);
 8000856:	4b32      	ldr	r3, [pc, #200]	; (8000920 <StartRadio+0x2e0>)
 8000858:	681b      	ldr	r3, [r3, #0]
 800085a:	6a39      	ldr	r1, [r7, #32]
 800085c:	4618      	mov	r0, r3
 800085e:	f003 fb30 	bl	8003ec2 <osPoolFree>
#if defined( SERIAL_DEBUG)
	  			HAL_UART_Transmit(&huart1, (uint8_t*)str, strlen(str), 1000);
 8000862:	4822      	ldr	r0, [pc, #136]	; (80008ec <StartRadio+0x2ac>)
 8000864:	f7ff fc74 	bl	8000150 <strlen>
 8000868:	4603      	mov	r3, r0
 800086a:	b29a      	uxth	r2, r3
 800086c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000870:	491e      	ldr	r1, [pc, #120]	; (80008ec <StartRadio+0x2ac>)
 8000872:	481f      	ldr	r0, [pc, #124]	; (80008f0 <StartRadio+0x2b0>)
 8000874:	f002 ff87 	bl	8003786 <HAL_UART_Transmit>
    			  unixtimeToString(unixtime,(char*)&strT);
 8000878:	4b2a      	ldr	r3, [pc, #168]	; (8000924 <StartRadio+0x2e4>)
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	4926      	ldr	r1, [pc, #152]	; (8000918 <StartRadio+0x2d8>)
 800087e:	4618      	mov	r0, r3
 8000880:	f000 f91e 	bl	8000ac0 <unixtimeToString>
  	  			snprintf(str, 100, "now: time= %s\r\n",strT);
 8000884:	4b24      	ldr	r3, [pc, #144]	; (8000918 <StartRadio+0x2d8>)
 8000886:	4a28      	ldr	r2, [pc, #160]	; (8000928 <StartRadio+0x2e8>)
 8000888:	2164      	movs	r1, #100	; 0x64
 800088a:	4818      	ldr	r0, [pc, #96]	; (80008ec <StartRadio+0x2ac>)
 800088c:	f006 fb98 	bl	8006fc0 <sniprintf>
	  			HAL_UART_Transmit(&huart1, (uint8_t*)str, strlen(str), 1000);
 8000890:	4816      	ldr	r0, [pc, #88]	; (80008ec <StartRadio+0x2ac>)
 8000892:	f7ff fc5d 	bl	8000150 <strlen>
 8000896:	4603      	mov	r3, r0
 8000898:	b29a      	uxth	r2, r3
 800089a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800089e:	4913      	ldr	r1, [pc, #76]	; (80008ec <StartRadio+0x2ac>)
 80008a0:	4813      	ldr	r0, [pc, #76]	; (80008f0 <StartRadio+0x2b0>)
 80008a2:	f002 ff70 	bl	8003786 <HAL_UART_Transmit>
	  			osDelay(100);
 80008a6:	2064      	movs	r0, #100	; 0x64
 80008a8:	f003 f9a5 	bl	8003bf6 <osDelay>
  {
 80008ac:	e770      	b.n	8000790 <StartRadio+0x150>
 80008ae:	bf00      	nop
 80008b0:	f0f0f0d2 	.word	0xf0f0f0d2
 80008b4:	000000f0 	.word	0x000000f0
 80008b8:	f0f0f0e1 	.word	0xf0f0f0e1
 80008bc:	000000f0 	.word	0x000000f0
 80008c0:	f0f0f0e2 	.word	0xf0f0f0e2
 80008c4:	000000f0 	.word	0x000000f0
 80008c8:	f0f0f0e3 	.word	0xf0f0f0e3
 80008cc:	000000f0 	.word	0x000000f0
 80008d0:	f0f0f0e4 	.word	0xf0f0f0e4
 80008d4:	000000f0 	.word	0x000000f0
 80008d8:	f0f0f0e5 	.word	0xf0f0f0e5
 80008dc:	000000f0 	.word	0x000000f0
 80008e0:	080078d8 	.word	0x080078d8
 80008e4:	080078dc 	.word	0x080078dc
 80008e8:	080078e4 	.word	0x080078e4
 80008ec:	2000043c 	.word	0x2000043c
 80008f0:	200013c0 	.word	0x200013c0
 80008f4:	080078f4 	.word	0x080078f4
 80008f8:	20001474 	.word	0x20001474
 80008fc:	200014a4 	.word	0x200014a4
 8000900:	200014d4 	.word	0x200014d4
 8000904:	20001504 	.word	0x20001504
 8000908:	20001534 	.word	0x20001534
 800090c:	2000142c 	.word	0x2000142c
 8000910:	200004a0 	.word	0x200004a0
 8000914:	20001430 	.word	0x20001430
 8000918:	200004ac 	.word	0x200004ac
 800091c:	08007900 	.word	0x08007900
 8000920:	200013a8 	.word	0x200013a8
 8000924:	2000161c 	.word	0x2000161c
 8000928:	0800795c 	.word	0x0800795c

0800092c <StartUnixTimeCounter>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartUnixTimeCounter */
void StartUnixTimeCounter(void const * argument)
{
 800092c:	b590      	push	{r4, r7, lr}
 800092e:	b089      	sub	sp, #36	; 0x24
 8000930:	af02      	add	r7, sp, #8
 8000932:	6178      	str	r0, [r7, #20]
  /* USER CODE BEGIN StartUnixTimeCounter */
	osTimerStart(osUnixTimerHandle, 1000);
 8000934:	4b3a      	ldr	r3, [pc, #232]	; (8000a20 <StartUnixTimeCounter+0xf4>)
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800093c:	4618      	mov	r0, r3
 800093e:	f003 f9a3 	bl	8003c88 <osTimerStart>
	  static osEvent event;
	  static uint8_t strT[8];

	  unixtime = 946681200;
 8000942:	4b38      	ldr	r3, [pc, #224]	; (8000a24 <StartUnixTimeCounter+0xf8>)
 8000944:	4a38      	ldr	r2, [pc, #224]	; (8000a28 <StartUnixTimeCounter+0xfc>)
 8000946:	601a      	str	r2, [r3, #0]
	    unixtimeToString(unixtime,(char*)&strT);
 8000948:	4b36      	ldr	r3, [pc, #216]	; (8000a24 <StartUnixTimeCounter+0xf8>)
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	4937      	ldr	r1, [pc, #220]	; (8000a2c <StartUnixTimeCounter+0x100>)
 800094e:	4618      	mov	r0, r3
 8000950:	f000 f8b6 	bl	8000ac0 <unixtimeToString>
#if defined( SERIAL_DEBUG)
		  static char str[100] = {0,};
		  sprintf(str, "start time: %s unixtime=%li\r\n",strT,unixtime);
 8000954:	4b33      	ldr	r3, [pc, #204]	; (8000a24 <StartUnixTimeCounter+0xf8>)
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	4a34      	ldr	r2, [pc, #208]	; (8000a2c <StartUnixTimeCounter+0x100>)
 800095a:	4935      	ldr	r1, [pc, #212]	; (8000a30 <StartUnixTimeCounter+0x104>)
 800095c:	4835      	ldr	r0, [pc, #212]	; (8000a34 <StartUnixTimeCounter+0x108>)
 800095e:	f006 fb63 	bl	8007028 <siprintf>
		  HAL_UART_Transmit(&huart1, (uint8_t*)str, strlen(str), 1000);
 8000962:	4834      	ldr	r0, [pc, #208]	; (8000a34 <StartUnixTimeCounter+0x108>)
 8000964:	f7ff fbf4 	bl	8000150 <strlen>
 8000968:	4603      	mov	r3, r0
 800096a:	b29a      	uxth	r2, r3
 800096c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000970:	4930      	ldr	r1, [pc, #192]	; (8000a34 <StartUnixTimeCounter+0x108>)
 8000972:	4831      	ldr	r0, [pc, #196]	; (8000a38 <StartUnixTimeCounter+0x10c>)
 8000974:	f002 ff07 	bl	8003786 <HAL_UART_Transmit>


  /* Infinite loop */
  for(;;)
  {
	  event = osMessageGet(msgUnixTimerHandle, osWaitForever);
 8000978:	4b30      	ldr	r3, [pc, #192]	; (8000a3c <StartUnixTimeCounter+0x110>)
 800097a:	6819      	ldr	r1, [r3, #0]
 800097c:	4c30      	ldr	r4, [pc, #192]	; (8000a40 <StartUnixTimeCounter+0x114>)
 800097e:	463b      	mov	r3, r7
 8000980:	f04f 32ff 	mov.w	r2, #4294967295
 8000984:	4618      	mov	r0, r3
 8000986:	f003 fb45 	bl	8004014 <osMessageGet>
 800098a:	463b      	mov	r3, r7
 800098c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000990:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	  if(event.status == osEventMessage)
 8000994:	4b2a      	ldr	r3, [pc, #168]	; (8000a40 <StartUnixTimeCounter+0x114>)
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	2b10      	cmp	r3, #16
 800099a:	d1ed      	bne.n	8000978 <StartUnixTimeCounter+0x4c>
      {

		  xSemaphoreTake(unixtimeMutexHandle, portMAX_DELAY);
 800099c:	4b29      	ldr	r3, [pc, #164]	; (8000a44 <StartUnixTimeCounter+0x118>)
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	f04f 31ff 	mov.w	r1, #4294967295
 80009a4:	4618      	mov	r0, r3
 80009a6:	f004 f847 	bl	8004a38 <xQueueSemaphoreTake>
		  unixtime++;
 80009aa:	4b1e      	ldr	r3, [pc, #120]	; (8000a24 <StartUnixTimeCounter+0xf8>)
 80009ac:	681b      	ldr	r3, [r3, #0]
 80009ae:	3301      	adds	r3, #1
 80009b0:	4a1c      	ldr	r2, [pc, #112]	; (8000a24 <StartUnixTimeCounter+0xf8>)
 80009b2:	6013      	str	r3, [r2, #0]
		  xSemaphoreGive(unixtimeMutexHandle);
 80009b4:	4b23      	ldr	r3, [pc, #140]	; (8000a44 <StartUnixTimeCounter+0x118>)
 80009b6:	6818      	ldr	r0, [r3, #0]
 80009b8:	2300      	movs	r3, #0
 80009ba:	2200      	movs	r2, #0
 80009bc:	2100      	movs	r1, #0
 80009be:	f003 fdd1 	bl	8004564 <xQueueGenericSend>
		  if (unixtime % 60 ==0)
 80009c2:	4b18      	ldr	r3, [pc, #96]	; (8000a24 <StartUnixTimeCounter+0xf8>)
 80009c4:	681a      	ldr	r2, [r3, #0]
 80009c6:	4b20      	ldr	r3, [pc, #128]	; (8000a48 <StartUnixTimeCounter+0x11c>)
 80009c8:	fb83 1302 	smull	r1, r3, r3, r2
 80009cc:	4413      	add	r3, r2
 80009ce:	1159      	asrs	r1, r3, #5
 80009d0:	17d3      	asrs	r3, r2, #31
 80009d2:	1ac9      	subs	r1, r1, r3
 80009d4:	460b      	mov	r3, r1
 80009d6:	011b      	lsls	r3, r3, #4
 80009d8:	1a5b      	subs	r3, r3, r1
 80009da:	009b      	lsls	r3, r3, #2
 80009dc:	1ad1      	subs	r1, r2, r3
 80009de:	2900      	cmp	r1, #0
 80009e0:	d1ca      	bne.n	8000978 <StartUnixTimeCounter+0x4c>
		  {
		    unixtimeToString(unixtime,(char*)&strT);
 80009e2:	4b10      	ldr	r3, [pc, #64]	; (8000a24 <StartUnixTimeCounter+0xf8>)
 80009e4:	681b      	ldr	r3, [r3, #0]
 80009e6:	4911      	ldr	r1, [pc, #68]	; (8000a2c <StartUnixTimeCounter+0x100>)
 80009e8:	4618      	mov	r0, r3
 80009ea:	f000 f869 	bl	8000ac0 <unixtimeToString>
#if defined( SERIAL_DEBUG)
		    snprintf(str,100, "\r\nserver time: %s unixtime=%li  %i\r\n\r\n",strT,unixtime,event.value.v);
 80009ee:	4b0d      	ldr	r3, [pc, #52]	; (8000a24 <StartUnixTimeCounter+0xf8>)
 80009f0:	681b      	ldr	r3, [r3, #0]
 80009f2:	4a13      	ldr	r2, [pc, #76]	; (8000a40 <StartUnixTimeCounter+0x114>)
 80009f4:	6852      	ldr	r2, [r2, #4]
 80009f6:	9201      	str	r2, [sp, #4]
 80009f8:	9300      	str	r3, [sp, #0]
 80009fa:	4b0c      	ldr	r3, [pc, #48]	; (8000a2c <StartUnixTimeCounter+0x100>)
 80009fc:	4a13      	ldr	r2, [pc, #76]	; (8000a4c <StartUnixTimeCounter+0x120>)
 80009fe:	2164      	movs	r1, #100	; 0x64
 8000a00:	480c      	ldr	r0, [pc, #48]	; (8000a34 <StartUnixTimeCounter+0x108>)
 8000a02:	f006 fadd 	bl	8006fc0 <sniprintf>
		    HAL_UART_Transmit(&huart1, (uint8_t*)str, strlen(str), 1000);
 8000a06:	480b      	ldr	r0, [pc, #44]	; (8000a34 <StartUnixTimeCounter+0x108>)
 8000a08:	f7ff fba2 	bl	8000150 <strlen>
 8000a0c:	4603      	mov	r3, r0
 8000a0e:	b29a      	uxth	r2, r3
 8000a10:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a14:	4907      	ldr	r1, [pc, #28]	; (8000a34 <StartUnixTimeCounter+0x108>)
 8000a16:	4808      	ldr	r0, [pc, #32]	; (8000a38 <StartUnixTimeCounter+0x10c>)
 8000a18:	f002 feb5 	bl	8003786 <HAL_UART_Transmit>
	  event = osMessageGet(msgUnixTimerHandle, osWaitForever);
 8000a1c:	e7ac      	b.n	8000978 <StartUnixTimeCounter+0x4c>
 8000a1e:	bf00      	nop
 8000a20:	200013b0 	.word	0x200013b0
 8000a24:	2000161c 	.word	0x2000161c
 8000a28:	386d3570 	.word	0x386d3570
 8000a2c:	200004b4 	.word	0x200004b4
 8000a30:	0800796c 	.word	0x0800796c
 8000a34:	200004bc 	.word	0x200004bc
 8000a38:	200013c0 	.word	0x200013c0
 8000a3c:	20001584 	.word	0x20001584
 8000a40:	20000520 	.word	0x20000520
 8000a44:	20001428 	.word	0x20001428
 8000a48:	88888889 	.word	0x88888889
 8000a4c:	0800798c 	.word	0x0800798c

08000a50 <CallbackUnixTimer>:
  /* USER CODE END StartUnixTimeCounter */
}

/* CallbackUnixTimer function */
void CallbackUnixTimer(void const * argument)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b082      	sub	sp, #8
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CallbackUnixTimer */
  static uint32_t tim = 0;
  //tim++;

  osMessagePut(msgUnixTimerHandle, tim, 0);
 8000a58:	4b05      	ldr	r3, [pc, #20]	; (8000a70 <CallbackUnixTimer+0x20>)
 8000a5a:	6818      	ldr	r0, [r3, #0]
 8000a5c:	4b05      	ldr	r3, [pc, #20]	; (8000a74 <CallbackUnixTimer+0x24>)
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	2200      	movs	r2, #0
 8000a62:	4619      	mov	r1, r3
 8000a64:	f003 fa96 	bl	8003f94 <osMessagePut>
  xSemaphoreTake(unixtimeMutexHandle, portMAX_DELAY);
  _unixtime = tim;
  xSemaphoreGive(unixtimeMutexHandle);
  */
  /* USER CODE END CallbackUnixTimer */
}
 8000a68:	bf00      	nop
 8000a6a:	3708      	adds	r7, #8
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	bd80      	pop	{r7, pc}
 8000a70:	20001584 	.word	0x20001584
 8000a74:	2000052c 	.word	0x2000052c

08000a78 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b082      	sub	sp, #8
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	4a09      	ldr	r2, [pc, #36]	; (8000aac <HAL_TIM_PeriodElapsedCallback+0x34>)
 8000a86:	4293      	cmp	r3, r2
 8000a88:	d101      	bne.n	8000a8e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000a8a:	f001 f811 	bl	8001ab0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
  if (htim->Instance == TIM2) {
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	681b      	ldr	r3, [r3, #0]
 8000a92:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000a96:	d104      	bne.n	8000aa2 <HAL_TIM_PeriodElapsedCallback+0x2a>
    relayDelay++;
 8000a98:	4b05      	ldr	r3, [pc, #20]	; (8000ab0 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	3301      	adds	r3, #1
 8000a9e:	4a04      	ldr	r2, [pc, #16]	; (8000ab0 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8000aa0:	6013      	str	r3, [r2, #0]
  }
  /* USER CODE END Callback 1 */
}
 8000aa2:	bf00      	nop
 8000aa4:	3708      	adds	r7, #8
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	bd80      	pop	{r7, pc}
 8000aaa:	bf00      	nop
 8000aac:	40000800 	.word	0x40000800
 8000ab0:	20001390 	.word	0x20001390

08000ab4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000ab8:	bf00      	nop
 8000aba:	46bd      	mov	sp, r7
 8000abc:	bc80      	pop	{r7}
 8000abe:	4770      	bx	lr

08000ac0 <unixtimeToString>:
struct meteo meteoOutDoor,meteoInDoor;



void unixtimeToString(uint32_t unixT,char* str)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b084      	sub	sp, #16
 8000ac4:	af02      	add	r7, sp, #8
 8000ac6:	6078      	str	r0, [r7, #4]
 8000ac8:	6039      	str	r1, [r7, #0]
    unixT -= 946681200;
 8000aca:	687a      	ldr	r2, [r7, #4]
 8000acc:	4b24      	ldr	r3, [pc, #144]	; (8000b60 <unixtimeToString+0xa0>)
 8000ace:	4413      	add	r3, r2
 8000ad0:	607b      	str	r3, [r7, #4]

    static uint8_t hour;
    static uint8_t minute;
    static uint8_t second;

    second = unixT % 60;
 8000ad2:	6879      	ldr	r1, [r7, #4]
 8000ad4:	4b23      	ldr	r3, [pc, #140]	; (8000b64 <unixtimeToString+0xa4>)
 8000ad6:	fba3 2301 	umull	r2, r3, r3, r1
 8000ada:	095a      	lsrs	r2, r3, #5
 8000adc:	4613      	mov	r3, r2
 8000ade:	011b      	lsls	r3, r3, #4
 8000ae0:	1a9b      	subs	r3, r3, r2
 8000ae2:	009b      	lsls	r3, r3, #2
 8000ae4:	1aca      	subs	r2, r1, r3
 8000ae6:	b2d2      	uxtb	r2, r2
 8000ae8:	4b1f      	ldr	r3, [pc, #124]	; (8000b68 <unixtimeToString+0xa8>)
 8000aea:	701a      	strb	r2, [r3, #0]
    unixT /= 60;
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	4a1d      	ldr	r2, [pc, #116]	; (8000b64 <unixtimeToString+0xa4>)
 8000af0:	fba2 2303 	umull	r2, r3, r2, r3
 8000af4:	095b      	lsrs	r3, r3, #5
 8000af6:	607b      	str	r3, [r7, #4]

    minute = unixT % 60;
 8000af8:	6879      	ldr	r1, [r7, #4]
 8000afa:	4b1a      	ldr	r3, [pc, #104]	; (8000b64 <unixtimeToString+0xa4>)
 8000afc:	fba3 2301 	umull	r2, r3, r3, r1
 8000b00:	095a      	lsrs	r2, r3, #5
 8000b02:	4613      	mov	r3, r2
 8000b04:	011b      	lsls	r3, r3, #4
 8000b06:	1a9b      	subs	r3, r3, r2
 8000b08:	009b      	lsls	r3, r3, #2
 8000b0a:	1aca      	subs	r2, r1, r3
 8000b0c:	b2d2      	uxtb	r2, r2
 8000b0e:	4b17      	ldr	r3, [pc, #92]	; (8000b6c <unixtimeToString+0xac>)
 8000b10:	701a      	strb	r2, [r3, #0]
    unixT /= 60;
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	4a13      	ldr	r2, [pc, #76]	; (8000b64 <unixtimeToString+0xa4>)
 8000b16:	fba2 2303 	umull	r2, r3, r2, r3
 8000b1a:	095b      	lsrs	r3, r3, #5
 8000b1c:	607b      	str	r3, [r7, #4]

    hour = unixT % 24;
 8000b1e:	6879      	ldr	r1, [r7, #4]
 8000b20:	4b13      	ldr	r3, [pc, #76]	; (8000b70 <unixtimeToString+0xb0>)
 8000b22:	fba3 2301 	umull	r2, r3, r3, r1
 8000b26:	091a      	lsrs	r2, r3, #4
 8000b28:	4613      	mov	r3, r2
 8000b2a:	005b      	lsls	r3, r3, #1
 8000b2c:	4413      	add	r3, r2
 8000b2e:	00db      	lsls	r3, r3, #3
 8000b30:	1aca      	subs	r2, r1, r3
 8000b32:	b2d2      	uxtb	r2, r2
 8000b34:	4b0f      	ldr	r3, [pc, #60]	; (8000b74 <unixtimeToString+0xb4>)
 8000b36:	701a      	strb	r2, [r3, #0]

	snprintf(str,8,"%i:%i:%i",hour,minute,second);
 8000b38:	4b0e      	ldr	r3, [pc, #56]	; (8000b74 <unixtimeToString+0xb4>)
 8000b3a:	781b      	ldrb	r3, [r3, #0]
 8000b3c:	4619      	mov	r1, r3
 8000b3e:	4b0b      	ldr	r3, [pc, #44]	; (8000b6c <unixtimeToString+0xac>)
 8000b40:	781b      	ldrb	r3, [r3, #0]
 8000b42:	461a      	mov	r2, r3
 8000b44:	4b08      	ldr	r3, [pc, #32]	; (8000b68 <unixtimeToString+0xa8>)
 8000b46:	781b      	ldrb	r3, [r3, #0]
 8000b48:	9301      	str	r3, [sp, #4]
 8000b4a:	9200      	str	r2, [sp, #0]
 8000b4c:	460b      	mov	r3, r1
 8000b4e:	4a0a      	ldr	r2, [pc, #40]	; (8000b78 <unixtimeToString+0xb8>)
 8000b50:	2108      	movs	r1, #8
 8000b52:	6838      	ldr	r0, [r7, #0]
 8000b54:	f006 fa34 	bl	8006fc0 <sniprintf>
	//Serial.println(str);
	//delay(50);
}
 8000b58:	bf00      	nop
 8000b5a:	3708      	adds	r7, #8
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	bd80      	pop	{r7, pc}
 8000b60:	c792ca90 	.word	0xc792ca90
 8000b64:	88888889 	.word	0x88888889
 8000b68:	20000530 	.word	0x20000530
 8000b6c:	20000531 	.word	0x20000531
 8000b70:	aaaaaaab 	.word	0xaaaaaaab
 8000b74:	20000532 	.word	0x20000532
 8000b78:	080079b4 	.word	0x080079b4

08000b7c <DWT_Init>:
uint8_t addr_width = 0; /**< The address width to use - 3,4 or 5 bytes. */
uint8_t txDelay = 0;


void DWT_Init(void)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	af00      	add	r7, sp, #0
    SCB_DEMCR |= CoreDebug_DEMCR_TRCENA_Msk; // разрешаем использовать счётчик
 8000b80:	4b07      	ldr	r3, [pc, #28]	; (8000ba0 <DWT_Init+0x24>)
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	4a06      	ldr	r2, [pc, #24]	; (8000ba0 <DWT_Init+0x24>)
 8000b86:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000b8a:	6013      	str	r3, [r2, #0]
	DWT_CONTROL |= DWT_CTRL_CYCCNTENA_Msk;   // запускаем счётчик
 8000b8c:	4b05      	ldr	r3, [pc, #20]	; (8000ba4 <DWT_Init+0x28>)
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	4a04      	ldr	r2, [pc, #16]	; (8000ba4 <DWT_Init+0x28>)
 8000b92:	f043 0301 	orr.w	r3, r3, #1
 8000b96:	6013      	str	r3, [r2, #0]
}
 8000b98:	bf00      	nop
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	bc80      	pop	{r7}
 8000b9e:	4770      	bx	lr
 8000ba0:	e000edfc 	.word	0xe000edfc
 8000ba4:	e0001000 	.word	0xe0001000

08000ba8 <delay_us>:

void delay_us(uint32_t us) // DelayMicro
{
 8000ba8:	b480      	push	{r7}
 8000baa:	b085      	sub	sp, #20
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	6078      	str	r0, [r7, #4]
    uint32_t us_count_tic =  us * (SystemCoreClock / 1000000);
 8000bb0:	4b0b      	ldr	r3, [pc, #44]	; (8000be0 <delay_us+0x38>)
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	4a0b      	ldr	r2, [pc, #44]	; (8000be4 <delay_us+0x3c>)
 8000bb6:	fba2 2303 	umull	r2, r3, r2, r3
 8000bba:	0c9a      	lsrs	r2, r3, #18
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	fb02 f303 	mul.w	r3, r2, r3
 8000bc2:	60fb      	str	r3, [r7, #12]
    DWT->CYCCNT = 0U; // обнуляем счётчик
 8000bc4:	4b08      	ldr	r3, [pc, #32]	; (8000be8 <delay_us+0x40>)
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	605a      	str	r2, [r3, #4]
    while(DWT->CYCCNT < us_count_tic);
 8000bca:	bf00      	nop
 8000bcc:	4b06      	ldr	r3, [pc, #24]	; (8000be8 <delay_us+0x40>)
 8000bce:	685b      	ldr	r3, [r3, #4]
 8000bd0:	68fa      	ldr	r2, [r7, #12]
 8000bd2:	429a      	cmp	r2, r3
 8000bd4:	d8fa      	bhi.n	8000bcc <delay_us+0x24>
}
 8000bd6:	bf00      	nop
 8000bd8:	3714      	adds	r7, #20
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	bc80      	pop	{r7}
 8000bde:	4770      	bx	lr
 8000be0:	20000000 	.word	0x20000000
 8000be4:	431bde83 	.word	0x431bde83
 8000be8:	e0001000 	.word	0xe0001000

08000bec <csn>:

void csn(uint8_t level)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b082      	sub	sp, #8
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(CSN_GPIO_Port, CSN_Pin, level);
 8000bf6:	79fb      	ldrb	r3, [r7, #7]
 8000bf8:	461a      	mov	r2, r3
 8000bfa:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000bfe:	4805      	ldr	r0, [pc, #20]	; (8000c14 <csn+0x28>)
 8000c00:	f001 f9ce 	bl	8001fa0 <HAL_GPIO_WritePin>
	delay_us(5);
 8000c04:	2005      	movs	r0, #5
 8000c06:	f7ff ffcf 	bl	8000ba8 <delay_us>
}
 8000c0a:	bf00      	nop
 8000c0c:	3708      	adds	r7, #8
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bd80      	pop	{r7, pc}
 8000c12:	bf00      	nop
 8000c14:	40010c00 	.word	0x40010c00

08000c18 <ce>:

void ce(uint8_t level)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b082      	sub	sp, #8
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	4603      	mov	r3, r0
 8000c20:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(CE_GPIO_Port, CE_Pin, level);
 8000c22:	79fb      	ldrb	r3, [r7, #7]
 8000c24:	461a      	mov	r2, r3
 8000c26:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000c2a:	4803      	ldr	r0, [pc, #12]	; (8000c38 <ce+0x20>)
 8000c2c:	f001 f9b8 	bl	8001fa0 <HAL_GPIO_WritePin>
}
 8000c30:	bf00      	nop
 8000c32:	3708      	adds	r7, #8
 8000c34:	46bd      	mov	sp, r7
 8000c36:	bd80      	pop	{r7, pc}
 8000c38:	40010c00 	.word	0x40010c00

08000c3c <read_register>:

uint8_t read_register(uint8_t reg)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b086      	sub	sp, #24
 8000c40:	af02      	add	r7, sp, #8
 8000c42:	4603      	mov	r3, r0
 8000c44:	71fb      	strb	r3, [r7, #7]
	uint8_t addr = R_REGISTER | (REGISTER_MASK & reg);
 8000c46:	79fb      	ldrb	r3, [r7, #7]
 8000c48:	f003 031f 	and.w	r3, r3, #31
 8000c4c:	b2db      	uxtb	r3, r3
 8000c4e:	73fb      	strb	r3, [r7, #15]
	uint8_t dt = 0;
 8000c50:	2300      	movs	r3, #0
 8000c52:	73bb      	strb	r3, [r7, #14]

	csn(LOW);
 8000c54:	2000      	movs	r0, #0
 8000c56:	f7ff ffc9 	bl	8000bec <csn>
	HAL_SPI_TransmitReceive(&hspi1, &addr, &dt, 1, 1000);
 8000c5a:	f107 020e 	add.w	r2, r7, #14
 8000c5e:	f107 010f 	add.w	r1, r7, #15
 8000c62:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c66:	9300      	str	r3, [sp, #0]
 8000c68:	2301      	movs	r3, #1
 8000c6a:	480a      	ldr	r0, [pc, #40]	; (8000c94 <read_register+0x58>)
 8000c6c:	f002 f8ca 	bl	8002e04 <HAL_SPI_TransmitReceive>
	HAL_SPI_TransmitReceive(&hspi1, (uint8_t*)0xff, &dt, 1, 1000);
 8000c70:	f107 020e 	add.w	r2, r7, #14
 8000c74:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c78:	9300      	str	r3, [sp, #0]
 8000c7a:	2301      	movs	r3, #1
 8000c7c:	21ff      	movs	r1, #255	; 0xff
 8000c7e:	4805      	ldr	r0, [pc, #20]	; (8000c94 <read_register+0x58>)
 8000c80:	f002 f8c0 	bl	8002e04 <HAL_SPI_TransmitReceive>
	csn(HIGH);
 8000c84:	2001      	movs	r0, #1
 8000c86:	f7ff ffb1 	bl	8000bec <csn>
	return dt;
 8000c8a:	7bbb      	ldrb	r3, [r7, #14]
}
 8000c8c:	4618      	mov	r0, r3
 8000c8e:	3710      	adds	r7, #16
 8000c90:	46bd      	mov	sp, r7
 8000c92:	bd80      	pop	{r7, pc}
 8000c94:	20001524 	.word	0x20001524

08000c98 <write_registerMy>:

uint8_t write_registerMy(uint8_t reg, const uint8_t* buf, uint8_t len)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b086      	sub	sp, #24
 8000c9c:	af02      	add	r7, sp, #8
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	6039      	str	r1, [r7, #0]
 8000ca2:	71fb      	strb	r3, [r7, #7]
 8000ca4:	4613      	mov	r3, r2
 8000ca6:	71bb      	strb	r3, [r7, #6]
	uint8_t status = 0;
 8000ca8:	2300      	movs	r3, #0
 8000caa:	73fb      	strb	r3, [r7, #15]
	uint8_t addr = W_REGISTER | (REGISTER_MASK & reg);
 8000cac:	79fb      	ldrb	r3, [r7, #7]
 8000cae:	f003 031f 	and.w	r3, r3, #31
 8000cb2:	b2db      	uxtb	r3, r3
 8000cb4:	f043 0320 	orr.w	r3, r3, #32
 8000cb8:	b2db      	uxtb	r3, r3
 8000cba:	73bb      	strb	r3, [r7, #14]

	csn(LOW);
 8000cbc:	2000      	movs	r0, #0
 8000cbe:	f7ff ff95 	bl	8000bec <csn>
	HAL_SPI_TransmitReceive(&hspi1, &addr, &status, 1, 100);
 8000cc2:	f107 020f 	add.w	r2, r7, #15
 8000cc6:	f107 010e 	add.w	r1, r7, #14
 8000cca:	2364      	movs	r3, #100	; 0x64
 8000ccc:	9300      	str	r3, [sp, #0]
 8000cce:	2301      	movs	r3, #1
 8000cd0:	4808      	ldr	r0, [pc, #32]	; (8000cf4 <write_registerMy+0x5c>)
 8000cd2:	f002 f897 	bl	8002e04 <HAL_SPI_TransmitReceive>
	HAL_SPI_Transmit(&hspi1, (uint8_t*)buf, len, 100);
 8000cd6:	79bb      	ldrb	r3, [r7, #6]
 8000cd8:	b29a      	uxth	r2, r3
 8000cda:	2364      	movs	r3, #100	; 0x64
 8000cdc:	6839      	ldr	r1, [r7, #0]
 8000cde:	4805      	ldr	r0, [pc, #20]	; (8000cf4 <write_registerMy+0x5c>)
 8000ce0:	f001 fe53 	bl	800298a <HAL_SPI_Transmit>
	csn(HIGH);
 8000ce4:	2001      	movs	r0, #1
 8000ce6:	f7ff ff81 	bl	8000bec <csn>
	return status;
 8000cea:	7bfb      	ldrb	r3, [r7, #15]
}
 8000cec:	4618      	mov	r0, r3
 8000cee:	3710      	adds	r7, #16
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	bd80      	pop	{r7, pc}
 8000cf4:	20001524 	.word	0x20001524

08000cf8 <write_register>:

uint8_t write_register(uint8_t reg, uint8_t value)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b086      	sub	sp, #24
 8000cfc:	af02      	add	r7, sp, #8
 8000cfe:	4603      	mov	r3, r0
 8000d00:	460a      	mov	r2, r1
 8000d02:	71fb      	strb	r3, [r7, #7]
 8000d04:	4613      	mov	r3, r2
 8000d06:	71bb      	strb	r3, [r7, #6]
	uint8_t status = 0;
 8000d08:	2300      	movs	r3, #0
 8000d0a:	73fb      	strb	r3, [r7, #15]
	uint8_t addr = W_REGISTER | (REGISTER_MASK & reg);
 8000d0c:	79fb      	ldrb	r3, [r7, #7]
 8000d0e:	f003 031f 	and.w	r3, r3, #31
 8000d12:	b2db      	uxtb	r3, r3
 8000d14:	f043 0320 	orr.w	r3, r3, #32
 8000d18:	b2db      	uxtb	r3, r3
 8000d1a:	73bb      	strb	r3, [r7, #14]
	csn(LOW);
 8000d1c:	2000      	movs	r0, #0
 8000d1e:	f7ff ff65 	bl	8000bec <csn>
	HAL_SPI_TransmitReceive(&hspi1, &addr, &status, 1, 100);
 8000d22:	f107 020f 	add.w	r2, r7, #15
 8000d26:	f107 010e 	add.w	r1, r7, #14
 8000d2a:	2364      	movs	r3, #100	; 0x64
 8000d2c:	9300      	str	r3, [sp, #0]
 8000d2e:	2301      	movs	r3, #1
 8000d30:	4808      	ldr	r0, [pc, #32]	; (8000d54 <write_register+0x5c>)
 8000d32:	f002 f867 	bl	8002e04 <HAL_SPI_TransmitReceive>
	HAL_SPI_Transmit(&hspi1, &value, 1, 1000);
 8000d36:	1db9      	adds	r1, r7, #6
 8000d38:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d3c:	2201      	movs	r2, #1
 8000d3e:	4805      	ldr	r0, [pc, #20]	; (8000d54 <write_register+0x5c>)
 8000d40:	f001 fe23 	bl	800298a <HAL_SPI_Transmit>
	csn(HIGH);
 8000d44:	2001      	movs	r0, #1
 8000d46:	f7ff ff51 	bl	8000bec <csn>
	return status;
 8000d4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	3710      	adds	r7, #16
 8000d50:	46bd      	mov	sp, r7
 8000d52:	bd80      	pop	{r7, pc}
 8000d54:	20001524 	.word	0x20001524

08000d58 <read_payload>:
	csn(HIGH);
	return status;
}

uint8_t read_payload(void* buf, uint8_t data_len)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b086      	sub	sp, #24
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
 8000d60:	460b      	mov	r3, r1
 8000d62:	70fb      	strb	r3, [r7, #3]
	uint8_t status = 0;
 8000d64:	2300      	movs	r3, #0
 8000d66:	75bb      	strb	r3, [r7, #22]
	uint8_t* current = (uint8_t*)buf;
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	613b      	str	r3, [r7, #16]

	if(data_len > payload_size)
 8000d6c:	4b1e      	ldr	r3, [pc, #120]	; (8000de8 <read_payload+0x90>)
 8000d6e:	781b      	ldrb	r3, [r3, #0]
 8000d70:	78fa      	ldrb	r2, [r7, #3]
 8000d72:	429a      	cmp	r2, r3
 8000d74:	d902      	bls.n	8000d7c <read_payload+0x24>
	{
		data_len = payload_size;
 8000d76:	4b1c      	ldr	r3, [pc, #112]	; (8000de8 <read_payload+0x90>)
 8000d78:	781b      	ldrb	r3, [r3, #0]
 8000d7a:	70fb      	strb	r3, [r7, #3]
	}

	uint8_t blank_len = dynamic_payloads_enabled ? 0 : payload_size - data_len;
 8000d7c:	4b1b      	ldr	r3, [pc, #108]	; (8000dec <read_payload+0x94>)
 8000d7e:	781b      	ldrb	r3, [r3, #0]
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d001      	beq.n	8000d88 <read_payload+0x30>
 8000d84:	2300      	movs	r3, #0
 8000d86:	e004      	b.n	8000d92 <read_payload+0x3a>
 8000d88:	4b17      	ldr	r3, [pc, #92]	; (8000de8 <read_payload+0x90>)
 8000d8a:	781a      	ldrb	r2, [r3, #0]
 8000d8c:	78fb      	ldrb	r3, [r7, #3]
 8000d8e:	1ad3      	subs	r3, r2, r3
 8000d90:	b2db      	uxtb	r3, r3
 8000d92:	75fb      	strb	r3, [r7, #23]

	uint8_t addr = R_RX_PAYLOAD;
 8000d94:	2361      	movs	r3, #97	; 0x61
 8000d96:	73fb      	strb	r3, [r7, #15]
	csn(LOW);
 8000d98:	2000      	movs	r0, #0
 8000d9a:	f7ff ff27 	bl	8000bec <csn>
	HAL_SPI_Transmit(&hspi1, &addr, 1, 100);
 8000d9e:	f107 010f 	add.w	r1, r7, #15
 8000da2:	2364      	movs	r3, #100	; 0x64
 8000da4:	2201      	movs	r2, #1
 8000da6:	4812      	ldr	r0, [pc, #72]	; (8000df0 <read_payload+0x98>)
 8000da8:	f001 fdef 	bl	800298a <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi1, (uint8_t*)current, data_len, 100);
 8000dac:	78fb      	ldrb	r3, [r7, #3]
 8000dae:	b29a      	uxth	r2, r3
 8000db0:	2364      	movs	r3, #100	; 0x64
 8000db2:	6939      	ldr	r1, [r7, #16]
 8000db4:	480e      	ldr	r0, [pc, #56]	; (8000df0 <read_payload+0x98>)
 8000db6:	f001 ff1c 	bl	8002bf2 <HAL_SPI_Receive>

	while(blank_len--)
 8000dba:	e008      	b.n	8000dce <read_payload+0x76>
	{
		uint8_t empt = 0;
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	73bb      	strb	r3, [r7, #14]
		HAL_SPI_Receive(&hspi1, &empt, 1, 100);
 8000dc0:	f107 010e 	add.w	r1, r7, #14
 8000dc4:	2364      	movs	r3, #100	; 0x64
 8000dc6:	2201      	movs	r2, #1
 8000dc8:	4809      	ldr	r0, [pc, #36]	; (8000df0 <read_payload+0x98>)
 8000dca:	f001 ff12 	bl	8002bf2 <HAL_SPI_Receive>
	while(blank_len--)
 8000dce:	7dfb      	ldrb	r3, [r7, #23]
 8000dd0:	1e5a      	subs	r2, r3, #1
 8000dd2:	75fa      	strb	r2, [r7, #23]
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d1f1      	bne.n	8000dbc <read_payload+0x64>
	}

	csn(HIGH);
 8000dd8:	2001      	movs	r0, #1
 8000dda:	f7ff ff07 	bl	8000bec <csn>
	return status;
 8000dde:	7dbb      	ldrb	r3, [r7, #22]
}
 8000de0:	4618      	mov	r0, r3
 8000de2:	3718      	adds	r7, #24
 8000de4:	46bd      	mov	sp, r7
 8000de6:	bd80      	pop	{r7, pc}
 8000de8:	20000533 	.word	0x20000533
 8000dec:	20001614 	.word	0x20001614
 8000df0:	20001524 	.word	0x20001524

08000df4 <flush_rx>:

uint8_t flush_rx(void)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	af00      	add	r7, sp, #0
	return spiTrans(FLUSH_RX);
 8000df8:	20e2      	movs	r0, #226	; 0xe2
 8000dfa:	f000 f80b 	bl	8000e14 <spiTrans>
 8000dfe:	4603      	mov	r3, r0
}
 8000e00:	4618      	mov	r0, r3
 8000e02:	bd80      	pop	{r7, pc}

08000e04 <flush_tx>:

uint8_t flush_tx(void)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	af00      	add	r7, sp, #0
	return spiTrans(FLUSH_TX);
 8000e08:	20e1      	movs	r0, #225	; 0xe1
 8000e0a:	f000 f803 	bl	8000e14 <spiTrans>
 8000e0e:	4603      	mov	r3, r0
}
 8000e10:	4618      	mov	r0, r3
 8000e12:	bd80      	pop	{r7, pc}

08000e14 <spiTrans>:

uint8_t spiTrans(uint8_t cmd)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b086      	sub	sp, #24
 8000e18:	af02      	add	r7, sp, #8
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	71fb      	strb	r3, [r7, #7]
	uint8_t status = 0;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	73fb      	strb	r3, [r7, #15]
	csn(LOW);
 8000e22:	2000      	movs	r0, #0
 8000e24:	f7ff fee2 	bl	8000bec <csn>
	HAL_SPI_TransmitReceive(&hspi1, &cmd, &status, 1, 1000);
 8000e28:	f107 020f 	add.w	r2, r7, #15
 8000e2c:	1df9      	adds	r1, r7, #7
 8000e2e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e32:	9300      	str	r3, [sp, #0]
 8000e34:	2301      	movs	r3, #1
 8000e36:	4805      	ldr	r0, [pc, #20]	; (8000e4c <spiTrans+0x38>)
 8000e38:	f001 ffe4 	bl	8002e04 <HAL_SPI_TransmitReceive>
	csn(HIGH);
 8000e3c:	2001      	movs	r0, #1
 8000e3e:	f7ff fed5 	bl	8000bec <csn>
	return status;
 8000e42:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e44:	4618      	mov	r0, r3
 8000e46:	3710      	adds	r7, #16
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	bd80      	pop	{r7, pc}
 8000e4c:	20001524 	.word	0x20001524

08000e50 <get_status>:

uint8_t get_status(void)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	af00      	add	r7, sp, #0
	return spiTrans(NOP);
 8000e54:	20ff      	movs	r0, #255	; 0xff
 8000e56:	f7ff ffdd 	bl	8000e14 <spiTrans>
 8000e5a:	4603      	mov	r3, r0
}
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	bd80      	pop	{r7, pc}

08000e60 <setChannel>:

void setChannel(uint8_t channel)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b082      	sub	sp, #8
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	4603      	mov	r3, r0
 8000e68:	71fb      	strb	r3, [r7, #7]
	write_register(RF_CH, channel);
 8000e6a:	79fb      	ldrb	r3, [r7, #7]
 8000e6c:	4619      	mov	r1, r3
 8000e6e:	2005      	movs	r0, #5
 8000e70:	f7ff ff42 	bl	8000cf8 <write_register>
}
 8000e74:	bf00      	nop
 8000e76:	3708      	adds	r7, #8
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	bd80      	pop	{r7, pc}

08000e7c <setPayloadSize>:
{
	return read_register(RF_CH);
}

void setPayloadSize(uint8_t size)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	b083      	sub	sp, #12
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	4603      	mov	r3, r0
 8000e84:	71fb      	strb	r3, [r7, #7]
	payload_size = rf24_min(size, 32);
 8000e86:	79fb      	ldrb	r3, [r7, #7]
 8000e88:	2b20      	cmp	r3, #32
 8000e8a:	bf28      	it	cs
 8000e8c:	2320      	movcs	r3, #32
 8000e8e:	b2da      	uxtb	r2, r3
 8000e90:	4b03      	ldr	r3, [pc, #12]	; (8000ea0 <setPayloadSize+0x24>)
 8000e92:	701a      	strb	r2, [r3, #0]
}
 8000e94:	bf00      	nop
 8000e96:	370c      	adds	r7, #12
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	bc80      	pop	{r7}
 8000e9c:	4770      	bx	lr
 8000e9e:	bf00      	nop
 8000ea0:	20000533 	.word	0x20000533

08000ea4 <getPayloadSize>:

uint8_t getPayloadSize(void)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	af00      	add	r7, sp, #0
	return payload_size;
 8000ea8:	4b02      	ldr	r3, [pc, #8]	; (8000eb4 <getPayloadSize+0x10>)
 8000eaa:	781b      	ldrb	r3, [r3, #0]
}
 8000eac:	4618      	mov	r0, r3
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	bc80      	pop	{r7}
 8000eb2:	4770      	bx	lr
 8000eb4:	20000533 	.word	0x20000533

08000eb8 <NRF_Init>:

uint8_t NRF_Init(void)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b082      	sub	sp, #8
 8000ebc:	af00      	add	r7, sp, #0
	uint8_t setup = 0;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	71fb      	strb	r3, [r7, #7]
	p_variant = false;
 8000ec2:	4b33      	ldr	r3, [pc, #204]	; (8000f90 <NRF_Init+0xd8>)
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	701a      	strb	r2, [r3, #0]
	payload_size = 32;
 8000ec8:	4b32      	ldr	r3, [pc, #200]	; (8000f94 <NRF_Init+0xdc>)
 8000eca:	2220      	movs	r2, #32
 8000ecc:	701a      	strb	r2, [r3, #0]
	dynamic_payloads_enabled = false;
 8000ece:	4b32      	ldr	r3, [pc, #200]	; (8000f98 <NRF_Init+0xe0>)
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	701a      	strb	r2, [r3, #0]
	addr_width = 5;
 8000ed4:	4b31      	ldr	r3, [pc, #196]	; (8000f9c <NRF_Init+0xe4>)
 8000ed6:	2205      	movs	r2, #5
 8000ed8:	701a      	strb	r2, [r3, #0]
	pipe0_reading_address[0] = 0;
 8000eda:	4b31      	ldr	r3, [pc, #196]	; (8000fa0 <NRF_Init+0xe8>)
 8000edc:	2200      	movs	r2, #0
 8000ede:	701a      	strb	r2, [r3, #0]

	ce(LOW);
 8000ee0:	2000      	movs	r0, #0
 8000ee2:	f7ff fe99 	bl	8000c18 <ce>
	csn(HIGH);
 8000ee6:	2001      	movs	r0, #1
 8000ee8:	f7ff fe80 	bl	8000bec <csn>
	HAL_Delay(5);
 8000eec:	2005      	movs	r0, #5
 8000eee:	f000 fdfb 	bl	8001ae8 <HAL_Delay>

	write_register(NRF_CONFIG, 0x0C); // Reset NRF_CONFIG and enable 16-bit CRC.
 8000ef2:	210c      	movs	r1, #12
 8000ef4:	2000      	movs	r0, #0
 8000ef6:	f7ff feff 	bl	8000cf8 <write_register>
	setRetries(5, 15);
 8000efa:	210f      	movs	r1, #15
 8000efc:	2005      	movs	r0, #5
 8000efe:	f000 fa8f 	bl	8001420 <setRetries>
	setPALevel(RF24_PA_MAX); // Reset value is MAX
 8000f02:	2003      	movs	r0, #3
 8000f04:	f000 fa2a 	bl	800135c <setPALevel>

	if(setDataRate(RF24_250KBPS)) // check for connected module and if this is a p nRF24l01 variant
 8000f08:	2002      	movs	r0, #2
 8000f0a:	f000 fa49 	bl	80013a0 <setDataRate>
 8000f0e:	4603      	mov	r3, r0
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d002      	beq.n	8000f1a <NRF_Init+0x62>
	{
		p_variant = true;
 8000f14:	4b1e      	ldr	r3, [pc, #120]	; (8000f90 <NRF_Init+0xd8>)
 8000f16:	2201      	movs	r2, #1
 8000f18:	701a      	strb	r2, [r3, #0]
	}

	setup = read_register(RF_SETUP);
 8000f1a:	2006      	movs	r0, #6
 8000f1c:	f7ff fe8e 	bl	8000c3c <read_register>
 8000f20:	4603      	mov	r3, r0
 8000f22:	71fb      	strb	r3, [r7, #7]
	setDataRate(RF24_1MBPS); // Then set the data rate to the slowest (and most reliable) speed supported by all hardware.
 8000f24:	2000      	movs	r0, #0
 8000f26:	f000 fa3b 	bl	80013a0 <setDataRate>

	// Disable dynamic payloads, to match dynamic_payloads_enabled setting - Reset value is 0
	toggle_features();
 8000f2a:	f000 f981 	bl	8001230 <toggle_features>
	write_register(FEATURE, 0);
 8000f2e:	2100      	movs	r1, #0
 8000f30:	201d      	movs	r0, #29
 8000f32:	f7ff fee1 	bl	8000cf8 <write_register>
	write_register(DYNPD, 0);
 8000f36:	2100      	movs	r1, #0
 8000f38:	201c      	movs	r0, #28
 8000f3a:	f7ff fedd 	bl	8000cf8 <write_register>
	dynamic_payloads_enabled = false;
 8000f3e:	4b16      	ldr	r3, [pc, #88]	; (8000f98 <NRF_Init+0xe0>)
 8000f40:	2200      	movs	r2, #0
 8000f42:	701a      	strb	r2, [r3, #0]

	// Reset current status. Notice reset and flush is the last thing we do
	write_register(NRF_STATUS, (1 << RX_DR) | (1 << TX_DS) | (1 << MAX_RT));
 8000f44:	2170      	movs	r1, #112	; 0x70
 8000f46:	2007      	movs	r0, #7
 8000f48:	f7ff fed6 	bl	8000cf8 <write_register>
	setChannel(76);
 8000f4c:	204c      	movs	r0, #76	; 0x4c
 8000f4e:	f7ff ff87 	bl	8000e60 <setChannel>
	flush_rx();
 8000f52:	f7ff ff4f 	bl	8000df4 <flush_rx>
	flush_tx();
 8000f56:	f7ff ff55 	bl	8000e04 <flush_tx>
	powerUp(); //Power up by default when begin() is called
 8000f5a:	f000 f86f 	bl	800103c <powerUp>
	write_register(NRF_CONFIG, (read_register(NRF_CONFIG)) & ~(1 << PRIM_RX));
 8000f5e:	2000      	movs	r0, #0
 8000f60:	f7ff fe6c 	bl	8000c3c <read_register>
 8000f64:	4603      	mov	r3, r0
 8000f66:	f023 0301 	bic.w	r3, r3, #1
 8000f6a:	b2db      	uxtb	r3, r3
 8000f6c:	4619      	mov	r1, r3
 8000f6e:	2000      	movs	r0, #0
 8000f70:	f7ff fec2 	bl	8000cf8 <write_register>
	return (setup != 0 && setup != 0xff);
 8000f74:	79fb      	ldrb	r3, [r7, #7]
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d004      	beq.n	8000f84 <NRF_Init+0xcc>
 8000f7a:	79fb      	ldrb	r3, [r7, #7]
 8000f7c:	2bff      	cmp	r3, #255	; 0xff
 8000f7e:	d001      	beq.n	8000f84 <NRF_Init+0xcc>
 8000f80:	2301      	movs	r3, #1
 8000f82:	e000      	b.n	8000f86 <NRF_Init+0xce>
 8000f84:	2300      	movs	r3, #0
 8000f86:	b2db      	uxtb	r3, r3
}
 8000f88:	4618      	mov	r0, r3
 8000f8a:	3708      	adds	r7, #8
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	bd80      	pop	{r7, pc}
 8000f90:	20001615 	.word	0x20001615
 8000f94:	20000533 	.word	0x20000533
 8000f98:	20001614 	.word	0x20001614
 8000f9c:	20000539 	.word	0x20000539
 8000fa0:	20000534 	.word	0x20000534

08000fa4 <isChipConnected>:

bool isChipConnected()
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b082      	sub	sp, #8
 8000fa8:	af00      	add	r7, sp, #0
	uint8_t setup = read_register(SETUP_AW);
 8000faa:	2003      	movs	r0, #3
 8000fac:	f7ff fe46 	bl	8000c3c <read_register>
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	71fb      	strb	r3, [r7, #7]

	if(setup >= 1 && setup <= 3)
 8000fb4:	79fb      	ldrb	r3, [r7, #7]
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d004      	beq.n	8000fc4 <isChipConnected+0x20>
 8000fba:	79fb      	ldrb	r3, [r7, #7]
 8000fbc:	2b03      	cmp	r3, #3
 8000fbe:	d801      	bhi.n	8000fc4 <isChipConnected+0x20>
	{
		return true;
 8000fc0:	2301      	movs	r3, #1
 8000fc2:	e000      	b.n	8000fc6 <isChipConnected+0x22>
	}

	return false;
 8000fc4:	2300      	movs	r3, #0
}
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	3708      	adds	r7, #8
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bd80      	pop	{r7, pc}
	...

08000fd0 <startListening>:

void startListening(void)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	af00      	add	r7, sp, #0
	powerUp();
 8000fd4:	f000 f832 	bl	800103c <powerUp>

	write_register(NRF_CONFIG, read_register(NRF_CONFIG) | (1 << PRIM_RX));
 8000fd8:	2000      	movs	r0, #0
 8000fda:	f7ff fe2f 	bl	8000c3c <read_register>
 8000fde:	4603      	mov	r3, r0
 8000fe0:	f043 0301 	orr.w	r3, r3, #1
 8000fe4:	b2db      	uxtb	r3, r3
 8000fe6:	4619      	mov	r1, r3
 8000fe8:	2000      	movs	r0, #0
 8000fea:	f7ff fe85 	bl	8000cf8 <write_register>
	write_register(NRF_STATUS, (1 << RX_DR) | (1 << TX_DS) | (1 << MAX_RT));
 8000fee:	2170      	movs	r1, #112	; 0x70
 8000ff0:	2007      	movs	r0, #7
 8000ff2:	f7ff fe81 	bl	8000cf8 <write_register>
	ce(HIGH);
 8000ff6:	2001      	movs	r0, #1
 8000ff8:	f7ff fe0e 	bl	8000c18 <ce>
	// Restore the pipe0 adddress, if exists
	if(pipe0_reading_address[0] > 0)
 8000ffc:	4b0d      	ldr	r3, [pc, #52]	; (8001034 <startListening+0x64>)
 8000ffe:	781b      	ldrb	r3, [r3, #0]
 8001000:	2b00      	cmp	r3, #0
 8001002:	d007      	beq.n	8001014 <startListening+0x44>
	{
		write_registerMy(RX_ADDR_P0, pipe0_reading_address, addr_width);
 8001004:	4b0c      	ldr	r3, [pc, #48]	; (8001038 <startListening+0x68>)
 8001006:	781b      	ldrb	r3, [r3, #0]
 8001008:	461a      	mov	r2, r3
 800100a:	490a      	ldr	r1, [pc, #40]	; (8001034 <startListening+0x64>)
 800100c:	200a      	movs	r0, #10
 800100e:	f7ff fe43 	bl	8000c98 <write_registerMy>
 8001012:	e002      	b.n	800101a <startListening+0x4a>
	}
	else
	{
		closeReadingPipe(0);
 8001014:	2000      	movs	r0, #0
 8001016:	f000 f8eb 	bl	80011f0 <closeReadingPipe>
	}

	if(read_register(FEATURE) & (1 << EN_ACK_PAY))
 800101a:	201d      	movs	r0, #29
 800101c:	f7ff fe0e 	bl	8000c3c <read_register>
 8001020:	4603      	mov	r3, r0
 8001022:	f003 0302 	and.w	r3, r3, #2
 8001026:	2b00      	cmp	r3, #0
 8001028:	d001      	beq.n	800102e <startListening+0x5e>
	{
		flush_tx();
 800102a:	f7ff feeb 	bl	8000e04 <flush_tx>
	}
}
 800102e:	bf00      	nop
 8001030:	bd80      	pop	{r7, pc}
 8001032:	bf00      	nop
 8001034:	20000534 	.word	0x20000534
 8001038:	20000539 	.word	0x20000539

0800103c <powerUp>:
	write_register(NRF_CONFIG, read_register(NRF_CONFIG) & ~(1 << PWR_UP));
}

//Power up now. Radio will not power down unless instructed by MCU for config changes etc.
void powerUp(void)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b082      	sub	sp, #8
 8001040:	af00      	add	r7, sp, #0
	uint8_t cfg = read_register(NRF_CONFIG);
 8001042:	2000      	movs	r0, #0
 8001044:	f7ff fdfa 	bl	8000c3c <read_register>
 8001048:	4603      	mov	r3, r0
 800104a:	71fb      	strb	r3, [r7, #7]
	// if not powered up then power up and wait for the radio to initialize
	if(!(cfg & (1 << PWR_UP)))
 800104c:	79fb      	ldrb	r3, [r7, #7]
 800104e:	f003 0302 	and.w	r3, r3, #2
 8001052:	2b00      	cmp	r3, #0
 8001054:	d10a      	bne.n	800106c <powerUp+0x30>
	{
		write_register(NRF_CONFIG, cfg | (1 << PWR_UP));
 8001056:	79fb      	ldrb	r3, [r7, #7]
 8001058:	f043 0302 	orr.w	r3, r3, #2
 800105c:	b2db      	uxtb	r3, r3
 800105e:	4619      	mov	r1, r3
 8001060:	2000      	movs	r0, #0
 8001062:	f7ff fe49 	bl	8000cf8 <write_register>
		HAL_Delay(5);
 8001066:	2005      	movs	r0, #5
 8001068:	f000 fd3e 	bl	8001ae8 <HAL_Delay>
	}
}
 800106c:	bf00      	nop
 800106e:	3708      	adds	r7, #8
 8001070:	46bd      	mov	sp, r7
 8001072:	bd80      	pop	{r7, pc}

08001074 <available>:
{
	return available(NULL);
}

bool available(uint8_t* pipe_num)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b084      	sub	sp, #16
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
	if(!(read_register(FIFO_STATUS) & (1 << RX_EMPTY)))
 800107c:	2017      	movs	r0, #23
 800107e:	f7ff fddd 	bl	8000c3c <read_register>
 8001082:	4603      	mov	r3, r0
 8001084:	f003 0301 	and.w	r3, r3, #1
 8001088:	2b00      	cmp	r3, #0
 800108a:	d110      	bne.n	80010ae <available+0x3a>
	{
		if(pipe_num) // If the caller wants the pipe number, include that
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	2b00      	cmp	r3, #0
 8001090:	d00b      	beq.n	80010aa <available+0x36>
		{
			uint8_t status = get_status();
 8001092:	f7ff fedd 	bl	8000e50 <get_status>
 8001096:	4603      	mov	r3, r0
 8001098:	73fb      	strb	r3, [r7, #15]
			*pipe_num = (status >> RX_P_NO) & 0x07;
 800109a:	7bfb      	ldrb	r3, [r7, #15]
 800109c:	085b      	lsrs	r3, r3, #1
 800109e:	b2db      	uxtb	r3, r3
 80010a0:	f003 0307 	and.w	r3, r3, #7
 80010a4:	b2da      	uxtb	r2, r3
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	701a      	strb	r2, [r3, #0]
		}

		return 1;
 80010aa:	2301      	movs	r3, #1
 80010ac:	e000      	b.n	80010b0 <available+0x3c>
	}

	return 0;
 80010ae:	2300      	movs	r3, #0
}
 80010b0:	4618      	mov	r0, r3
 80010b2:	3710      	adds	r7, #16
 80010b4:	46bd      	mov	sp, r7
 80010b6:	bd80      	pop	{r7, pc}

080010b8 <read>:

void read(void* buf, uint8_t len)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b082      	sub	sp, #8
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
 80010c0:	460b      	mov	r3, r1
 80010c2:	70fb      	strb	r3, [r7, #3]
	read_payload(buf, len);
 80010c4:	78fb      	ldrb	r3, [r7, #3]
 80010c6:	4619      	mov	r1, r3
 80010c8:	6878      	ldr	r0, [r7, #4]
 80010ca:	f7ff fe45 	bl	8000d58 <read_payload>
	write_register(NRF_STATUS, (1 << RX_DR) | (1 << MAX_RT) | (1 << TX_DS));
 80010ce:	2170      	movs	r1, #112	; 0x70
 80010d0:	2007      	movs	r0, #7
 80010d2:	f7ff fe11 	bl	8000cf8 <write_register>
}
 80010d6:	bf00      	nop
 80010d8:	3708      	adds	r7, #8
 80010da:	46bd      	mov	sp, r7
 80010dc:	bd80      	pop	{r7, pc}

080010de <whatHappened>:


uint8_t whatHappened()
{
 80010de:	b580      	push	{r7, lr}
 80010e0:	b082      	sub	sp, #8
 80010e2:	af00      	add	r7, sp, #0
	uint8_t status = write_register(NRF_STATUS, (1 << RX_DR) | (1 << TX_DS) | (1 << MAX_RT));
 80010e4:	2170      	movs	r1, #112	; 0x70
 80010e6:	2007      	movs	r0, #7
 80010e8:	f7ff fe06 	bl	8000cf8 <write_register>
 80010ec:	4603      	mov	r3, r0
 80010ee:	71fb      	strb	r3, [r7, #7]
	/*uint8_t tx_ok = status & (1 << TX_DS);
	uint8_t tx_fail = status & (1 << MAX_RT);
	uint8_t rx_ready = status & (1 << RX_DR);*/
	return status;
 80010f0:	79fb      	ldrb	r3, [r7, #7]
}
 80010f2:	4618      	mov	r0, r3
 80010f4:	3708      	adds	r7, #8
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bd80      	pop	{r7, pc}
	...

080010fc <openWritingPipe>:

void openWritingPipe(uint64_t value)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b082      	sub	sp, #8
 8001100:	af00      	add	r7, sp, #0
 8001102:	e9c7 0100 	strd	r0, r1, [r7]
	write_registerMy(RX_ADDR_P0, (uint8_t*)&value, addr_width);
 8001106:	4b0c      	ldr	r3, [pc, #48]	; (8001138 <openWritingPipe+0x3c>)
 8001108:	781a      	ldrb	r2, [r3, #0]
 800110a:	463b      	mov	r3, r7
 800110c:	4619      	mov	r1, r3
 800110e:	200a      	movs	r0, #10
 8001110:	f7ff fdc2 	bl	8000c98 <write_registerMy>
	write_registerMy(TX_ADDR, (uint8_t*)&value, addr_width);
 8001114:	4b08      	ldr	r3, [pc, #32]	; (8001138 <openWritingPipe+0x3c>)
 8001116:	781a      	ldrb	r2, [r3, #0]
 8001118:	463b      	mov	r3, r7
 800111a:	4619      	mov	r1, r3
 800111c:	2010      	movs	r0, #16
 800111e:	f7ff fdbb 	bl	8000c98 <write_registerMy>
	write_register(RX_PW_P0, payload_size);
 8001122:	4b06      	ldr	r3, [pc, #24]	; (800113c <openWritingPipe+0x40>)
 8001124:	781b      	ldrb	r3, [r3, #0]
 8001126:	4619      	mov	r1, r3
 8001128:	2011      	movs	r0, #17
 800112a:	f7ff fde5 	bl	8000cf8 <write_register>
}
 800112e:	bf00      	nop
 8001130:	3708      	adds	r7, #8
 8001132:	46bd      	mov	sp, r7
 8001134:	bd80      	pop	{r7, pc}
 8001136:	bf00      	nop
 8001138:	20000539 	.word	0x20000539
 800113c:	20000533 	.word	0x20000533

08001140 <openReadingPipe>:

static const uint8_t child_payload_size[] = {RX_PW_P0, RX_PW_P1, RX_PW_P2, RX_PW_P3, RX_PW_P4, RX_PW_P5};


void openReadingPipe(uint8_t child, uint64_t address)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b084      	sub	sp, #16
 8001144:	af00      	add	r7, sp, #0
 8001146:	4601      	mov	r1, r0
 8001148:	e9c7 2300 	strd	r2, r3, [r7]
 800114c:	460b      	mov	r3, r1
 800114e:	73fb      	strb	r3, [r7, #15]
	if(child == 0)
 8001150:	7bfb      	ldrb	r3, [r7, #15]
 8001152:	2b00      	cmp	r3, #0
 8001154:	d107      	bne.n	8001166 <openReadingPipe+0x26>
	{
		memcpy(pipe0_reading_address, &address, addr_width);
 8001156:	4b20      	ldr	r3, [pc, #128]	; (80011d8 <openReadingPipe+0x98>)
 8001158:	781b      	ldrb	r3, [r3, #0]
 800115a:	461a      	mov	r2, r3
 800115c:	463b      	mov	r3, r7
 800115e:	4619      	mov	r1, r3
 8001160:	481e      	ldr	r0, [pc, #120]	; (80011dc <openReadingPipe+0x9c>)
 8001162:	f005 ff19 	bl	8006f98 <memcpy>
	}

	if(child <= 6)
 8001166:	7bfb      	ldrb	r3, [r7, #15]
 8001168:	2b06      	cmp	r3, #6
 800116a:	d830      	bhi.n	80011ce <openReadingPipe+0x8e>
	{
		// For pipes 2-5, only write the LSB
		if(child < 2)
 800116c:	7bfb      	ldrb	r3, [r7, #15]
 800116e:	2b01      	cmp	r3, #1
 8001170:	d809      	bhi.n	8001186 <openReadingPipe+0x46>
		  write_registerMy(child_pipe[child], (const uint8_t*)&address, addr_width);
 8001172:	7bfb      	ldrb	r3, [r7, #15]
 8001174:	4a1a      	ldr	r2, [pc, #104]	; (80011e0 <openReadingPipe+0xa0>)
 8001176:	5cd0      	ldrb	r0, [r2, r3]
 8001178:	4b17      	ldr	r3, [pc, #92]	; (80011d8 <openReadingPipe+0x98>)
 800117a:	781a      	ldrb	r2, [r3, #0]
 800117c:	463b      	mov	r3, r7
 800117e:	4619      	mov	r1, r3
 8001180:	f7ff fd8a 	bl	8000c98 <write_registerMy>
 8001184:	e007      	b.n	8001196 <openReadingPipe+0x56>
		else
		  write_registerMy(child_pipe[child], (const uint8_t*)&address, 1);
 8001186:	7bfb      	ldrb	r3, [r7, #15]
 8001188:	4a15      	ldr	r2, [pc, #84]	; (80011e0 <openReadingPipe+0xa0>)
 800118a:	5cd3      	ldrb	r3, [r2, r3]
 800118c:	4639      	mov	r1, r7
 800118e:	2201      	movs	r2, #1
 8001190:	4618      	mov	r0, r3
 8001192:	f7ff fd81 	bl	8000c98 <write_registerMy>

		write_register(child_payload_size[child], payload_size);
 8001196:	7bfb      	ldrb	r3, [r7, #15]
 8001198:	4a12      	ldr	r2, [pc, #72]	; (80011e4 <openReadingPipe+0xa4>)
 800119a:	5cd2      	ldrb	r2, [r2, r3]
 800119c:	4b12      	ldr	r3, [pc, #72]	; (80011e8 <openReadingPipe+0xa8>)
 800119e:	781b      	ldrb	r3, [r3, #0]
 80011a0:	4619      	mov	r1, r3
 80011a2:	4610      	mov	r0, r2
 80011a4:	f7ff fda8 	bl	8000cf8 <write_register>
		write_register(EN_RXADDR, read_register(EN_RXADDR) | (1 << child_pipe_enable[child]));
 80011a8:	2002      	movs	r0, #2
 80011aa:	f7ff fd47 	bl	8000c3c <read_register>
 80011ae:	4603      	mov	r3, r0
 80011b0:	b25a      	sxtb	r2, r3
 80011b2:	7bfb      	ldrb	r3, [r7, #15]
 80011b4:	490d      	ldr	r1, [pc, #52]	; (80011ec <openReadingPipe+0xac>)
 80011b6:	5ccb      	ldrb	r3, [r1, r3]
 80011b8:	4619      	mov	r1, r3
 80011ba:	2301      	movs	r3, #1
 80011bc:	408b      	lsls	r3, r1
 80011be:	b25b      	sxtb	r3, r3
 80011c0:	4313      	orrs	r3, r2
 80011c2:	b25b      	sxtb	r3, r3
 80011c4:	b2db      	uxtb	r3, r3
 80011c6:	4619      	mov	r1, r3
 80011c8:	2002      	movs	r0, #2
 80011ca:	f7ff fd95 	bl	8000cf8 <write_register>
	}
}
 80011ce:	bf00      	nop
 80011d0:	3710      	adds	r7, #16
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bd80      	pop	{r7, pc}
 80011d6:	bf00      	nop
 80011d8:	20000539 	.word	0x20000539
 80011dc:	20000534 	.word	0x20000534
 80011e0:	08007a04 	.word	0x08007a04
 80011e4:	08007a0c 	.word	0x08007a0c
 80011e8:	20000533 	.word	0x20000533
 80011ec:	080079fc 	.word	0x080079fc

080011f0 <closeReadingPipe>:
        addr_width = 2;
    }
}

void closeReadingPipe(uint8_t pipe)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b082      	sub	sp, #8
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	4603      	mov	r3, r0
 80011f8:	71fb      	strb	r3, [r7, #7]
	write_register(EN_RXADDR, read_register(EN_RXADDR) & ~(1 << child_pipe_enable[pipe]));
 80011fa:	2002      	movs	r0, #2
 80011fc:	f7ff fd1e 	bl	8000c3c <read_register>
 8001200:	4603      	mov	r3, r0
 8001202:	b25a      	sxtb	r2, r3
 8001204:	79fb      	ldrb	r3, [r7, #7]
 8001206:	4909      	ldr	r1, [pc, #36]	; (800122c <closeReadingPipe+0x3c>)
 8001208:	5ccb      	ldrb	r3, [r1, r3]
 800120a:	4619      	mov	r1, r3
 800120c:	2301      	movs	r3, #1
 800120e:	408b      	lsls	r3, r1
 8001210:	b25b      	sxtb	r3, r3
 8001212:	43db      	mvns	r3, r3
 8001214:	b25b      	sxtb	r3, r3
 8001216:	4013      	ands	r3, r2
 8001218:	b25b      	sxtb	r3, r3
 800121a:	b2db      	uxtb	r3, r3
 800121c:	4619      	mov	r1, r3
 800121e:	2002      	movs	r0, #2
 8001220:	f7ff fd6a 	bl	8000cf8 <write_register>
}
 8001224:	bf00      	nop
 8001226:	3708      	adds	r7, #8
 8001228:	46bd      	mov	sp, r7
 800122a:	bd80      	pop	{r7, pc}
 800122c:	080079fc 	.word	0x080079fc

08001230 <toggle_features>:

void toggle_features(void)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b082      	sub	sp, #8
 8001234:	af00      	add	r7, sp, #0
	uint8_t addr = ACTIVATE;
 8001236:	2350      	movs	r3, #80	; 0x50
 8001238:	71fb      	strb	r3, [r7, #7]
	csn(LOW);
 800123a:	2000      	movs	r0, #0
 800123c:	f7ff fcd6 	bl	8000bec <csn>
	HAL_SPI_Transmit(&hspi1, &addr, 1, 1000);
 8001240:	1df9      	adds	r1, r7, #7
 8001242:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001246:	2201      	movs	r2, #1
 8001248:	4808      	ldr	r0, [pc, #32]	; (800126c <toggle_features+0x3c>)
 800124a:	f001 fb9e 	bl	800298a <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi1, (uint8_t*)0x73, 1, 1000);
 800124e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001252:	2201      	movs	r2, #1
 8001254:	2173      	movs	r1, #115	; 0x73
 8001256:	4805      	ldr	r0, [pc, #20]	; (800126c <toggle_features+0x3c>)
 8001258:	f001 fb97 	bl	800298a <HAL_SPI_Transmit>
	csn(HIGH);
 800125c:	2001      	movs	r0, #1
 800125e:	f7ff fcc5 	bl	8000bec <csn>
}
 8001262:	bf00      	nop
 8001264:	3708      	adds	r7, #8
 8001266:	46bd      	mov	sp, r7
 8001268:	bd80      	pop	{r7, pc}
 800126a:	bf00      	nop
 800126c:	20001524 	.word	0x20001524

08001270 <enableDynamicPayloads>:

void enableDynamicPayloads(void)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	af00      	add	r7, sp, #0
	write_register(FEATURE, read_register(FEATURE) | (1 << EN_DPL));
 8001274:	201d      	movs	r0, #29
 8001276:	f7ff fce1 	bl	8000c3c <read_register>
 800127a:	4603      	mov	r3, r0
 800127c:	f043 0304 	orr.w	r3, r3, #4
 8001280:	b2db      	uxtb	r3, r3
 8001282:	4619      	mov	r1, r3
 8001284:	201d      	movs	r0, #29
 8001286:	f7ff fd37 	bl	8000cf8 <write_register>
	write_register(DYNPD, read_register(DYNPD) | (1 << DPL_P5) | (1 << DPL_P4) | (1 << DPL_P3) | (1 << DPL_P2) | (1 << DPL_P1) | (1 << DPL_P0));
 800128a:	201c      	movs	r0, #28
 800128c:	f7ff fcd6 	bl	8000c3c <read_register>
 8001290:	4603      	mov	r3, r0
 8001292:	f043 033f 	orr.w	r3, r3, #63	; 0x3f
 8001296:	b2db      	uxtb	r3, r3
 8001298:	4619      	mov	r1, r3
 800129a:	201c      	movs	r0, #28
 800129c:	f7ff fd2c 	bl	8000cf8 <write_register>
	dynamic_payloads_enabled = true;
 80012a0:	4b02      	ldr	r3, [pc, #8]	; (80012ac <enableDynamicPayloads+0x3c>)
 80012a2:	2201      	movs	r2, #1
 80012a4:	701a      	strb	r2, [r3, #0]
}
 80012a6:	bf00      	nop
 80012a8:	bd80      	pop	{r7, pc}
 80012aa:	bf00      	nop
 80012ac:	20001614 	.word	0x20001614

080012b0 <enableAckPayload>:
	write_register(DYNPD, 0);
	dynamic_payloads_enabled = false;
}

void enableAckPayload(void)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	af00      	add	r7, sp, #0
	write_register(FEATURE, read_register(FEATURE) | (1 << EN_ACK_PAY) | (1 << EN_DPL));
 80012b4:	201d      	movs	r0, #29
 80012b6:	f7ff fcc1 	bl	8000c3c <read_register>
 80012ba:	4603      	mov	r3, r0
 80012bc:	f043 0306 	orr.w	r3, r3, #6
 80012c0:	b2db      	uxtb	r3, r3
 80012c2:	4619      	mov	r1, r3
 80012c4:	201d      	movs	r0, #29
 80012c6:	f7ff fd17 	bl	8000cf8 <write_register>
	write_register(DYNPD, read_register(DYNPD) | (1 << DPL_P1) | (1 << DPL_P0));
 80012ca:	201c      	movs	r0, #28
 80012cc:	f7ff fcb6 	bl	8000c3c <read_register>
 80012d0:	4603      	mov	r3, r0
 80012d2:	f043 0303 	orr.w	r3, r3, #3
 80012d6:	b2db      	uxtb	r3, r3
 80012d8:	4619      	mov	r1, r3
 80012da:	201c      	movs	r0, #28
 80012dc:	f7ff fd0c 	bl	8000cf8 <write_register>
	dynamic_payloads_enabled = true;
 80012e0:	4b02      	ldr	r3, [pc, #8]	; (80012ec <enableAckPayload+0x3c>)
 80012e2:	2201      	movs	r2, #1
 80012e4:	701a      	strb	r2, [r3, #0]
}
 80012e6:	bf00      	nop
 80012e8:	bd80      	pop	{r7, pc}
 80012ea:	bf00      	nop
 80012ec:	20001614 	.word	0x20001614

080012f0 <writeAckPayload>:
{
    write_register(FEATURE, read_register(FEATURE) | (1 << EN_DYN_ACK));
}

void writeAckPayload(uint8_t pipe, const void* buf, uint8_t len)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b084      	sub	sp, #16
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	4603      	mov	r3, r0
 80012f8:	6039      	str	r1, [r7, #0]
 80012fa:	71fb      	strb	r3, [r7, #7]
 80012fc:	4613      	mov	r3, r2
 80012fe:	71bb      	strb	r3, [r7, #6]
	const uint8_t* current = (const uint8_t*)buf;
 8001300:	683b      	ldr	r3, [r7, #0]
 8001302:	60fb      	str	r3, [r7, #12]
	uint8_t data_len = rf24_min(len, 32);
 8001304:	79bb      	ldrb	r3, [r7, #6]
 8001306:	2b20      	cmp	r3, #32
 8001308:	bf28      	it	cs
 800130a:	2320      	movcs	r3, #32
 800130c:	72fb      	strb	r3, [r7, #11]
	uint8_t addr = W_ACK_PAYLOAD | (pipe & 0x07);
 800130e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001312:	f003 0307 	and.w	r3, r3, #7
 8001316:	b25b      	sxtb	r3, r3
 8001318:	f063 0357 	orn	r3, r3, #87	; 0x57
 800131c:	b25b      	sxtb	r3, r3
 800131e:	b2db      	uxtb	r3, r3
 8001320:	72bb      	strb	r3, [r7, #10]
	csn(LOW);
 8001322:	2000      	movs	r0, #0
 8001324:	f7ff fc62 	bl	8000bec <csn>
	HAL_SPI_Transmit(&hspi1, &addr, 1, 1000);
 8001328:	f107 010a 	add.w	r1, r7, #10
 800132c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001330:	2201      	movs	r2, #1
 8001332:	4809      	ldr	r0, [pc, #36]	; (8001358 <writeAckPayload+0x68>)
 8001334:	f001 fb29 	bl	800298a <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi1, (uint8_t*)current, data_len, 1000);
 8001338:	7afb      	ldrb	r3, [r7, #11]
 800133a:	b29a      	uxth	r2, r3
 800133c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001340:	68f9      	ldr	r1, [r7, #12]
 8001342:	4805      	ldr	r0, [pc, #20]	; (8001358 <writeAckPayload+0x68>)
 8001344:	f001 fb21 	bl	800298a <HAL_SPI_Transmit>
	csn(HIGH);
 8001348:	2001      	movs	r0, #1
 800134a:	f7ff fc4f 	bl	8000bec <csn>
}
 800134e:	bf00      	nop
 8001350:	3710      	adds	r7, #16
 8001352:	46bd      	mov	sp, r7
 8001354:	bd80      	pop	{r7, pc}
 8001356:	bf00      	nop
 8001358:	20001524 	.word	0x20001524

0800135c <setPALevel>:
		write_register(EN_AA, en_aa);
	}
}

void setPALevel(uint8_t level)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b084      	sub	sp, #16
 8001360:	af00      	add	r7, sp, #0
 8001362:	4603      	mov	r3, r0
 8001364:	71fb      	strb	r3, [r7, #7]
  uint8_t setup = read_register(RF_SETUP) & 0xF8;
 8001366:	2006      	movs	r0, #6
 8001368:	f7ff fc68 	bl	8000c3c <read_register>
 800136c:	4603      	mov	r3, r0
 800136e:	f023 0307 	bic.w	r3, r3, #7
 8001372:	73fb      	strb	r3, [r7, #15]

  if(level > 3) // If invalid level, go to max PA
 8001374:	79fb      	ldrb	r3, [r7, #7]
 8001376:	2b03      	cmp	r3, #3
 8001378:	d902      	bls.n	8001380 <setPALevel+0x24>
  {
	  level = (RF24_PA_MAX << 1) | (RF24_PA_LOW << 1);		// +1 to support the SI24R1 chip extra bit
 800137a:	2306      	movs	r3, #6
 800137c:	71fb      	strb	r3, [r7, #7]
 800137e:	e002      	b.n	8001386 <setPALevel+0x2a>
  }
  else
  {
	  level = (level << 1);	 		// Else set level as requested
 8001380:	79fb      	ldrb	r3, [r7, #7]
 8001382:	005b      	lsls	r3, r3, #1
 8001384:	71fb      	strb	r3, [r7, #7]
  }

  write_register(RF_SETUP, setup |= level);	// Write it to the chip
 8001386:	7bfa      	ldrb	r2, [r7, #15]
 8001388:	79fb      	ldrb	r3, [r7, #7]
 800138a:	4313      	orrs	r3, r2
 800138c:	73fb      	strb	r3, [r7, #15]
 800138e:	7bfb      	ldrb	r3, [r7, #15]
 8001390:	4619      	mov	r1, r3
 8001392:	2006      	movs	r0, #6
 8001394:	f7ff fcb0 	bl	8000cf8 <write_register>
}
 8001398:	bf00      	nop
 800139a:	3710      	adds	r7, #16
 800139c:	46bd      	mov	sp, r7
 800139e:	bd80      	pop	{r7, pc}

080013a0 <setDataRate>:
{
	return (read_register(RF_SETUP) & ((1 << RF24_PA_LOW) | (1 << RF24_PA_HIGH))) >> 1;
}

bool setDataRate(rf24_datarate_e speed)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b084      	sub	sp, #16
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	4603      	mov	r3, r0
 80013a8:	71fb      	strb	r3, [r7, #7]
	bool result = false;
 80013aa:	2300      	movs	r3, #0
 80013ac:	73fb      	strb	r3, [r7, #15]
	uint8_t setup = read_register(RF_SETUP);
 80013ae:	2006      	movs	r0, #6
 80013b0:	f7ff fc44 	bl	8000c3c <read_register>
 80013b4:	4603      	mov	r3, r0
 80013b6:	73bb      	strb	r3, [r7, #14]
	setup &= ~((1 << RF_DR_LOW) | (1 << RF_DR_HIGH));
 80013b8:	7bbb      	ldrb	r3, [r7, #14]
 80013ba:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 80013be:	73bb      	strb	r3, [r7, #14]
	txDelay = 85;
 80013c0:	4b16      	ldr	r3, [pc, #88]	; (800141c <setDataRate+0x7c>)
 80013c2:	2255      	movs	r2, #85	; 0x55
 80013c4:	701a      	strb	r2, [r3, #0]

	if(speed == RF24_250KBPS)
 80013c6:	79fb      	ldrb	r3, [r7, #7]
 80013c8:	2b02      	cmp	r3, #2
 80013ca:	d107      	bne.n	80013dc <setDataRate+0x3c>
	{
		setup |= (1 << RF_DR_LOW);
 80013cc:	7bbb      	ldrb	r3, [r7, #14]
 80013ce:	f043 0320 	orr.w	r3, r3, #32
 80013d2:	73bb      	strb	r3, [r7, #14]
		txDelay = 155;
 80013d4:	4b11      	ldr	r3, [pc, #68]	; (800141c <setDataRate+0x7c>)
 80013d6:	229b      	movs	r2, #155	; 0x9b
 80013d8:	701a      	strb	r2, [r3, #0]
 80013da:	e009      	b.n	80013f0 <setDataRate+0x50>
	}
	else
	{
		if(speed == RF24_2MBPS)
 80013dc:	79fb      	ldrb	r3, [r7, #7]
 80013de:	2b01      	cmp	r3, #1
 80013e0:	d106      	bne.n	80013f0 <setDataRate+0x50>
		{
			setup |= (1 << RF_DR_HIGH);
 80013e2:	7bbb      	ldrb	r3, [r7, #14]
 80013e4:	f043 0308 	orr.w	r3, r3, #8
 80013e8:	73bb      	strb	r3, [r7, #14]
			txDelay = 65;
 80013ea:	4b0c      	ldr	r3, [pc, #48]	; (800141c <setDataRate+0x7c>)
 80013ec:	2241      	movs	r2, #65	; 0x41
 80013ee:	701a      	strb	r2, [r3, #0]
		}
	}

	write_register(RF_SETUP, setup);
 80013f0:	7bbb      	ldrb	r3, [r7, #14]
 80013f2:	4619      	mov	r1, r3
 80013f4:	2006      	movs	r0, #6
 80013f6:	f7ff fc7f 	bl	8000cf8 <write_register>
	uint8_t ggg = read_register(RF_SETUP);
 80013fa:	2006      	movs	r0, #6
 80013fc:	f7ff fc1e 	bl	8000c3c <read_register>
 8001400:	4603      	mov	r3, r0
 8001402:	737b      	strb	r3, [r7, #13]

	if(ggg == setup)
 8001404:	7b7a      	ldrb	r2, [r7, #13]
 8001406:	7bbb      	ldrb	r3, [r7, #14]
 8001408:	429a      	cmp	r2, r3
 800140a:	d101      	bne.n	8001410 <setDataRate+0x70>
	{
		result = true;
 800140c:	2301      	movs	r3, #1
 800140e:	73fb      	strb	r3, [r7, #15]
	}

	return result;
 8001410:	7bfb      	ldrb	r3, [r7, #15]
}
 8001412:	4618      	mov	r0, r3
 8001414:	3710      	adds	r7, #16
 8001416:	46bd      	mov	sp, r7
 8001418:	bd80      	pop	{r7, pc}
 800141a:	bf00      	nop
 800141c:	2000053a 	.word	0x2000053a

08001420 <setRetries>:
	uint8_t disable = read_register(NRF_CONFIG) & ~(1 << EN_CRC);
	write_register(NRF_CONFIG, disable);
}

void setRetries(uint8_t delay, uint8_t count)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b082      	sub	sp, #8
 8001424:	af00      	add	r7, sp, #0
 8001426:	4603      	mov	r3, r0
 8001428:	460a      	mov	r2, r1
 800142a:	71fb      	strb	r3, [r7, #7]
 800142c:	4613      	mov	r3, r2
 800142e:	71bb      	strb	r3, [r7, #6]
	write_register(SETUP_RETR, (delay&0xf)<<ARD | (count&0xf)<<ARC);
 8001430:	79fb      	ldrb	r3, [r7, #7]
 8001432:	011b      	lsls	r3, r3, #4
 8001434:	b25a      	sxtb	r2, r3
 8001436:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800143a:	f003 030f 	and.w	r3, r3, #15
 800143e:	b25b      	sxtb	r3, r3
 8001440:	4313      	orrs	r3, r2
 8001442:	b25b      	sxtb	r3, r3
 8001444:	b2db      	uxtb	r3, r3
 8001446:	4619      	mov	r1, r3
 8001448:	2004      	movs	r0, #4
 800144a:	f7ff fc55 	bl	8000cf8 <write_register>
}
 800144e:	bf00      	nop
 8001450:	3708      	adds	r7, #8
 8001452:	46bd      	mov	sp, r7
 8001454:	bd80      	pop	{r7, pc}
	...

08001458 <receiver_init>:

uint8_t current_channel;
uint8_t current_data_rate;
uint8_t current_power;

void receiver_init(){
 8001458:	b480      	push	{r7}
 800145a:	af00      	add	r7, sp, #0
	unixtime = 946681200;
 800145c:	4b03      	ldr	r3, [pc, #12]	; (800146c <receiver_init+0x14>)
 800145e:	4a04      	ldr	r2, [pc, #16]	; (8001470 <receiver_init+0x18>)
 8001460:	601a      	str	r2, [r3, #0]
}
 8001462:	bf00      	nop
 8001464:	46bd      	mov	sp, r7
 8001466:	bc80      	pop	{r7}
 8001468:	4770      	bx	lr
 800146a:	bf00      	nop
 800146c:	2000161c 	.word	0x2000161c
 8001470:	386d3570 	.word	0x386d3570

08001474 <PackDataToAck>:
void PackDataToAck(struct ReceivedData *pPipeData)
{
 8001474:	b590      	push	{r4, r7, lr}
 8001476:	b083      	sub	sp, #12
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
	switch(pPipeData->data.type_of_data)
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	7e5b      	ldrb	r3, [r3, #25]
 8001480:	2b03      	cmp	r3, #3
 8001482:	d833      	bhi.n	80014ec <PackDataToAck+0x78>
 8001484:	a201      	add	r2, pc, #4	; (adr r2, 800148c <PackDataToAck+0x18>)
 8001486:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800148a:	bf00      	nop
 800148c:	0800149d 	.word	0x0800149d
 8001490:	080014a9 	.word	0x080014a9
 8001494:	080014c5 	.word	0x080014c5
 8001498:	080014e1 	.word	0x080014e1
	{
	case data_null :
		CreateNullAck(pPipeData->pipeNo);
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	781b      	ldrb	r3, [r3, #0]
 80014a0:	4618      	mov	r0, r3
 80014a2:	f000 f883 	bl	80015ac <CreateNullAck>
		break;
 80014a6:	e021      	b.n	80014ec <PackDataToAck+0x78>
	case data_meteoOutDoor :
		meteoOutDoor=pPipeData->data.meteo_data;
 80014a8:	4a3d      	ldr	r2, [pc, #244]	; (80015a0 <PackDataToAck+0x12c>)
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	4614      	mov	r4, r2
 80014ae:	330c      	adds	r3, #12
 80014b0:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80014b4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
		CreateNullAck(pPipeData->pipeNo);
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	781b      	ldrb	r3, [r3, #0]
 80014bc:	4618      	mov	r0, r3
 80014be:	f000 f875 	bl	80015ac <CreateNullAck>
		break;
 80014c2:	e013      	b.n	80014ec <PackDataToAck+0x78>
	case data_meteoInDoor :
		meteoOutDoor=pPipeData->data.meteo_data;
 80014c4:	4a36      	ldr	r2, [pc, #216]	; (80015a0 <PackDataToAck+0x12c>)
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	4614      	mov	r4, r2
 80014ca:	330c      	adds	r3, #12
 80014cc:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80014d0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
		CreateNullAck(pPipeData->pipeNo);
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	781b      	ldrb	r3, [r3, #0]
 80014d8:	4618      	mov	r0, r3
 80014da:	f000 f867 	bl	80015ac <CreateNullAck>
		break;
 80014de:	e005      	b.n	80014ec <PackDataToAck+0x78>
	case exactly_time:
		CreateNullAck(pPipeData->pipeNo);
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	781b      	ldrb	r3, [r3, #0]
 80014e4:	4618      	mov	r0, r3
 80014e6:	f000 f861 	bl	80015ac <CreateNullAck>
		break;
 80014ea:	bf00      	nop
	}
	switch(pPipeData->data.query)
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	7e1b      	ldrb	r3, [r3, #24]
 80014f0:	2b03      	cmp	r3, #3
 80014f2:	d851      	bhi.n	8001598 <PackDataToAck+0x124>
 80014f4:	a201      	add	r2, pc, #4	; (adr r2, 80014fc <PackDataToAck+0x88>)
 80014f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014fa:	bf00      	nop
 80014fc:	08001597 	.word	0x08001597
 8001500:	0800150d 	.word	0x0800150d
 8001504:	08001527 	.word	0x08001527
 8001508:	0800155f 	.word	0x0800155f
	{
	case none_q:
		break;
	case get_time:
		pipeData[pPipeData->pipeNo].ackData.ack_query = get_time;
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	781b      	ldrb	r3, [r3, #0]
 8001510:	4619      	mov	r1, r3
 8001512:	4a24      	ldr	r2, [pc, #144]	; (80015a4 <PackDataToAck+0x130>)
 8001514:	460b      	mov	r3, r1
 8001516:	005b      	lsls	r3, r3, #1
 8001518:	440b      	add	r3, r1
 800151a:	011b      	lsls	r3, r3, #4
 800151c:	4413      	add	r3, r2
 800151e:	3329      	adds	r3, #41	; 0x29
 8001520:	2201      	movs	r2, #1
 8001522:	701a      	strb	r2, [r3, #0]
		break;
 8001524:	e038      	b.n	8001598 <PackDataToAck+0x124>
	case get_meteoOutDoor:
		pipeData[pPipeData->pipeNo].ackData.ack_query = get_meteoOutDoor;
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	781b      	ldrb	r3, [r3, #0]
 800152a:	4619      	mov	r1, r3
 800152c:	4a1d      	ldr	r2, [pc, #116]	; (80015a4 <PackDataToAck+0x130>)
 800152e:	460b      	mov	r3, r1
 8001530:	005b      	lsls	r3, r3, #1
 8001532:	440b      	add	r3, r1
 8001534:	011b      	lsls	r3, r3, #4
 8001536:	4413      	add	r3, r2
 8001538:	3329      	adds	r3, #41	; 0x29
 800153a:	2202      	movs	r2, #2
 800153c:	701a      	strb	r2, [r3, #0]
		pipeData[pPipeData->pipeNo].ackData.meteo_data = meteoOutDoor;
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	781b      	ldrb	r3, [r3, #0]
 8001542:	4619      	mov	r1, r3
 8001544:	4a17      	ldr	r2, [pc, #92]	; (80015a4 <PackDataToAck+0x130>)
 8001546:	460b      	mov	r3, r1
 8001548:	005b      	lsls	r3, r3, #1
 800154a:	440b      	add	r3, r1
 800154c:	011b      	lsls	r3, r3, #4
 800154e:	4413      	add	r3, r2
 8001550:	3318      	adds	r3, #24
 8001552:	4a13      	ldr	r2, [pc, #76]	; (80015a0 <PackDataToAck+0x12c>)
 8001554:	3304      	adds	r3, #4
 8001556:	ca07      	ldmia	r2, {r0, r1, r2}
 8001558:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		break;
 800155c:	e01c      	b.n	8001598 <PackDataToAck+0x124>
	case get_meteoInDoor:
		pipeData[pPipeData->pipeNo].ackData.ack_query = get_meteoInDoor;
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	781b      	ldrb	r3, [r3, #0]
 8001562:	4619      	mov	r1, r3
 8001564:	4a0f      	ldr	r2, [pc, #60]	; (80015a4 <PackDataToAck+0x130>)
 8001566:	460b      	mov	r3, r1
 8001568:	005b      	lsls	r3, r3, #1
 800156a:	440b      	add	r3, r1
 800156c:	011b      	lsls	r3, r3, #4
 800156e:	4413      	add	r3, r2
 8001570:	3329      	adds	r3, #41	; 0x29
 8001572:	2203      	movs	r2, #3
 8001574:	701a      	strb	r2, [r3, #0]
		pipeData[pPipeData->pipeNo].ackData.meteo_data = meteoInDoor;
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	781b      	ldrb	r3, [r3, #0]
 800157a:	4619      	mov	r1, r3
 800157c:	4a09      	ldr	r2, [pc, #36]	; (80015a4 <PackDataToAck+0x130>)
 800157e:	460b      	mov	r3, r1
 8001580:	005b      	lsls	r3, r3, #1
 8001582:	440b      	add	r3, r1
 8001584:	011b      	lsls	r3, r3, #4
 8001586:	4413      	add	r3, r2
 8001588:	3318      	adds	r3, #24
 800158a:	4a07      	ldr	r2, [pc, #28]	; (80015a8 <PackDataToAck+0x134>)
 800158c:	3304      	adds	r3, #4
 800158e:	ca07      	ldmia	r2, {r0, r1, r2}
 8001590:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		break;
 8001594:	e000      	b.n	8001598 <PackDataToAck+0x124>
		break;
 8001596:	bf00      	nop
	}
}
 8001598:	bf00      	nop
 800159a:	370c      	adds	r7, #12
 800159c:	46bd      	mov	sp, r7
 800159e:	bd90      	pop	{r4, r7, pc}
 80015a0:	20001404 	.word	0x20001404
 80015a4:	20001430 	.word	0x20001430
 80015a8:	20001394 	.word	0x20001394

080015ac <CreateNullAck>:
void CreateNullAck(const uint8_t pipeNo)
{
 80015ac:	b480      	push	{r7}
 80015ae:	b083      	sub	sp, #12
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	4603      	mov	r3, r0
 80015b4:	71fb      	strb	r3, [r7, #7]
	pipeData[pipeNo].ackData.time_interval = -1; //задержка перед следующей передачей
 80015b6:	79fa      	ldrb	r2, [r7, #7]
 80015b8:	4941      	ldr	r1, [pc, #260]	; (80016c0 <CreateNullAck+0x114>)
 80015ba:	4613      	mov	r3, r2
 80015bc:	005b      	lsls	r3, r3, #1
 80015be:	4413      	add	r3, r2
 80015c0:	011b      	lsls	r3, r3, #4
 80015c2:	440b      	add	r3, r1
 80015c4:	3314      	adds	r3, #20
 80015c6:	f04f 32ff 	mov.w	r2, #4294967295
 80015ca:	601a      	str	r2, [r3, #0]
	pipeData[pipeNo].ackData.server_time=unixtime;
 80015cc:	79fa      	ldrb	r2, [r7, #7]
 80015ce:	4b3d      	ldr	r3, [pc, #244]	; (80016c4 <CreateNullAck+0x118>)
 80015d0:	6819      	ldr	r1, [r3, #0]
 80015d2:	483b      	ldr	r0, [pc, #236]	; (80016c0 <CreateNullAck+0x114>)
 80015d4:	4613      	mov	r3, r2
 80015d6:	005b      	lsls	r3, r3, #1
 80015d8:	4413      	add	r3, r2
 80015da:	011b      	lsls	r3, r3, #4
 80015dc:	4403      	add	r3, r0
 80015de:	3318      	adds	r3, #24
 80015e0:	6019      	str	r1, [r3, #0]
	pipeData[pipeNo].ackData.meteo_data.measurement_time=946681200;
 80015e2:	79fa      	ldrb	r2, [r7, #7]
 80015e4:	4936      	ldr	r1, [pc, #216]	; (80016c0 <CreateNullAck+0x114>)
 80015e6:	4613      	mov	r3, r2
 80015e8:	005b      	lsls	r3, r3, #1
 80015ea:	4413      	add	r3, r2
 80015ec:	011b      	lsls	r3, r3, #4
 80015ee:	440b      	add	r3, r1
 80015f0:	331c      	adds	r3, #28
 80015f2:	4a35      	ldr	r2, [pc, #212]	; (80016c8 <CreateNullAck+0x11c>)
 80015f4:	601a      	str	r2, [r3, #0]
	pipeData[pipeNo].ackData.meteo_data.T =0;
 80015f6:	79fa      	ldrb	r2, [r7, #7]
 80015f8:	4931      	ldr	r1, [pc, #196]	; (80016c0 <CreateNullAck+0x114>)
 80015fa:	4613      	mov	r3, r2
 80015fc:	005b      	lsls	r3, r3, #1
 80015fe:	4413      	add	r3, r2
 8001600:	011b      	lsls	r3, r3, #4
 8001602:	440b      	add	r3, r1
 8001604:	3320      	adds	r3, #32
 8001606:	2200      	movs	r2, #0
 8001608:	801a      	strh	r2, [r3, #0]
	pipeData[pipeNo].ackData.meteo_data.P = 0;
 800160a:	79fa      	ldrb	r2, [r7, #7]
 800160c:	492c      	ldr	r1, [pc, #176]	; (80016c0 <CreateNullAck+0x114>)
 800160e:	4613      	mov	r3, r2
 8001610:	005b      	lsls	r3, r3, #1
 8001612:	4413      	add	r3, r2
 8001614:	011b      	lsls	r3, r3, #4
 8001616:	440b      	add	r3, r1
 8001618:	3322      	adds	r3, #34	; 0x22
 800161a:	2200      	movs	r2, #0
 800161c:	801a      	strh	r2, [r3, #0]
	pipeData[pipeNo].ackData.meteo_data.H = 0;
 800161e:	79fa      	ldrb	r2, [r7, #7]
 8001620:	4927      	ldr	r1, [pc, #156]	; (80016c0 <CreateNullAck+0x114>)
 8001622:	4613      	mov	r3, r2
 8001624:	005b      	lsls	r3, r3, #1
 8001626:	4413      	add	r3, r2
 8001628:	011b      	lsls	r3, r3, #4
 800162a:	440b      	add	r3, r1
 800162c:	3324      	adds	r3, #36	; 0x24
 800162e:	2200      	movs	r2, #0
 8001630:	801a      	strh	r2, [r3, #0]
	pipeData[pipeNo].ackData.meteo_data.CO2 = 0;
 8001632:	79fa      	ldrb	r2, [r7, #7]
 8001634:	4922      	ldr	r1, [pc, #136]	; (80016c0 <CreateNullAck+0x114>)
 8001636:	4613      	mov	r3, r2
 8001638:	005b      	lsls	r3, r3, #1
 800163a:	4413      	add	r3, r2
 800163c:	011b      	lsls	r3, r3, #4
 800163e:	440b      	add	r3, r1
 8001640:	3326      	adds	r3, #38	; 0x26
 8001642:	2200      	movs	r2, #0
 8001644:	801a      	strh	r2, [r3, #0]
	pipeData[pipeNo].ackData.ack_query = none_q;
 8001646:	79fa      	ldrb	r2, [r7, #7]
 8001648:	491d      	ldr	r1, [pc, #116]	; (80016c0 <CreateNullAck+0x114>)
 800164a:	4613      	mov	r3, r2
 800164c:	005b      	lsls	r3, r3, #1
 800164e:	4413      	add	r3, r2
 8001650:	011b      	lsls	r3, r3, #4
 8001652:	440b      	add	r3, r1
 8001654:	3329      	adds	r3, #41	; 0x29
 8001656:	2200      	movs	r2, #0
 8001658:	701a      	strb	r2, [r3, #0]
	pipeData[pipeNo].ackData.command=none_command;
 800165a:	79fa      	ldrb	r2, [r7, #7]
 800165c:	4918      	ldr	r1, [pc, #96]	; (80016c0 <CreateNullAck+0x114>)
 800165e:	4613      	mov	r3, r2
 8001660:	005b      	lsls	r3, r3, #1
 8001662:	4413      	add	r3, r2
 8001664:	011b      	lsls	r3, r3, #4
 8001666:	440b      	add	r3, r1
 8001668:	3328      	adds	r3, #40	; 0x28
 800166a:	2200      	movs	r2, #0
 800166c:	701a      	strb	r2, [r3, #0]
	pipeData[pipeNo].ackData.channel=current_channel;
 800166e:	79fa      	ldrb	r2, [r7, #7]
 8001670:	4b16      	ldr	r3, [pc, #88]	; (80016cc <CreateNullAck+0x120>)
 8001672:	7818      	ldrb	r0, [r3, #0]
 8001674:	4912      	ldr	r1, [pc, #72]	; (80016c0 <CreateNullAck+0x114>)
 8001676:	4613      	mov	r3, r2
 8001678:	005b      	lsls	r3, r3, #1
 800167a:	4413      	add	r3, r2
 800167c:	011b      	lsls	r3, r3, #4
 800167e:	440b      	add	r3, r1
 8001680:	332a      	adds	r3, #42	; 0x2a
 8001682:	4602      	mov	r2, r0
 8001684:	701a      	strb	r2, [r3, #0]
	pipeData[pipeNo].ackData.data_rate=current_data_rate;
 8001686:	79fa      	ldrb	r2, [r7, #7]
 8001688:	4b11      	ldr	r3, [pc, #68]	; (80016d0 <CreateNullAck+0x124>)
 800168a:	7818      	ldrb	r0, [r3, #0]
 800168c:	490c      	ldr	r1, [pc, #48]	; (80016c0 <CreateNullAck+0x114>)
 800168e:	4613      	mov	r3, r2
 8001690:	005b      	lsls	r3, r3, #1
 8001692:	4413      	add	r3, r2
 8001694:	011b      	lsls	r3, r3, #4
 8001696:	440b      	add	r3, r1
 8001698:	332b      	adds	r3, #43	; 0x2b
 800169a:	4602      	mov	r2, r0
 800169c:	701a      	strb	r2, [r3, #0]
	pipeData[pipeNo].ackData.power=current_power;
 800169e:	79fa      	ldrb	r2, [r7, #7]
 80016a0:	4b0c      	ldr	r3, [pc, #48]	; (80016d4 <CreateNullAck+0x128>)
 80016a2:	7818      	ldrb	r0, [r3, #0]
 80016a4:	4906      	ldr	r1, [pc, #24]	; (80016c0 <CreateNullAck+0x114>)
 80016a6:	4613      	mov	r3, r2
 80016a8:	005b      	lsls	r3, r3, #1
 80016aa:	4413      	add	r3, r2
 80016ac:	011b      	lsls	r3, r3, #4
 80016ae:	440b      	add	r3, r1
 80016b0:	332c      	adds	r3, #44	; 0x2c
 80016b2:	4602      	mov	r2, r0
 80016b4:	701a      	strb	r2, [r3, #0]
	}
 80016b6:	bf00      	nop
 80016b8:	370c      	adds	r7, #12
 80016ba:	46bd      	mov	sp, r7
 80016bc:	bc80      	pop	{r7}
 80016be:	4770      	bx	lr
 80016c0:	20001430 	.word	0x20001430
 80016c4:	2000161c 	.word	0x2000161c
 80016c8:	386d3570 	.word	0x386d3570
 80016cc:	20001620 	.word	0x20001620
 80016d0:	20001618 	.word	0x20001618
 80016d4:	20001619 	.word	0x20001619

080016d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	b084      	sub	sp, #16
 80016dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80016de:	4b18      	ldr	r3, [pc, #96]	; (8001740 <HAL_MspInit+0x68>)
 80016e0:	699b      	ldr	r3, [r3, #24]
 80016e2:	4a17      	ldr	r2, [pc, #92]	; (8001740 <HAL_MspInit+0x68>)
 80016e4:	f043 0301 	orr.w	r3, r3, #1
 80016e8:	6193      	str	r3, [r2, #24]
 80016ea:	4b15      	ldr	r3, [pc, #84]	; (8001740 <HAL_MspInit+0x68>)
 80016ec:	699b      	ldr	r3, [r3, #24]
 80016ee:	f003 0301 	and.w	r3, r3, #1
 80016f2:	60bb      	str	r3, [r7, #8]
 80016f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80016f6:	4b12      	ldr	r3, [pc, #72]	; (8001740 <HAL_MspInit+0x68>)
 80016f8:	69db      	ldr	r3, [r3, #28]
 80016fa:	4a11      	ldr	r2, [pc, #68]	; (8001740 <HAL_MspInit+0x68>)
 80016fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001700:	61d3      	str	r3, [r2, #28]
 8001702:	4b0f      	ldr	r3, [pc, #60]	; (8001740 <HAL_MspInit+0x68>)
 8001704:	69db      	ldr	r3, [r3, #28]
 8001706:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800170a:	607b      	str	r3, [r7, #4]
 800170c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800170e:	2200      	movs	r2, #0
 8001710:	210f      	movs	r1, #15
 8001712:	f06f 0001 	mvn.w	r0, #1
 8001716:	f000 fabe 	bl	8001c96 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800171a:	4b0a      	ldr	r3, [pc, #40]	; (8001744 <HAL_MspInit+0x6c>)
 800171c:	685b      	ldr	r3, [r3, #4]
 800171e:	60fb      	str	r3, [r7, #12]
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001726:	60fb      	str	r3, [r7, #12]
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800172e:	60fb      	str	r3, [r7, #12]
 8001730:	4a04      	ldr	r2, [pc, #16]	; (8001744 <HAL_MspInit+0x6c>)
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001736:	bf00      	nop
 8001738:	3710      	adds	r7, #16
 800173a:	46bd      	mov	sp, r7
 800173c:	bd80      	pop	{r7, pc}
 800173e:	bf00      	nop
 8001740:	40021000 	.word	0x40021000
 8001744:	40010000 	.word	0x40010000

08001748 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b088      	sub	sp, #32
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001750:	f107 0310 	add.w	r3, r7, #16
 8001754:	2200      	movs	r2, #0
 8001756:	601a      	str	r2, [r3, #0]
 8001758:	605a      	str	r2, [r3, #4]
 800175a:	609a      	str	r2, [r3, #8]
 800175c:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	4a1b      	ldr	r2, [pc, #108]	; (80017d0 <HAL_SPI_MspInit+0x88>)
 8001764:	4293      	cmp	r3, r2
 8001766:	d12f      	bne.n	80017c8 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001768:	4b1a      	ldr	r3, [pc, #104]	; (80017d4 <HAL_SPI_MspInit+0x8c>)
 800176a:	699b      	ldr	r3, [r3, #24]
 800176c:	4a19      	ldr	r2, [pc, #100]	; (80017d4 <HAL_SPI_MspInit+0x8c>)
 800176e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001772:	6193      	str	r3, [r2, #24]
 8001774:	4b17      	ldr	r3, [pc, #92]	; (80017d4 <HAL_SPI_MspInit+0x8c>)
 8001776:	699b      	ldr	r3, [r3, #24]
 8001778:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800177c:	60fb      	str	r3, [r7, #12]
 800177e:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001780:	4b14      	ldr	r3, [pc, #80]	; (80017d4 <HAL_SPI_MspInit+0x8c>)
 8001782:	699b      	ldr	r3, [r3, #24]
 8001784:	4a13      	ldr	r2, [pc, #76]	; (80017d4 <HAL_SPI_MspInit+0x8c>)
 8001786:	f043 0304 	orr.w	r3, r3, #4
 800178a:	6193      	str	r3, [r2, #24]
 800178c:	4b11      	ldr	r3, [pc, #68]	; (80017d4 <HAL_SPI_MspInit+0x8c>)
 800178e:	699b      	ldr	r3, [r3, #24]
 8001790:	f003 0304 	and.w	r3, r3, #4
 8001794:	60bb      	str	r3, [r7, #8]
 8001796:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001798:	23a0      	movs	r3, #160	; 0xa0
 800179a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800179c:	2302      	movs	r3, #2
 800179e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80017a0:	2303      	movs	r3, #3
 80017a2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017a4:	f107 0310 	add.w	r3, r7, #16
 80017a8:	4619      	mov	r1, r3
 80017aa:	480b      	ldr	r0, [pc, #44]	; (80017d8 <HAL_SPI_MspInit+0x90>)
 80017ac:	f000 fa9e 	bl	8001cec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80017b0:	2340      	movs	r3, #64	; 0x40
 80017b2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017b4:	2300      	movs	r3, #0
 80017b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017b8:	2300      	movs	r3, #0
 80017ba:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017bc:	f107 0310 	add.w	r3, r7, #16
 80017c0:	4619      	mov	r1, r3
 80017c2:	4805      	ldr	r0, [pc, #20]	; (80017d8 <HAL_SPI_MspInit+0x90>)
 80017c4:	f000 fa92 	bl	8001cec <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80017c8:	bf00      	nop
 80017ca:	3720      	adds	r7, #32
 80017cc:	46bd      	mov	sp, r7
 80017ce:	bd80      	pop	{r7, pc}
 80017d0:	40013000 	.word	0x40013000
 80017d4:	40021000 	.word	0x40021000
 80017d8:	40010800 	.word	0x40010800

080017dc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b088      	sub	sp, #32
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017e4:	f107 0310 	add.w	r3, r7, #16
 80017e8:	2200      	movs	r2, #0
 80017ea:	601a      	str	r2, [r3, #0]
 80017ec:	605a      	str	r2, [r3, #4]
 80017ee:	609a      	str	r2, [r3, #8]
 80017f0:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	4a1c      	ldr	r2, [pc, #112]	; (8001868 <HAL_UART_MspInit+0x8c>)
 80017f8:	4293      	cmp	r3, r2
 80017fa:	d131      	bne.n	8001860 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80017fc:	4b1b      	ldr	r3, [pc, #108]	; (800186c <HAL_UART_MspInit+0x90>)
 80017fe:	699b      	ldr	r3, [r3, #24]
 8001800:	4a1a      	ldr	r2, [pc, #104]	; (800186c <HAL_UART_MspInit+0x90>)
 8001802:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001806:	6193      	str	r3, [r2, #24]
 8001808:	4b18      	ldr	r3, [pc, #96]	; (800186c <HAL_UART_MspInit+0x90>)
 800180a:	699b      	ldr	r3, [r3, #24]
 800180c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001810:	60fb      	str	r3, [r7, #12]
 8001812:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001814:	4b15      	ldr	r3, [pc, #84]	; (800186c <HAL_UART_MspInit+0x90>)
 8001816:	699b      	ldr	r3, [r3, #24]
 8001818:	4a14      	ldr	r2, [pc, #80]	; (800186c <HAL_UART_MspInit+0x90>)
 800181a:	f043 0304 	orr.w	r3, r3, #4
 800181e:	6193      	str	r3, [r2, #24]
 8001820:	4b12      	ldr	r3, [pc, #72]	; (800186c <HAL_UART_MspInit+0x90>)
 8001822:	699b      	ldr	r3, [r3, #24]
 8001824:	f003 0304 	and.w	r3, r3, #4
 8001828:	60bb      	str	r3, [r7, #8]
 800182a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800182c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001830:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001832:	2302      	movs	r3, #2
 8001834:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001836:	2303      	movs	r3, #3
 8001838:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800183a:	f107 0310 	add.w	r3, r7, #16
 800183e:	4619      	mov	r1, r3
 8001840:	480b      	ldr	r0, [pc, #44]	; (8001870 <HAL_UART_MspInit+0x94>)
 8001842:	f000 fa53 	bl	8001cec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001846:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800184a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800184c:	2300      	movs	r3, #0
 800184e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001850:	2300      	movs	r3, #0
 8001852:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001854:	f107 0310 	add.w	r3, r7, #16
 8001858:	4619      	mov	r1, r3
 800185a:	4805      	ldr	r0, [pc, #20]	; (8001870 <HAL_UART_MspInit+0x94>)
 800185c:	f000 fa46 	bl	8001cec <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001860:	bf00      	nop
 8001862:	3720      	adds	r7, #32
 8001864:	46bd      	mov	sp, r7
 8001866:	bd80      	pop	{r7, pc}
 8001868:	40013800 	.word	0x40013800
 800186c:	40021000 	.word	0x40021000
 8001870:	40010800 	.word	0x40010800

08001874 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	b08c      	sub	sp, #48	; 0x30
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800187c:	2300      	movs	r3, #0
 800187e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001880:	2300      	movs	r3, #0
 8001882:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM4 IRQ priority */
  HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority ,0); 
 8001884:	2200      	movs	r2, #0
 8001886:	6879      	ldr	r1, [r7, #4]
 8001888:	201e      	movs	r0, #30
 800188a:	f000 fa04 	bl	8001c96 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM4 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM4_IRQn); 
 800188e:	201e      	movs	r0, #30
 8001890:	f000 fa1d 	bl	8001cce <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 8001894:	4b1f      	ldr	r3, [pc, #124]	; (8001914 <HAL_InitTick+0xa0>)
 8001896:	69db      	ldr	r3, [r3, #28]
 8001898:	4a1e      	ldr	r2, [pc, #120]	; (8001914 <HAL_InitTick+0xa0>)
 800189a:	f043 0304 	orr.w	r3, r3, #4
 800189e:	61d3      	str	r3, [r2, #28]
 80018a0:	4b1c      	ldr	r3, [pc, #112]	; (8001914 <HAL_InitTick+0xa0>)
 80018a2:	69db      	ldr	r3, [r3, #28]
 80018a4:	f003 0304 	and.w	r3, r3, #4
 80018a8:	60fb      	str	r3, [r7, #12]
 80018aa:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80018ac:	f107 0210 	add.w	r2, r7, #16
 80018b0:	f107 0314 	add.w	r3, r7, #20
 80018b4:	4611      	mov	r1, r2
 80018b6:	4618      	mov	r0, r3
 80018b8:	f000 ffb8 	bl	800282c <HAL_RCC_GetClockConfig>
  
  /* Compute TIM4 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 80018bc:	f000 ff8e 	bl	80027dc <HAL_RCC_GetPCLK1Freq>
 80018c0:	4603      	mov	r3, r0
 80018c2:	005b      	lsls	r3, r3, #1
 80018c4:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 80018c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018c8:	4a13      	ldr	r2, [pc, #76]	; (8001918 <HAL_InitTick+0xa4>)
 80018ca:	fba2 2303 	umull	r2, r3, r2, r3
 80018ce:	0c9b      	lsrs	r3, r3, #18
 80018d0:	3b01      	subs	r3, #1
 80018d2:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 80018d4:	4b11      	ldr	r3, [pc, #68]	; (800191c <HAL_InitTick+0xa8>)
 80018d6:	4a12      	ldr	r2, [pc, #72]	; (8001920 <HAL_InitTick+0xac>)
 80018d8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000 / 1000) - 1;
 80018da:	4b10      	ldr	r3, [pc, #64]	; (800191c <HAL_InitTick+0xa8>)
 80018dc:	f240 32e7 	movw	r2, #999	; 0x3e7
 80018e0:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 80018e2:	4a0e      	ldr	r2, [pc, #56]	; (800191c <HAL_InitTick+0xa8>)
 80018e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80018e6:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 80018e8:	4b0c      	ldr	r3, [pc, #48]	; (800191c <HAL_InitTick+0xa8>)
 80018ea:	2200      	movs	r2, #0
 80018ec:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018ee:	4b0b      	ldr	r3, [pc, #44]	; (800191c <HAL_InitTick+0xa8>)
 80018f0:	2200      	movs	r2, #0
 80018f2:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim4) == HAL_OK)
 80018f4:	4809      	ldr	r0, [pc, #36]	; (800191c <HAL_InitTick+0xa8>)
 80018f6:	f001 fd01 	bl	80032fc <HAL_TIM_Base_Init>
 80018fa:	4603      	mov	r3, r0
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d104      	bne.n	800190a <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim4);
 8001900:	4806      	ldr	r0, [pc, #24]	; (800191c <HAL_InitTick+0xa8>)
 8001902:	f001 fd2f 	bl	8003364 <HAL_TIM_Base_Start_IT>
 8001906:	4603      	mov	r3, r0
 8001908:	e000      	b.n	800190c <HAL_InitTick+0x98>
  }
  
  /* Return function status */
  return HAL_ERROR;
 800190a:	2301      	movs	r3, #1
}
 800190c:	4618      	mov	r0, r3
 800190e:	3730      	adds	r7, #48	; 0x30
 8001910:	46bd      	mov	sp, r7
 8001912:	bd80      	pop	{r7, pc}
 8001914:	40021000 	.word	0x40021000
 8001918:	431bde83 	.word	0x431bde83
 800191c:	20001624 	.word	0x20001624
 8001920:	40000800 	.word	0x40000800

08001924 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001924:	b480      	push	{r7}
 8001926:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001928:	bf00      	nop
 800192a:	46bd      	mov	sp, r7
 800192c:	bc80      	pop	{r7}
 800192e:	4770      	bx	lr

08001930 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001930:	b480      	push	{r7}
 8001932:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001934:	e7fe      	b.n	8001934 <HardFault_Handler+0x4>

08001936 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001936:	b480      	push	{r7}
 8001938:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800193a:	e7fe      	b.n	800193a <MemManage_Handler+0x4>

0800193c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800193c:	b480      	push	{r7}
 800193e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001940:	e7fe      	b.n	8001940 <BusFault_Handler+0x4>

08001942 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001942:	b480      	push	{r7}
 8001944:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001946:	e7fe      	b.n	8001946 <UsageFault_Handler+0x4>

08001948 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001948:	b480      	push	{r7}
 800194a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800194c:	bf00      	nop
 800194e:	46bd      	mov	sp, r7
 8001950:	bc80      	pop	{r7}
 8001952:	4770      	bx	lr

08001954 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8001958:	2001      	movs	r0, #1
 800195a:	f000 fb51 	bl	8002000 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800195e:	bf00      	nop
 8001960:	bd80      	pop	{r7, pc}
	...

08001964 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001968:	4802      	ldr	r0, [pc, #8]	; (8001974 <TIM4_IRQHandler+0x10>)
 800196a:	f001 fd1e 	bl	80033aa <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800196e:	bf00      	nop
 8001970:	bd80      	pop	{r7, pc}
 8001972:	bf00      	nop
 8001974:	20001624 	.word	0x20001624

08001978 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	b084      	sub	sp, #16
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001980:	4b11      	ldr	r3, [pc, #68]	; (80019c8 <_sbrk+0x50>)
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	2b00      	cmp	r3, #0
 8001986:	d102      	bne.n	800198e <_sbrk+0x16>
		heap_end = &end;
 8001988:	4b0f      	ldr	r3, [pc, #60]	; (80019c8 <_sbrk+0x50>)
 800198a:	4a10      	ldr	r2, [pc, #64]	; (80019cc <_sbrk+0x54>)
 800198c:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800198e:	4b0e      	ldr	r3, [pc, #56]	; (80019c8 <_sbrk+0x50>)
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001994:	4b0c      	ldr	r3, [pc, #48]	; (80019c8 <_sbrk+0x50>)
 8001996:	681a      	ldr	r2, [r3, #0]
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	4413      	add	r3, r2
 800199c:	466a      	mov	r2, sp
 800199e:	4293      	cmp	r3, r2
 80019a0:	d907      	bls.n	80019b2 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80019a2:	f005 facf 	bl	8006f44 <__errno>
 80019a6:	4602      	mov	r2, r0
 80019a8:	230c      	movs	r3, #12
 80019aa:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80019ac:	f04f 33ff 	mov.w	r3, #4294967295
 80019b0:	e006      	b.n	80019c0 <_sbrk+0x48>
	}

	heap_end += incr;
 80019b2:	4b05      	ldr	r3, [pc, #20]	; (80019c8 <_sbrk+0x50>)
 80019b4:	681a      	ldr	r2, [r3, #0]
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	4413      	add	r3, r2
 80019ba:	4a03      	ldr	r2, [pc, #12]	; (80019c8 <_sbrk+0x50>)
 80019bc:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80019be:	68fb      	ldr	r3, [r7, #12]
}
 80019c0:	4618      	mov	r0, r3
 80019c2:	3710      	adds	r7, #16
 80019c4:	46bd      	mov	sp, r7
 80019c6:	bd80      	pop	{r7, pc}
 80019c8:	2000053c 	.word	0x2000053c
 80019cc:	200016b0 	.word	0x200016b0

080019d0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80019d0:	b480      	push	{r7}
 80019d2:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 80019d4:	4b15      	ldr	r3, [pc, #84]	; (8001a2c <SystemInit+0x5c>)
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	4a14      	ldr	r2, [pc, #80]	; (8001a2c <SystemInit+0x5c>)
 80019da:	f043 0301 	orr.w	r3, r3, #1
 80019de:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 80019e0:	4b12      	ldr	r3, [pc, #72]	; (8001a2c <SystemInit+0x5c>)
 80019e2:	685a      	ldr	r2, [r3, #4]
 80019e4:	4911      	ldr	r1, [pc, #68]	; (8001a2c <SystemInit+0x5c>)
 80019e6:	4b12      	ldr	r3, [pc, #72]	; (8001a30 <SystemInit+0x60>)
 80019e8:	4013      	ands	r3, r2
 80019ea:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 80019ec:	4b0f      	ldr	r3, [pc, #60]	; (8001a2c <SystemInit+0x5c>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	4a0e      	ldr	r2, [pc, #56]	; (8001a2c <SystemInit+0x5c>)
 80019f2:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80019f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80019fa:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80019fc:	4b0b      	ldr	r3, [pc, #44]	; (8001a2c <SystemInit+0x5c>)
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	4a0a      	ldr	r2, [pc, #40]	; (8001a2c <SystemInit+0x5c>)
 8001a02:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a06:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8001a08:	4b08      	ldr	r3, [pc, #32]	; (8001a2c <SystemInit+0x5c>)
 8001a0a:	685b      	ldr	r3, [r3, #4]
 8001a0c:	4a07      	ldr	r2, [pc, #28]	; (8001a2c <SystemInit+0x5c>)
 8001a0e:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8001a12:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8001a14:	4b05      	ldr	r3, [pc, #20]	; (8001a2c <SystemInit+0x5c>)
 8001a16:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8001a1a:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8001a1c:	4b05      	ldr	r3, [pc, #20]	; (8001a34 <SystemInit+0x64>)
 8001a1e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001a22:	609a      	str	r2, [r3, #8]
#endif 
}
 8001a24:	bf00      	nop
 8001a26:	46bd      	mov	sp, r7
 8001a28:	bc80      	pop	{r7}
 8001a2a:	4770      	bx	lr
 8001a2c:	40021000 	.word	0x40021000
 8001a30:	f8ff0000 	.word	0xf8ff0000
 8001a34:	e000ed00 	.word	0xe000ed00

08001a38 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001a38:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8001a3a:	e003      	b.n	8001a44 <LoopCopyDataInit>

08001a3c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001a3c:	4b0b      	ldr	r3, [pc, #44]	; (8001a6c <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8001a3e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001a40:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8001a42:	3104      	adds	r1, #4

08001a44 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001a44:	480a      	ldr	r0, [pc, #40]	; (8001a70 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8001a46:	4b0b      	ldr	r3, [pc, #44]	; (8001a74 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8001a48:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8001a4a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001a4c:	d3f6      	bcc.n	8001a3c <CopyDataInit>
  ldr r2, =_sbss
 8001a4e:	4a0a      	ldr	r2, [pc, #40]	; (8001a78 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8001a50:	e002      	b.n	8001a58 <LoopFillZerobss>

08001a52 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8001a52:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001a54:	f842 3b04 	str.w	r3, [r2], #4

08001a58 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8001a58:	4b08      	ldr	r3, [pc, #32]	; (8001a7c <LoopFillZerobss+0x24>)
  cmp r2, r3
 8001a5a:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001a5c:	d3f9      	bcc.n	8001a52 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001a5e:	f7ff ffb7 	bl	80019d0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001a62:	f005 fa75 	bl	8006f50 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001a66:	f7fe fbbb 	bl	80001e0 <main>
  bx lr
 8001a6a:	4770      	bx	lr
  ldr r3, =_sidata
 8001a6c:	08007a68 	.word	0x08007a68
  ldr r0, =_sdata
 8001a70:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001a74:	20000074 	.word	0x20000074
  ldr r2, =_sbss
 8001a78:	20000074 	.word	0x20000074
  ldr r3, = _ebss
 8001a7c:	200016ac 	.word	0x200016ac

08001a80 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001a80:	e7fe      	b.n	8001a80 <ADC1_2_IRQHandler>
	...

08001a84 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a88:	4b08      	ldr	r3, [pc, #32]	; (8001aac <HAL_Init+0x28>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	4a07      	ldr	r2, [pc, #28]	; (8001aac <HAL_Init+0x28>)
 8001a8e:	f043 0310 	orr.w	r3, r3, #16
 8001a92:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a94:	2003      	movs	r0, #3
 8001a96:	f000 f8f3 	bl	8001c80 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a9a:	2000      	movs	r0, #0
 8001a9c:	f7ff feea 	bl	8001874 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001aa0:	f7ff fe1a 	bl	80016d8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001aa4:	2300      	movs	r3, #0
}
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	bd80      	pop	{r7, pc}
 8001aaa:	bf00      	nop
 8001aac:	40022000 	.word	0x40022000

08001ab0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ab4:	4b05      	ldr	r3, [pc, #20]	; (8001acc <HAL_IncTick+0x1c>)
 8001ab6:	781b      	ldrb	r3, [r3, #0]
 8001ab8:	461a      	mov	r2, r3
 8001aba:	4b05      	ldr	r3, [pc, #20]	; (8001ad0 <HAL_IncTick+0x20>)
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	4413      	add	r3, r2
 8001ac0:	4a03      	ldr	r2, [pc, #12]	; (8001ad0 <HAL_IncTick+0x20>)
 8001ac2:	6013      	str	r3, [r2, #0]
}
 8001ac4:	bf00      	nop
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bc80      	pop	{r7}
 8001aca:	4770      	bx	lr
 8001acc:	20000008 	.word	0x20000008
 8001ad0:	20001664 	.word	0x20001664

08001ad4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ad4:	b480      	push	{r7}
 8001ad6:	af00      	add	r7, sp, #0
  return uwTick;
 8001ad8:	4b02      	ldr	r3, [pc, #8]	; (8001ae4 <HAL_GetTick+0x10>)
 8001ada:	681b      	ldr	r3, [r3, #0]
}
 8001adc:	4618      	mov	r0, r3
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bc80      	pop	{r7}
 8001ae2:	4770      	bx	lr
 8001ae4:	20001664 	.word	0x20001664

08001ae8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b084      	sub	sp, #16
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001af0:	f7ff fff0 	bl	8001ad4 <HAL_GetTick>
 8001af4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b00:	d005      	beq.n	8001b0e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001b02:	4b09      	ldr	r3, [pc, #36]	; (8001b28 <HAL_Delay+0x40>)
 8001b04:	781b      	ldrb	r3, [r3, #0]
 8001b06:	461a      	mov	r2, r3
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	4413      	add	r3, r2
 8001b0c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001b0e:	bf00      	nop
 8001b10:	f7ff ffe0 	bl	8001ad4 <HAL_GetTick>
 8001b14:	4602      	mov	r2, r0
 8001b16:	68bb      	ldr	r3, [r7, #8]
 8001b18:	1ad3      	subs	r3, r2, r3
 8001b1a:	68fa      	ldr	r2, [r7, #12]
 8001b1c:	429a      	cmp	r2, r3
 8001b1e:	d8f7      	bhi.n	8001b10 <HAL_Delay+0x28>
  {
  }
}
 8001b20:	bf00      	nop
 8001b22:	3710      	adds	r7, #16
 8001b24:	46bd      	mov	sp, r7
 8001b26:	bd80      	pop	{r7, pc}
 8001b28:	20000008 	.word	0x20000008

08001b2c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	b085      	sub	sp, #20
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	f003 0307 	and.w	r3, r3, #7
 8001b3a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b3c:	4b0c      	ldr	r3, [pc, #48]	; (8001b70 <__NVIC_SetPriorityGrouping+0x44>)
 8001b3e:	68db      	ldr	r3, [r3, #12]
 8001b40:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b42:	68ba      	ldr	r2, [r7, #8]
 8001b44:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001b48:	4013      	ands	r3, r2
 8001b4a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b50:	68bb      	ldr	r3, [r7, #8]
 8001b52:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b54:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001b58:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b5c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b5e:	4a04      	ldr	r2, [pc, #16]	; (8001b70 <__NVIC_SetPriorityGrouping+0x44>)
 8001b60:	68bb      	ldr	r3, [r7, #8]
 8001b62:	60d3      	str	r3, [r2, #12]
}
 8001b64:	bf00      	nop
 8001b66:	3714      	adds	r7, #20
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	bc80      	pop	{r7}
 8001b6c:	4770      	bx	lr
 8001b6e:	bf00      	nop
 8001b70:	e000ed00 	.word	0xe000ed00

08001b74 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b74:	b480      	push	{r7}
 8001b76:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b78:	4b04      	ldr	r3, [pc, #16]	; (8001b8c <__NVIC_GetPriorityGrouping+0x18>)
 8001b7a:	68db      	ldr	r3, [r3, #12]
 8001b7c:	0a1b      	lsrs	r3, r3, #8
 8001b7e:	f003 0307 	and.w	r3, r3, #7
}
 8001b82:	4618      	mov	r0, r3
 8001b84:	46bd      	mov	sp, r7
 8001b86:	bc80      	pop	{r7}
 8001b88:	4770      	bx	lr
 8001b8a:	bf00      	nop
 8001b8c:	e000ed00 	.word	0xe000ed00

08001b90 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b90:	b480      	push	{r7}
 8001b92:	b083      	sub	sp, #12
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	4603      	mov	r3, r0
 8001b98:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	db0b      	blt.n	8001bba <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ba2:	79fb      	ldrb	r3, [r7, #7]
 8001ba4:	f003 021f 	and.w	r2, r3, #31
 8001ba8:	4906      	ldr	r1, [pc, #24]	; (8001bc4 <__NVIC_EnableIRQ+0x34>)
 8001baa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bae:	095b      	lsrs	r3, r3, #5
 8001bb0:	2001      	movs	r0, #1
 8001bb2:	fa00 f202 	lsl.w	r2, r0, r2
 8001bb6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001bba:	bf00      	nop
 8001bbc:	370c      	adds	r7, #12
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	bc80      	pop	{r7}
 8001bc2:	4770      	bx	lr
 8001bc4:	e000e100 	.word	0xe000e100

08001bc8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001bc8:	b480      	push	{r7}
 8001bca:	b083      	sub	sp, #12
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	4603      	mov	r3, r0
 8001bd0:	6039      	str	r1, [r7, #0]
 8001bd2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bd4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	db0a      	blt.n	8001bf2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	b2da      	uxtb	r2, r3
 8001be0:	490c      	ldr	r1, [pc, #48]	; (8001c14 <__NVIC_SetPriority+0x4c>)
 8001be2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001be6:	0112      	lsls	r2, r2, #4
 8001be8:	b2d2      	uxtb	r2, r2
 8001bea:	440b      	add	r3, r1
 8001bec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001bf0:	e00a      	b.n	8001c08 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bf2:	683b      	ldr	r3, [r7, #0]
 8001bf4:	b2da      	uxtb	r2, r3
 8001bf6:	4908      	ldr	r1, [pc, #32]	; (8001c18 <__NVIC_SetPriority+0x50>)
 8001bf8:	79fb      	ldrb	r3, [r7, #7]
 8001bfa:	f003 030f 	and.w	r3, r3, #15
 8001bfe:	3b04      	subs	r3, #4
 8001c00:	0112      	lsls	r2, r2, #4
 8001c02:	b2d2      	uxtb	r2, r2
 8001c04:	440b      	add	r3, r1
 8001c06:	761a      	strb	r2, [r3, #24]
}
 8001c08:	bf00      	nop
 8001c0a:	370c      	adds	r7, #12
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	bc80      	pop	{r7}
 8001c10:	4770      	bx	lr
 8001c12:	bf00      	nop
 8001c14:	e000e100 	.word	0xe000e100
 8001c18:	e000ed00 	.word	0xe000ed00

08001c1c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	b089      	sub	sp, #36	; 0x24
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	60f8      	str	r0, [r7, #12]
 8001c24:	60b9      	str	r1, [r7, #8]
 8001c26:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	f003 0307 	and.w	r3, r3, #7
 8001c2e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c30:	69fb      	ldr	r3, [r7, #28]
 8001c32:	f1c3 0307 	rsb	r3, r3, #7
 8001c36:	2b04      	cmp	r3, #4
 8001c38:	bf28      	it	cs
 8001c3a:	2304      	movcs	r3, #4
 8001c3c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c3e:	69fb      	ldr	r3, [r7, #28]
 8001c40:	3304      	adds	r3, #4
 8001c42:	2b06      	cmp	r3, #6
 8001c44:	d902      	bls.n	8001c4c <NVIC_EncodePriority+0x30>
 8001c46:	69fb      	ldr	r3, [r7, #28]
 8001c48:	3b03      	subs	r3, #3
 8001c4a:	e000      	b.n	8001c4e <NVIC_EncodePriority+0x32>
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c50:	f04f 32ff 	mov.w	r2, #4294967295
 8001c54:	69bb      	ldr	r3, [r7, #24]
 8001c56:	fa02 f303 	lsl.w	r3, r2, r3
 8001c5a:	43da      	mvns	r2, r3
 8001c5c:	68bb      	ldr	r3, [r7, #8]
 8001c5e:	401a      	ands	r2, r3
 8001c60:	697b      	ldr	r3, [r7, #20]
 8001c62:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c64:	f04f 31ff 	mov.w	r1, #4294967295
 8001c68:	697b      	ldr	r3, [r7, #20]
 8001c6a:	fa01 f303 	lsl.w	r3, r1, r3
 8001c6e:	43d9      	mvns	r1, r3
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c74:	4313      	orrs	r3, r2
         );
}
 8001c76:	4618      	mov	r0, r3
 8001c78:	3724      	adds	r7, #36	; 0x24
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	bc80      	pop	{r7}
 8001c7e:	4770      	bx	lr

08001c80 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b082      	sub	sp, #8
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c88:	6878      	ldr	r0, [r7, #4]
 8001c8a:	f7ff ff4f 	bl	8001b2c <__NVIC_SetPriorityGrouping>
}
 8001c8e:	bf00      	nop
 8001c90:	3708      	adds	r7, #8
 8001c92:	46bd      	mov	sp, r7
 8001c94:	bd80      	pop	{r7, pc}

08001c96 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001c96:	b580      	push	{r7, lr}
 8001c98:	b086      	sub	sp, #24
 8001c9a:	af00      	add	r7, sp, #0
 8001c9c:	4603      	mov	r3, r0
 8001c9e:	60b9      	str	r1, [r7, #8]
 8001ca0:	607a      	str	r2, [r7, #4]
 8001ca2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ca8:	f7ff ff64 	bl	8001b74 <__NVIC_GetPriorityGrouping>
 8001cac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001cae:	687a      	ldr	r2, [r7, #4]
 8001cb0:	68b9      	ldr	r1, [r7, #8]
 8001cb2:	6978      	ldr	r0, [r7, #20]
 8001cb4:	f7ff ffb2 	bl	8001c1c <NVIC_EncodePriority>
 8001cb8:	4602      	mov	r2, r0
 8001cba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001cbe:	4611      	mov	r1, r2
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	f7ff ff81 	bl	8001bc8 <__NVIC_SetPriority>
}
 8001cc6:	bf00      	nop
 8001cc8:	3718      	adds	r7, #24
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	bd80      	pop	{r7, pc}

08001cce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cce:	b580      	push	{r7, lr}
 8001cd0:	b082      	sub	sp, #8
 8001cd2:	af00      	add	r7, sp, #0
 8001cd4:	4603      	mov	r3, r0
 8001cd6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001cd8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cdc:	4618      	mov	r0, r3
 8001cde:	f7ff ff57 	bl	8001b90 <__NVIC_EnableIRQ>
}
 8001ce2:	bf00      	nop
 8001ce4:	3708      	adds	r7, #8
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	bd80      	pop	{r7, pc}
	...

08001cec <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001cec:	b480      	push	{r7}
 8001cee:	b08b      	sub	sp, #44	; 0x2c
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
 8001cf4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001cfe:	e127      	b.n	8001f50 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001d00:	2201      	movs	r2, #1
 8001d02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d04:	fa02 f303 	lsl.w	r3, r2, r3
 8001d08:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001d0a:	683b      	ldr	r3, [r7, #0]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	69fa      	ldr	r2, [r7, #28]
 8001d10:	4013      	ands	r3, r2
 8001d12:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001d14:	69ba      	ldr	r2, [r7, #24]
 8001d16:	69fb      	ldr	r3, [r7, #28]
 8001d18:	429a      	cmp	r2, r3
 8001d1a:	f040 8116 	bne.w	8001f4a <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001d1e:	683b      	ldr	r3, [r7, #0]
 8001d20:	685b      	ldr	r3, [r3, #4]
 8001d22:	2b12      	cmp	r3, #18
 8001d24:	d034      	beq.n	8001d90 <HAL_GPIO_Init+0xa4>
 8001d26:	2b12      	cmp	r3, #18
 8001d28:	d80d      	bhi.n	8001d46 <HAL_GPIO_Init+0x5a>
 8001d2a:	2b02      	cmp	r3, #2
 8001d2c:	d02b      	beq.n	8001d86 <HAL_GPIO_Init+0x9a>
 8001d2e:	2b02      	cmp	r3, #2
 8001d30:	d804      	bhi.n	8001d3c <HAL_GPIO_Init+0x50>
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d031      	beq.n	8001d9a <HAL_GPIO_Init+0xae>
 8001d36:	2b01      	cmp	r3, #1
 8001d38:	d01c      	beq.n	8001d74 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001d3a:	e048      	b.n	8001dce <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001d3c:	2b03      	cmp	r3, #3
 8001d3e:	d043      	beq.n	8001dc8 <HAL_GPIO_Init+0xdc>
 8001d40:	2b11      	cmp	r3, #17
 8001d42:	d01b      	beq.n	8001d7c <HAL_GPIO_Init+0x90>
          break;
 8001d44:	e043      	b.n	8001dce <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001d46:	4a89      	ldr	r2, [pc, #548]	; (8001f6c <HAL_GPIO_Init+0x280>)
 8001d48:	4293      	cmp	r3, r2
 8001d4a:	d026      	beq.n	8001d9a <HAL_GPIO_Init+0xae>
 8001d4c:	4a87      	ldr	r2, [pc, #540]	; (8001f6c <HAL_GPIO_Init+0x280>)
 8001d4e:	4293      	cmp	r3, r2
 8001d50:	d806      	bhi.n	8001d60 <HAL_GPIO_Init+0x74>
 8001d52:	4a87      	ldr	r2, [pc, #540]	; (8001f70 <HAL_GPIO_Init+0x284>)
 8001d54:	4293      	cmp	r3, r2
 8001d56:	d020      	beq.n	8001d9a <HAL_GPIO_Init+0xae>
 8001d58:	4a86      	ldr	r2, [pc, #536]	; (8001f74 <HAL_GPIO_Init+0x288>)
 8001d5a:	4293      	cmp	r3, r2
 8001d5c:	d01d      	beq.n	8001d9a <HAL_GPIO_Init+0xae>
          break;
 8001d5e:	e036      	b.n	8001dce <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001d60:	4a85      	ldr	r2, [pc, #532]	; (8001f78 <HAL_GPIO_Init+0x28c>)
 8001d62:	4293      	cmp	r3, r2
 8001d64:	d019      	beq.n	8001d9a <HAL_GPIO_Init+0xae>
 8001d66:	4a85      	ldr	r2, [pc, #532]	; (8001f7c <HAL_GPIO_Init+0x290>)
 8001d68:	4293      	cmp	r3, r2
 8001d6a:	d016      	beq.n	8001d9a <HAL_GPIO_Init+0xae>
 8001d6c:	4a84      	ldr	r2, [pc, #528]	; (8001f80 <HAL_GPIO_Init+0x294>)
 8001d6e:	4293      	cmp	r3, r2
 8001d70:	d013      	beq.n	8001d9a <HAL_GPIO_Init+0xae>
          break;
 8001d72:	e02c      	b.n	8001dce <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001d74:	683b      	ldr	r3, [r7, #0]
 8001d76:	68db      	ldr	r3, [r3, #12]
 8001d78:	623b      	str	r3, [r7, #32]
          break;
 8001d7a:	e028      	b.n	8001dce <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001d7c:	683b      	ldr	r3, [r7, #0]
 8001d7e:	68db      	ldr	r3, [r3, #12]
 8001d80:	3304      	adds	r3, #4
 8001d82:	623b      	str	r3, [r7, #32]
          break;
 8001d84:	e023      	b.n	8001dce <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001d86:	683b      	ldr	r3, [r7, #0]
 8001d88:	68db      	ldr	r3, [r3, #12]
 8001d8a:	3308      	adds	r3, #8
 8001d8c:	623b      	str	r3, [r7, #32]
          break;
 8001d8e:	e01e      	b.n	8001dce <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001d90:	683b      	ldr	r3, [r7, #0]
 8001d92:	68db      	ldr	r3, [r3, #12]
 8001d94:	330c      	adds	r3, #12
 8001d96:	623b      	str	r3, [r7, #32]
          break;
 8001d98:	e019      	b.n	8001dce <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001d9a:	683b      	ldr	r3, [r7, #0]
 8001d9c:	689b      	ldr	r3, [r3, #8]
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d102      	bne.n	8001da8 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001da2:	2304      	movs	r3, #4
 8001da4:	623b      	str	r3, [r7, #32]
          break;
 8001da6:	e012      	b.n	8001dce <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001da8:	683b      	ldr	r3, [r7, #0]
 8001daa:	689b      	ldr	r3, [r3, #8]
 8001dac:	2b01      	cmp	r3, #1
 8001dae:	d105      	bne.n	8001dbc <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001db0:	2308      	movs	r3, #8
 8001db2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	69fa      	ldr	r2, [r7, #28]
 8001db8:	611a      	str	r2, [r3, #16]
          break;
 8001dba:	e008      	b.n	8001dce <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001dbc:	2308      	movs	r3, #8
 8001dbe:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	69fa      	ldr	r2, [r7, #28]
 8001dc4:	615a      	str	r2, [r3, #20]
          break;
 8001dc6:	e002      	b.n	8001dce <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001dc8:	2300      	movs	r3, #0
 8001dca:	623b      	str	r3, [r7, #32]
          break;
 8001dcc:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001dce:	69bb      	ldr	r3, [r7, #24]
 8001dd0:	2bff      	cmp	r3, #255	; 0xff
 8001dd2:	d801      	bhi.n	8001dd8 <HAL_GPIO_Init+0xec>
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	e001      	b.n	8001ddc <HAL_GPIO_Init+0xf0>
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	3304      	adds	r3, #4
 8001ddc:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001dde:	69bb      	ldr	r3, [r7, #24]
 8001de0:	2bff      	cmp	r3, #255	; 0xff
 8001de2:	d802      	bhi.n	8001dea <HAL_GPIO_Init+0xfe>
 8001de4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001de6:	009b      	lsls	r3, r3, #2
 8001de8:	e002      	b.n	8001df0 <HAL_GPIO_Init+0x104>
 8001dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dec:	3b08      	subs	r3, #8
 8001dee:	009b      	lsls	r3, r3, #2
 8001df0:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001df2:	697b      	ldr	r3, [r7, #20]
 8001df4:	681a      	ldr	r2, [r3, #0]
 8001df6:	210f      	movs	r1, #15
 8001df8:	693b      	ldr	r3, [r7, #16]
 8001dfa:	fa01 f303 	lsl.w	r3, r1, r3
 8001dfe:	43db      	mvns	r3, r3
 8001e00:	401a      	ands	r2, r3
 8001e02:	6a39      	ldr	r1, [r7, #32]
 8001e04:	693b      	ldr	r3, [r7, #16]
 8001e06:	fa01 f303 	lsl.w	r3, r1, r3
 8001e0a:	431a      	orrs	r2, r3
 8001e0c:	697b      	ldr	r3, [r7, #20]
 8001e0e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001e10:	683b      	ldr	r3, [r7, #0]
 8001e12:	685b      	ldr	r3, [r3, #4]
 8001e14:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	f000 8096 	beq.w	8001f4a <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001e1e:	4b59      	ldr	r3, [pc, #356]	; (8001f84 <HAL_GPIO_Init+0x298>)
 8001e20:	699b      	ldr	r3, [r3, #24]
 8001e22:	4a58      	ldr	r2, [pc, #352]	; (8001f84 <HAL_GPIO_Init+0x298>)
 8001e24:	f043 0301 	orr.w	r3, r3, #1
 8001e28:	6193      	str	r3, [r2, #24]
 8001e2a:	4b56      	ldr	r3, [pc, #344]	; (8001f84 <HAL_GPIO_Init+0x298>)
 8001e2c:	699b      	ldr	r3, [r3, #24]
 8001e2e:	f003 0301 	and.w	r3, r3, #1
 8001e32:	60bb      	str	r3, [r7, #8]
 8001e34:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001e36:	4a54      	ldr	r2, [pc, #336]	; (8001f88 <HAL_GPIO_Init+0x29c>)
 8001e38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e3a:	089b      	lsrs	r3, r3, #2
 8001e3c:	3302      	adds	r3, #2
 8001e3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e42:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001e44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e46:	f003 0303 	and.w	r3, r3, #3
 8001e4a:	009b      	lsls	r3, r3, #2
 8001e4c:	220f      	movs	r2, #15
 8001e4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e52:	43db      	mvns	r3, r3
 8001e54:	68fa      	ldr	r2, [r7, #12]
 8001e56:	4013      	ands	r3, r2
 8001e58:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	4a4b      	ldr	r2, [pc, #300]	; (8001f8c <HAL_GPIO_Init+0x2a0>)
 8001e5e:	4293      	cmp	r3, r2
 8001e60:	d013      	beq.n	8001e8a <HAL_GPIO_Init+0x19e>
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	4a4a      	ldr	r2, [pc, #296]	; (8001f90 <HAL_GPIO_Init+0x2a4>)
 8001e66:	4293      	cmp	r3, r2
 8001e68:	d00d      	beq.n	8001e86 <HAL_GPIO_Init+0x19a>
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	4a49      	ldr	r2, [pc, #292]	; (8001f94 <HAL_GPIO_Init+0x2a8>)
 8001e6e:	4293      	cmp	r3, r2
 8001e70:	d007      	beq.n	8001e82 <HAL_GPIO_Init+0x196>
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	4a48      	ldr	r2, [pc, #288]	; (8001f98 <HAL_GPIO_Init+0x2ac>)
 8001e76:	4293      	cmp	r3, r2
 8001e78:	d101      	bne.n	8001e7e <HAL_GPIO_Init+0x192>
 8001e7a:	2303      	movs	r3, #3
 8001e7c:	e006      	b.n	8001e8c <HAL_GPIO_Init+0x1a0>
 8001e7e:	2304      	movs	r3, #4
 8001e80:	e004      	b.n	8001e8c <HAL_GPIO_Init+0x1a0>
 8001e82:	2302      	movs	r3, #2
 8001e84:	e002      	b.n	8001e8c <HAL_GPIO_Init+0x1a0>
 8001e86:	2301      	movs	r3, #1
 8001e88:	e000      	b.n	8001e8c <HAL_GPIO_Init+0x1a0>
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e8e:	f002 0203 	and.w	r2, r2, #3
 8001e92:	0092      	lsls	r2, r2, #2
 8001e94:	4093      	lsls	r3, r2
 8001e96:	68fa      	ldr	r2, [r7, #12]
 8001e98:	4313      	orrs	r3, r2
 8001e9a:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001e9c:	493a      	ldr	r1, [pc, #232]	; (8001f88 <HAL_GPIO_Init+0x29c>)
 8001e9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ea0:	089b      	lsrs	r3, r3, #2
 8001ea2:	3302      	adds	r3, #2
 8001ea4:	68fa      	ldr	r2, [r7, #12]
 8001ea6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001eaa:	683b      	ldr	r3, [r7, #0]
 8001eac:	685b      	ldr	r3, [r3, #4]
 8001eae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d006      	beq.n	8001ec4 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001eb6:	4b39      	ldr	r3, [pc, #228]	; (8001f9c <HAL_GPIO_Init+0x2b0>)
 8001eb8:	681a      	ldr	r2, [r3, #0]
 8001eba:	4938      	ldr	r1, [pc, #224]	; (8001f9c <HAL_GPIO_Init+0x2b0>)
 8001ebc:	69bb      	ldr	r3, [r7, #24]
 8001ebe:	4313      	orrs	r3, r2
 8001ec0:	600b      	str	r3, [r1, #0]
 8001ec2:	e006      	b.n	8001ed2 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001ec4:	4b35      	ldr	r3, [pc, #212]	; (8001f9c <HAL_GPIO_Init+0x2b0>)
 8001ec6:	681a      	ldr	r2, [r3, #0]
 8001ec8:	69bb      	ldr	r3, [r7, #24]
 8001eca:	43db      	mvns	r3, r3
 8001ecc:	4933      	ldr	r1, [pc, #204]	; (8001f9c <HAL_GPIO_Init+0x2b0>)
 8001ece:	4013      	ands	r3, r2
 8001ed0:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001ed2:	683b      	ldr	r3, [r7, #0]
 8001ed4:	685b      	ldr	r3, [r3, #4]
 8001ed6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d006      	beq.n	8001eec <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001ede:	4b2f      	ldr	r3, [pc, #188]	; (8001f9c <HAL_GPIO_Init+0x2b0>)
 8001ee0:	685a      	ldr	r2, [r3, #4]
 8001ee2:	492e      	ldr	r1, [pc, #184]	; (8001f9c <HAL_GPIO_Init+0x2b0>)
 8001ee4:	69bb      	ldr	r3, [r7, #24]
 8001ee6:	4313      	orrs	r3, r2
 8001ee8:	604b      	str	r3, [r1, #4]
 8001eea:	e006      	b.n	8001efa <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001eec:	4b2b      	ldr	r3, [pc, #172]	; (8001f9c <HAL_GPIO_Init+0x2b0>)
 8001eee:	685a      	ldr	r2, [r3, #4]
 8001ef0:	69bb      	ldr	r3, [r7, #24]
 8001ef2:	43db      	mvns	r3, r3
 8001ef4:	4929      	ldr	r1, [pc, #164]	; (8001f9c <HAL_GPIO_Init+0x2b0>)
 8001ef6:	4013      	ands	r3, r2
 8001ef8:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001efa:	683b      	ldr	r3, [r7, #0]
 8001efc:	685b      	ldr	r3, [r3, #4]
 8001efe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d006      	beq.n	8001f14 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001f06:	4b25      	ldr	r3, [pc, #148]	; (8001f9c <HAL_GPIO_Init+0x2b0>)
 8001f08:	689a      	ldr	r2, [r3, #8]
 8001f0a:	4924      	ldr	r1, [pc, #144]	; (8001f9c <HAL_GPIO_Init+0x2b0>)
 8001f0c:	69bb      	ldr	r3, [r7, #24]
 8001f0e:	4313      	orrs	r3, r2
 8001f10:	608b      	str	r3, [r1, #8]
 8001f12:	e006      	b.n	8001f22 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001f14:	4b21      	ldr	r3, [pc, #132]	; (8001f9c <HAL_GPIO_Init+0x2b0>)
 8001f16:	689a      	ldr	r2, [r3, #8]
 8001f18:	69bb      	ldr	r3, [r7, #24]
 8001f1a:	43db      	mvns	r3, r3
 8001f1c:	491f      	ldr	r1, [pc, #124]	; (8001f9c <HAL_GPIO_Init+0x2b0>)
 8001f1e:	4013      	ands	r3, r2
 8001f20:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001f22:	683b      	ldr	r3, [r7, #0]
 8001f24:	685b      	ldr	r3, [r3, #4]
 8001f26:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d006      	beq.n	8001f3c <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001f2e:	4b1b      	ldr	r3, [pc, #108]	; (8001f9c <HAL_GPIO_Init+0x2b0>)
 8001f30:	68da      	ldr	r2, [r3, #12]
 8001f32:	491a      	ldr	r1, [pc, #104]	; (8001f9c <HAL_GPIO_Init+0x2b0>)
 8001f34:	69bb      	ldr	r3, [r7, #24]
 8001f36:	4313      	orrs	r3, r2
 8001f38:	60cb      	str	r3, [r1, #12]
 8001f3a:	e006      	b.n	8001f4a <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001f3c:	4b17      	ldr	r3, [pc, #92]	; (8001f9c <HAL_GPIO_Init+0x2b0>)
 8001f3e:	68da      	ldr	r2, [r3, #12]
 8001f40:	69bb      	ldr	r3, [r7, #24]
 8001f42:	43db      	mvns	r3, r3
 8001f44:	4915      	ldr	r1, [pc, #84]	; (8001f9c <HAL_GPIO_Init+0x2b0>)
 8001f46:	4013      	ands	r3, r2
 8001f48:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001f4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f4c:	3301      	adds	r3, #1
 8001f4e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f50:	683b      	ldr	r3, [r7, #0]
 8001f52:	681a      	ldr	r2, [r3, #0]
 8001f54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f56:	fa22 f303 	lsr.w	r3, r2, r3
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	f47f aed0 	bne.w	8001d00 <HAL_GPIO_Init+0x14>
  }
}
 8001f60:	bf00      	nop
 8001f62:	372c      	adds	r7, #44	; 0x2c
 8001f64:	46bd      	mov	sp, r7
 8001f66:	bc80      	pop	{r7}
 8001f68:	4770      	bx	lr
 8001f6a:	bf00      	nop
 8001f6c:	10210000 	.word	0x10210000
 8001f70:	10110000 	.word	0x10110000
 8001f74:	10120000 	.word	0x10120000
 8001f78:	10310000 	.word	0x10310000
 8001f7c:	10320000 	.word	0x10320000
 8001f80:	10220000 	.word	0x10220000
 8001f84:	40021000 	.word	0x40021000
 8001f88:	40010000 	.word	0x40010000
 8001f8c:	40010800 	.word	0x40010800
 8001f90:	40010c00 	.word	0x40010c00
 8001f94:	40011000 	.word	0x40011000
 8001f98:	40011400 	.word	0x40011400
 8001f9c:	40010400 	.word	0x40010400

08001fa0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	b083      	sub	sp, #12
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
 8001fa8:	460b      	mov	r3, r1
 8001faa:	807b      	strh	r3, [r7, #2]
 8001fac:	4613      	mov	r3, r2
 8001fae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001fb0:	787b      	ldrb	r3, [r7, #1]
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d003      	beq.n	8001fbe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001fb6:	887a      	ldrh	r2, [r7, #2]
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001fbc:	e003      	b.n	8001fc6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001fbe:	887b      	ldrh	r3, [r7, #2]
 8001fc0:	041a      	lsls	r2, r3, #16
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	611a      	str	r2, [r3, #16]
}
 8001fc6:	bf00      	nop
 8001fc8:	370c      	adds	r7, #12
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	bc80      	pop	{r7}
 8001fce:	4770      	bx	lr

08001fd0 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001fd0:	b480      	push	{r7}
 8001fd2:	b083      	sub	sp, #12
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
 8001fd8:	460b      	mov	r3, r1
 8001fda:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	68da      	ldr	r2, [r3, #12]
 8001fe0:	887b      	ldrh	r3, [r7, #2]
 8001fe2:	4013      	ands	r3, r2
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d003      	beq.n	8001ff0 <HAL_GPIO_TogglePin+0x20>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001fe8:	887a      	ldrh	r2, [r7, #2]
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	615a      	str	r2, [r3, #20]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 8001fee:	e002      	b.n	8001ff6 <HAL_GPIO_TogglePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001ff0:	887a      	ldrh	r2, [r7, #2]
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	611a      	str	r2, [r3, #16]
}
 8001ff6:	bf00      	nop
 8001ff8:	370c      	adds	r7, #12
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	bc80      	pop	{r7}
 8001ffe:	4770      	bx	lr

08002000 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	b082      	sub	sp, #8
 8002004:	af00      	add	r7, sp, #0
 8002006:	4603      	mov	r3, r0
 8002008:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800200a:	4b08      	ldr	r3, [pc, #32]	; (800202c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800200c:	695a      	ldr	r2, [r3, #20]
 800200e:	88fb      	ldrh	r3, [r7, #6]
 8002010:	4013      	ands	r3, r2
 8002012:	2b00      	cmp	r3, #0
 8002014:	d006      	beq.n	8002024 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002016:	4a05      	ldr	r2, [pc, #20]	; (800202c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002018:	88fb      	ldrh	r3, [r7, #6]
 800201a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800201c:	88fb      	ldrh	r3, [r7, #6]
 800201e:	4618      	mov	r0, r3
 8002020:	f7fe faae 	bl	8000580 <HAL_GPIO_EXTI_Callback>
  }
}
 8002024:	bf00      	nop
 8002026:	3708      	adds	r7, #8
 8002028:	46bd      	mov	sp, r7
 800202a:	bd80      	pop	{r7, pc}
 800202c:	40010400 	.word	0x40010400

08002030 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	b086      	sub	sp, #24
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	2b00      	cmp	r3, #0
 800203c:	d101      	bne.n	8002042 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800203e:	2301      	movs	r3, #1
 8002040:	e26c      	b.n	800251c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f003 0301 	and.w	r3, r3, #1
 800204a:	2b00      	cmp	r3, #0
 800204c:	f000 8087 	beq.w	800215e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002050:	4b92      	ldr	r3, [pc, #584]	; (800229c <HAL_RCC_OscConfig+0x26c>)
 8002052:	685b      	ldr	r3, [r3, #4]
 8002054:	f003 030c 	and.w	r3, r3, #12
 8002058:	2b04      	cmp	r3, #4
 800205a:	d00c      	beq.n	8002076 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800205c:	4b8f      	ldr	r3, [pc, #572]	; (800229c <HAL_RCC_OscConfig+0x26c>)
 800205e:	685b      	ldr	r3, [r3, #4]
 8002060:	f003 030c 	and.w	r3, r3, #12
 8002064:	2b08      	cmp	r3, #8
 8002066:	d112      	bne.n	800208e <HAL_RCC_OscConfig+0x5e>
 8002068:	4b8c      	ldr	r3, [pc, #560]	; (800229c <HAL_RCC_OscConfig+0x26c>)
 800206a:	685b      	ldr	r3, [r3, #4]
 800206c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002070:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002074:	d10b      	bne.n	800208e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002076:	4b89      	ldr	r3, [pc, #548]	; (800229c <HAL_RCC_OscConfig+0x26c>)
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800207e:	2b00      	cmp	r3, #0
 8002080:	d06c      	beq.n	800215c <HAL_RCC_OscConfig+0x12c>
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	685b      	ldr	r3, [r3, #4]
 8002086:	2b00      	cmp	r3, #0
 8002088:	d168      	bne.n	800215c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800208a:	2301      	movs	r3, #1
 800208c:	e246      	b.n	800251c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	685b      	ldr	r3, [r3, #4]
 8002092:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002096:	d106      	bne.n	80020a6 <HAL_RCC_OscConfig+0x76>
 8002098:	4b80      	ldr	r3, [pc, #512]	; (800229c <HAL_RCC_OscConfig+0x26c>)
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	4a7f      	ldr	r2, [pc, #508]	; (800229c <HAL_RCC_OscConfig+0x26c>)
 800209e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020a2:	6013      	str	r3, [r2, #0]
 80020a4:	e02e      	b.n	8002104 <HAL_RCC_OscConfig+0xd4>
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	685b      	ldr	r3, [r3, #4]
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d10c      	bne.n	80020c8 <HAL_RCC_OscConfig+0x98>
 80020ae:	4b7b      	ldr	r3, [pc, #492]	; (800229c <HAL_RCC_OscConfig+0x26c>)
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	4a7a      	ldr	r2, [pc, #488]	; (800229c <HAL_RCC_OscConfig+0x26c>)
 80020b4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80020b8:	6013      	str	r3, [r2, #0]
 80020ba:	4b78      	ldr	r3, [pc, #480]	; (800229c <HAL_RCC_OscConfig+0x26c>)
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	4a77      	ldr	r2, [pc, #476]	; (800229c <HAL_RCC_OscConfig+0x26c>)
 80020c0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80020c4:	6013      	str	r3, [r2, #0]
 80020c6:	e01d      	b.n	8002104 <HAL_RCC_OscConfig+0xd4>
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	685b      	ldr	r3, [r3, #4]
 80020cc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80020d0:	d10c      	bne.n	80020ec <HAL_RCC_OscConfig+0xbc>
 80020d2:	4b72      	ldr	r3, [pc, #456]	; (800229c <HAL_RCC_OscConfig+0x26c>)
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	4a71      	ldr	r2, [pc, #452]	; (800229c <HAL_RCC_OscConfig+0x26c>)
 80020d8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80020dc:	6013      	str	r3, [r2, #0]
 80020de:	4b6f      	ldr	r3, [pc, #444]	; (800229c <HAL_RCC_OscConfig+0x26c>)
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	4a6e      	ldr	r2, [pc, #440]	; (800229c <HAL_RCC_OscConfig+0x26c>)
 80020e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020e8:	6013      	str	r3, [r2, #0]
 80020ea:	e00b      	b.n	8002104 <HAL_RCC_OscConfig+0xd4>
 80020ec:	4b6b      	ldr	r3, [pc, #428]	; (800229c <HAL_RCC_OscConfig+0x26c>)
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	4a6a      	ldr	r2, [pc, #424]	; (800229c <HAL_RCC_OscConfig+0x26c>)
 80020f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80020f6:	6013      	str	r3, [r2, #0]
 80020f8:	4b68      	ldr	r3, [pc, #416]	; (800229c <HAL_RCC_OscConfig+0x26c>)
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	4a67      	ldr	r2, [pc, #412]	; (800229c <HAL_RCC_OscConfig+0x26c>)
 80020fe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002102:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	685b      	ldr	r3, [r3, #4]
 8002108:	2b00      	cmp	r3, #0
 800210a:	d013      	beq.n	8002134 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800210c:	f7ff fce2 	bl	8001ad4 <HAL_GetTick>
 8002110:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002112:	e008      	b.n	8002126 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002114:	f7ff fcde 	bl	8001ad4 <HAL_GetTick>
 8002118:	4602      	mov	r2, r0
 800211a:	693b      	ldr	r3, [r7, #16]
 800211c:	1ad3      	subs	r3, r2, r3
 800211e:	2b64      	cmp	r3, #100	; 0x64
 8002120:	d901      	bls.n	8002126 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002122:	2303      	movs	r3, #3
 8002124:	e1fa      	b.n	800251c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002126:	4b5d      	ldr	r3, [pc, #372]	; (800229c <HAL_RCC_OscConfig+0x26c>)
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800212e:	2b00      	cmp	r3, #0
 8002130:	d0f0      	beq.n	8002114 <HAL_RCC_OscConfig+0xe4>
 8002132:	e014      	b.n	800215e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002134:	f7ff fcce 	bl	8001ad4 <HAL_GetTick>
 8002138:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800213a:	e008      	b.n	800214e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800213c:	f7ff fcca 	bl	8001ad4 <HAL_GetTick>
 8002140:	4602      	mov	r2, r0
 8002142:	693b      	ldr	r3, [r7, #16]
 8002144:	1ad3      	subs	r3, r2, r3
 8002146:	2b64      	cmp	r3, #100	; 0x64
 8002148:	d901      	bls.n	800214e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800214a:	2303      	movs	r3, #3
 800214c:	e1e6      	b.n	800251c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800214e:	4b53      	ldr	r3, [pc, #332]	; (800229c <HAL_RCC_OscConfig+0x26c>)
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002156:	2b00      	cmp	r3, #0
 8002158:	d1f0      	bne.n	800213c <HAL_RCC_OscConfig+0x10c>
 800215a:	e000      	b.n	800215e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800215c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f003 0302 	and.w	r3, r3, #2
 8002166:	2b00      	cmp	r3, #0
 8002168:	d063      	beq.n	8002232 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800216a:	4b4c      	ldr	r3, [pc, #304]	; (800229c <HAL_RCC_OscConfig+0x26c>)
 800216c:	685b      	ldr	r3, [r3, #4]
 800216e:	f003 030c 	and.w	r3, r3, #12
 8002172:	2b00      	cmp	r3, #0
 8002174:	d00b      	beq.n	800218e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002176:	4b49      	ldr	r3, [pc, #292]	; (800229c <HAL_RCC_OscConfig+0x26c>)
 8002178:	685b      	ldr	r3, [r3, #4]
 800217a:	f003 030c 	and.w	r3, r3, #12
 800217e:	2b08      	cmp	r3, #8
 8002180:	d11c      	bne.n	80021bc <HAL_RCC_OscConfig+0x18c>
 8002182:	4b46      	ldr	r3, [pc, #280]	; (800229c <HAL_RCC_OscConfig+0x26c>)
 8002184:	685b      	ldr	r3, [r3, #4]
 8002186:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800218a:	2b00      	cmp	r3, #0
 800218c:	d116      	bne.n	80021bc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800218e:	4b43      	ldr	r3, [pc, #268]	; (800229c <HAL_RCC_OscConfig+0x26c>)
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f003 0302 	and.w	r3, r3, #2
 8002196:	2b00      	cmp	r3, #0
 8002198:	d005      	beq.n	80021a6 <HAL_RCC_OscConfig+0x176>
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	691b      	ldr	r3, [r3, #16]
 800219e:	2b01      	cmp	r3, #1
 80021a0:	d001      	beq.n	80021a6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80021a2:	2301      	movs	r3, #1
 80021a4:	e1ba      	b.n	800251c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021a6:	4b3d      	ldr	r3, [pc, #244]	; (800229c <HAL_RCC_OscConfig+0x26c>)
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	695b      	ldr	r3, [r3, #20]
 80021b2:	00db      	lsls	r3, r3, #3
 80021b4:	4939      	ldr	r1, [pc, #228]	; (800229c <HAL_RCC_OscConfig+0x26c>)
 80021b6:	4313      	orrs	r3, r2
 80021b8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80021ba:	e03a      	b.n	8002232 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	691b      	ldr	r3, [r3, #16]
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d020      	beq.n	8002206 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80021c4:	4b36      	ldr	r3, [pc, #216]	; (80022a0 <HAL_RCC_OscConfig+0x270>)
 80021c6:	2201      	movs	r2, #1
 80021c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021ca:	f7ff fc83 	bl	8001ad4 <HAL_GetTick>
 80021ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021d0:	e008      	b.n	80021e4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80021d2:	f7ff fc7f 	bl	8001ad4 <HAL_GetTick>
 80021d6:	4602      	mov	r2, r0
 80021d8:	693b      	ldr	r3, [r7, #16]
 80021da:	1ad3      	subs	r3, r2, r3
 80021dc:	2b02      	cmp	r3, #2
 80021de:	d901      	bls.n	80021e4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80021e0:	2303      	movs	r3, #3
 80021e2:	e19b      	b.n	800251c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021e4:	4b2d      	ldr	r3, [pc, #180]	; (800229c <HAL_RCC_OscConfig+0x26c>)
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f003 0302 	and.w	r3, r3, #2
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d0f0      	beq.n	80021d2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021f0:	4b2a      	ldr	r3, [pc, #168]	; (800229c <HAL_RCC_OscConfig+0x26c>)
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	695b      	ldr	r3, [r3, #20]
 80021fc:	00db      	lsls	r3, r3, #3
 80021fe:	4927      	ldr	r1, [pc, #156]	; (800229c <HAL_RCC_OscConfig+0x26c>)
 8002200:	4313      	orrs	r3, r2
 8002202:	600b      	str	r3, [r1, #0]
 8002204:	e015      	b.n	8002232 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002206:	4b26      	ldr	r3, [pc, #152]	; (80022a0 <HAL_RCC_OscConfig+0x270>)
 8002208:	2200      	movs	r2, #0
 800220a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800220c:	f7ff fc62 	bl	8001ad4 <HAL_GetTick>
 8002210:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002212:	e008      	b.n	8002226 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002214:	f7ff fc5e 	bl	8001ad4 <HAL_GetTick>
 8002218:	4602      	mov	r2, r0
 800221a:	693b      	ldr	r3, [r7, #16]
 800221c:	1ad3      	subs	r3, r2, r3
 800221e:	2b02      	cmp	r3, #2
 8002220:	d901      	bls.n	8002226 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002222:	2303      	movs	r3, #3
 8002224:	e17a      	b.n	800251c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002226:	4b1d      	ldr	r3, [pc, #116]	; (800229c <HAL_RCC_OscConfig+0x26c>)
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f003 0302 	and.w	r3, r3, #2
 800222e:	2b00      	cmp	r3, #0
 8002230:	d1f0      	bne.n	8002214 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f003 0308 	and.w	r3, r3, #8
 800223a:	2b00      	cmp	r3, #0
 800223c:	d03a      	beq.n	80022b4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	699b      	ldr	r3, [r3, #24]
 8002242:	2b00      	cmp	r3, #0
 8002244:	d019      	beq.n	800227a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002246:	4b17      	ldr	r3, [pc, #92]	; (80022a4 <HAL_RCC_OscConfig+0x274>)
 8002248:	2201      	movs	r2, #1
 800224a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800224c:	f7ff fc42 	bl	8001ad4 <HAL_GetTick>
 8002250:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002252:	e008      	b.n	8002266 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002254:	f7ff fc3e 	bl	8001ad4 <HAL_GetTick>
 8002258:	4602      	mov	r2, r0
 800225a:	693b      	ldr	r3, [r7, #16]
 800225c:	1ad3      	subs	r3, r2, r3
 800225e:	2b02      	cmp	r3, #2
 8002260:	d901      	bls.n	8002266 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002262:	2303      	movs	r3, #3
 8002264:	e15a      	b.n	800251c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002266:	4b0d      	ldr	r3, [pc, #52]	; (800229c <HAL_RCC_OscConfig+0x26c>)
 8002268:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800226a:	f003 0302 	and.w	r3, r3, #2
 800226e:	2b00      	cmp	r3, #0
 8002270:	d0f0      	beq.n	8002254 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002272:	2001      	movs	r0, #1
 8002274:	f000 fb0a 	bl	800288c <RCC_Delay>
 8002278:	e01c      	b.n	80022b4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800227a:	4b0a      	ldr	r3, [pc, #40]	; (80022a4 <HAL_RCC_OscConfig+0x274>)
 800227c:	2200      	movs	r2, #0
 800227e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002280:	f7ff fc28 	bl	8001ad4 <HAL_GetTick>
 8002284:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002286:	e00f      	b.n	80022a8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002288:	f7ff fc24 	bl	8001ad4 <HAL_GetTick>
 800228c:	4602      	mov	r2, r0
 800228e:	693b      	ldr	r3, [r7, #16]
 8002290:	1ad3      	subs	r3, r2, r3
 8002292:	2b02      	cmp	r3, #2
 8002294:	d908      	bls.n	80022a8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002296:	2303      	movs	r3, #3
 8002298:	e140      	b.n	800251c <HAL_RCC_OscConfig+0x4ec>
 800229a:	bf00      	nop
 800229c:	40021000 	.word	0x40021000
 80022a0:	42420000 	.word	0x42420000
 80022a4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022a8:	4b9e      	ldr	r3, [pc, #632]	; (8002524 <HAL_RCC_OscConfig+0x4f4>)
 80022aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022ac:	f003 0302 	and.w	r3, r3, #2
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d1e9      	bne.n	8002288 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f003 0304 	and.w	r3, r3, #4
 80022bc:	2b00      	cmp	r3, #0
 80022be:	f000 80a6 	beq.w	800240e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80022c2:	2300      	movs	r3, #0
 80022c4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80022c6:	4b97      	ldr	r3, [pc, #604]	; (8002524 <HAL_RCC_OscConfig+0x4f4>)
 80022c8:	69db      	ldr	r3, [r3, #28]
 80022ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d10d      	bne.n	80022ee <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80022d2:	4b94      	ldr	r3, [pc, #592]	; (8002524 <HAL_RCC_OscConfig+0x4f4>)
 80022d4:	69db      	ldr	r3, [r3, #28]
 80022d6:	4a93      	ldr	r2, [pc, #588]	; (8002524 <HAL_RCC_OscConfig+0x4f4>)
 80022d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022dc:	61d3      	str	r3, [r2, #28]
 80022de:	4b91      	ldr	r3, [pc, #580]	; (8002524 <HAL_RCC_OscConfig+0x4f4>)
 80022e0:	69db      	ldr	r3, [r3, #28]
 80022e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022e6:	60bb      	str	r3, [r7, #8]
 80022e8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80022ea:	2301      	movs	r3, #1
 80022ec:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022ee:	4b8e      	ldr	r3, [pc, #568]	; (8002528 <HAL_RCC_OscConfig+0x4f8>)
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d118      	bne.n	800232c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80022fa:	4b8b      	ldr	r3, [pc, #556]	; (8002528 <HAL_RCC_OscConfig+0x4f8>)
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	4a8a      	ldr	r2, [pc, #552]	; (8002528 <HAL_RCC_OscConfig+0x4f8>)
 8002300:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002304:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002306:	f7ff fbe5 	bl	8001ad4 <HAL_GetTick>
 800230a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800230c:	e008      	b.n	8002320 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800230e:	f7ff fbe1 	bl	8001ad4 <HAL_GetTick>
 8002312:	4602      	mov	r2, r0
 8002314:	693b      	ldr	r3, [r7, #16]
 8002316:	1ad3      	subs	r3, r2, r3
 8002318:	2b64      	cmp	r3, #100	; 0x64
 800231a:	d901      	bls.n	8002320 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800231c:	2303      	movs	r3, #3
 800231e:	e0fd      	b.n	800251c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002320:	4b81      	ldr	r3, [pc, #516]	; (8002528 <HAL_RCC_OscConfig+0x4f8>)
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002328:	2b00      	cmp	r3, #0
 800232a:	d0f0      	beq.n	800230e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	68db      	ldr	r3, [r3, #12]
 8002330:	2b01      	cmp	r3, #1
 8002332:	d106      	bne.n	8002342 <HAL_RCC_OscConfig+0x312>
 8002334:	4b7b      	ldr	r3, [pc, #492]	; (8002524 <HAL_RCC_OscConfig+0x4f4>)
 8002336:	6a1b      	ldr	r3, [r3, #32]
 8002338:	4a7a      	ldr	r2, [pc, #488]	; (8002524 <HAL_RCC_OscConfig+0x4f4>)
 800233a:	f043 0301 	orr.w	r3, r3, #1
 800233e:	6213      	str	r3, [r2, #32]
 8002340:	e02d      	b.n	800239e <HAL_RCC_OscConfig+0x36e>
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	68db      	ldr	r3, [r3, #12]
 8002346:	2b00      	cmp	r3, #0
 8002348:	d10c      	bne.n	8002364 <HAL_RCC_OscConfig+0x334>
 800234a:	4b76      	ldr	r3, [pc, #472]	; (8002524 <HAL_RCC_OscConfig+0x4f4>)
 800234c:	6a1b      	ldr	r3, [r3, #32]
 800234e:	4a75      	ldr	r2, [pc, #468]	; (8002524 <HAL_RCC_OscConfig+0x4f4>)
 8002350:	f023 0301 	bic.w	r3, r3, #1
 8002354:	6213      	str	r3, [r2, #32]
 8002356:	4b73      	ldr	r3, [pc, #460]	; (8002524 <HAL_RCC_OscConfig+0x4f4>)
 8002358:	6a1b      	ldr	r3, [r3, #32]
 800235a:	4a72      	ldr	r2, [pc, #456]	; (8002524 <HAL_RCC_OscConfig+0x4f4>)
 800235c:	f023 0304 	bic.w	r3, r3, #4
 8002360:	6213      	str	r3, [r2, #32]
 8002362:	e01c      	b.n	800239e <HAL_RCC_OscConfig+0x36e>
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	68db      	ldr	r3, [r3, #12]
 8002368:	2b05      	cmp	r3, #5
 800236a:	d10c      	bne.n	8002386 <HAL_RCC_OscConfig+0x356>
 800236c:	4b6d      	ldr	r3, [pc, #436]	; (8002524 <HAL_RCC_OscConfig+0x4f4>)
 800236e:	6a1b      	ldr	r3, [r3, #32]
 8002370:	4a6c      	ldr	r2, [pc, #432]	; (8002524 <HAL_RCC_OscConfig+0x4f4>)
 8002372:	f043 0304 	orr.w	r3, r3, #4
 8002376:	6213      	str	r3, [r2, #32]
 8002378:	4b6a      	ldr	r3, [pc, #424]	; (8002524 <HAL_RCC_OscConfig+0x4f4>)
 800237a:	6a1b      	ldr	r3, [r3, #32]
 800237c:	4a69      	ldr	r2, [pc, #420]	; (8002524 <HAL_RCC_OscConfig+0x4f4>)
 800237e:	f043 0301 	orr.w	r3, r3, #1
 8002382:	6213      	str	r3, [r2, #32]
 8002384:	e00b      	b.n	800239e <HAL_RCC_OscConfig+0x36e>
 8002386:	4b67      	ldr	r3, [pc, #412]	; (8002524 <HAL_RCC_OscConfig+0x4f4>)
 8002388:	6a1b      	ldr	r3, [r3, #32]
 800238a:	4a66      	ldr	r2, [pc, #408]	; (8002524 <HAL_RCC_OscConfig+0x4f4>)
 800238c:	f023 0301 	bic.w	r3, r3, #1
 8002390:	6213      	str	r3, [r2, #32]
 8002392:	4b64      	ldr	r3, [pc, #400]	; (8002524 <HAL_RCC_OscConfig+0x4f4>)
 8002394:	6a1b      	ldr	r3, [r3, #32]
 8002396:	4a63      	ldr	r2, [pc, #396]	; (8002524 <HAL_RCC_OscConfig+0x4f4>)
 8002398:	f023 0304 	bic.w	r3, r3, #4
 800239c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	68db      	ldr	r3, [r3, #12]
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d015      	beq.n	80023d2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023a6:	f7ff fb95 	bl	8001ad4 <HAL_GetTick>
 80023aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023ac:	e00a      	b.n	80023c4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023ae:	f7ff fb91 	bl	8001ad4 <HAL_GetTick>
 80023b2:	4602      	mov	r2, r0
 80023b4:	693b      	ldr	r3, [r7, #16]
 80023b6:	1ad3      	subs	r3, r2, r3
 80023b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80023bc:	4293      	cmp	r3, r2
 80023be:	d901      	bls.n	80023c4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80023c0:	2303      	movs	r3, #3
 80023c2:	e0ab      	b.n	800251c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023c4:	4b57      	ldr	r3, [pc, #348]	; (8002524 <HAL_RCC_OscConfig+0x4f4>)
 80023c6:	6a1b      	ldr	r3, [r3, #32]
 80023c8:	f003 0302 	and.w	r3, r3, #2
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d0ee      	beq.n	80023ae <HAL_RCC_OscConfig+0x37e>
 80023d0:	e014      	b.n	80023fc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023d2:	f7ff fb7f 	bl	8001ad4 <HAL_GetTick>
 80023d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80023d8:	e00a      	b.n	80023f0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023da:	f7ff fb7b 	bl	8001ad4 <HAL_GetTick>
 80023de:	4602      	mov	r2, r0
 80023e0:	693b      	ldr	r3, [r7, #16]
 80023e2:	1ad3      	subs	r3, r2, r3
 80023e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80023e8:	4293      	cmp	r3, r2
 80023ea:	d901      	bls.n	80023f0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80023ec:	2303      	movs	r3, #3
 80023ee:	e095      	b.n	800251c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80023f0:	4b4c      	ldr	r3, [pc, #304]	; (8002524 <HAL_RCC_OscConfig+0x4f4>)
 80023f2:	6a1b      	ldr	r3, [r3, #32]
 80023f4:	f003 0302 	and.w	r3, r3, #2
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d1ee      	bne.n	80023da <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80023fc:	7dfb      	ldrb	r3, [r7, #23]
 80023fe:	2b01      	cmp	r3, #1
 8002400:	d105      	bne.n	800240e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002402:	4b48      	ldr	r3, [pc, #288]	; (8002524 <HAL_RCC_OscConfig+0x4f4>)
 8002404:	69db      	ldr	r3, [r3, #28]
 8002406:	4a47      	ldr	r2, [pc, #284]	; (8002524 <HAL_RCC_OscConfig+0x4f4>)
 8002408:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800240c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	69db      	ldr	r3, [r3, #28]
 8002412:	2b00      	cmp	r3, #0
 8002414:	f000 8081 	beq.w	800251a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002418:	4b42      	ldr	r3, [pc, #264]	; (8002524 <HAL_RCC_OscConfig+0x4f4>)
 800241a:	685b      	ldr	r3, [r3, #4]
 800241c:	f003 030c 	and.w	r3, r3, #12
 8002420:	2b08      	cmp	r3, #8
 8002422:	d061      	beq.n	80024e8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	69db      	ldr	r3, [r3, #28]
 8002428:	2b02      	cmp	r3, #2
 800242a:	d146      	bne.n	80024ba <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800242c:	4b3f      	ldr	r3, [pc, #252]	; (800252c <HAL_RCC_OscConfig+0x4fc>)
 800242e:	2200      	movs	r2, #0
 8002430:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002432:	f7ff fb4f 	bl	8001ad4 <HAL_GetTick>
 8002436:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002438:	e008      	b.n	800244c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800243a:	f7ff fb4b 	bl	8001ad4 <HAL_GetTick>
 800243e:	4602      	mov	r2, r0
 8002440:	693b      	ldr	r3, [r7, #16]
 8002442:	1ad3      	subs	r3, r2, r3
 8002444:	2b02      	cmp	r3, #2
 8002446:	d901      	bls.n	800244c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002448:	2303      	movs	r3, #3
 800244a:	e067      	b.n	800251c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800244c:	4b35      	ldr	r3, [pc, #212]	; (8002524 <HAL_RCC_OscConfig+0x4f4>)
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002454:	2b00      	cmp	r3, #0
 8002456:	d1f0      	bne.n	800243a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	6a1b      	ldr	r3, [r3, #32]
 800245c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002460:	d108      	bne.n	8002474 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002462:	4b30      	ldr	r3, [pc, #192]	; (8002524 <HAL_RCC_OscConfig+0x4f4>)
 8002464:	685b      	ldr	r3, [r3, #4]
 8002466:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	689b      	ldr	r3, [r3, #8]
 800246e:	492d      	ldr	r1, [pc, #180]	; (8002524 <HAL_RCC_OscConfig+0x4f4>)
 8002470:	4313      	orrs	r3, r2
 8002472:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002474:	4b2b      	ldr	r3, [pc, #172]	; (8002524 <HAL_RCC_OscConfig+0x4f4>)
 8002476:	685b      	ldr	r3, [r3, #4]
 8002478:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	6a19      	ldr	r1, [r3, #32]
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002484:	430b      	orrs	r3, r1
 8002486:	4927      	ldr	r1, [pc, #156]	; (8002524 <HAL_RCC_OscConfig+0x4f4>)
 8002488:	4313      	orrs	r3, r2
 800248a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800248c:	4b27      	ldr	r3, [pc, #156]	; (800252c <HAL_RCC_OscConfig+0x4fc>)
 800248e:	2201      	movs	r2, #1
 8002490:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002492:	f7ff fb1f 	bl	8001ad4 <HAL_GetTick>
 8002496:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002498:	e008      	b.n	80024ac <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800249a:	f7ff fb1b 	bl	8001ad4 <HAL_GetTick>
 800249e:	4602      	mov	r2, r0
 80024a0:	693b      	ldr	r3, [r7, #16]
 80024a2:	1ad3      	subs	r3, r2, r3
 80024a4:	2b02      	cmp	r3, #2
 80024a6:	d901      	bls.n	80024ac <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80024a8:	2303      	movs	r3, #3
 80024aa:	e037      	b.n	800251c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80024ac:	4b1d      	ldr	r3, [pc, #116]	; (8002524 <HAL_RCC_OscConfig+0x4f4>)
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d0f0      	beq.n	800249a <HAL_RCC_OscConfig+0x46a>
 80024b8:	e02f      	b.n	800251a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024ba:	4b1c      	ldr	r3, [pc, #112]	; (800252c <HAL_RCC_OscConfig+0x4fc>)
 80024bc:	2200      	movs	r2, #0
 80024be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024c0:	f7ff fb08 	bl	8001ad4 <HAL_GetTick>
 80024c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024c6:	e008      	b.n	80024da <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024c8:	f7ff fb04 	bl	8001ad4 <HAL_GetTick>
 80024cc:	4602      	mov	r2, r0
 80024ce:	693b      	ldr	r3, [r7, #16]
 80024d0:	1ad3      	subs	r3, r2, r3
 80024d2:	2b02      	cmp	r3, #2
 80024d4:	d901      	bls.n	80024da <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80024d6:	2303      	movs	r3, #3
 80024d8:	e020      	b.n	800251c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024da:	4b12      	ldr	r3, [pc, #72]	; (8002524 <HAL_RCC_OscConfig+0x4f4>)
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d1f0      	bne.n	80024c8 <HAL_RCC_OscConfig+0x498>
 80024e6:	e018      	b.n	800251a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	69db      	ldr	r3, [r3, #28]
 80024ec:	2b01      	cmp	r3, #1
 80024ee:	d101      	bne.n	80024f4 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80024f0:	2301      	movs	r3, #1
 80024f2:	e013      	b.n	800251c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80024f4:	4b0b      	ldr	r3, [pc, #44]	; (8002524 <HAL_RCC_OscConfig+0x4f4>)
 80024f6:	685b      	ldr	r3, [r3, #4]
 80024f8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	6a1b      	ldr	r3, [r3, #32]
 8002504:	429a      	cmp	r2, r3
 8002506:	d106      	bne.n	8002516 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002512:	429a      	cmp	r2, r3
 8002514:	d001      	beq.n	800251a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002516:	2301      	movs	r3, #1
 8002518:	e000      	b.n	800251c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800251a:	2300      	movs	r3, #0
}
 800251c:	4618      	mov	r0, r3
 800251e:	3718      	adds	r7, #24
 8002520:	46bd      	mov	sp, r7
 8002522:	bd80      	pop	{r7, pc}
 8002524:	40021000 	.word	0x40021000
 8002528:	40007000 	.word	0x40007000
 800252c:	42420060 	.word	0x42420060

08002530 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	b084      	sub	sp, #16
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
 8002538:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	2b00      	cmp	r3, #0
 800253e:	d101      	bne.n	8002544 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002540:	2301      	movs	r3, #1
 8002542:	e0d0      	b.n	80026e6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002544:	4b6a      	ldr	r3, [pc, #424]	; (80026f0 <HAL_RCC_ClockConfig+0x1c0>)
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f003 0307 	and.w	r3, r3, #7
 800254c:	683a      	ldr	r2, [r7, #0]
 800254e:	429a      	cmp	r2, r3
 8002550:	d910      	bls.n	8002574 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002552:	4b67      	ldr	r3, [pc, #412]	; (80026f0 <HAL_RCC_ClockConfig+0x1c0>)
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f023 0207 	bic.w	r2, r3, #7
 800255a:	4965      	ldr	r1, [pc, #404]	; (80026f0 <HAL_RCC_ClockConfig+0x1c0>)
 800255c:	683b      	ldr	r3, [r7, #0]
 800255e:	4313      	orrs	r3, r2
 8002560:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002562:	4b63      	ldr	r3, [pc, #396]	; (80026f0 <HAL_RCC_ClockConfig+0x1c0>)
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f003 0307 	and.w	r3, r3, #7
 800256a:	683a      	ldr	r2, [r7, #0]
 800256c:	429a      	cmp	r2, r3
 800256e:	d001      	beq.n	8002574 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002570:	2301      	movs	r3, #1
 8002572:	e0b8      	b.n	80026e6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f003 0302 	and.w	r3, r3, #2
 800257c:	2b00      	cmp	r3, #0
 800257e:	d020      	beq.n	80025c2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f003 0304 	and.w	r3, r3, #4
 8002588:	2b00      	cmp	r3, #0
 800258a:	d005      	beq.n	8002598 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800258c:	4b59      	ldr	r3, [pc, #356]	; (80026f4 <HAL_RCC_ClockConfig+0x1c4>)
 800258e:	685b      	ldr	r3, [r3, #4]
 8002590:	4a58      	ldr	r2, [pc, #352]	; (80026f4 <HAL_RCC_ClockConfig+0x1c4>)
 8002592:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002596:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f003 0308 	and.w	r3, r3, #8
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d005      	beq.n	80025b0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80025a4:	4b53      	ldr	r3, [pc, #332]	; (80026f4 <HAL_RCC_ClockConfig+0x1c4>)
 80025a6:	685b      	ldr	r3, [r3, #4]
 80025a8:	4a52      	ldr	r2, [pc, #328]	; (80026f4 <HAL_RCC_ClockConfig+0x1c4>)
 80025aa:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80025ae:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80025b0:	4b50      	ldr	r3, [pc, #320]	; (80026f4 <HAL_RCC_ClockConfig+0x1c4>)
 80025b2:	685b      	ldr	r3, [r3, #4]
 80025b4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	689b      	ldr	r3, [r3, #8]
 80025bc:	494d      	ldr	r1, [pc, #308]	; (80026f4 <HAL_RCC_ClockConfig+0x1c4>)
 80025be:	4313      	orrs	r3, r2
 80025c0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f003 0301 	and.w	r3, r3, #1
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d040      	beq.n	8002650 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	685b      	ldr	r3, [r3, #4]
 80025d2:	2b01      	cmp	r3, #1
 80025d4:	d107      	bne.n	80025e6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025d6:	4b47      	ldr	r3, [pc, #284]	; (80026f4 <HAL_RCC_ClockConfig+0x1c4>)
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d115      	bne.n	800260e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025e2:	2301      	movs	r3, #1
 80025e4:	e07f      	b.n	80026e6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	685b      	ldr	r3, [r3, #4]
 80025ea:	2b02      	cmp	r3, #2
 80025ec:	d107      	bne.n	80025fe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025ee:	4b41      	ldr	r3, [pc, #260]	; (80026f4 <HAL_RCC_ClockConfig+0x1c4>)
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d109      	bne.n	800260e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025fa:	2301      	movs	r3, #1
 80025fc:	e073      	b.n	80026e6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025fe:	4b3d      	ldr	r3, [pc, #244]	; (80026f4 <HAL_RCC_ClockConfig+0x1c4>)
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f003 0302 	and.w	r3, r3, #2
 8002606:	2b00      	cmp	r3, #0
 8002608:	d101      	bne.n	800260e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800260a:	2301      	movs	r3, #1
 800260c:	e06b      	b.n	80026e6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800260e:	4b39      	ldr	r3, [pc, #228]	; (80026f4 <HAL_RCC_ClockConfig+0x1c4>)
 8002610:	685b      	ldr	r3, [r3, #4]
 8002612:	f023 0203 	bic.w	r2, r3, #3
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	685b      	ldr	r3, [r3, #4]
 800261a:	4936      	ldr	r1, [pc, #216]	; (80026f4 <HAL_RCC_ClockConfig+0x1c4>)
 800261c:	4313      	orrs	r3, r2
 800261e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002620:	f7ff fa58 	bl	8001ad4 <HAL_GetTick>
 8002624:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002626:	e00a      	b.n	800263e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002628:	f7ff fa54 	bl	8001ad4 <HAL_GetTick>
 800262c:	4602      	mov	r2, r0
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	1ad3      	subs	r3, r2, r3
 8002632:	f241 3288 	movw	r2, #5000	; 0x1388
 8002636:	4293      	cmp	r3, r2
 8002638:	d901      	bls.n	800263e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800263a:	2303      	movs	r3, #3
 800263c:	e053      	b.n	80026e6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800263e:	4b2d      	ldr	r3, [pc, #180]	; (80026f4 <HAL_RCC_ClockConfig+0x1c4>)
 8002640:	685b      	ldr	r3, [r3, #4]
 8002642:	f003 020c 	and.w	r2, r3, #12
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	685b      	ldr	r3, [r3, #4]
 800264a:	009b      	lsls	r3, r3, #2
 800264c:	429a      	cmp	r2, r3
 800264e:	d1eb      	bne.n	8002628 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002650:	4b27      	ldr	r3, [pc, #156]	; (80026f0 <HAL_RCC_ClockConfig+0x1c0>)
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f003 0307 	and.w	r3, r3, #7
 8002658:	683a      	ldr	r2, [r7, #0]
 800265a:	429a      	cmp	r2, r3
 800265c:	d210      	bcs.n	8002680 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800265e:	4b24      	ldr	r3, [pc, #144]	; (80026f0 <HAL_RCC_ClockConfig+0x1c0>)
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f023 0207 	bic.w	r2, r3, #7
 8002666:	4922      	ldr	r1, [pc, #136]	; (80026f0 <HAL_RCC_ClockConfig+0x1c0>)
 8002668:	683b      	ldr	r3, [r7, #0]
 800266a:	4313      	orrs	r3, r2
 800266c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800266e:	4b20      	ldr	r3, [pc, #128]	; (80026f0 <HAL_RCC_ClockConfig+0x1c0>)
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f003 0307 	and.w	r3, r3, #7
 8002676:	683a      	ldr	r2, [r7, #0]
 8002678:	429a      	cmp	r2, r3
 800267a:	d001      	beq.n	8002680 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800267c:	2301      	movs	r3, #1
 800267e:	e032      	b.n	80026e6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f003 0304 	and.w	r3, r3, #4
 8002688:	2b00      	cmp	r3, #0
 800268a:	d008      	beq.n	800269e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800268c:	4b19      	ldr	r3, [pc, #100]	; (80026f4 <HAL_RCC_ClockConfig+0x1c4>)
 800268e:	685b      	ldr	r3, [r3, #4]
 8002690:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	68db      	ldr	r3, [r3, #12]
 8002698:	4916      	ldr	r1, [pc, #88]	; (80026f4 <HAL_RCC_ClockConfig+0x1c4>)
 800269a:	4313      	orrs	r3, r2
 800269c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f003 0308 	and.w	r3, r3, #8
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d009      	beq.n	80026be <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80026aa:	4b12      	ldr	r3, [pc, #72]	; (80026f4 <HAL_RCC_ClockConfig+0x1c4>)
 80026ac:	685b      	ldr	r3, [r3, #4]
 80026ae:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	691b      	ldr	r3, [r3, #16]
 80026b6:	00db      	lsls	r3, r3, #3
 80026b8:	490e      	ldr	r1, [pc, #56]	; (80026f4 <HAL_RCC_ClockConfig+0x1c4>)
 80026ba:	4313      	orrs	r3, r2
 80026bc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80026be:	f000 f821 	bl	8002704 <HAL_RCC_GetSysClockFreq>
 80026c2:	4601      	mov	r1, r0
 80026c4:	4b0b      	ldr	r3, [pc, #44]	; (80026f4 <HAL_RCC_ClockConfig+0x1c4>)
 80026c6:	685b      	ldr	r3, [r3, #4]
 80026c8:	091b      	lsrs	r3, r3, #4
 80026ca:	f003 030f 	and.w	r3, r3, #15
 80026ce:	4a0a      	ldr	r2, [pc, #40]	; (80026f8 <HAL_RCC_ClockConfig+0x1c8>)
 80026d0:	5cd3      	ldrb	r3, [r2, r3]
 80026d2:	fa21 f303 	lsr.w	r3, r1, r3
 80026d6:	4a09      	ldr	r2, [pc, #36]	; (80026fc <HAL_RCC_ClockConfig+0x1cc>)
 80026d8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80026da:	4b09      	ldr	r3, [pc, #36]	; (8002700 <HAL_RCC_ClockConfig+0x1d0>)
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	4618      	mov	r0, r3
 80026e0:	f7ff f8c8 	bl	8001874 <HAL_InitTick>

  return HAL_OK;
 80026e4:	2300      	movs	r3, #0
}
 80026e6:	4618      	mov	r0, r3
 80026e8:	3710      	adds	r7, #16
 80026ea:	46bd      	mov	sp, r7
 80026ec:	bd80      	pop	{r7, pc}
 80026ee:	bf00      	nop
 80026f0:	40022000 	.word	0x40022000
 80026f4:	40021000 	.word	0x40021000
 80026f8:	08007a14 	.word	0x08007a14
 80026fc:	20000000 	.word	0x20000000
 8002700:	20000004 	.word	0x20000004

08002704 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002704:	b490      	push	{r4, r7}
 8002706:	b08a      	sub	sp, #40	; 0x28
 8002708:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800270a:	4b2a      	ldr	r3, [pc, #168]	; (80027b4 <HAL_RCC_GetSysClockFreq+0xb0>)
 800270c:	1d3c      	adds	r4, r7, #4
 800270e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002710:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002714:	4b28      	ldr	r3, [pc, #160]	; (80027b8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002716:	881b      	ldrh	r3, [r3, #0]
 8002718:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800271a:	2300      	movs	r3, #0
 800271c:	61fb      	str	r3, [r7, #28]
 800271e:	2300      	movs	r3, #0
 8002720:	61bb      	str	r3, [r7, #24]
 8002722:	2300      	movs	r3, #0
 8002724:	627b      	str	r3, [r7, #36]	; 0x24
 8002726:	2300      	movs	r3, #0
 8002728:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800272a:	2300      	movs	r3, #0
 800272c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800272e:	4b23      	ldr	r3, [pc, #140]	; (80027bc <HAL_RCC_GetSysClockFreq+0xb8>)
 8002730:	685b      	ldr	r3, [r3, #4]
 8002732:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002734:	69fb      	ldr	r3, [r7, #28]
 8002736:	f003 030c 	and.w	r3, r3, #12
 800273a:	2b04      	cmp	r3, #4
 800273c:	d002      	beq.n	8002744 <HAL_RCC_GetSysClockFreq+0x40>
 800273e:	2b08      	cmp	r3, #8
 8002740:	d003      	beq.n	800274a <HAL_RCC_GetSysClockFreq+0x46>
 8002742:	e02d      	b.n	80027a0 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002744:	4b1e      	ldr	r3, [pc, #120]	; (80027c0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002746:	623b      	str	r3, [r7, #32]
      break;
 8002748:	e02d      	b.n	80027a6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800274a:	69fb      	ldr	r3, [r7, #28]
 800274c:	0c9b      	lsrs	r3, r3, #18
 800274e:	f003 030f 	and.w	r3, r3, #15
 8002752:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002756:	4413      	add	r3, r2
 8002758:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800275c:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800275e:	69fb      	ldr	r3, [r7, #28]
 8002760:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002764:	2b00      	cmp	r3, #0
 8002766:	d013      	beq.n	8002790 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002768:	4b14      	ldr	r3, [pc, #80]	; (80027bc <HAL_RCC_GetSysClockFreq+0xb8>)
 800276a:	685b      	ldr	r3, [r3, #4]
 800276c:	0c5b      	lsrs	r3, r3, #17
 800276e:	f003 0301 	and.w	r3, r3, #1
 8002772:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002776:	4413      	add	r3, r2
 8002778:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800277c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800277e:	697b      	ldr	r3, [r7, #20]
 8002780:	4a0f      	ldr	r2, [pc, #60]	; (80027c0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002782:	fb02 f203 	mul.w	r2, r2, r3
 8002786:	69bb      	ldr	r3, [r7, #24]
 8002788:	fbb2 f3f3 	udiv	r3, r2, r3
 800278c:	627b      	str	r3, [r7, #36]	; 0x24
 800278e:	e004      	b.n	800279a <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002790:	697b      	ldr	r3, [r7, #20]
 8002792:	4a0c      	ldr	r2, [pc, #48]	; (80027c4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002794:	fb02 f303 	mul.w	r3, r2, r3
 8002798:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800279a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800279c:	623b      	str	r3, [r7, #32]
      break;
 800279e:	e002      	b.n	80027a6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80027a0:	4b07      	ldr	r3, [pc, #28]	; (80027c0 <HAL_RCC_GetSysClockFreq+0xbc>)
 80027a2:	623b      	str	r3, [r7, #32]
      break;
 80027a4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80027a6:	6a3b      	ldr	r3, [r7, #32]
}
 80027a8:	4618      	mov	r0, r3
 80027aa:	3728      	adds	r7, #40	; 0x28
 80027ac:	46bd      	mov	sp, r7
 80027ae:	bc90      	pop	{r4, r7}
 80027b0:	4770      	bx	lr
 80027b2:	bf00      	nop
 80027b4:	080079c0 	.word	0x080079c0
 80027b8:	080079d0 	.word	0x080079d0
 80027bc:	40021000 	.word	0x40021000
 80027c0:	007a1200 	.word	0x007a1200
 80027c4:	003d0900 	.word	0x003d0900

080027c8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80027c8:	b480      	push	{r7}
 80027ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80027cc:	4b02      	ldr	r3, [pc, #8]	; (80027d8 <HAL_RCC_GetHCLKFreq+0x10>)
 80027ce:	681b      	ldr	r3, [r3, #0]
}
 80027d0:	4618      	mov	r0, r3
 80027d2:	46bd      	mov	sp, r7
 80027d4:	bc80      	pop	{r7}
 80027d6:	4770      	bx	lr
 80027d8:	20000000 	.word	0x20000000

080027dc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80027e0:	f7ff fff2 	bl	80027c8 <HAL_RCC_GetHCLKFreq>
 80027e4:	4601      	mov	r1, r0
 80027e6:	4b05      	ldr	r3, [pc, #20]	; (80027fc <HAL_RCC_GetPCLK1Freq+0x20>)
 80027e8:	685b      	ldr	r3, [r3, #4]
 80027ea:	0a1b      	lsrs	r3, r3, #8
 80027ec:	f003 0307 	and.w	r3, r3, #7
 80027f0:	4a03      	ldr	r2, [pc, #12]	; (8002800 <HAL_RCC_GetPCLK1Freq+0x24>)
 80027f2:	5cd3      	ldrb	r3, [r2, r3]
 80027f4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80027f8:	4618      	mov	r0, r3
 80027fa:	bd80      	pop	{r7, pc}
 80027fc:	40021000 	.word	0x40021000
 8002800:	08007a24 	.word	0x08007a24

08002804 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002804:	b580      	push	{r7, lr}
 8002806:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002808:	f7ff ffde 	bl	80027c8 <HAL_RCC_GetHCLKFreq>
 800280c:	4601      	mov	r1, r0
 800280e:	4b05      	ldr	r3, [pc, #20]	; (8002824 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002810:	685b      	ldr	r3, [r3, #4]
 8002812:	0adb      	lsrs	r3, r3, #11
 8002814:	f003 0307 	and.w	r3, r3, #7
 8002818:	4a03      	ldr	r2, [pc, #12]	; (8002828 <HAL_RCC_GetPCLK2Freq+0x24>)
 800281a:	5cd3      	ldrb	r3, [r2, r3]
 800281c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002820:	4618      	mov	r0, r3
 8002822:	bd80      	pop	{r7, pc}
 8002824:	40021000 	.word	0x40021000
 8002828:	08007a24 	.word	0x08007a24

0800282c <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800282c:	b480      	push	{r7}
 800282e:	b083      	sub	sp, #12
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]
 8002834:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	220f      	movs	r2, #15
 800283a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800283c:	4b11      	ldr	r3, [pc, #68]	; (8002884 <HAL_RCC_GetClockConfig+0x58>)
 800283e:	685b      	ldr	r3, [r3, #4]
 8002840:	f003 0203 	and.w	r2, r3, #3
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002848:	4b0e      	ldr	r3, [pc, #56]	; (8002884 <HAL_RCC_GetClockConfig+0x58>)
 800284a:	685b      	ldr	r3, [r3, #4]
 800284c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002854:	4b0b      	ldr	r3, [pc, #44]	; (8002884 <HAL_RCC_GetClockConfig+0x58>)
 8002856:	685b      	ldr	r3, [r3, #4]
 8002858:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8002860:	4b08      	ldr	r3, [pc, #32]	; (8002884 <HAL_RCC_GetClockConfig+0x58>)
 8002862:	685b      	ldr	r3, [r3, #4]
 8002864:	08db      	lsrs	r3, r3, #3
 8002866:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800286e:	4b06      	ldr	r3, [pc, #24]	; (8002888 <HAL_RCC_GetClockConfig+0x5c>)
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f003 0207 	and.w	r2, r3, #7
 8002876:	683b      	ldr	r3, [r7, #0]
 8002878:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 800287a:	bf00      	nop
 800287c:	370c      	adds	r7, #12
 800287e:	46bd      	mov	sp, r7
 8002880:	bc80      	pop	{r7}
 8002882:	4770      	bx	lr
 8002884:	40021000 	.word	0x40021000
 8002888:	40022000 	.word	0x40022000

0800288c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800288c:	b480      	push	{r7}
 800288e:	b085      	sub	sp, #20
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002894:	4b0a      	ldr	r3, [pc, #40]	; (80028c0 <RCC_Delay+0x34>)
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	4a0a      	ldr	r2, [pc, #40]	; (80028c4 <RCC_Delay+0x38>)
 800289a:	fba2 2303 	umull	r2, r3, r2, r3
 800289e:	0a5b      	lsrs	r3, r3, #9
 80028a0:	687a      	ldr	r2, [r7, #4]
 80028a2:	fb02 f303 	mul.w	r3, r2, r3
 80028a6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80028a8:	bf00      	nop
  }
  while (Delay --);
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	1e5a      	subs	r2, r3, #1
 80028ae:	60fa      	str	r2, [r7, #12]
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d1f9      	bne.n	80028a8 <RCC_Delay+0x1c>
}
 80028b4:	bf00      	nop
 80028b6:	3714      	adds	r7, #20
 80028b8:	46bd      	mov	sp, r7
 80028ba:	bc80      	pop	{r7}
 80028bc:	4770      	bx	lr
 80028be:	bf00      	nop
 80028c0:	20000000 	.word	0x20000000
 80028c4:	10624dd3 	.word	0x10624dd3

080028c8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80028c8:	b580      	push	{r7, lr}
 80028ca:	b082      	sub	sp, #8
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d101      	bne.n	80028da <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80028d6:	2301      	movs	r3, #1
 80028d8:	e053      	b.n	8002982 <HAL_SPI_Init+0xba>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	2200      	movs	r2, #0
 80028de:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80028e6:	b2db      	uxtb	r3, r3
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d106      	bne.n	80028fa <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	2200      	movs	r2, #0
 80028f0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80028f4:	6878      	ldr	r0, [r7, #4]
 80028f6:	f7fe ff27 	bl	8001748 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	2202      	movs	r2, #2
 80028fe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	681a      	ldr	r2, [r3, #0]
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002910:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	685a      	ldr	r2, [r3, #4]
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	689b      	ldr	r3, [r3, #8]
 800291a:	431a      	orrs	r2, r3
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	68db      	ldr	r3, [r3, #12]
 8002920:	431a      	orrs	r2, r3
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	691b      	ldr	r3, [r3, #16]
 8002926:	431a      	orrs	r2, r3
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	695b      	ldr	r3, [r3, #20]
 800292c:	431a      	orrs	r2, r3
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	699b      	ldr	r3, [r3, #24]
 8002932:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002936:	431a      	orrs	r2, r3
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	69db      	ldr	r3, [r3, #28]
 800293c:	431a      	orrs	r2, r3
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	6a1b      	ldr	r3, [r3, #32]
 8002942:	ea42 0103 	orr.w	r1, r2, r3
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	430a      	orrs	r2, r1
 8002950:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	699b      	ldr	r3, [r3, #24]
 8002956:	0c1a      	lsrs	r2, r3, #16
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f002 0204 	and.w	r2, r2, #4
 8002960:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	69da      	ldr	r2, [r3, #28]
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002970:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	2200      	movs	r2, #0
 8002976:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	2201      	movs	r2, #1
 800297c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002980:	2300      	movs	r3, #0
}
 8002982:	4618      	mov	r0, r3
 8002984:	3708      	adds	r7, #8
 8002986:	46bd      	mov	sp, r7
 8002988:	bd80      	pop	{r7, pc}

0800298a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800298a:	b580      	push	{r7, lr}
 800298c:	b088      	sub	sp, #32
 800298e:	af00      	add	r7, sp, #0
 8002990:	60f8      	str	r0, [r7, #12]
 8002992:	60b9      	str	r1, [r7, #8]
 8002994:	603b      	str	r3, [r7, #0]
 8002996:	4613      	mov	r3, r2
 8002998:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800299a:	2300      	movs	r3, #0
 800299c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80029a4:	2b01      	cmp	r3, #1
 80029a6:	d101      	bne.n	80029ac <HAL_SPI_Transmit+0x22>
 80029a8:	2302      	movs	r3, #2
 80029aa:	e11e      	b.n	8002bea <HAL_SPI_Transmit+0x260>
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	2201      	movs	r2, #1
 80029b0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80029b4:	f7ff f88e 	bl	8001ad4 <HAL_GetTick>
 80029b8:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80029ba:	88fb      	ldrh	r3, [r7, #6]
 80029bc:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80029c4:	b2db      	uxtb	r3, r3
 80029c6:	2b01      	cmp	r3, #1
 80029c8:	d002      	beq.n	80029d0 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80029ca:	2302      	movs	r3, #2
 80029cc:	77fb      	strb	r3, [r7, #31]
    goto error;
 80029ce:	e103      	b.n	8002bd8 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 80029d0:	68bb      	ldr	r3, [r7, #8]
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d002      	beq.n	80029dc <HAL_SPI_Transmit+0x52>
 80029d6:	88fb      	ldrh	r3, [r7, #6]
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d102      	bne.n	80029e2 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80029dc:	2301      	movs	r3, #1
 80029de:	77fb      	strb	r3, [r7, #31]
    goto error;
 80029e0:	e0fa      	b.n	8002bd8 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	2203      	movs	r2, #3
 80029e6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	2200      	movs	r2, #0
 80029ee:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	68ba      	ldr	r2, [r7, #8]
 80029f4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	88fa      	ldrh	r2, [r7, #6]
 80029fa:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	88fa      	ldrh	r2, [r7, #6]
 8002a00:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	2200      	movs	r2, #0
 8002a06:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	2200      	movs	r2, #0
 8002a12:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	2200      	movs	r2, #0
 8002a18:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	689b      	ldr	r3, [r3, #8]
 8002a24:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002a28:	d107      	bne.n	8002a3a <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	681a      	ldr	r2, [r3, #0]
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002a38:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a44:	2b40      	cmp	r3, #64	; 0x40
 8002a46:	d007      	beq.n	8002a58 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	681a      	ldr	r2, [r3, #0]
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002a56:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	68db      	ldr	r3, [r3, #12]
 8002a5c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002a60:	d14b      	bne.n	8002afa <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	685b      	ldr	r3, [r3, #4]
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d002      	beq.n	8002a70 <HAL_SPI_Transmit+0xe6>
 8002a6a:	8afb      	ldrh	r3, [r7, #22]
 8002a6c:	2b01      	cmp	r3, #1
 8002a6e:	d13e      	bne.n	8002aee <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a74:	881a      	ldrh	r2, [r3, #0]
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a80:	1c9a      	adds	r2, r3, #2
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002a8a:	b29b      	uxth	r3, r3
 8002a8c:	3b01      	subs	r3, #1
 8002a8e:	b29a      	uxth	r2, r3
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002a94:	e02b      	b.n	8002aee <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	689b      	ldr	r3, [r3, #8]
 8002a9c:	f003 0302 	and.w	r3, r3, #2
 8002aa0:	2b02      	cmp	r3, #2
 8002aa2:	d112      	bne.n	8002aca <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aa8:	881a      	ldrh	r2, [r3, #0]
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ab4:	1c9a      	adds	r2, r3, #2
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002abe:	b29b      	uxth	r3, r3
 8002ac0:	3b01      	subs	r3, #1
 8002ac2:	b29a      	uxth	r2, r3
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	86da      	strh	r2, [r3, #54]	; 0x36
 8002ac8:	e011      	b.n	8002aee <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002aca:	f7ff f803 	bl	8001ad4 <HAL_GetTick>
 8002ace:	4602      	mov	r2, r0
 8002ad0:	69bb      	ldr	r3, [r7, #24]
 8002ad2:	1ad3      	subs	r3, r2, r3
 8002ad4:	683a      	ldr	r2, [r7, #0]
 8002ad6:	429a      	cmp	r2, r3
 8002ad8:	d803      	bhi.n	8002ae2 <HAL_SPI_Transmit+0x158>
 8002ada:	683b      	ldr	r3, [r7, #0]
 8002adc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ae0:	d102      	bne.n	8002ae8 <HAL_SPI_Transmit+0x15e>
 8002ae2:	683b      	ldr	r3, [r7, #0]
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d102      	bne.n	8002aee <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 8002ae8:	2303      	movs	r3, #3
 8002aea:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002aec:	e074      	b.n	8002bd8 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002af2:	b29b      	uxth	r3, r3
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d1ce      	bne.n	8002a96 <HAL_SPI_Transmit+0x10c>
 8002af8:	e04c      	b.n	8002b94 <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	685b      	ldr	r3, [r3, #4]
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d002      	beq.n	8002b08 <HAL_SPI_Transmit+0x17e>
 8002b02:	8afb      	ldrh	r3, [r7, #22]
 8002b04:	2b01      	cmp	r3, #1
 8002b06:	d140      	bne.n	8002b8a <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	330c      	adds	r3, #12
 8002b12:	7812      	ldrb	r2, [r2, #0]
 8002b14:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b1a:	1c5a      	adds	r2, r3, #1
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002b24:	b29b      	uxth	r3, r3
 8002b26:	3b01      	subs	r3, #1
 8002b28:	b29a      	uxth	r2, r3
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002b2e:	e02c      	b.n	8002b8a <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	689b      	ldr	r3, [r3, #8]
 8002b36:	f003 0302 	and.w	r3, r3, #2
 8002b3a:	2b02      	cmp	r3, #2
 8002b3c:	d113      	bne.n	8002b66 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	330c      	adds	r3, #12
 8002b48:	7812      	ldrb	r2, [r2, #0]
 8002b4a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b50:	1c5a      	adds	r2, r3, #1
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002b5a:	b29b      	uxth	r3, r3
 8002b5c:	3b01      	subs	r3, #1
 8002b5e:	b29a      	uxth	r2, r3
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	86da      	strh	r2, [r3, #54]	; 0x36
 8002b64:	e011      	b.n	8002b8a <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002b66:	f7fe ffb5 	bl	8001ad4 <HAL_GetTick>
 8002b6a:	4602      	mov	r2, r0
 8002b6c:	69bb      	ldr	r3, [r7, #24]
 8002b6e:	1ad3      	subs	r3, r2, r3
 8002b70:	683a      	ldr	r2, [r7, #0]
 8002b72:	429a      	cmp	r2, r3
 8002b74:	d803      	bhi.n	8002b7e <HAL_SPI_Transmit+0x1f4>
 8002b76:	683b      	ldr	r3, [r7, #0]
 8002b78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b7c:	d102      	bne.n	8002b84 <HAL_SPI_Transmit+0x1fa>
 8002b7e:	683b      	ldr	r3, [r7, #0]
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d102      	bne.n	8002b8a <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 8002b84:	2303      	movs	r3, #3
 8002b86:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002b88:	e026      	b.n	8002bd8 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002b8e:	b29b      	uxth	r3, r3
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d1cd      	bne.n	8002b30 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002b94:	69ba      	ldr	r2, [r7, #24]
 8002b96:	6839      	ldr	r1, [r7, #0]
 8002b98:	68f8      	ldr	r0, [r7, #12]
 8002b9a:	f000 fb91 	bl	80032c0 <SPI_EndRxTxTransaction>
 8002b9e:	4603      	mov	r3, r0
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d002      	beq.n	8002baa <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	2220      	movs	r2, #32
 8002ba8:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	689b      	ldr	r3, [r3, #8]
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d10a      	bne.n	8002bc8 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002bb2:	2300      	movs	r3, #0
 8002bb4:	613b      	str	r3, [r7, #16]
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	68db      	ldr	r3, [r3, #12]
 8002bbc:	613b      	str	r3, [r7, #16]
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	689b      	ldr	r3, [r3, #8]
 8002bc4:	613b      	str	r3, [r7, #16]
 8002bc6:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d002      	beq.n	8002bd6 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 8002bd0:	2301      	movs	r3, #1
 8002bd2:	77fb      	strb	r3, [r7, #31]
 8002bd4:	e000      	b.n	8002bd8 <HAL_SPI_Transmit+0x24e>
  }

error:
 8002bd6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	2201      	movs	r2, #1
 8002bdc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	2200      	movs	r2, #0
 8002be4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002be8:	7ffb      	ldrb	r3, [r7, #31]
}
 8002bea:	4618      	mov	r0, r3
 8002bec:	3720      	adds	r7, #32
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	bd80      	pop	{r7, pc}

08002bf2 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002bf2:	b580      	push	{r7, lr}
 8002bf4:	b088      	sub	sp, #32
 8002bf6:	af02      	add	r7, sp, #8
 8002bf8:	60f8      	str	r0, [r7, #12]
 8002bfa:	60b9      	str	r1, [r7, #8]
 8002bfc:	603b      	str	r3, [r7, #0]
 8002bfe:	4613      	mov	r3, r2
 8002c00:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002c02:	2300      	movs	r3, #0
 8002c04:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	685b      	ldr	r3, [r3, #4]
 8002c0a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002c0e:	d112      	bne.n	8002c36 <HAL_SPI_Receive+0x44>
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	689b      	ldr	r3, [r3, #8]
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d10e      	bne.n	8002c36 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	2204      	movs	r2, #4
 8002c1c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8002c20:	88fa      	ldrh	r2, [r7, #6]
 8002c22:	683b      	ldr	r3, [r7, #0]
 8002c24:	9300      	str	r3, [sp, #0]
 8002c26:	4613      	mov	r3, r2
 8002c28:	68ba      	ldr	r2, [r7, #8]
 8002c2a:	68b9      	ldr	r1, [r7, #8]
 8002c2c:	68f8      	ldr	r0, [r7, #12]
 8002c2e:	f000 f8e9 	bl	8002e04 <HAL_SPI_TransmitReceive>
 8002c32:	4603      	mov	r3, r0
 8002c34:	e0e2      	b.n	8002dfc <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002c3c:	2b01      	cmp	r3, #1
 8002c3e:	d101      	bne.n	8002c44 <HAL_SPI_Receive+0x52>
 8002c40:	2302      	movs	r3, #2
 8002c42:	e0db      	b.n	8002dfc <HAL_SPI_Receive+0x20a>
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	2201      	movs	r2, #1
 8002c48:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002c4c:	f7fe ff42 	bl	8001ad4 <HAL_GetTick>
 8002c50:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002c58:	b2db      	uxtb	r3, r3
 8002c5a:	2b01      	cmp	r3, #1
 8002c5c:	d002      	beq.n	8002c64 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8002c5e:	2302      	movs	r3, #2
 8002c60:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002c62:	e0c2      	b.n	8002dea <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 8002c64:	68bb      	ldr	r3, [r7, #8]
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d002      	beq.n	8002c70 <HAL_SPI_Receive+0x7e>
 8002c6a:	88fb      	ldrh	r3, [r7, #6]
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d102      	bne.n	8002c76 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8002c70:	2301      	movs	r3, #1
 8002c72:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002c74:	e0b9      	b.n	8002dea <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	2204      	movs	r2, #4
 8002c7a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	2200      	movs	r2, #0
 8002c82:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	68ba      	ldr	r2, [r7, #8]
 8002c88:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	88fa      	ldrh	r2, [r7, #6]
 8002c8e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	88fa      	ldrh	r2, [r7, #6]
 8002c94:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	2200      	movs	r2, #0
 8002c9a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	2200      	movs	r2, #0
 8002cac:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	689b      	ldr	r3, [r3, #8]
 8002cb8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002cbc:	d107      	bne.n	8002cce <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	681a      	ldr	r2, [r3, #0]
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002ccc:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cd8:	2b40      	cmp	r3, #64	; 0x40
 8002cda:	d007      	beq.n	8002cec <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	681a      	ldr	r2, [r3, #0]
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002cea:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	68db      	ldr	r3, [r3, #12]
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d162      	bne.n	8002dba <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8002cf4:	e02e      	b.n	8002d54 <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	689b      	ldr	r3, [r3, #8]
 8002cfc:	f003 0301 	and.w	r3, r3, #1
 8002d00:	2b01      	cmp	r3, #1
 8002d02:	d115      	bne.n	8002d30 <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f103 020c 	add.w	r2, r3, #12
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d10:	7812      	ldrb	r2, [r2, #0]
 8002d12:	b2d2      	uxtb	r2, r2
 8002d14:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d1a:	1c5a      	adds	r2, r3, #1
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002d24:	b29b      	uxth	r3, r3
 8002d26:	3b01      	subs	r3, #1
 8002d28:	b29a      	uxth	r2, r3
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002d2e:	e011      	b.n	8002d54 <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002d30:	f7fe fed0 	bl	8001ad4 <HAL_GetTick>
 8002d34:	4602      	mov	r2, r0
 8002d36:	693b      	ldr	r3, [r7, #16]
 8002d38:	1ad3      	subs	r3, r2, r3
 8002d3a:	683a      	ldr	r2, [r7, #0]
 8002d3c:	429a      	cmp	r2, r3
 8002d3e:	d803      	bhi.n	8002d48 <HAL_SPI_Receive+0x156>
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d46:	d102      	bne.n	8002d4e <HAL_SPI_Receive+0x15c>
 8002d48:	683b      	ldr	r3, [r7, #0]
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d102      	bne.n	8002d54 <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 8002d4e:	2303      	movs	r3, #3
 8002d50:	75fb      	strb	r3, [r7, #23]
          goto error;
 8002d52:	e04a      	b.n	8002dea <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002d58:	b29b      	uxth	r3, r3
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d1cb      	bne.n	8002cf6 <HAL_SPI_Receive+0x104>
 8002d5e:	e031      	b.n	8002dc4 <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	689b      	ldr	r3, [r3, #8]
 8002d66:	f003 0301 	and.w	r3, r3, #1
 8002d6a:	2b01      	cmp	r3, #1
 8002d6c:	d113      	bne.n	8002d96 <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	68da      	ldr	r2, [r3, #12]
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d78:	b292      	uxth	r2, r2
 8002d7a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d80:	1c9a      	adds	r2, r3, #2
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002d8a:	b29b      	uxth	r3, r3
 8002d8c:	3b01      	subs	r3, #1
 8002d8e:	b29a      	uxth	r2, r3
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002d94:	e011      	b.n	8002dba <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002d96:	f7fe fe9d 	bl	8001ad4 <HAL_GetTick>
 8002d9a:	4602      	mov	r2, r0
 8002d9c:	693b      	ldr	r3, [r7, #16]
 8002d9e:	1ad3      	subs	r3, r2, r3
 8002da0:	683a      	ldr	r2, [r7, #0]
 8002da2:	429a      	cmp	r2, r3
 8002da4:	d803      	bhi.n	8002dae <HAL_SPI_Receive+0x1bc>
 8002da6:	683b      	ldr	r3, [r7, #0]
 8002da8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002dac:	d102      	bne.n	8002db4 <HAL_SPI_Receive+0x1c2>
 8002dae:	683b      	ldr	r3, [r7, #0]
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d102      	bne.n	8002dba <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 8002db4:	2303      	movs	r3, #3
 8002db6:	75fb      	strb	r3, [r7, #23]
          goto error;
 8002db8:	e017      	b.n	8002dea <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002dbe:	b29b      	uxth	r3, r3
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d1cd      	bne.n	8002d60 <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002dc4:	693a      	ldr	r2, [r7, #16]
 8002dc6:	6839      	ldr	r1, [r7, #0]
 8002dc8:	68f8      	ldr	r0, [r7, #12]
 8002dca:	f000 fa27 	bl	800321c <SPI_EndRxTransaction>
 8002dce:	4603      	mov	r3, r0
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d002      	beq.n	8002dda <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	2220      	movs	r2, #32
 8002dd8:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d002      	beq.n	8002de8 <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 8002de2:	2301      	movs	r3, #1
 8002de4:	75fb      	strb	r3, [r7, #23]
 8002de6:	e000      	b.n	8002dea <HAL_SPI_Receive+0x1f8>
  }

error :
 8002de8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	2201      	movs	r2, #1
 8002dee:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	2200      	movs	r2, #0
 8002df6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002dfa:	7dfb      	ldrb	r3, [r7, #23]
}
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	3718      	adds	r7, #24
 8002e00:	46bd      	mov	sp, r7
 8002e02:	bd80      	pop	{r7, pc}

08002e04 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002e04:	b580      	push	{r7, lr}
 8002e06:	b08c      	sub	sp, #48	; 0x30
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	60f8      	str	r0, [r7, #12]
 8002e0c:	60b9      	str	r1, [r7, #8]
 8002e0e:	607a      	str	r2, [r7, #4]
 8002e10:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002e12:	2301      	movs	r3, #1
 8002e14:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002e16:	2300      	movs	r3, #0
 8002e18:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002e22:	2b01      	cmp	r3, #1
 8002e24:	d101      	bne.n	8002e2a <HAL_SPI_TransmitReceive+0x26>
 8002e26:	2302      	movs	r3, #2
 8002e28:	e18a      	b.n	8003140 <HAL_SPI_TransmitReceive+0x33c>
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	2201      	movs	r2, #1
 8002e2e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002e32:	f7fe fe4f 	bl	8001ad4 <HAL_GetTick>
 8002e36:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002e3e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	685b      	ldr	r3, [r3, #4]
 8002e46:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8002e48:	887b      	ldrh	r3, [r7, #2]
 8002e4a:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002e4c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002e50:	2b01      	cmp	r3, #1
 8002e52:	d00f      	beq.n	8002e74 <HAL_SPI_TransmitReceive+0x70>
 8002e54:	69fb      	ldr	r3, [r7, #28]
 8002e56:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002e5a:	d107      	bne.n	8002e6c <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	689b      	ldr	r3, [r3, #8]
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d103      	bne.n	8002e6c <HAL_SPI_TransmitReceive+0x68>
 8002e64:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002e68:	2b04      	cmp	r3, #4
 8002e6a:	d003      	beq.n	8002e74 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8002e6c:	2302      	movs	r3, #2
 8002e6e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002e72:	e15b      	b.n	800312c <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002e74:	68bb      	ldr	r3, [r7, #8]
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d005      	beq.n	8002e86 <HAL_SPI_TransmitReceive+0x82>
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d002      	beq.n	8002e86 <HAL_SPI_TransmitReceive+0x82>
 8002e80:	887b      	ldrh	r3, [r7, #2]
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d103      	bne.n	8002e8e <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8002e86:	2301      	movs	r3, #1
 8002e88:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002e8c:	e14e      	b.n	800312c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002e94:	b2db      	uxtb	r3, r3
 8002e96:	2b04      	cmp	r3, #4
 8002e98:	d003      	beq.n	8002ea2 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	2205      	movs	r2, #5
 8002e9e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	687a      	ldr	r2, [r7, #4]
 8002eac:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	887a      	ldrh	r2, [r7, #2]
 8002eb2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	887a      	ldrh	r2, [r7, #2]
 8002eb8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	68ba      	ldr	r2, [r7, #8]
 8002ebe:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	887a      	ldrh	r2, [r7, #2]
 8002ec4:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	887a      	ldrh	r2, [r7, #2]
 8002eca:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	2200      	movs	r2, #0
 8002ed0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ee2:	2b40      	cmp	r3, #64	; 0x40
 8002ee4:	d007      	beq.n	8002ef6 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	681a      	ldr	r2, [r3, #0]
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002ef4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	68db      	ldr	r3, [r3, #12]
 8002efa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002efe:	d178      	bne.n	8002ff2 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	685b      	ldr	r3, [r3, #4]
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d002      	beq.n	8002f0e <HAL_SPI_TransmitReceive+0x10a>
 8002f08:	8b7b      	ldrh	r3, [r7, #26]
 8002f0a:	2b01      	cmp	r3, #1
 8002f0c:	d166      	bne.n	8002fdc <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f12:	881a      	ldrh	r2, [r3, #0]
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f1e:	1c9a      	adds	r2, r3, #2
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002f28:	b29b      	uxth	r3, r3
 8002f2a:	3b01      	subs	r3, #1
 8002f2c:	b29a      	uxth	r2, r3
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002f32:	e053      	b.n	8002fdc <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	689b      	ldr	r3, [r3, #8]
 8002f3a:	f003 0302 	and.w	r3, r3, #2
 8002f3e:	2b02      	cmp	r3, #2
 8002f40:	d11b      	bne.n	8002f7a <HAL_SPI_TransmitReceive+0x176>
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002f46:	b29b      	uxth	r3, r3
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d016      	beq.n	8002f7a <HAL_SPI_TransmitReceive+0x176>
 8002f4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f4e:	2b01      	cmp	r3, #1
 8002f50:	d113      	bne.n	8002f7a <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f56:	881a      	ldrh	r2, [r3, #0]
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f62:	1c9a      	adds	r2, r3, #2
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002f6c:	b29b      	uxth	r3, r3
 8002f6e:	3b01      	subs	r3, #1
 8002f70:	b29a      	uxth	r2, r3
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002f76:	2300      	movs	r3, #0
 8002f78:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	689b      	ldr	r3, [r3, #8]
 8002f80:	f003 0301 	and.w	r3, r3, #1
 8002f84:	2b01      	cmp	r3, #1
 8002f86:	d119      	bne.n	8002fbc <HAL_SPI_TransmitReceive+0x1b8>
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f8c:	b29b      	uxth	r3, r3
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d014      	beq.n	8002fbc <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	68da      	ldr	r2, [r3, #12]
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f9c:	b292      	uxth	r2, r2
 8002f9e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fa4:	1c9a      	adds	r2, r3, #2
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002fae:	b29b      	uxth	r3, r3
 8002fb0:	3b01      	subs	r3, #1
 8002fb2:	b29a      	uxth	r2, r3
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002fb8:	2301      	movs	r3, #1
 8002fba:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002fbc:	f7fe fd8a 	bl	8001ad4 <HAL_GetTick>
 8002fc0:	4602      	mov	r2, r0
 8002fc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fc4:	1ad3      	subs	r3, r2, r3
 8002fc6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002fc8:	429a      	cmp	r2, r3
 8002fca:	d807      	bhi.n	8002fdc <HAL_SPI_TransmitReceive+0x1d8>
 8002fcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fce:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fd2:	d003      	beq.n	8002fdc <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8002fd4:	2303      	movs	r3, #3
 8002fd6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002fda:	e0a7      	b.n	800312c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002fe0:	b29b      	uxth	r3, r3
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d1a6      	bne.n	8002f34 <HAL_SPI_TransmitReceive+0x130>
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002fea:	b29b      	uxth	r3, r3
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d1a1      	bne.n	8002f34 <HAL_SPI_TransmitReceive+0x130>
 8002ff0:	e07c      	b.n	80030ec <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	685b      	ldr	r3, [r3, #4]
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d002      	beq.n	8003000 <HAL_SPI_TransmitReceive+0x1fc>
 8002ffa:	8b7b      	ldrh	r3, [r7, #26]
 8002ffc:	2b01      	cmp	r3, #1
 8002ffe:	d16b      	bne.n	80030d8 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	330c      	adds	r3, #12
 800300a:	7812      	ldrb	r2, [r2, #0]
 800300c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003012:	1c5a      	adds	r2, r3, #1
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800301c:	b29b      	uxth	r3, r3
 800301e:	3b01      	subs	r3, #1
 8003020:	b29a      	uxth	r2, r3
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003026:	e057      	b.n	80030d8 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	689b      	ldr	r3, [r3, #8]
 800302e:	f003 0302 	and.w	r3, r3, #2
 8003032:	2b02      	cmp	r3, #2
 8003034:	d11c      	bne.n	8003070 <HAL_SPI_TransmitReceive+0x26c>
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800303a:	b29b      	uxth	r3, r3
 800303c:	2b00      	cmp	r3, #0
 800303e:	d017      	beq.n	8003070 <HAL_SPI_TransmitReceive+0x26c>
 8003040:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003042:	2b01      	cmp	r3, #1
 8003044:	d114      	bne.n	8003070 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	330c      	adds	r3, #12
 8003050:	7812      	ldrb	r2, [r2, #0]
 8003052:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003058:	1c5a      	adds	r2, r3, #1
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003062:	b29b      	uxth	r3, r3
 8003064:	3b01      	subs	r3, #1
 8003066:	b29a      	uxth	r2, r3
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800306c:	2300      	movs	r3, #0
 800306e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	689b      	ldr	r3, [r3, #8]
 8003076:	f003 0301 	and.w	r3, r3, #1
 800307a:	2b01      	cmp	r3, #1
 800307c:	d119      	bne.n	80030b2 <HAL_SPI_TransmitReceive+0x2ae>
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003082:	b29b      	uxth	r3, r3
 8003084:	2b00      	cmp	r3, #0
 8003086:	d014      	beq.n	80030b2 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	68da      	ldr	r2, [r3, #12]
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003092:	b2d2      	uxtb	r2, r2
 8003094:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800309a:	1c5a      	adds	r2, r3, #1
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80030a4:	b29b      	uxth	r3, r3
 80030a6:	3b01      	subs	r3, #1
 80030a8:	b29a      	uxth	r2, r3
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80030ae:	2301      	movs	r3, #1
 80030b0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80030b2:	f7fe fd0f 	bl	8001ad4 <HAL_GetTick>
 80030b6:	4602      	mov	r2, r0
 80030b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030ba:	1ad3      	subs	r3, r2, r3
 80030bc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80030be:	429a      	cmp	r2, r3
 80030c0:	d803      	bhi.n	80030ca <HAL_SPI_TransmitReceive+0x2c6>
 80030c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030c8:	d102      	bne.n	80030d0 <HAL_SPI_TransmitReceive+0x2cc>
 80030ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d103      	bne.n	80030d8 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80030d0:	2303      	movs	r3, #3
 80030d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80030d6:	e029      	b.n	800312c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80030dc:	b29b      	uxth	r3, r3
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d1a2      	bne.n	8003028 <HAL_SPI_TransmitReceive+0x224>
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80030e6:	b29b      	uxth	r3, r3
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d19d      	bne.n	8003028 <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80030ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030ee:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80030f0:	68f8      	ldr	r0, [r7, #12]
 80030f2:	f000 f8e5 	bl	80032c0 <SPI_EndRxTxTransaction>
 80030f6:	4603      	mov	r3, r0
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d006      	beq.n	800310a <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80030fc:	2301      	movs	r3, #1
 80030fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	2220      	movs	r2, #32
 8003106:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8003108:	e010      	b.n	800312c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	689b      	ldr	r3, [r3, #8]
 800310e:	2b00      	cmp	r3, #0
 8003110:	d10b      	bne.n	800312a <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003112:	2300      	movs	r3, #0
 8003114:	617b      	str	r3, [r7, #20]
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	68db      	ldr	r3, [r3, #12]
 800311c:	617b      	str	r3, [r7, #20]
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	689b      	ldr	r3, [r3, #8]
 8003124:	617b      	str	r3, [r7, #20]
 8003126:	697b      	ldr	r3, [r7, #20]
 8003128:	e000      	b.n	800312c <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800312a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	2201      	movs	r2, #1
 8003130:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	2200      	movs	r2, #0
 8003138:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800313c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8003140:	4618      	mov	r0, r3
 8003142:	3730      	adds	r7, #48	; 0x30
 8003144:	46bd      	mov	sp, r7
 8003146:	bd80      	pop	{r7, pc}

08003148 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003148:	b580      	push	{r7, lr}
 800314a:	b084      	sub	sp, #16
 800314c:	af00      	add	r7, sp, #0
 800314e:	60f8      	str	r0, [r7, #12]
 8003150:	60b9      	str	r1, [r7, #8]
 8003152:	603b      	str	r3, [r7, #0]
 8003154:	4613      	mov	r3, r2
 8003156:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003158:	e04c      	b.n	80031f4 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 800315a:	683b      	ldr	r3, [r7, #0]
 800315c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003160:	d048      	beq.n	80031f4 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8003162:	f7fe fcb7 	bl	8001ad4 <HAL_GetTick>
 8003166:	4602      	mov	r2, r0
 8003168:	69bb      	ldr	r3, [r7, #24]
 800316a:	1ad3      	subs	r3, r2, r3
 800316c:	683a      	ldr	r2, [r7, #0]
 800316e:	429a      	cmp	r2, r3
 8003170:	d902      	bls.n	8003178 <SPI_WaitFlagStateUntilTimeout+0x30>
 8003172:	683b      	ldr	r3, [r7, #0]
 8003174:	2b00      	cmp	r3, #0
 8003176:	d13d      	bne.n	80031f4 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	685a      	ldr	r2, [r3, #4]
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003186:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	685b      	ldr	r3, [r3, #4]
 800318c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003190:	d111      	bne.n	80031b6 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	689b      	ldr	r3, [r3, #8]
 8003196:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800319a:	d004      	beq.n	80031a6 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	689b      	ldr	r3, [r3, #8]
 80031a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80031a4:	d107      	bne.n	80031b6 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	681a      	ldr	r2, [r3, #0]
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80031b4:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031ba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80031be:	d10f      	bne.n	80031e0 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	681a      	ldr	r2, [r3, #0]
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80031ce:	601a      	str	r2, [r3, #0]
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	681a      	ldr	r2, [r3, #0]
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80031de:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	2201      	movs	r2, #1
 80031e4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	2200      	movs	r2, #0
 80031ec:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80031f0:	2303      	movs	r3, #3
 80031f2:	e00f      	b.n	8003214 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	689a      	ldr	r2, [r3, #8]
 80031fa:	68bb      	ldr	r3, [r7, #8]
 80031fc:	4013      	ands	r3, r2
 80031fe:	68ba      	ldr	r2, [r7, #8]
 8003200:	429a      	cmp	r2, r3
 8003202:	bf0c      	ite	eq
 8003204:	2301      	moveq	r3, #1
 8003206:	2300      	movne	r3, #0
 8003208:	b2db      	uxtb	r3, r3
 800320a:	461a      	mov	r2, r3
 800320c:	79fb      	ldrb	r3, [r7, #7]
 800320e:	429a      	cmp	r2, r3
 8003210:	d1a3      	bne.n	800315a <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8003212:	2300      	movs	r3, #0
}
 8003214:	4618      	mov	r0, r3
 8003216:	3710      	adds	r7, #16
 8003218:	46bd      	mov	sp, r7
 800321a:	bd80      	pop	{r7, pc}

0800321c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800321c:	b580      	push	{r7, lr}
 800321e:	b086      	sub	sp, #24
 8003220:	af02      	add	r7, sp, #8
 8003222:	60f8      	str	r0, [r7, #12]
 8003224:	60b9      	str	r1, [r7, #8]
 8003226:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	685b      	ldr	r3, [r3, #4]
 800322c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003230:	d111      	bne.n	8003256 <SPI_EndRxTransaction+0x3a>
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	689b      	ldr	r3, [r3, #8]
 8003236:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800323a:	d004      	beq.n	8003246 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	689b      	ldr	r3, [r3, #8]
 8003240:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003244:	d107      	bne.n	8003256 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	681a      	ldr	r2, [r3, #0]
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003254:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	685b      	ldr	r3, [r3, #4]
 800325a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800325e:	d117      	bne.n	8003290 <SPI_EndRxTransaction+0x74>
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	689b      	ldr	r3, [r3, #8]
 8003264:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003268:	d112      	bne.n	8003290 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	9300      	str	r3, [sp, #0]
 800326e:	68bb      	ldr	r3, [r7, #8]
 8003270:	2200      	movs	r2, #0
 8003272:	2101      	movs	r1, #1
 8003274:	68f8      	ldr	r0, [r7, #12]
 8003276:	f7ff ff67 	bl	8003148 <SPI_WaitFlagStateUntilTimeout>
 800327a:	4603      	mov	r3, r0
 800327c:	2b00      	cmp	r3, #0
 800327e:	d01a      	beq.n	80032b6 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003284:	f043 0220 	orr.w	r2, r3, #32
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800328c:	2303      	movs	r3, #3
 800328e:	e013      	b.n	80032b8 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	9300      	str	r3, [sp, #0]
 8003294:	68bb      	ldr	r3, [r7, #8]
 8003296:	2200      	movs	r2, #0
 8003298:	2180      	movs	r1, #128	; 0x80
 800329a:	68f8      	ldr	r0, [r7, #12]
 800329c:	f7ff ff54 	bl	8003148 <SPI_WaitFlagStateUntilTimeout>
 80032a0:	4603      	mov	r3, r0
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d007      	beq.n	80032b6 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032aa:	f043 0220 	orr.w	r2, r3, #32
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80032b2:	2303      	movs	r3, #3
 80032b4:	e000      	b.n	80032b8 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 80032b6:	2300      	movs	r3, #0
}
 80032b8:	4618      	mov	r0, r3
 80032ba:	3710      	adds	r7, #16
 80032bc:	46bd      	mov	sp, r7
 80032be:	bd80      	pop	{r7, pc}

080032c0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80032c0:	b580      	push	{r7, lr}
 80032c2:	b086      	sub	sp, #24
 80032c4:	af02      	add	r7, sp, #8
 80032c6:	60f8      	str	r0, [r7, #12]
 80032c8:	60b9      	str	r1, [r7, #8]
 80032ca:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	9300      	str	r3, [sp, #0]
 80032d0:	68bb      	ldr	r3, [r7, #8]
 80032d2:	2200      	movs	r2, #0
 80032d4:	2180      	movs	r1, #128	; 0x80
 80032d6:	68f8      	ldr	r0, [r7, #12]
 80032d8:	f7ff ff36 	bl	8003148 <SPI_WaitFlagStateUntilTimeout>
 80032dc:	4603      	mov	r3, r0
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d007      	beq.n	80032f2 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032e6:	f043 0220 	orr.w	r2, r3, #32
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 80032ee:	2303      	movs	r3, #3
 80032f0:	e000      	b.n	80032f4 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 80032f2:	2300      	movs	r3, #0
}
 80032f4:	4618      	mov	r0, r3
 80032f6:	3710      	adds	r7, #16
 80032f8:	46bd      	mov	sp, r7
 80032fa:	bd80      	pop	{r7, pc}

080032fc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80032fc:	b580      	push	{r7, lr}
 80032fe:	b082      	sub	sp, #8
 8003300:	af00      	add	r7, sp, #0
 8003302:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	2b00      	cmp	r3, #0
 8003308:	d101      	bne.n	800330e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800330a:	2301      	movs	r3, #1
 800330c:	e01d      	b.n	800334a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003314:	b2db      	uxtb	r3, r3
 8003316:	2b00      	cmp	r3, #0
 8003318:	d106      	bne.n	8003328 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	2200      	movs	r2, #0
 800331e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003322:	6878      	ldr	r0, [r7, #4]
 8003324:	f000 f815 	bl	8003352 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	2202      	movs	r2, #2
 800332c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681a      	ldr	r2, [r3, #0]
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	3304      	adds	r3, #4
 8003338:	4619      	mov	r1, r3
 800333a:	4610      	mov	r0, r2
 800333c:	f000 f962 	bl	8003604 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	2201      	movs	r2, #1
 8003344:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003348:	2300      	movs	r3, #0
}
 800334a:	4618      	mov	r0, r3
 800334c:	3708      	adds	r7, #8
 800334e:	46bd      	mov	sp, r7
 8003350:	bd80      	pop	{r7, pc}

08003352 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003352:	b480      	push	{r7}
 8003354:	b083      	sub	sp, #12
 8003356:	af00      	add	r7, sp, #0
 8003358:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800335a:	bf00      	nop
 800335c:	370c      	adds	r7, #12
 800335e:	46bd      	mov	sp, r7
 8003360:	bc80      	pop	{r7}
 8003362:	4770      	bx	lr

08003364 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003364:	b480      	push	{r7}
 8003366:	b085      	sub	sp, #20
 8003368:	af00      	add	r7, sp, #0
 800336a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	68da      	ldr	r2, [r3, #12]
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f042 0201 	orr.w	r2, r2, #1
 800337a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	689b      	ldr	r3, [r3, #8]
 8003382:	f003 0307 	and.w	r3, r3, #7
 8003386:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	2b06      	cmp	r3, #6
 800338c:	d007      	beq.n	800339e <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	681a      	ldr	r2, [r3, #0]
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f042 0201 	orr.w	r2, r2, #1
 800339c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800339e:	2300      	movs	r3, #0
}
 80033a0:	4618      	mov	r0, r3
 80033a2:	3714      	adds	r7, #20
 80033a4:	46bd      	mov	sp, r7
 80033a6:	bc80      	pop	{r7}
 80033a8:	4770      	bx	lr

080033aa <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80033aa:	b580      	push	{r7, lr}
 80033ac:	b082      	sub	sp, #8
 80033ae:	af00      	add	r7, sp, #0
 80033b0:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	691b      	ldr	r3, [r3, #16]
 80033b8:	f003 0302 	and.w	r3, r3, #2
 80033bc:	2b02      	cmp	r3, #2
 80033be:	d122      	bne.n	8003406 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	68db      	ldr	r3, [r3, #12]
 80033c6:	f003 0302 	and.w	r3, r3, #2
 80033ca:	2b02      	cmp	r3, #2
 80033cc:	d11b      	bne.n	8003406 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f06f 0202 	mvn.w	r2, #2
 80033d6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	2201      	movs	r2, #1
 80033dc:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	699b      	ldr	r3, [r3, #24]
 80033e4:	f003 0303 	and.w	r3, r3, #3
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d003      	beq.n	80033f4 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80033ec:	6878      	ldr	r0, [r7, #4]
 80033ee:	f000 f8ed 	bl	80035cc <HAL_TIM_IC_CaptureCallback>
 80033f2:	e005      	b.n	8003400 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80033f4:	6878      	ldr	r0, [r7, #4]
 80033f6:	f000 f8e0 	bl	80035ba <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80033fa:	6878      	ldr	r0, [r7, #4]
 80033fc:	f000 f8ef 	bl	80035de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	2200      	movs	r2, #0
 8003404:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	691b      	ldr	r3, [r3, #16]
 800340c:	f003 0304 	and.w	r3, r3, #4
 8003410:	2b04      	cmp	r3, #4
 8003412:	d122      	bne.n	800345a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	68db      	ldr	r3, [r3, #12]
 800341a:	f003 0304 	and.w	r3, r3, #4
 800341e:	2b04      	cmp	r3, #4
 8003420:	d11b      	bne.n	800345a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f06f 0204 	mvn.w	r2, #4
 800342a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	2202      	movs	r2, #2
 8003430:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	699b      	ldr	r3, [r3, #24]
 8003438:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800343c:	2b00      	cmp	r3, #0
 800343e:	d003      	beq.n	8003448 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003440:	6878      	ldr	r0, [r7, #4]
 8003442:	f000 f8c3 	bl	80035cc <HAL_TIM_IC_CaptureCallback>
 8003446:	e005      	b.n	8003454 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003448:	6878      	ldr	r0, [r7, #4]
 800344a:	f000 f8b6 	bl	80035ba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800344e:	6878      	ldr	r0, [r7, #4]
 8003450:	f000 f8c5 	bl	80035de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	2200      	movs	r2, #0
 8003458:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	691b      	ldr	r3, [r3, #16]
 8003460:	f003 0308 	and.w	r3, r3, #8
 8003464:	2b08      	cmp	r3, #8
 8003466:	d122      	bne.n	80034ae <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	68db      	ldr	r3, [r3, #12]
 800346e:	f003 0308 	and.w	r3, r3, #8
 8003472:	2b08      	cmp	r3, #8
 8003474:	d11b      	bne.n	80034ae <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f06f 0208 	mvn.w	r2, #8
 800347e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	2204      	movs	r2, #4
 8003484:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	69db      	ldr	r3, [r3, #28]
 800348c:	f003 0303 	and.w	r3, r3, #3
 8003490:	2b00      	cmp	r3, #0
 8003492:	d003      	beq.n	800349c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003494:	6878      	ldr	r0, [r7, #4]
 8003496:	f000 f899 	bl	80035cc <HAL_TIM_IC_CaptureCallback>
 800349a:	e005      	b.n	80034a8 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800349c:	6878      	ldr	r0, [r7, #4]
 800349e:	f000 f88c 	bl	80035ba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80034a2:	6878      	ldr	r0, [r7, #4]
 80034a4:	f000 f89b 	bl	80035de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	2200      	movs	r2, #0
 80034ac:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	691b      	ldr	r3, [r3, #16]
 80034b4:	f003 0310 	and.w	r3, r3, #16
 80034b8:	2b10      	cmp	r3, #16
 80034ba:	d122      	bne.n	8003502 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	68db      	ldr	r3, [r3, #12]
 80034c2:	f003 0310 	and.w	r3, r3, #16
 80034c6:	2b10      	cmp	r3, #16
 80034c8:	d11b      	bne.n	8003502 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f06f 0210 	mvn.w	r2, #16
 80034d2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	2208      	movs	r2, #8
 80034d8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	69db      	ldr	r3, [r3, #28]
 80034e0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d003      	beq.n	80034f0 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80034e8:	6878      	ldr	r0, [r7, #4]
 80034ea:	f000 f86f 	bl	80035cc <HAL_TIM_IC_CaptureCallback>
 80034ee:	e005      	b.n	80034fc <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80034f0:	6878      	ldr	r0, [r7, #4]
 80034f2:	f000 f862 	bl	80035ba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80034f6:	6878      	ldr	r0, [r7, #4]
 80034f8:	f000 f871 	bl	80035de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	2200      	movs	r2, #0
 8003500:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	691b      	ldr	r3, [r3, #16]
 8003508:	f003 0301 	and.w	r3, r3, #1
 800350c:	2b01      	cmp	r3, #1
 800350e:	d10e      	bne.n	800352e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	68db      	ldr	r3, [r3, #12]
 8003516:	f003 0301 	and.w	r3, r3, #1
 800351a:	2b01      	cmp	r3, #1
 800351c:	d107      	bne.n	800352e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f06f 0201 	mvn.w	r2, #1
 8003526:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003528:	6878      	ldr	r0, [r7, #4]
 800352a:	f7fd faa5 	bl	8000a78 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	691b      	ldr	r3, [r3, #16]
 8003534:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003538:	2b80      	cmp	r3, #128	; 0x80
 800353a:	d10e      	bne.n	800355a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	68db      	ldr	r3, [r3, #12]
 8003542:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003546:	2b80      	cmp	r3, #128	; 0x80
 8003548:	d107      	bne.n	800355a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003552:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003554:	6878      	ldr	r0, [r7, #4]
 8003556:	f000 f8c0 	bl	80036da <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	691b      	ldr	r3, [r3, #16]
 8003560:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003564:	2b40      	cmp	r3, #64	; 0x40
 8003566:	d10e      	bne.n	8003586 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	68db      	ldr	r3, [r3, #12]
 800356e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003572:	2b40      	cmp	r3, #64	; 0x40
 8003574:	d107      	bne.n	8003586 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800357e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003580:	6878      	ldr	r0, [r7, #4]
 8003582:	f000 f835 	bl	80035f0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	691b      	ldr	r3, [r3, #16]
 800358c:	f003 0320 	and.w	r3, r3, #32
 8003590:	2b20      	cmp	r3, #32
 8003592:	d10e      	bne.n	80035b2 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	68db      	ldr	r3, [r3, #12]
 800359a:	f003 0320 	and.w	r3, r3, #32
 800359e:	2b20      	cmp	r3, #32
 80035a0:	d107      	bne.n	80035b2 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f06f 0220 	mvn.w	r2, #32
 80035aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80035ac:	6878      	ldr	r0, [r7, #4]
 80035ae:	f000 f88b 	bl	80036c8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80035b2:	bf00      	nop
 80035b4:	3708      	adds	r7, #8
 80035b6:	46bd      	mov	sp, r7
 80035b8:	bd80      	pop	{r7, pc}

080035ba <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80035ba:	b480      	push	{r7}
 80035bc:	b083      	sub	sp, #12
 80035be:	af00      	add	r7, sp, #0
 80035c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80035c2:	bf00      	nop
 80035c4:	370c      	adds	r7, #12
 80035c6:	46bd      	mov	sp, r7
 80035c8:	bc80      	pop	{r7}
 80035ca:	4770      	bx	lr

080035cc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80035cc:	b480      	push	{r7}
 80035ce:	b083      	sub	sp, #12
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80035d4:	bf00      	nop
 80035d6:	370c      	adds	r7, #12
 80035d8:	46bd      	mov	sp, r7
 80035da:	bc80      	pop	{r7}
 80035dc:	4770      	bx	lr

080035de <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80035de:	b480      	push	{r7}
 80035e0:	b083      	sub	sp, #12
 80035e2:	af00      	add	r7, sp, #0
 80035e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80035e6:	bf00      	nop
 80035e8:	370c      	adds	r7, #12
 80035ea:	46bd      	mov	sp, r7
 80035ec:	bc80      	pop	{r7}
 80035ee:	4770      	bx	lr

080035f0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80035f0:	b480      	push	{r7}
 80035f2:	b083      	sub	sp, #12
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80035f8:	bf00      	nop
 80035fa:	370c      	adds	r7, #12
 80035fc:	46bd      	mov	sp, r7
 80035fe:	bc80      	pop	{r7}
 8003600:	4770      	bx	lr
	...

08003604 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003604:	b480      	push	{r7}
 8003606:	b085      	sub	sp, #20
 8003608:	af00      	add	r7, sp, #0
 800360a:	6078      	str	r0, [r7, #4]
 800360c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	4a29      	ldr	r2, [pc, #164]	; (80036bc <TIM_Base_SetConfig+0xb8>)
 8003618:	4293      	cmp	r3, r2
 800361a:	d00b      	beq.n	8003634 <TIM_Base_SetConfig+0x30>
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003622:	d007      	beq.n	8003634 <TIM_Base_SetConfig+0x30>
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	4a26      	ldr	r2, [pc, #152]	; (80036c0 <TIM_Base_SetConfig+0xbc>)
 8003628:	4293      	cmp	r3, r2
 800362a:	d003      	beq.n	8003634 <TIM_Base_SetConfig+0x30>
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	4a25      	ldr	r2, [pc, #148]	; (80036c4 <TIM_Base_SetConfig+0xc0>)
 8003630:	4293      	cmp	r3, r2
 8003632:	d108      	bne.n	8003646 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800363a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800363c:	683b      	ldr	r3, [r7, #0]
 800363e:	685b      	ldr	r3, [r3, #4]
 8003640:	68fa      	ldr	r2, [r7, #12]
 8003642:	4313      	orrs	r3, r2
 8003644:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	4a1c      	ldr	r2, [pc, #112]	; (80036bc <TIM_Base_SetConfig+0xb8>)
 800364a:	4293      	cmp	r3, r2
 800364c:	d00b      	beq.n	8003666 <TIM_Base_SetConfig+0x62>
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003654:	d007      	beq.n	8003666 <TIM_Base_SetConfig+0x62>
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	4a19      	ldr	r2, [pc, #100]	; (80036c0 <TIM_Base_SetConfig+0xbc>)
 800365a:	4293      	cmp	r3, r2
 800365c:	d003      	beq.n	8003666 <TIM_Base_SetConfig+0x62>
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	4a18      	ldr	r2, [pc, #96]	; (80036c4 <TIM_Base_SetConfig+0xc0>)
 8003662:	4293      	cmp	r3, r2
 8003664:	d108      	bne.n	8003678 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800366c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800366e:	683b      	ldr	r3, [r7, #0]
 8003670:	68db      	ldr	r3, [r3, #12]
 8003672:	68fa      	ldr	r2, [r7, #12]
 8003674:	4313      	orrs	r3, r2
 8003676:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800367e:	683b      	ldr	r3, [r7, #0]
 8003680:	695b      	ldr	r3, [r3, #20]
 8003682:	4313      	orrs	r3, r2
 8003684:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	68fa      	ldr	r2, [r7, #12]
 800368a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800368c:	683b      	ldr	r3, [r7, #0]
 800368e:	689a      	ldr	r2, [r3, #8]
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003694:	683b      	ldr	r3, [r7, #0]
 8003696:	681a      	ldr	r2, [r3, #0]
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	4a07      	ldr	r2, [pc, #28]	; (80036bc <TIM_Base_SetConfig+0xb8>)
 80036a0:	4293      	cmp	r3, r2
 80036a2:	d103      	bne.n	80036ac <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80036a4:	683b      	ldr	r3, [r7, #0]
 80036a6:	691a      	ldr	r2, [r3, #16]
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	2201      	movs	r2, #1
 80036b0:	615a      	str	r2, [r3, #20]
}
 80036b2:	bf00      	nop
 80036b4:	3714      	adds	r7, #20
 80036b6:	46bd      	mov	sp, r7
 80036b8:	bc80      	pop	{r7}
 80036ba:	4770      	bx	lr
 80036bc:	40012c00 	.word	0x40012c00
 80036c0:	40000400 	.word	0x40000400
 80036c4:	40000800 	.word	0x40000800

080036c8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80036c8:	b480      	push	{r7}
 80036ca:	b083      	sub	sp, #12
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80036d0:	bf00      	nop
 80036d2:	370c      	adds	r7, #12
 80036d4:	46bd      	mov	sp, r7
 80036d6:	bc80      	pop	{r7}
 80036d8:	4770      	bx	lr

080036da <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80036da:	b480      	push	{r7}
 80036dc:	b083      	sub	sp, #12
 80036de:	af00      	add	r7, sp, #0
 80036e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80036e2:	bf00      	nop
 80036e4:	370c      	adds	r7, #12
 80036e6:	46bd      	mov	sp, r7
 80036e8:	bc80      	pop	{r7}
 80036ea:	4770      	bx	lr

080036ec <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80036ec:	b580      	push	{r7, lr}
 80036ee:	b082      	sub	sp, #8
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d101      	bne.n	80036fe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80036fa:	2301      	movs	r3, #1
 80036fc:	e03f      	b.n	800377e <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003704:	b2db      	uxtb	r3, r3
 8003706:	2b00      	cmp	r3, #0
 8003708:	d106      	bne.n	8003718 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	2200      	movs	r2, #0
 800370e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003712:	6878      	ldr	r0, [r7, #4]
 8003714:	f7fe f862 	bl	80017dc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	2224      	movs	r2, #36	; 0x24
 800371c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	68da      	ldr	r2, [r3, #12]
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800372e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003730:	6878      	ldr	r0, [r7, #4]
 8003732:	f000 f90b 	bl	800394c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	691a      	ldr	r2, [r3, #16]
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003744:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	695a      	ldr	r2, [r3, #20]
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003754:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	68da      	ldr	r2, [r3, #12]
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003764:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	2200      	movs	r2, #0
 800376a:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	2220      	movs	r2, #32
 8003770:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	2220      	movs	r2, #32
 8003778:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800377c:	2300      	movs	r3, #0
}
 800377e:	4618      	mov	r0, r3
 8003780:	3708      	adds	r7, #8
 8003782:	46bd      	mov	sp, r7
 8003784:	bd80      	pop	{r7, pc}

08003786 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003786:	b580      	push	{r7, lr}
 8003788:	b088      	sub	sp, #32
 800378a:	af02      	add	r7, sp, #8
 800378c:	60f8      	str	r0, [r7, #12]
 800378e:	60b9      	str	r1, [r7, #8]
 8003790:	603b      	str	r3, [r7, #0]
 8003792:	4613      	mov	r3, r2
 8003794:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8003796:	2300      	movs	r3, #0
 8003798:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80037a0:	b2db      	uxtb	r3, r3
 80037a2:	2b20      	cmp	r3, #32
 80037a4:	f040 8083 	bne.w	80038ae <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 80037a8:	68bb      	ldr	r3, [r7, #8]
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d002      	beq.n	80037b4 <HAL_UART_Transmit+0x2e>
 80037ae:	88fb      	ldrh	r3, [r7, #6]
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d101      	bne.n	80037b8 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 80037b4:	2301      	movs	r3, #1
 80037b6:	e07b      	b.n	80038b0 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80037be:	2b01      	cmp	r3, #1
 80037c0:	d101      	bne.n	80037c6 <HAL_UART_Transmit+0x40>
 80037c2:	2302      	movs	r3, #2
 80037c4:	e074      	b.n	80038b0 <HAL_UART_Transmit+0x12a>
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	2201      	movs	r2, #1
 80037ca:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	2200      	movs	r2, #0
 80037d2:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	2221      	movs	r2, #33	; 0x21
 80037d8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80037dc:	f7fe f97a 	bl	8001ad4 <HAL_GetTick>
 80037e0:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	88fa      	ldrh	r2, [r7, #6]
 80037e6:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	88fa      	ldrh	r2, [r7, #6]
 80037ec:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80037ee:	e042      	b.n	8003876 <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80037f4:	b29b      	uxth	r3, r3
 80037f6:	3b01      	subs	r3, #1
 80037f8:	b29a      	uxth	r2, r3
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	689b      	ldr	r3, [r3, #8]
 8003802:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003806:	d122      	bne.n	800384e <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003808:	683b      	ldr	r3, [r7, #0]
 800380a:	9300      	str	r3, [sp, #0]
 800380c:	697b      	ldr	r3, [r7, #20]
 800380e:	2200      	movs	r2, #0
 8003810:	2180      	movs	r1, #128	; 0x80
 8003812:	68f8      	ldr	r0, [r7, #12]
 8003814:	f000 f850 	bl	80038b8 <UART_WaitOnFlagUntilTimeout>
 8003818:	4603      	mov	r3, r0
 800381a:	2b00      	cmp	r3, #0
 800381c:	d001      	beq.n	8003822 <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 800381e:	2303      	movs	r3, #3
 8003820:	e046      	b.n	80038b0 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8003822:	68bb      	ldr	r3, [r7, #8]
 8003824:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8003826:	693b      	ldr	r3, [r7, #16]
 8003828:	881b      	ldrh	r3, [r3, #0]
 800382a:	461a      	mov	r2, r3
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003834:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	691b      	ldr	r3, [r3, #16]
 800383a:	2b00      	cmp	r3, #0
 800383c:	d103      	bne.n	8003846 <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 800383e:	68bb      	ldr	r3, [r7, #8]
 8003840:	3302      	adds	r3, #2
 8003842:	60bb      	str	r3, [r7, #8]
 8003844:	e017      	b.n	8003876 <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 8003846:	68bb      	ldr	r3, [r7, #8]
 8003848:	3301      	adds	r3, #1
 800384a:	60bb      	str	r3, [r7, #8]
 800384c:	e013      	b.n	8003876 <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800384e:	683b      	ldr	r3, [r7, #0]
 8003850:	9300      	str	r3, [sp, #0]
 8003852:	697b      	ldr	r3, [r7, #20]
 8003854:	2200      	movs	r2, #0
 8003856:	2180      	movs	r1, #128	; 0x80
 8003858:	68f8      	ldr	r0, [r7, #12]
 800385a:	f000 f82d 	bl	80038b8 <UART_WaitOnFlagUntilTimeout>
 800385e:	4603      	mov	r3, r0
 8003860:	2b00      	cmp	r3, #0
 8003862:	d001      	beq.n	8003868 <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 8003864:	2303      	movs	r3, #3
 8003866:	e023      	b.n	80038b0 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8003868:	68bb      	ldr	r3, [r7, #8]
 800386a:	1c5a      	adds	r2, r3, #1
 800386c:	60ba      	str	r2, [r7, #8]
 800386e:	781a      	ldrb	r2, [r3, #0]
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800387a:	b29b      	uxth	r3, r3
 800387c:	2b00      	cmp	r3, #0
 800387e:	d1b7      	bne.n	80037f0 <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003880:	683b      	ldr	r3, [r7, #0]
 8003882:	9300      	str	r3, [sp, #0]
 8003884:	697b      	ldr	r3, [r7, #20]
 8003886:	2200      	movs	r2, #0
 8003888:	2140      	movs	r1, #64	; 0x40
 800388a:	68f8      	ldr	r0, [r7, #12]
 800388c:	f000 f814 	bl	80038b8 <UART_WaitOnFlagUntilTimeout>
 8003890:	4603      	mov	r3, r0
 8003892:	2b00      	cmp	r3, #0
 8003894:	d001      	beq.n	800389a <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8003896:	2303      	movs	r3, #3
 8003898:	e00a      	b.n	80038b0 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	2220      	movs	r2, #32
 800389e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	2200      	movs	r2, #0
 80038a6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 80038aa:	2300      	movs	r3, #0
 80038ac:	e000      	b.n	80038b0 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 80038ae:	2302      	movs	r3, #2
  }
}
 80038b0:	4618      	mov	r0, r3
 80038b2:	3718      	adds	r7, #24
 80038b4:	46bd      	mov	sp, r7
 80038b6:	bd80      	pop	{r7, pc}

080038b8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80038b8:	b580      	push	{r7, lr}
 80038ba:	b084      	sub	sp, #16
 80038bc:	af00      	add	r7, sp, #0
 80038be:	60f8      	str	r0, [r7, #12]
 80038c0:	60b9      	str	r1, [r7, #8]
 80038c2:	603b      	str	r3, [r7, #0]
 80038c4:	4613      	mov	r3, r2
 80038c6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80038c8:	e02c      	b.n	8003924 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80038ca:	69bb      	ldr	r3, [r7, #24]
 80038cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038d0:	d028      	beq.n	8003924 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80038d2:	69bb      	ldr	r3, [r7, #24]
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d007      	beq.n	80038e8 <UART_WaitOnFlagUntilTimeout+0x30>
 80038d8:	f7fe f8fc 	bl	8001ad4 <HAL_GetTick>
 80038dc:	4602      	mov	r2, r0
 80038de:	683b      	ldr	r3, [r7, #0]
 80038e0:	1ad3      	subs	r3, r2, r3
 80038e2:	69ba      	ldr	r2, [r7, #24]
 80038e4:	429a      	cmp	r2, r3
 80038e6:	d21d      	bcs.n	8003924 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	68da      	ldr	r2, [r3, #12]
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80038f6:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	695a      	ldr	r2, [r3, #20]
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f022 0201 	bic.w	r2, r2, #1
 8003906:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	2220      	movs	r2, #32
 800390c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	2220      	movs	r2, #32
 8003914:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	2200      	movs	r2, #0
 800391c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8003920:	2303      	movs	r3, #3
 8003922:	e00f      	b.n	8003944 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	681a      	ldr	r2, [r3, #0]
 800392a:	68bb      	ldr	r3, [r7, #8]
 800392c:	4013      	ands	r3, r2
 800392e:	68ba      	ldr	r2, [r7, #8]
 8003930:	429a      	cmp	r2, r3
 8003932:	bf0c      	ite	eq
 8003934:	2301      	moveq	r3, #1
 8003936:	2300      	movne	r3, #0
 8003938:	b2db      	uxtb	r3, r3
 800393a:	461a      	mov	r2, r3
 800393c:	79fb      	ldrb	r3, [r7, #7]
 800393e:	429a      	cmp	r2, r3
 8003940:	d0c3      	beq.n	80038ca <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003942:	2300      	movs	r3, #0
}
 8003944:	4618      	mov	r0, r3
 8003946:	3710      	adds	r7, #16
 8003948:	46bd      	mov	sp, r7
 800394a:	bd80      	pop	{r7, pc}

0800394c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800394c:	b580      	push	{r7, lr}
 800394e:	b084      	sub	sp, #16
 8003950:	af00      	add	r7, sp, #0
 8003952:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	691b      	ldr	r3, [r3, #16]
 800395a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	68da      	ldr	r2, [r3, #12]
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	430a      	orrs	r2, r1
 8003968:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	689a      	ldr	r2, [r3, #8]
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	691b      	ldr	r3, [r3, #16]
 8003972:	431a      	orrs	r2, r3
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	695b      	ldr	r3, [r3, #20]
 8003978:	4313      	orrs	r3, r2
 800397a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	68db      	ldr	r3, [r3, #12]
 8003982:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003986:	f023 030c 	bic.w	r3, r3, #12
 800398a:	687a      	ldr	r2, [r7, #4]
 800398c:	6812      	ldr	r2, [r2, #0]
 800398e:	68f9      	ldr	r1, [r7, #12]
 8003990:	430b      	orrs	r3, r1
 8003992:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	695b      	ldr	r3, [r3, #20]
 800399a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	699a      	ldr	r2, [r3, #24]
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	430a      	orrs	r2, r1
 80039a8:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	4a52      	ldr	r2, [pc, #328]	; (8003af8 <UART_SetConfig+0x1ac>)
 80039b0:	4293      	cmp	r3, r2
 80039b2:	d14e      	bne.n	8003a52 <UART_SetConfig+0x106>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80039b4:	f7fe ff26 	bl	8002804 <HAL_RCC_GetPCLK2Freq>
 80039b8:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80039ba:	68ba      	ldr	r2, [r7, #8]
 80039bc:	4613      	mov	r3, r2
 80039be:	009b      	lsls	r3, r3, #2
 80039c0:	4413      	add	r3, r2
 80039c2:	009a      	lsls	r2, r3, #2
 80039c4:	441a      	add	r2, r3
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	685b      	ldr	r3, [r3, #4]
 80039ca:	009b      	lsls	r3, r3, #2
 80039cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80039d0:	4a4a      	ldr	r2, [pc, #296]	; (8003afc <UART_SetConfig+0x1b0>)
 80039d2:	fba2 2303 	umull	r2, r3, r2, r3
 80039d6:	095b      	lsrs	r3, r3, #5
 80039d8:	0119      	lsls	r1, r3, #4
 80039da:	68ba      	ldr	r2, [r7, #8]
 80039dc:	4613      	mov	r3, r2
 80039de:	009b      	lsls	r3, r3, #2
 80039e0:	4413      	add	r3, r2
 80039e2:	009a      	lsls	r2, r3, #2
 80039e4:	441a      	add	r2, r3
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	685b      	ldr	r3, [r3, #4]
 80039ea:	009b      	lsls	r3, r3, #2
 80039ec:	fbb2 f2f3 	udiv	r2, r2, r3
 80039f0:	4b42      	ldr	r3, [pc, #264]	; (8003afc <UART_SetConfig+0x1b0>)
 80039f2:	fba3 0302 	umull	r0, r3, r3, r2
 80039f6:	095b      	lsrs	r3, r3, #5
 80039f8:	2064      	movs	r0, #100	; 0x64
 80039fa:	fb00 f303 	mul.w	r3, r0, r3
 80039fe:	1ad3      	subs	r3, r2, r3
 8003a00:	011b      	lsls	r3, r3, #4
 8003a02:	3332      	adds	r3, #50	; 0x32
 8003a04:	4a3d      	ldr	r2, [pc, #244]	; (8003afc <UART_SetConfig+0x1b0>)
 8003a06:	fba2 2303 	umull	r2, r3, r2, r3
 8003a0a:	095b      	lsrs	r3, r3, #5
 8003a0c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003a10:	4419      	add	r1, r3
 8003a12:	68ba      	ldr	r2, [r7, #8]
 8003a14:	4613      	mov	r3, r2
 8003a16:	009b      	lsls	r3, r3, #2
 8003a18:	4413      	add	r3, r2
 8003a1a:	009a      	lsls	r2, r3, #2
 8003a1c:	441a      	add	r2, r3
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	685b      	ldr	r3, [r3, #4]
 8003a22:	009b      	lsls	r3, r3, #2
 8003a24:	fbb2 f2f3 	udiv	r2, r2, r3
 8003a28:	4b34      	ldr	r3, [pc, #208]	; (8003afc <UART_SetConfig+0x1b0>)
 8003a2a:	fba3 0302 	umull	r0, r3, r3, r2
 8003a2e:	095b      	lsrs	r3, r3, #5
 8003a30:	2064      	movs	r0, #100	; 0x64
 8003a32:	fb00 f303 	mul.w	r3, r0, r3
 8003a36:	1ad3      	subs	r3, r2, r3
 8003a38:	011b      	lsls	r3, r3, #4
 8003a3a:	3332      	adds	r3, #50	; 0x32
 8003a3c:	4a2f      	ldr	r2, [pc, #188]	; (8003afc <UART_SetConfig+0x1b0>)
 8003a3e:	fba2 2303 	umull	r2, r3, r2, r3
 8003a42:	095b      	lsrs	r3, r3, #5
 8003a44:	f003 020f 	and.w	r2, r3, #15
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	440a      	add	r2, r1
 8003a4e:	609a      	str	r2, [r3, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 8003a50:	e04d      	b.n	8003aee <UART_SetConfig+0x1a2>
    pclk = HAL_RCC_GetPCLK1Freq();
 8003a52:	f7fe fec3 	bl	80027dc <HAL_RCC_GetPCLK1Freq>
 8003a56:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003a58:	68ba      	ldr	r2, [r7, #8]
 8003a5a:	4613      	mov	r3, r2
 8003a5c:	009b      	lsls	r3, r3, #2
 8003a5e:	4413      	add	r3, r2
 8003a60:	009a      	lsls	r2, r3, #2
 8003a62:	441a      	add	r2, r3
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	685b      	ldr	r3, [r3, #4]
 8003a68:	009b      	lsls	r3, r3, #2
 8003a6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a6e:	4a23      	ldr	r2, [pc, #140]	; (8003afc <UART_SetConfig+0x1b0>)
 8003a70:	fba2 2303 	umull	r2, r3, r2, r3
 8003a74:	095b      	lsrs	r3, r3, #5
 8003a76:	0119      	lsls	r1, r3, #4
 8003a78:	68ba      	ldr	r2, [r7, #8]
 8003a7a:	4613      	mov	r3, r2
 8003a7c:	009b      	lsls	r3, r3, #2
 8003a7e:	4413      	add	r3, r2
 8003a80:	009a      	lsls	r2, r3, #2
 8003a82:	441a      	add	r2, r3
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	685b      	ldr	r3, [r3, #4]
 8003a88:	009b      	lsls	r3, r3, #2
 8003a8a:	fbb2 f2f3 	udiv	r2, r2, r3
 8003a8e:	4b1b      	ldr	r3, [pc, #108]	; (8003afc <UART_SetConfig+0x1b0>)
 8003a90:	fba3 0302 	umull	r0, r3, r3, r2
 8003a94:	095b      	lsrs	r3, r3, #5
 8003a96:	2064      	movs	r0, #100	; 0x64
 8003a98:	fb00 f303 	mul.w	r3, r0, r3
 8003a9c:	1ad3      	subs	r3, r2, r3
 8003a9e:	011b      	lsls	r3, r3, #4
 8003aa0:	3332      	adds	r3, #50	; 0x32
 8003aa2:	4a16      	ldr	r2, [pc, #88]	; (8003afc <UART_SetConfig+0x1b0>)
 8003aa4:	fba2 2303 	umull	r2, r3, r2, r3
 8003aa8:	095b      	lsrs	r3, r3, #5
 8003aaa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003aae:	4419      	add	r1, r3
 8003ab0:	68ba      	ldr	r2, [r7, #8]
 8003ab2:	4613      	mov	r3, r2
 8003ab4:	009b      	lsls	r3, r3, #2
 8003ab6:	4413      	add	r3, r2
 8003ab8:	009a      	lsls	r2, r3, #2
 8003aba:	441a      	add	r2, r3
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	685b      	ldr	r3, [r3, #4]
 8003ac0:	009b      	lsls	r3, r3, #2
 8003ac2:	fbb2 f2f3 	udiv	r2, r2, r3
 8003ac6:	4b0d      	ldr	r3, [pc, #52]	; (8003afc <UART_SetConfig+0x1b0>)
 8003ac8:	fba3 0302 	umull	r0, r3, r3, r2
 8003acc:	095b      	lsrs	r3, r3, #5
 8003ace:	2064      	movs	r0, #100	; 0x64
 8003ad0:	fb00 f303 	mul.w	r3, r0, r3
 8003ad4:	1ad3      	subs	r3, r2, r3
 8003ad6:	011b      	lsls	r3, r3, #4
 8003ad8:	3332      	adds	r3, #50	; 0x32
 8003ada:	4a08      	ldr	r2, [pc, #32]	; (8003afc <UART_SetConfig+0x1b0>)
 8003adc:	fba2 2303 	umull	r2, r3, r2, r3
 8003ae0:	095b      	lsrs	r3, r3, #5
 8003ae2:	f003 020f 	and.w	r2, r3, #15
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	440a      	add	r2, r1
 8003aec:	609a      	str	r2, [r3, #8]
}
 8003aee:	bf00      	nop
 8003af0:	3710      	adds	r7, #16
 8003af2:	46bd      	mov	sp, r7
 8003af4:	bd80      	pop	{r7, pc}
 8003af6:	bf00      	nop
 8003af8:	40013800 	.word	0x40013800
 8003afc:	51eb851f 	.word	0x51eb851f

08003b00 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8003b00:	b480      	push	{r7}
 8003b02:	b085      	sub	sp, #20
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	4603      	mov	r3, r0
 8003b08:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8003b0a:	2300      	movs	r3, #0
 8003b0c:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8003b0e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003b12:	2b84      	cmp	r3, #132	; 0x84
 8003b14:	d005      	beq.n	8003b22 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8003b16:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	4413      	add	r3, r2
 8003b1e:	3303      	adds	r3, #3
 8003b20:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8003b22:	68fb      	ldr	r3, [r7, #12]
}
 8003b24:	4618      	mov	r0, r3
 8003b26:	3714      	adds	r7, #20
 8003b28:	46bd      	mov	sp, r7
 8003b2a:	bc80      	pop	{r7}
 8003b2c:	4770      	bx	lr

08003b2e <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8003b2e:	b480      	push	{r7}
 8003b30:	b083      	sub	sp, #12
 8003b32:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003b34:	f3ef 8305 	mrs	r3, IPSR
 8003b38:	607b      	str	r3, [r7, #4]
  return(result);
 8003b3a:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	bf14      	ite	ne
 8003b40:	2301      	movne	r3, #1
 8003b42:	2300      	moveq	r3, #0
 8003b44:	b2db      	uxtb	r3, r3
}
 8003b46:	4618      	mov	r0, r3
 8003b48:	370c      	adds	r7, #12
 8003b4a:	46bd      	mov	sp, r7
 8003b4c:	bc80      	pop	{r7}
 8003b4e:	4770      	bx	lr

08003b50 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8003b50:	b580      	push	{r7, lr}
 8003b52:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8003b54:	f001 fc32 	bl	80053bc <vTaskStartScheduler>
  
  return osOK;
 8003b58:	2300      	movs	r3, #0
}
 8003b5a:	4618      	mov	r0, r3
 8003b5c:	bd80      	pop	{r7, pc}

08003b5e <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8003b5e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003b60:	b089      	sub	sp, #36	; 0x24
 8003b62:	af04      	add	r7, sp, #16
 8003b64:	6078      	str	r0, [r7, #4]
 8003b66:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	695b      	ldr	r3, [r3, #20]
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d020      	beq.n	8003bb2 <osThreadCreate+0x54>
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	699b      	ldr	r3, [r3, #24]
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d01c      	beq.n	8003bb2 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	685c      	ldr	r4, [r3, #4]
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681d      	ldr	r5, [r3, #0]
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	691e      	ldr	r6, [r3, #16]
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	f7ff ffb8 	bl	8003b00 <makeFreeRtosPriority>
 8003b90:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	695b      	ldr	r3, [r3, #20]
 8003b96:	687a      	ldr	r2, [r7, #4]
 8003b98:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003b9a:	9202      	str	r2, [sp, #8]
 8003b9c:	9301      	str	r3, [sp, #4]
 8003b9e:	9100      	str	r1, [sp, #0]
 8003ba0:	683b      	ldr	r3, [r7, #0]
 8003ba2:	4632      	mov	r2, r6
 8003ba4:	4629      	mov	r1, r5
 8003ba6:	4620      	mov	r0, r4
 8003ba8:	f001 fa4e 	bl	8005048 <xTaskCreateStatic>
 8003bac:	4603      	mov	r3, r0
 8003bae:	60fb      	str	r3, [r7, #12]
 8003bb0:	e01c      	b.n	8003bec <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	685c      	ldr	r4, [r3, #4]
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003bbe:	b29e      	uxth	r6, r3
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003bc6:	4618      	mov	r0, r3
 8003bc8:	f7ff ff9a 	bl	8003b00 <makeFreeRtosPriority>
 8003bcc:	4602      	mov	r2, r0
 8003bce:	f107 030c 	add.w	r3, r7, #12
 8003bd2:	9301      	str	r3, [sp, #4]
 8003bd4:	9200      	str	r2, [sp, #0]
 8003bd6:	683b      	ldr	r3, [r7, #0]
 8003bd8:	4632      	mov	r2, r6
 8003bda:	4629      	mov	r1, r5
 8003bdc:	4620      	mov	r0, r4
 8003bde:	f001 fa8c 	bl	80050fa <xTaskCreate>
 8003be2:	4603      	mov	r3, r0
 8003be4:	2b01      	cmp	r3, #1
 8003be6:	d001      	beq.n	8003bec <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8003be8:	2300      	movs	r3, #0
 8003bea:	e000      	b.n	8003bee <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8003bec:	68fb      	ldr	r3, [r7, #12]
}
 8003bee:	4618      	mov	r0, r3
 8003bf0:	3714      	adds	r7, #20
 8003bf2:	46bd      	mov	sp, r7
 8003bf4:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003bf6 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8003bf6:	b580      	push	{r7, lr}
 8003bf8:	b084      	sub	sp, #16
 8003bfa:	af00      	add	r7, sp, #0
 8003bfc:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d001      	beq.n	8003c0c <osDelay+0x16>
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	e000      	b.n	8003c0e <osDelay+0x18>
 8003c0c:	2301      	movs	r3, #1
 8003c0e:	4618      	mov	r0, r3
 8003c10:	f001 fba0 	bl	8005354 <vTaskDelay>
  
  return osOK;
 8003c14:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8003c16:	4618      	mov	r0, r3
 8003c18:	3710      	adds	r7, #16
 8003c1a:	46bd      	mov	sp, r7
 8003c1c:	bd80      	pop	{r7, pc}
	...

08003c20 <osTimerCreate>:
* @param  argument      argument to the timer call back function.
* @retval  timer ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osTimerCreate shall be consistent in every CMSIS-RTOS.
*/
osTimerId osTimerCreate (const osTimerDef_t *timer_def, os_timer_type type, void *argument)
{
 8003c20:	b580      	push	{r7, lr}
 8003c22:	b086      	sub	sp, #24
 8003c24:	af02      	add	r7, sp, #8
 8003c26:	60f8      	str	r0, [r7, #12]
 8003c28:	460b      	mov	r3, r1
 8003c2a:	607a      	str	r2, [r7, #4]
 8003c2c:	72fb      	strb	r3, [r7, #11]
#if (configUSE_TIMERS == 1)

#if( ( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) 
  if(timer_def->controlblock != NULL) {
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	685b      	ldr	r3, [r3, #4]
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d013      	beq.n	8003c5e <osTimerCreate+0x3e>
    return xTimerCreateStatic((const char *)"",
 8003c36:	7afb      	ldrb	r3, [r7, #11]
 8003c38:	2b01      	cmp	r3, #1
 8003c3a:	d101      	bne.n	8003c40 <osTimerCreate+0x20>
 8003c3c:	2101      	movs	r1, #1
 8003c3e:	e000      	b.n	8003c42 <osTimerCreate+0x22>
 8003c40:	2100      	movs	r1, #0
                      1, // period should be filled when starting the Timer using osTimerStart
                      (type == osTimerPeriodic) ? pdTRUE : pdFALSE,
                      (void *) argument,
                      (TaskFunction_t)timer_def->ptimer,
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	681b      	ldr	r3, [r3, #0]
                      (StaticTimer_t *)timer_def->controlblock);
 8003c46:	68fa      	ldr	r2, [r7, #12]
 8003c48:	6852      	ldr	r2, [r2, #4]
    return xTimerCreateStatic((const char *)"",
 8003c4a:	9201      	str	r2, [sp, #4]
 8003c4c:	9300      	str	r3, [sp, #0]
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	460a      	mov	r2, r1
 8003c52:	2101      	movs	r1, #1
 8003c54:	480b      	ldr	r0, [pc, #44]	; (8003c84 <osTimerCreate+0x64>)
 8003c56:	f002 faa4 	bl	80061a2 <xTimerCreateStatic>
 8003c5a:	4603      	mov	r3, r0
 8003c5c:	e00e      	b.n	8003c7c <osTimerCreate+0x5c>
  }
  else {
    return xTimerCreate((const char *)"",
 8003c5e:	7afb      	ldrb	r3, [r7, #11]
 8003c60:	2b01      	cmp	r3, #1
 8003c62:	d101      	bne.n	8003c68 <osTimerCreate+0x48>
 8003c64:	2201      	movs	r2, #1
 8003c66:	e000      	b.n	8003c6a <osTimerCreate+0x4a>
 8003c68:	2200      	movs	r2, #0
                      1, // period should be filled when starting the Timer using osTimerStart
                      (type == osTimerPeriodic) ? pdTRUE : pdFALSE,
                      (void *) argument,
                      (TaskFunction_t)timer_def->ptimer);
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	681b      	ldr	r3, [r3, #0]
    return xTimerCreate((const char *)"",
 8003c6e:	9300      	str	r3, [sp, #0]
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	2101      	movs	r1, #1
 8003c74:	4803      	ldr	r0, [pc, #12]	; (8003c84 <osTimerCreate+0x64>)
 8003c76:	f002 fa73 	bl	8006160 <xTimerCreate>
 8003c7a:	4603      	mov	r3, r0
#endif

#else 
	return NULL;
#endif
}
 8003c7c:	4618      	mov	r0, r3
 8003c7e:	3710      	adds	r7, #16
 8003c80:	46bd      	mov	sp, r7
 8003c82:	bd80      	pop	{r7, pc}
 8003c84:	080079d4 	.word	0x080079d4

08003c88 <osTimerStart>:
* @param  millisec      time delay value of the timer.
* @retval  status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osTimerStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osTimerStart (osTimerId timer_id, uint32_t millisec)
{
 8003c88:	b580      	push	{r7, lr}
 8003c8a:	b088      	sub	sp, #32
 8003c8c:	af02      	add	r7, sp, #8
 8003c8e:	6078      	str	r0, [r7, #4]
 8003c90:	6039      	str	r1, [r7, #0]
  osStatus result = osOK;
 8003c92:	2300      	movs	r3, #0
 8003c94:	617b      	str	r3, [r7, #20]
#if (configUSE_TIMERS == 1)  
  portBASE_TYPE taskWoken = pdFALSE;
 8003c96:	2300      	movs	r3, #0
 8003c98:	60fb      	str	r3, [r7, #12]
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8003c9a:	683b      	ldr	r3, [r7, #0]
 8003c9c:	613b      	str	r3, [r7, #16]

  if (ticks == 0)
 8003c9e:	693b      	ldr	r3, [r7, #16]
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d101      	bne.n	8003ca8 <osTimerStart+0x20>
    ticks = 1;
 8003ca4:	2301      	movs	r3, #1
 8003ca6:	613b      	str	r3, [r7, #16]
    
  if (inHandlerMode()) 
 8003ca8:	f7ff ff41 	bl	8003b2e <inHandlerMode>
 8003cac:	4603      	mov	r3, r0
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d01b      	beq.n	8003cea <osTimerStart+0x62>
  {
    if (xTimerChangePeriodFromISR(timer_id, ticks, &taskWoken) != pdPASS)
 8003cb2:	f107 020c 	add.w	r2, r7, #12
 8003cb6:	2300      	movs	r3, #0
 8003cb8:	9300      	str	r3, [sp, #0]
 8003cba:	4613      	mov	r3, r2
 8003cbc:	693a      	ldr	r2, [r7, #16]
 8003cbe:	2109      	movs	r1, #9
 8003cc0:	6878      	ldr	r0, [r7, #4]
 8003cc2:	f002 fadb 	bl	800627c <xTimerGenericCommand>
 8003cc6:	4603      	mov	r3, r0
 8003cc8:	2b01      	cmp	r3, #1
 8003cca:	d002      	beq.n	8003cd2 <osTimerStart+0x4a>
    {
      result = osErrorOS;
 8003ccc:	23ff      	movs	r3, #255	; 0xff
 8003cce:	617b      	str	r3, [r7, #20]
 8003cd0:	e018      	b.n	8003d04 <osTimerStart+0x7c>
    }
    else
    {
      portEND_SWITCHING_ISR(taskWoken);     
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d015      	beq.n	8003d04 <osTimerStart+0x7c>
 8003cd8:	4b0d      	ldr	r3, [pc, #52]	; (8003d10 <osTimerStart+0x88>)
 8003cda:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003cde:	601a      	str	r2, [r3, #0]
 8003ce0:	f3bf 8f4f 	dsb	sy
 8003ce4:	f3bf 8f6f 	isb	sy
 8003ce8:	e00c      	b.n	8003d04 <osTimerStart+0x7c>
    }
  }
  else 
  {
    if (xTimerChangePeriod(timer_id, ticks, 0) != pdPASS)
 8003cea:	2300      	movs	r3, #0
 8003cec:	9300      	str	r3, [sp, #0]
 8003cee:	2300      	movs	r3, #0
 8003cf0:	693a      	ldr	r2, [r7, #16]
 8003cf2:	2104      	movs	r1, #4
 8003cf4:	6878      	ldr	r0, [r7, #4]
 8003cf6:	f002 fac1 	bl	800627c <xTimerGenericCommand>
 8003cfa:	4603      	mov	r3, r0
 8003cfc:	2b01      	cmp	r3, #1
 8003cfe:	d001      	beq.n	8003d04 <osTimerStart+0x7c>
      result = osErrorOS;
 8003d00:	23ff      	movs	r3, #255	; 0xff
 8003d02:	617b      	str	r3, [r7, #20]
  }

#else 
  result = osErrorOS;
#endif
  return result;
 8003d04:	697b      	ldr	r3, [r7, #20]
}
 8003d06:	4618      	mov	r0, r3
 8003d08:	3718      	adds	r7, #24
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	bd80      	pop	{r7, pc}
 8003d0e:	bf00      	nop
 8003d10:	e000ed04 	.word	0xe000ed04

08003d14 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 8003d14:	b580      	push	{r7, lr}
 8003d16:	b082      	sub	sp, #8
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	685b      	ldr	r3, [r3, #4]
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d007      	beq.n	8003d34 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	685b      	ldr	r3, [r3, #4]
 8003d28:	4619      	mov	r1, r3
 8003d2a:	2001      	movs	r0, #1
 8003d2c:	f000 fbfe 	bl	800452c <xQueueCreateMutexStatic>
 8003d30:	4603      	mov	r3, r0
 8003d32:	e003      	b.n	8003d3c <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 8003d34:	2001      	movs	r0, #1
 8003d36:	f000 fbe1 	bl	80044fc <xQueueCreateMutex>
 8003d3a:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 8003d3c:	4618      	mov	r0, r3
 8003d3e:	3708      	adds	r7, #8
 8003d40:	46bd      	mov	sp, r7
 8003d42:	bd80      	pop	{r7, pc}

08003d44 <osPoolCreate>:
* @param  pool_def      memory pool definition referenced with \ref osPool.
* @retval  memory pool ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osPoolCreate shall be consistent in every CMSIS-RTOS.
*/
osPoolId osPoolCreate (const osPoolDef_t *pool_def)
{
 8003d44:	b580      	push	{r7, lr}
 8003d46:	b086      	sub	sp, #24
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	6078      	str	r0, [r7, #4]
#if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
  osPoolId thePool;
  int itemSize = 4 * ((pool_def->item_sz + 3) / 4);
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	685b      	ldr	r3, [r3, #4]
 8003d50:	3303      	adds	r3, #3
 8003d52:	f023 0303 	bic.w	r3, r3, #3
 8003d56:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  
  /* First have to allocate memory for the pool control block. */
 thePool = pvPortMalloc(sizeof(os_pool_cb_t));
 8003d58:	2014      	movs	r0, #20
 8003d5a:	f002 ff1b 	bl	8006b94 <pvPortMalloc>
 8003d5e:	6178      	str	r0, [r7, #20]

  
  if (thePool) {
 8003d60:	697b      	ldr	r3, [r7, #20]
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d046      	beq.n	8003df4 <osPoolCreate+0xb0>
    thePool->pool_sz = pool_def->pool_sz;
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681a      	ldr	r2, [r3, #0]
 8003d6a:	697b      	ldr	r3, [r7, #20]
 8003d6c:	609a      	str	r2, [r3, #8]
    thePool->item_sz = itemSize;
 8003d6e:	68fa      	ldr	r2, [r7, #12]
 8003d70:	697b      	ldr	r3, [r7, #20]
 8003d72:	60da      	str	r2, [r3, #12]
    thePool->currentIndex = 0;
 8003d74:	697b      	ldr	r3, [r7, #20]
 8003d76:	2200      	movs	r2, #0
 8003d78:	611a      	str	r2, [r3, #16]
    
    /* Memory for markers */
    thePool->markers = pvPortMalloc(pool_def->pool_sz);
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	4618      	mov	r0, r3
 8003d80:	f002 ff08 	bl	8006b94 <pvPortMalloc>
 8003d84:	4602      	mov	r2, r0
 8003d86:	697b      	ldr	r3, [r7, #20]
 8003d88:	605a      	str	r2, [r3, #4]
   
    if (thePool->markers) {
 8003d8a:	697b      	ldr	r3, [r7, #20]
 8003d8c:	685b      	ldr	r3, [r3, #4]
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d02b      	beq.n	8003dea <osPoolCreate+0xa6>
      /* Now allocate the pool itself. */
     thePool->pool = pvPortMalloc(pool_def->pool_sz * itemSize);
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	68fa      	ldr	r2, [r7, #12]
 8003d98:	fb02 f303 	mul.w	r3, r2, r3
 8003d9c:	4618      	mov	r0, r3
 8003d9e:	f002 fef9 	bl	8006b94 <pvPortMalloc>
 8003da2:	4602      	mov	r2, r0
 8003da4:	697b      	ldr	r3, [r7, #20]
 8003da6:	601a      	str	r2, [r3, #0]
      
      if (thePool->pool) {
 8003da8:	697b      	ldr	r3, [r7, #20]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d011      	beq.n	8003dd4 <osPoolCreate+0x90>
        for (i = 0; i < pool_def->pool_sz; i++) {
 8003db0:	2300      	movs	r3, #0
 8003db2:	613b      	str	r3, [r7, #16]
 8003db4:	e008      	b.n	8003dc8 <osPoolCreate+0x84>
          thePool->markers[i] = 0;
 8003db6:	697b      	ldr	r3, [r7, #20]
 8003db8:	685a      	ldr	r2, [r3, #4]
 8003dba:	693b      	ldr	r3, [r7, #16]
 8003dbc:	4413      	add	r3, r2
 8003dbe:	2200      	movs	r2, #0
 8003dc0:	701a      	strb	r2, [r3, #0]
        for (i = 0; i < pool_def->pool_sz; i++) {
 8003dc2:	693b      	ldr	r3, [r7, #16]
 8003dc4:	3301      	adds	r3, #1
 8003dc6:	613b      	str	r3, [r7, #16]
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	693a      	ldr	r2, [r7, #16]
 8003dce:	429a      	cmp	r2, r3
 8003dd0:	d3f1      	bcc.n	8003db6 <osPoolCreate+0x72>
 8003dd2:	e00f      	b.n	8003df4 <osPoolCreate+0xb0>
        }
      }
      else {
        vPortFree(thePool->markers);
 8003dd4:	697b      	ldr	r3, [r7, #20]
 8003dd6:	685b      	ldr	r3, [r3, #4]
 8003dd8:	4618      	mov	r0, r3
 8003dda:	f002 ffa1 	bl	8006d20 <vPortFree>
        vPortFree(thePool);
 8003dde:	6978      	ldr	r0, [r7, #20]
 8003de0:	f002 ff9e 	bl	8006d20 <vPortFree>
        thePool = NULL;
 8003de4:	2300      	movs	r3, #0
 8003de6:	617b      	str	r3, [r7, #20]
 8003de8:	e004      	b.n	8003df4 <osPoolCreate+0xb0>
      }
    }
    else {
      vPortFree(thePool);
 8003dea:	6978      	ldr	r0, [r7, #20]
 8003dec:	f002 ff98 	bl	8006d20 <vPortFree>
      thePool = NULL;
 8003df0:	2300      	movs	r3, #0
 8003df2:	617b      	str	r3, [r7, #20]
    }
  }

  return thePool;
 8003df4:	697b      	ldr	r3, [r7, #20]
 
#else
  return NULL;
#endif
}
 8003df6:	4618      	mov	r0, r3
 8003df8:	3718      	adds	r7, #24
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	bd80      	pop	{r7, pc}

08003dfe <osPoolAlloc>:
* @param pool_id       memory pool ID obtain referenced with \ref osPoolCreate.
* @retval  address of the allocated memory block or NULL in case of no memory available.
* @note   MUST REMAIN UNCHANGED: \b osPoolAlloc shall be consistent in every CMSIS-RTOS.
*/
void *osPoolAlloc (osPoolId pool_id)
{
 8003dfe:	b580      	push	{r7, lr}
 8003e00:	b08a      	sub	sp, #40	; 0x28
 8003e02:	af00      	add	r7, sp, #0
 8003e04:	6078      	str	r0, [r7, #4]
  int dummy = 0;
 8003e06:	2300      	movs	r3, #0
 8003e08:	627b      	str	r3, [r7, #36]	; 0x24
  void *p = NULL;
 8003e0a:	2300      	movs	r3, #0
 8003e0c:	623b      	str	r3, [r7, #32]
  uint32_t i;
  uint32_t index;
  
  if (inHandlerMode()) {
 8003e0e:	f7ff fe8e 	bl	8003b2e <inHandlerMode>
 8003e12:	4603      	mov	r3, r0
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d00e      	beq.n	8003e36 <osPoolAlloc+0x38>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003e18:	f3ef 8211 	mrs	r2, BASEPRI
 8003e1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e20:	f383 8811 	msr	BASEPRI, r3
 8003e24:	f3bf 8f6f 	isb	sy
 8003e28:	f3bf 8f4f 	dsb	sy
 8003e2c:	617a      	str	r2, [r7, #20]
 8003e2e:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8003e30:	697b      	ldr	r3, [r7, #20]
    dummy = portSET_INTERRUPT_MASK_FROM_ISR();
 8003e32:	627b      	str	r3, [r7, #36]	; 0x24
 8003e34:	e001      	b.n	8003e3a <osPoolAlloc+0x3c>
  }
  else {
    vPortEnterCritical();
 8003e36:	f002 fdb7 	bl	80069a8 <vPortEnterCritical>
  }
  
  for (i = 0; i < pool_id->pool_sz; i++) {
 8003e3a:	2300      	movs	r3, #0
 8003e3c:	61fb      	str	r3, [r7, #28]
 8003e3e:	e029      	b.n	8003e94 <osPoolAlloc+0x96>
    index = (pool_id->currentIndex + i) % pool_id->pool_sz;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	691a      	ldr	r2, [r3, #16]
 8003e44:	69fb      	ldr	r3, [r7, #28]
 8003e46:	4413      	add	r3, r2
 8003e48:	687a      	ldr	r2, [r7, #4]
 8003e4a:	6892      	ldr	r2, [r2, #8]
 8003e4c:	fbb3 f1f2 	udiv	r1, r3, r2
 8003e50:	fb02 f201 	mul.w	r2, r2, r1
 8003e54:	1a9b      	subs	r3, r3, r2
 8003e56:	61bb      	str	r3, [r7, #24]
    
    if (pool_id->markers[index] == 0) {
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	685a      	ldr	r2, [r3, #4]
 8003e5c:	69bb      	ldr	r3, [r7, #24]
 8003e5e:	4413      	add	r3, r2
 8003e60:	781b      	ldrb	r3, [r3, #0]
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d113      	bne.n	8003e8e <osPoolAlloc+0x90>
      pool_id->markers[index] = 1;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	685a      	ldr	r2, [r3, #4]
 8003e6a:	69bb      	ldr	r3, [r7, #24]
 8003e6c:	4413      	add	r3, r2
 8003e6e:	2201      	movs	r2, #1
 8003e70:	701a      	strb	r2, [r3, #0]
      p = (void *)((uint32_t)(pool_id->pool) + (index * pool_id->item_sz));
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	4619      	mov	r1, r3
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	68db      	ldr	r3, [r3, #12]
 8003e7c:	69ba      	ldr	r2, [r7, #24]
 8003e7e:	fb02 f303 	mul.w	r3, r2, r3
 8003e82:	440b      	add	r3, r1
 8003e84:	623b      	str	r3, [r7, #32]
      pool_id->currentIndex = index;
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	69ba      	ldr	r2, [r7, #24]
 8003e8a:	611a      	str	r2, [r3, #16]
      break;
 8003e8c:	e007      	b.n	8003e9e <osPoolAlloc+0xa0>
  for (i = 0; i < pool_id->pool_sz; i++) {
 8003e8e:	69fb      	ldr	r3, [r7, #28]
 8003e90:	3301      	adds	r3, #1
 8003e92:	61fb      	str	r3, [r7, #28]
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	689b      	ldr	r3, [r3, #8]
 8003e98:	69fa      	ldr	r2, [r7, #28]
 8003e9a:	429a      	cmp	r2, r3
 8003e9c:	d3d0      	bcc.n	8003e40 <osPoolAlloc+0x42>
    }
  }
  
  if (inHandlerMode()) {
 8003e9e:	f7ff fe46 	bl	8003b2e <inHandlerMode>
 8003ea2:	4603      	mov	r3, r0
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d005      	beq.n	8003eb4 <osPoolAlloc+0xb6>
    portCLEAR_INTERRUPT_MASK_FROM_ISR(dummy);
 8003ea8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eaa:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	f383 8811 	msr	BASEPRI, r3
 8003eb2:	e001      	b.n	8003eb8 <osPoolAlloc+0xba>
  }
  else {
    vPortExitCritical();
 8003eb4:	f002 fda6 	bl	8006a04 <vPortExitCritical>
  }
  
  return p;
 8003eb8:	6a3b      	ldr	r3, [r7, #32]
}
 8003eba:	4618      	mov	r0, r3
 8003ebc:	3728      	adds	r7, #40	; 0x28
 8003ebe:	46bd      	mov	sp, r7
 8003ec0:	bd80      	pop	{r7, pc}

08003ec2 <osPoolFree>:
* @param  block         address of the allocated memory block that is returned to the memory pool.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osPoolFree shall be consistent in every CMSIS-RTOS.
*/
osStatus osPoolFree (osPoolId pool_id, void *block)
{
 8003ec2:	b480      	push	{r7}
 8003ec4:	b085      	sub	sp, #20
 8003ec6:	af00      	add	r7, sp, #0
 8003ec8:	6078      	str	r0, [r7, #4]
 8003eca:	6039      	str	r1, [r7, #0]
  uint32_t index;
  
  if (pool_id == NULL) {
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d101      	bne.n	8003ed6 <osPoolFree+0x14>
    return osErrorParameter;
 8003ed2:	2380      	movs	r3, #128	; 0x80
 8003ed4:	e030      	b.n	8003f38 <osPoolFree+0x76>
  }
  
  if (block == NULL) {
 8003ed6:	683b      	ldr	r3, [r7, #0]
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d101      	bne.n	8003ee0 <osPoolFree+0x1e>
    return osErrorParameter;
 8003edc:	2380      	movs	r3, #128	; 0x80
 8003ede:	e02b      	b.n	8003f38 <osPoolFree+0x76>
  }
  
  if (block < pool_id->pool) {
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	683a      	ldr	r2, [r7, #0]
 8003ee6:	429a      	cmp	r2, r3
 8003ee8:	d201      	bcs.n	8003eee <osPoolFree+0x2c>
    return osErrorParameter;
 8003eea:	2380      	movs	r3, #128	; 0x80
 8003eec:	e024      	b.n	8003f38 <osPoolFree+0x76>
  }
  
  index = (uint32_t)block - (uint32_t)(pool_id->pool);
 8003eee:	683b      	ldr	r3, [r7, #0]
 8003ef0:	687a      	ldr	r2, [r7, #4]
 8003ef2:	6812      	ldr	r2, [r2, #0]
 8003ef4:	1a9b      	subs	r3, r3, r2
 8003ef6:	60fb      	str	r3, [r7, #12]
  if (index % pool_id->item_sz) {
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	68da      	ldr	r2, [r3, #12]
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	fbb3 f1f2 	udiv	r1, r3, r2
 8003f02:	fb02 f201 	mul.w	r2, r2, r1
 8003f06:	1a9b      	subs	r3, r3, r2
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d001      	beq.n	8003f10 <osPoolFree+0x4e>
    return osErrorParameter;
 8003f0c:	2380      	movs	r3, #128	; 0x80
 8003f0e:	e013      	b.n	8003f38 <osPoolFree+0x76>
  }
  index = index / pool_id->item_sz;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	68db      	ldr	r3, [r3, #12]
 8003f14:	68fa      	ldr	r2, [r7, #12]
 8003f16:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f1a:	60fb      	str	r3, [r7, #12]
  if (index >= pool_id->pool_sz) {
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	689b      	ldr	r3, [r3, #8]
 8003f20:	68fa      	ldr	r2, [r7, #12]
 8003f22:	429a      	cmp	r2, r3
 8003f24:	d301      	bcc.n	8003f2a <osPoolFree+0x68>
    return osErrorParameter;
 8003f26:	2380      	movs	r3, #128	; 0x80
 8003f28:	e006      	b.n	8003f38 <osPoolFree+0x76>
  }
  
  pool_id->markers[index] = 0;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	685a      	ldr	r2, [r3, #4]
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	4413      	add	r3, r2
 8003f32:	2200      	movs	r2, #0
 8003f34:	701a      	strb	r2, [r3, #0]
  
  return osOK;
 8003f36:	2300      	movs	r3, #0
}
 8003f38:	4618      	mov	r0, r3
 8003f3a:	3714      	adds	r7, #20
 8003f3c:	46bd      	mov	sp, r7
 8003f3e:	bc80      	pop	{r7}
 8003f40:	4770      	bx	lr

08003f42 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8003f42:	b590      	push	{r4, r7, lr}
 8003f44:	b085      	sub	sp, #20
 8003f46:	af02      	add	r7, sp, #8
 8003f48:	6078      	str	r0, [r7, #4]
 8003f4a:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	689b      	ldr	r3, [r3, #8]
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d012      	beq.n	8003f7a <osMessageCreate+0x38>
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	68db      	ldr	r3, [r3, #12]
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d00e      	beq.n	8003f7a <osMessageCreate+0x38>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	6818      	ldr	r0, [r3, #0]
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	6859      	ldr	r1, [r3, #4]
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	689a      	ldr	r2, [r3, #8]
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	68dc      	ldr	r4, [r3, #12]
 8003f6c:	2300      	movs	r3, #0
 8003f6e:	9300      	str	r3, [sp, #0]
 8003f70:	4623      	mov	r3, r4
 8003f72:	f000 f9db 	bl	800432c <xQueueGenericCreateStatic>
 8003f76:	4603      	mov	r3, r0
 8003f78:	e008      	b.n	8003f8c <osMessageCreate+0x4a>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	6818      	ldr	r0, [r3, #0]
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	685b      	ldr	r3, [r3, #4]
 8003f82:	2200      	movs	r2, #0
 8003f84:	4619      	mov	r1, r3
 8003f86:	f000 fa43 	bl	8004410 <xQueueGenericCreate>
 8003f8a:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8003f8c:	4618      	mov	r0, r3
 8003f8e:	370c      	adds	r7, #12
 8003f90:	46bd      	mov	sp, r7
 8003f92:	bd90      	pop	{r4, r7, pc}

08003f94 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8003f94:	b580      	push	{r7, lr}
 8003f96:	b086      	sub	sp, #24
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	60f8      	str	r0, [r7, #12]
 8003f9c:	60b9      	str	r1, [r7, #8]
 8003f9e:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8003fa0:	2300      	movs	r3, #0
 8003fa2:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8003fa8:	697b      	ldr	r3, [r7, #20]
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d101      	bne.n	8003fb2 <osMessagePut+0x1e>
    ticks = 1;
 8003fae:	2301      	movs	r3, #1
 8003fb0:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 8003fb2:	f7ff fdbc 	bl	8003b2e <inHandlerMode>
 8003fb6:	4603      	mov	r3, r0
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d018      	beq.n	8003fee <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8003fbc:	f107 0210 	add.w	r2, r7, #16
 8003fc0:	f107 0108 	add.w	r1, r7, #8
 8003fc4:	2300      	movs	r3, #0
 8003fc6:	68f8      	ldr	r0, [r7, #12]
 8003fc8:	f000 fbc6 	bl	8004758 <xQueueGenericSendFromISR>
 8003fcc:	4603      	mov	r3, r0
 8003fce:	2b01      	cmp	r3, #1
 8003fd0:	d001      	beq.n	8003fd6 <osMessagePut+0x42>
      return osErrorOS;
 8003fd2:	23ff      	movs	r3, #255	; 0xff
 8003fd4:	e018      	b.n	8004008 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8003fd6:	693b      	ldr	r3, [r7, #16]
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d014      	beq.n	8004006 <osMessagePut+0x72>
 8003fdc:	4b0c      	ldr	r3, [pc, #48]	; (8004010 <osMessagePut+0x7c>)
 8003fde:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003fe2:	601a      	str	r2, [r3, #0]
 8003fe4:	f3bf 8f4f 	dsb	sy
 8003fe8:	f3bf 8f6f 	isb	sy
 8003fec:	e00b      	b.n	8004006 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8003fee:	f107 0108 	add.w	r1, r7, #8
 8003ff2:	2300      	movs	r3, #0
 8003ff4:	697a      	ldr	r2, [r7, #20]
 8003ff6:	68f8      	ldr	r0, [r7, #12]
 8003ff8:	f000 fab4 	bl	8004564 <xQueueGenericSend>
 8003ffc:	4603      	mov	r3, r0
 8003ffe:	2b01      	cmp	r3, #1
 8004000:	d001      	beq.n	8004006 <osMessagePut+0x72>
      return osErrorOS;
 8004002:	23ff      	movs	r3, #255	; 0xff
 8004004:	e000      	b.n	8004008 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 8004006:	2300      	movs	r3, #0
}
 8004008:	4618      	mov	r0, r3
 800400a:	3718      	adds	r7, #24
 800400c:	46bd      	mov	sp, r7
 800400e:	bd80      	pop	{r7, pc}
 8004010:	e000ed04 	.word	0xe000ed04

08004014 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8004014:	b590      	push	{r4, r7, lr}
 8004016:	b08b      	sub	sp, #44	; 0x2c
 8004018:	af00      	add	r7, sp, #0
 800401a:	60f8      	str	r0, [r7, #12]
 800401c:	60b9      	str	r1, [r7, #8]
 800401e:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 8004020:	68bb      	ldr	r3, [r7, #8]
 8004022:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 8004024:	2300      	movs	r3, #0
 8004026:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 8004028:	68bb      	ldr	r3, [r7, #8]
 800402a:	2b00      	cmp	r3, #0
 800402c:	d10a      	bne.n	8004044 <osMessageGet+0x30>
    event.status = osErrorParameter;
 800402e:	2380      	movs	r3, #128	; 0x80
 8004030:	617b      	str	r3, [r7, #20]
    return event;
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	461c      	mov	r4, r3
 8004036:	f107 0314 	add.w	r3, r7, #20
 800403a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800403e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8004042:	e054      	b.n	80040ee <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8004044:	2300      	movs	r3, #0
 8004046:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8004048:	2300      	movs	r3, #0
 800404a:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004052:	d103      	bne.n	800405c <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 8004054:	f04f 33ff 	mov.w	r3, #4294967295
 8004058:	627b      	str	r3, [r7, #36]	; 0x24
 800405a:	e009      	b.n	8004070 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	2b00      	cmp	r3, #0
 8004060:	d006      	beq.n	8004070 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 8004066:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004068:	2b00      	cmp	r3, #0
 800406a:	d101      	bne.n	8004070 <osMessageGet+0x5c>
      ticks = 1;
 800406c:	2301      	movs	r3, #1
 800406e:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 8004070:	f7ff fd5d 	bl	8003b2e <inHandlerMode>
 8004074:	4603      	mov	r3, r0
 8004076:	2b00      	cmp	r3, #0
 8004078:	d01c      	beq.n	80040b4 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 800407a:	f107 0220 	add.w	r2, r7, #32
 800407e:	f107 0314 	add.w	r3, r7, #20
 8004082:	3304      	adds	r3, #4
 8004084:	4619      	mov	r1, r3
 8004086:	68b8      	ldr	r0, [r7, #8]
 8004088:	f000 fdde 	bl	8004c48 <xQueueReceiveFromISR>
 800408c:	4603      	mov	r3, r0
 800408e:	2b01      	cmp	r3, #1
 8004090:	d102      	bne.n	8004098 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 8004092:	2310      	movs	r3, #16
 8004094:	617b      	str	r3, [r7, #20]
 8004096:	e001      	b.n	800409c <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 8004098:	2300      	movs	r3, #0
 800409a:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 800409c:	6a3b      	ldr	r3, [r7, #32]
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d01d      	beq.n	80040de <osMessageGet+0xca>
 80040a2:	4b15      	ldr	r3, [pc, #84]	; (80040f8 <osMessageGet+0xe4>)
 80040a4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80040a8:	601a      	str	r2, [r3, #0]
 80040aa:	f3bf 8f4f 	dsb	sy
 80040ae:	f3bf 8f6f 	isb	sy
 80040b2:	e014      	b.n	80040de <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 80040b4:	f107 0314 	add.w	r3, r7, #20
 80040b8:	3304      	adds	r3, #4
 80040ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80040bc:	4619      	mov	r1, r3
 80040be:	68b8      	ldr	r0, [r7, #8]
 80040c0:	f000 fbde 	bl	8004880 <xQueueReceive>
 80040c4:	4603      	mov	r3, r0
 80040c6:	2b01      	cmp	r3, #1
 80040c8:	d102      	bne.n	80040d0 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 80040ca:	2310      	movs	r3, #16
 80040cc:	617b      	str	r3, [r7, #20]
 80040ce:	e006      	b.n	80040de <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 80040d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d101      	bne.n	80040da <osMessageGet+0xc6>
 80040d6:	2300      	movs	r3, #0
 80040d8:	e000      	b.n	80040dc <osMessageGet+0xc8>
 80040da:	2340      	movs	r3, #64	; 0x40
 80040dc:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	461c      	mov	r4, r3
 80040e2:	f107 0314 	add.w	r3, r7, #20
 80040e6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80040ea:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 80040ee:	68f8      	ldr	r0, [r7, #12]
 80040f0:	372c      	adds	r7, #44	; 0x2c
 80040f2:	46bd      	mov	sp, r7
 80040f4:	bd90      	pop	{r4, r7, pc}
 80040f6:	bf00      	nop
 80040f8:	e000ed04 	.word	0xe000ed04

080040fc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80040fc:	b480      	push	{r7}
 80040fe:	b083      	sub	sp, #12
 8004100:	af00      	add	r7, sp, #0
 8004102:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	f103 0208 	add.w	r2, r3, #8
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	f04f 32ff 	mov.w	r2, #4294967295
 8004114:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	f103 0208 	add.w	r2, r3, #8
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	f103 0208 	add.w	r2, r3, #8
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	2200      	movs	r2, #0
 800412e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004130:	bf00      	nop
 8004132:	370c      	adds	r7, #12
 8004134:	46bd      	mov	sp, r7
 8004136:	bc80      	pop	{r7}
 8004138:	4770      	bx	lr

0800413a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800413a:	b480      	push	{r7}
 800413c:	b083      	sub	sp, #12
 800413e:	af00      	add	r7, sp, #0
 8004140:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	2200      	movs	r2, #0
 8004146:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004148:	bf00      	nop
 800414a:	370c      	adds	r7, #12
 800414c:	46bd      	mov	sp, r7
 800414e:	bc80      	pop	{r7}
 8004150:	4770      	bx	lr

08004152 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004152:	b480      	push	{r7}
 8004154:	b085      	sub	sp, #20
 8004156:	af00      	add	r7, sp, #0
 8004158:	6078      	str	r0, [r7, #4]
 800415a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	685b      	ldr	r3, [r3, #4]
 8004160:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004162:	683b      	ldr	r3, [r7, #0]
 8004164:	68fa      	ldr	r2, [r7, #12]
 8004166:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	689a      	ldr	r2, [r3, #8]
 800416c:	683b      	ldr	r3, [r7, #0]
 800416e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	689b      	ldr	r3, [r3, #8]
 8004174:	683a      	ldr	r2, [r7, #0]
 8004176:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	683a      	ldr	r2, [r7, #0]
 800417c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800417e:	683b      	ldr	r3, [r7, #0]
 8004180:	687a      	ldr	r2, [r7, #4]
 8004182:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	1c5a      	adds	r2, r3, #1
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	601a      	str	r2, [r3, #0]
}
 800418e:	bf00      	nop
 8004190:	3714      	adds	r7, #20
 8004192:	46bd      	mov	sp, r7
 8004194:	bc80      	pop	{r7}
 8004196:	4770      	bx	lr

08004198 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004198:	b480      	push	{r7}
 800419a:	b085      	sub	sp, #20
 800419c:	af00      	add	r7, sp, #0
 800419e:	6078      	str	r0, [r7, #4]
 80041a0:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80041a2:	683b      	ldr	r3, [r7, #0]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80041a8:	68bb      	ldr	r3, [r7, #8]
 80041aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041ae:	d103      	bne.n	80041b8 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	691b      	ldr	r3, [r3, #16]
 80041b4:	60fb      	str	r3, [r7, #12]
 80041b6:	e00c      	b.n	80041d2 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	3308      	adds	r3, #8
 80041bc:	60fb      	str	r3, [r7, #12]
 80041be:	e002      	b.n	80041c6 <vListInsert+0x2e>
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	685b      	ldr	r3, [r3, #4]
 80041c4:	60fb      	str	r3, [r7, #12]
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	685b      	ldr	r3, [r3, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	68ba      	ldr	r2, [r7, #8]
 80041ce:	429a      	cmp	r2, r3
 80041d0:	d2f6      	bcs.n	80041c0 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	685a      	ldr	r2, [r3, #4]
 80041d6:	683b      	ldr	r3, [r7, #0]
 80041d8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80041da:	683b      	ldr	r3, [r7, #0]
 80041dc:	685b      	ldr	r3, [r3, #4]
 80041de:	683a      	ldr	r2, [r7, #0]
 80041e0:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80041e2:	683b      	ldr	r3, [r7, #0]
 80041e4:	68fa      	ldr	r2, [r7, #12]
 80041e6:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	683a      	ldr	r2, [r7, #0]
 80041ec:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80041ee:	683b      	ldr	r3, [r7, #0]
 80041f0:	687a      	ldr	r2, [r7, #4]
 80041f2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	1c5a      	adds	r2, r3, #1
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	601a      	str	r2, [r3, #0]
}
 80041fe:	bf00      	nop
 8004200:	3714      	adds	r7, #20
 8004202:	46bd      	mov	sp, r7
 8004204:	bc80      	pop	{r7}
 8004206:	4770      	bx	lr

08004208 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004208:	b480      	push	{r7}
 800420a:	b085      	sub	sp, #20
 800420c:	af00      	add	r7, sp, #0
 800420e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	691b      	ldr	r3, [r3, #16]
 8004214:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	685b      	ldr	r3, [r3, #4]
 800421a:	687a      	ldr	r2, [r7, #4]
 800421c:	6892      	ldr	r2, [r2, #8]
 800421e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	689b      	ldr	r3, [r3, #8]
 8004224:	687a      	ldr	r2, [r7, #4]
 8004226:	6852      	ldr	r2, [r2, #4]
 8004228:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	685b      	ldr	r3, [r3, #4]
 800422e:	687a      	ldr	r2, [r7, #4]
 8004230:	429a      	cmp	r2, r3
 8004232:	d103      	bne.n	800423c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	689a      	ldr	r2, [r3, #8]
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	2200      	movs	r2, #0
 8004240:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	1e5a      	subs	r2, r3, #1
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	681b      	ldr	r3, [r3, #0]
}
 8004250:	4618      	mov	r0, r3
 8004252:	3714      	adds	r7, #20
 8004254:	46bd      	mov	sp, r7
 8004256:	bc80      	pop	{r7}
 8004258:	4770      	bx	lr
	...

0800425c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800425c:	b580      	push	{r7, lr}
 800425e:	b084      	sub	sp, #16
 8004260:	af00      	add	r7, sp, #0
 8004262:	6078      	str	r0, [r7, #4]
 8004264:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	2b00      	cmp	r3, #0
 800426e:	d109      	bne.n	8004284 <xQueueGenericReset+0x28>
	__asm volatile
 8004270:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004274:	f383 8811 	msr	BASEPRI, r3
 8004278:	f3bf 8f6f 	isb	sy
 800427c:	f3bf 8f4f 	dsb	sy
 8004280:	60bb      	str	r3, [r7, #8]
 8004282:	e7fe      	b.n	8004282 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8004284:	f002 fb90 	bl	80069a8 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	681a      	ldr	r2, [r3, #0]
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004290:	68f9      	ldr	r1, [r7, #12]
 8004292:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004294:	fb01 f303 	mul.w	r3, r1, r3
 8004298:	441a      	add	r2, r3
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	2200      	movs	r2, #0
 80042a2:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	681a      	ldr	r2, [r3, #0]
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	681a      	ldr	r2, [r3, #0]
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042b4:	3b01      	subs	r3, #1
 80042b6:	68f9      	ldr	r1, [r7, #12]
 80042b8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80042ba:	fb01 f303 	mul.w	r3, r1, r3
 80042be:	441a      	add	r2, r3
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	22ff      	movs	r2, #255	; 0xff
 80042c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	22ff      	movs	r2, #255	; 0xff
 80042d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80042d4:	683b      	ldr	r3, [r7, #0]
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d114      	bne.n	8004304 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	691b      	ldr	r3, [r3, #16]
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d01a      	beq.n	8004318 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	3310      	adds	r3, #16
 80042e6:	4618      	mov	r0, r3
 80042e8:	f001 faf8 	bl	80058dc <xTaskRemoveFromEventList>
 80042ec:	4603      	mov	r3, r0
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d012      	beq.n	8004318 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80042f2:	4b0d      	ldr	r3, [pc, #52]	; (8004328 <xQueueGenericReset+0xcc>)
 80042f4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80042f8:	601a      	str	r2, [r3, #0]
 80042fa:	f3bf 8f4f 	dsb	sy
 80042fe:	f3bf 8f6f 	isb	sy
 8004302:	e009      	b.n	8004318 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	3310      	adds	r3, #16
 8004308:	4618      	mov	r0, r3
 800430a:	f7ff fef7 	bl	80040fc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	3324      	adds	r3, #36	; 0x24
 8004312:	4618      	mov	r0, r3
 8004314:	f7ff fef2 	bl	80040fc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004318:	f002 fb74 	bl	8006a04 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800431c:	2301      	movs	r3, #1
}
 800431e:	4618      	mov	r0, r3
 8004320:	3710      	adds	r7, #16
 8004322:	46bd      	mov	sp, r7
 8004324:	bd80      	pop	{r7, pc}
 8004326:	bf00      	nop
 8004328:	e000ed04 	.word	0xe000ed04

0800432c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800432c:	b580      	push	{r7, lr}
 800432e:	b08e      	sub	sp, #56	; 0x38
 8004330:	af02      	add	r7, sp, #8
 8004332:	60f8      	str	r0, [r7, #12]
 8004334:	60b9      	str	r1, [r7, #8]
 8004336:	607a      	str	r2, [r7, #4]
 8004338:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	2b00      	cmp	r3, #0
 800433e:	d109      	bne.n	8004354 <xQueueGenericCreateStatic+0x28>
 8004340:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004344:	f383 8811 	msr	BASEPRI, r3
 8004348:	f3bf 8f6f 	isb	sy
 800434c:	f3bf 8f4f 	dsb	sy
 8004350:	62bb      	str	r3, [r7, #40]	; 0x28
 8004352:	e7fe      	b.n	8004352 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004354:	683b      	ldr	r3, [r7, #0]
 8004356:	2b00      	cmp	r3, #0
 8004358:	d109      	bne.n	800436e <xQueueGenericCreateStatic+0x42>
 800435a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800435e:	f383 8811 	msr	BASEPRI, r3
 8004362:	f3bf 8f6f 	isb	sy
 8004366:	f3bf 8f4f 	dsb	sy
 800436a:	627b      	str	r3, [r7, #36]	; 0x24
 800436c:	e7fe      	b.n	800436c <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	2b00      	cmp	r3, #0
 8004372:	d002      	beq.n	800437a <xQueueGenericCreateStatic+0x4e>
 8004374:	68bb      	ldr	r3, [r7, #8]
 8004376:	2b00      	cmp	r3, #0
 8004378:	d001      	beq.n	800437e <xQueueGenericCreateStatic+0x52>
 800437a:	2301      	movs	r3, #1
 800437c:	e000      	b.n	8004380 <xQueueGenericCreateStatic+0x54>
 800437e:	2300      	movs	r3, #0
 8004380:	2b00      	cmp	r3, #0
 8004382:	d109      	bne.n	8004398 <xQueueGenericCreateStatic+0x6c>
 8004384:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004388:	f383 8811 	msr	BASEPRI, r3
 800438c:	f3bf 8f6f 	isb	sy
 8004390:	f3bf 8f4f 	dsb	sy
 8004394:	623b      	str	r3, [r7, #32]
 8004396:	e7fe      	b.n	8004396 <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	2b00      	cmp	r3, #0
 800439c:	d102      	bne.n	80043a4 <xQueueGenericCreateStatic+0x78>
 800439e:	68bb      	ldr	r3, [r7, #8]
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d101      	bne.n	80043a8 <xQueueGenericCreateStatic+0x7c>
 80043a4:	2301      	movs	r3, #1
 80043a6:	e000      	b.n	80043aa <xQueueGenericCreateStatic+0x7e>
 80043a8:	2300      	movs	r3, #0
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d109      	bne.n	80043c2 <xQueueGenericCreateStatic+0x96>
 80043ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043b2:	f383 8811 	msr	BASEPRI, r3
 80043b6:	f3bf 8f6f 	isb	sy
 80043ba:	f3bf 8f4f 	dsb	sy
 80043be:	61fb      	str	r3, [r7, #28]
 80043c0:	e7fe      	b.n	80043c0 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80043c2:	2348      	movs	r3, #72	; 0x48
 80043c4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80043c6:	697b      	ldr	r3, [r7, #20]
 80043c8:	2b48      	cmp	r3, #72	; 0x48
 80043ca:	d009      	beq.n	80043e0 <xQueueGenericCreateStatic+0xb4>
 80043cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043d0:	f383 8811 	msr	BASEPRI, r3
 80043d4:	f3bf 8f6f 	isb	sy
 80043d8:	f3bf 8f4f 	dsb	sy
 80043dc:	61bb      	str	r3, [r7, #24]
 80043de:	e7fe      	b.n	80043de <xQueueGenericCreateStatic+0xb2>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80043e0:	683b      	ldr	r3, [r7, #0]
 80043e2:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80043e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d00d      	beq.n	8004406 <xQueueGenericCreateStatic+0xda>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80043ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043ec:	2201      	movs	r2, #1
 80043ee:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80043f2:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80043f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043f8:	9300      	str	r3, [sp, #0]
 80043fa:	4613      	mov	r3, r2
 80043fc:	687a      	ldr	r2, [r7, #4]
 80043fe:	68b9      	ldr	r1, [r7, #8]
 8004400:	68f8      	ldr	r0, [r7, #12]
 8004402:	f000 f842 	bl	800448a <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8004406:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8004408:	4618      	mov	r0, r3
 800440a:	3730      	adds	r7, #48	; 0x30
 800440c:	46bd      	mov	sp, r7
 800440e:	bd80      	pop	{r7, pc}

08004410 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8004410:	b580      	push	{r7, lr}
 8004412:	b08a      	sub	sp, #40	; 0x28
 8004414:	af02      	add	r7, sp, #8
 8004416:	60f8      	str	r0, [r7, #12]
 8004418:	60b9      	str	r1, [r7, #8]
 800441a:	4613      	mov	r3, r2
 800441c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	2b00      	cmp	r3, #0
 8004422:	d109      	bne.n	8004438 <xQueueGenericCreate+0x28>
 8004424:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004428:	f383 8811 	msr	BASEPRI, r3
 800442c:	f3bf 8f6f 	isb	sy
 8004430:	f3bf 8f4f 	dsb	sy
 8004434:	613b      	str	r3, [r7, #16]
 8004436:	e7fe      	b.n	8004436 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8004438:	68bb      	ldr	r3, [r7, #8]
 800443a:	2b00      	cmp	r3, #0
 800443c:	d102      	bne.n	8004444 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800443e:	2300      	movs	r3, #0
 8004440:	61fb      	str	r3, [r7, #28]
 8004442:	e004      	b.n	800444e <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	68ba      	ldr	r2, [r7, #8]
 8004448:	fb02 f303 	mul.w	r3, r2, r3
 800444c:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800444e:	69fb      	ldr	r3, [r7, #28]
 8004450:	3348      	adds	r3, #72	; 0x48
 8004452:	4618      	mov	r0, r3
 8004454:	f002 fb9e 	bl	8006b94 <pvPortMalloc>
 8004458:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800445a:	69bb      	ldr	r3, [r7, #24]
 800445c:	2b00      	cmp	r3, #0
 800445e:	d00f      	beq.n	8004480 <xQueueGenericCreate+0x70>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8004460:	69bb      	ldr	r3, [r7, #24]
 8004462:	3348      	adds	r3, #72	; 0x48
 8004464:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8004466:	69bb      	ldr	r3, [r7, #24]
 8004468:	2200      	movs	r2, #0
 800446a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800446e:	79fa      	ldrb	r2, [r7, #7]
 8004470:	69bb      	ldr	r3, [r7, #24]
 8004472:	9300      	str	r3, [sp, #0]
 8004474:	4613      	mov	r3, r2
 8004476:	697a      	ldr	r2, [r7, #20]
 8004478:	68b9      	ldr	r1, [r7, #8]
 800447a:	68f8      	ldr	r0, [r7, #12]
 800447c:	f000 f805 	bl	800448a <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8004480:	69bb      	ldr	r3, [r7, #24]
	}
 8004482:	4618      	mov	r0, r3
 8004484:	3720      	adds	r7, #32
 8004486:	46bd      	mov	sp, r7
 8004488:	bd80      	pop	{r7, pc}

0800448a <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800448a:	b580      	push	{r7, lr}
 800448c:	b084      	sub	sp, #16
 800448e:	af00      	add	r7, sp, #0
 8004490:	60f8      	str	r0, [r7, #12]
 8004492:	60b9      	str	r1, [r7, #8]
 8004494:	607a      	str	r2, [r7, #4]
 8004496:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004498:	68bb      	ldr	r3, [r7, #8]
 800449a:	2b00      	cmp	r3, #0
 800449c:	d103      	bne.n	80044a6 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800449e:	69bb      	ldr	r3, [r7, #24]
 80044a0:	69ba      	ldr	r2, [r7, #24]
 80044a2:	601a      	str	r2, [r3, #0]
 80044a4:	e002      	b.n	80044ac <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80044a6:	69bb      	ldr	r3, [r7, #24]
 80044a8:	687a      	ldr	r2, [r7, #4]
 80044aa:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80044ac:	69bb      	ldr	r3, [r7, #24]
 80044ae:	68fa      	ldr	r2, [r7, #12]
 80044b0:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80044b2:	69bb      	ldr	r3, [r7, #24]
 80044b4:	68ba      	ldr	r2, [r7, #8]
 80044b6:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80044b8:	2101      	movs	r1, #1
 80044ba:	69b8      	ldr	r0, [r7, #24]
 80044bc:	f7ff fece 	bl	800425c <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80044c0:	bf00      	nop
 80044c2:	3710      	adds	r7, #16
 80044c4:	46bd      	mov	sp, r7
 80044c6:	bd80      	pop	{r7, pc}

080044c8 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 80044c8:	b580      	push	{r7, lr}
 80044ca:	b082      	sub	sp, #8
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d00e      	beq.n	80044f4 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	2200      	movs	r2, #0
 80044da:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	2200      	movs	r2, #0
 80044e0:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.uxRecursiveCallCount = 0;
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	2200      	movs	r2, #0
 80044e6:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80044e8:	2300      	movs	r3, #0
 80044ea:	2200      	movs	r2, #0
 80044ec:	2100      	movs	r1, #0
 80044ee:	6878      	ldr	r0, [r7, #4]
 80044f0:	f000 f838 	bl	8004564 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 80044f4:	bf00      	nop
 80044f6:	3708      	adds	r7, #8
 80044f8:	46bd      	mov	sp, r7
 80044fa:	bd80      	pop	{r7, pc}

080044fc <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 80044fc:	b580      	push	{r7, lr}
 80044fe:	b086      	sub	sp, #24
 8004500:	af00      	add	r7, sp, #0
 8004502:	4603      	mov	r3, r0
 8004504:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8004506:	2301      	movs	r3, #1
 8004508:	617b      	str	r3, [r7, #20]
 800450a:	2300      	movs	r3, #0
 800450c:	613b      	str	r3, [r7, #16]

		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800450e:	79fb      	ldrb	r3, [r7, #7]
 8004510:	461a      	mov	r2, r3
 8004512:	6939      	ldr	r1, [r7, #16]
 8004514:	6978      	ldr	r0, [r7, #20]
 8004516:	f7ff ff7b 	bl	8004410 <xQueueGenericCreate>
 800451a:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 800451c:	68f8      	ldr	r0, [r7, #12]
 800451e:	f7ff ffd3 	bl	80044c8 <prvInitialiseMutex>

		return pxNewQueue;
 8004522:	68fb      	ldr	r3, [r7, #12]
	}
 8004524:	4618      	mov	r0, r3
 8004526:	3718      	adds	r7, #24
 8004528:	46bd      	mov	sp, r7
 800452a:	bd80      	pop	{r7, pc}

0800452c <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800452c:	b580      	push	{r7, lr}
 800452e:	b088      	sub	sp, #32
 8004530:	af02      	add	r7, sp, #8
 8004532:	4603      	mov	r3, r0
 8004534:	6039      	str	r1, [r7, #0]
 8004536:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8004538:	2301      	movs	r3, #1
 800453a:	617b      	str	r3, [r7, #20]
 800453c:	2300      	movs	r3, #0
 800453e:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		pxNewQueue = ( Queue_t * ) xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8004540:	79fb      	ldrb	r3, [r7, #7]
 8004542:	9300      	str	r3, [sp, #0]
 8004544:	683b      	ldr	r3, [r7, #0]
 8004546:	2200      	movs	r2, #0
 8004548:	6939      	ldr	r1, [r7, #16]
 800454a:	6978      	ldr	r0, [r7, #20]
 800454c:	f7ff feee 	bl	800432c <xQueueGenericCreateStatic>
 8004550:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 8004552:	68f8      	ldr	r0, [r7, #12]
 8004554:	f7ff ffb8 	bl	80044c8 <prvInitialiseMutex>

		return pxNewQueue;
 8004558:	68fb      	ldr	r3, [r7, #12]
	}
 800455a:	4618      	mov	r0, r3
 800455c:	3718      	adds	r7, #24
 800455e:	46bd      	mov	sp, r7
 8004560:	bd80      	pop	{r7, pc}
	...

08004564 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004564:	b580      	push	{r7, lr}
 8004566:	b08e      	sub	sp, #56	; 0x38
 8004568:	af00      	add	r7, sp, #0
 800456a:	60f8      	str	r0, [r7, #12]
 800456c:	60b9      	str	r1, [r7, #8]
 800456e:	607a      	str	r2, [r7, #4]
 8004570:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004572:	2300      	movs	r3, #0
 8004574:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800457a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800457c:	2b00      	cmp	r3, #0
 800457e:	d109      	bne.n	8004594 <xQueueGenericSend+0x30>
 8004580:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004584:	f383 8811 	msr	BASEPRI, r3
 8004588:	f3bf 8f6f 	isb	sy
 800458c:	f3bf 8f4f 	dsb	sy
 8004590:	62bb      	str	r3, [r7, #40]	; 0x28
 8004592:	e7fe      	b.n	8004592 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004594:	68bb      	ldr	r3, [r7, #8]
 8004596:	2b00      	cmp	r3, #0
 8004598:	d103      	bne.n	80045a2 <xQueueGenericSend+0x3e>
 800459a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800459c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d101      	bne.n	80045a6 <xQueueGenericSend+0x42>
 80045a2:	2301      	movs	r3, #1
 80045a4:	e000      	b.n	80045a8 <xQueueGenericSend+0x44>
 80045a6:	2300      	movs	r3, #0
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d109      	bne.n	80045c0 <xQueueGenericSend+0x5c>
 80045ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045b0:	f383 8811 	msr	BASEPRI, r3
 80045b4:	f3bf 8f6f 	isb	sy
 80045b8:	f3bf 8f4f 	dsb	sy
 80045bc:	627b      	str	r3, [r7, #36]	; 0x24
 80045be:	e7fe      	b.n	80045be <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80045c0:	683b      	ldr	r3, [r7, #0]
 80045c2:	2b02      	cmp	r3, #2
 80045c4:	d103      	bne.n	80045ce <xQueueGenericSend+0x6a>
 80045c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045ca:	2b01      	cmp	r3, #1
 80045cc:	d101      	bne.n	80045d2 <xQueueGenericSend+0x6e>
 80045ce:	2301      	movs	r3, #1
 80045d0:	e000      	b.n	80045d4 <xQueueGenericSend+0x70>
 80045d2:	2300      	movs	r3, #0
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d109      	bne.n	80045ec <xQueueGenericSend+0x88>
 80045d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045dc:	f383 8811 	msr	BASEPRI, r3
 80045e0:	f3bf 8f6f 	isb	sy
 80045e4:	f3bf 8f4f 	dsb	sy
 80045e8:	623b      	str	r3, [r7, #32]
 80045ea:	e7fe      	b.n	80045ea <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80045ec:	f001 fb30 	bl	8005c50 <xTaskGetSchedulerState>
 80045f0:	4603      	mov	r3, r0
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d102      	bne.n	80045fc <xQueueGenericSend+0x98>
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d101      	bne.n	8004600 <xQueueGenericSend+0x9c>
 80045fc:	2301      	movs	r3, #1
 80045fe:	e000      	b.n	8004602 <xQueueGenericSend+0x9e>
 8004600:	2300      	movs	r3, #0
 8004602:	2b00      	cmp	r3, #0
 8004604:	d109      	bne.n	800461a <xQueueGenericSend+0xb6>
 8004606:	f04f 0350 	mov.w	r3, #80	; 0x50
 800460a:	f383 8811 	msr	BASEPRI, r3
 800460e:	f3bf 8f6f 	isb	sy
 8004612:	f3bf 8f4f 	dsb	sy
 8004616:	61fb      	str	r3, [r7, #28]
 8004618:	e7fe      	b.n	8004618 <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800461a:	f002 f9c5 	bl	80069a8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800461e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004620:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004622:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004624:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004626:	429a      	cmp	r2, r3
 8004628:	d302      	bcc.n	8004630 <xQueueGenericSend+0xcc>
 800462a:	683b      	ldr	r3, [r7, #0]
 800462c:	2b02      	cmp	r3, #2
 800462e:	d129      	bne.n	8004684 <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004630:	683a      	ldr	r2, [r7, #0]
 8004632:	68b9      	ldr	r1, [r7, #8]
 8004634:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004636:	f000 fb9b 	bl	8004d70 <prvCopyDataToQueue>
 800463a:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800463c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800463e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004640:	2b00      	cmp	r3, #0
 8004642:	d010      	beq.n	8004666 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004644:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004646:	3324      	adds	r3, #36	; 0x24
 8004648:	4618      	mov	r0, r3
 800464a:	f001 f947 	bl	80058dc <xTaskRemoveFromEventList>
 800464e:	4603      	mov	r3, r0
 8004650:	2b00      	cmp	r3, #0
 8004652:	d013      	beq.n	800467c <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004654:	4b3f      	ldr	r3, [pc, #252]	; (8004754 <xQueueGenericSend+0x1f0>)
 8004656:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800465a:	601a      	str	r2, [r3, #0]
 800465c:	f3bf 8f4f 	dsb	sy
 8004660:	f3bf 8f6f 	isb	sy
 8004664:	e00a      	b.n	800467c <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004666:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004668:	2b00      	cmp	r3, #0
 800466a:	d007      	beq.n	800467c <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800466c:	4b39      	ldr	r3, [pc, #228]	; (8004754 <xQueueGenericSend+0x1f0>)
 800466e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004672:	601a      	str	r2, [r3, #0]
 8004674:	f3bf 8f4f 	dsb	sy
 8004678:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800467c:	f002 f9c2 	bl	8006a04 <vPortExitCritical>
				return pdPASS;
 8004680:	2301      	movs	r3, #1
 8004682:	e063      	b.n	800474c <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	2b00      	cmp	r3, #0
 8004688:	d103      	bne.n	8004692 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800468a:	f002 f9bb 	bl	8006a04 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800468e:	2300      	movs	r3, #0
 8004690:	e05c      	b.n	800474c <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004692:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004694:	2b00      	cmp	r3, #0
 8004696:	d106      	bne.n	80046a6 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004698:	f107 0314 	add.w	r3, r7, #20
 800469c:	4618      	mov	r0, r3
 800469e:	f001 f97f 	bl	80059a0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80046a2:	2301      	movs	r3, #1
 80046a4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80046a6:	f002 f9ad 	bl	8006a04 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80046aa:	f000 feeb 	bl	8005484 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80046ae:	f002 f97b 	bl	80069a8 <vPortEnterCritical>
 80046b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046b4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80046b8:	b25b      	sxtb	r3, r3
 80046ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046be:	d103      	bne.n	80046c8 <xQueueGenericSend+0x164>
 80046c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046c2:	2200      	movs	r2, #0
 80046c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80046c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046ca:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80046ce:	b25b      	sxtb	r3, r3
 80046d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046d4:	d103      	bne.n	80046de <xQueueGenericSend+0x17a>
 80046d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046d8:	2200      	movs	r2, #0
 80046da:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80046de:	f002 f991 	bl	8006a04 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80046e2:	1d3a      	adds	r2, r7, #4
 80046e4:	f107 0314 	add.w	r3, r7, #20
 80046e8:	4611      	mov	r1, r2
 80046ea:	4618      	mov	r0, r3
 80046ec:	f001 f96e 	bl	80059cc <xTaskCheckForTimeOut>
 80046f0:	4603      	mov	r3, r0
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d124      	bne.n	8004740 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80046f6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80046f8:	f000 fc32 	bl	8004f60 <prvIsQueueFull>
 80046fc:	4603      	mov	r3, r0
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d018      	beq.n	8004734 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004702:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004704:	3310      	adds	r3, #16
 8004706:	687a      	ldr	r2, [r7, #4]
 8004708:	4611      	mov	r1, r2
 800470a:	4618      	mov	r0, r3
 800470c:	f001 f898 	bl	8005840 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004710:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004712:	f000 fbbd 	bl	8004e90 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004716:	f000 fec3 	bl	80054a0 <xTaskResumeAll>
 800471a:	4603      	mov	r3, r0
 800471c:	2b00      	cmp	r3, #0
 800471e:	f47f af7c 	bne.w	800461a <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8004722:	4b0c      	ldr	r3, [pc, #48]	; (8004754 <xQueueGenericSend+0x1f0>)
 8004724:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004728:	601a      	str	r2, [r3, #0]
 800472a:	f3bf 8f4f 	dsb	sy
 800472e:	f3bf 8f6f 	isb	sy
 8004732:	e772      	b.n	800461a <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004734:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004736:	f000 fbab 	bl	8004e90 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800473a:	f000 feb1 	bl	80054a0 <xTaskResumeAll>
 800473e:	e76c      	b.n	800461a <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004740:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004742:	f000 fba5 	bl	8004e90 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004746:	f000 feab 	bl	80054a0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800474a:	2300      	movs	r3, #0
		}
	}
}
 800474c:	4618      	mov	r0, r3
 800474e:	3738      	adds	r7, #56	; 0x38
 8004750:	46bd      	mov	sp, r7
 8004752:	bd80      	pop	{r7, pc}
 8004754:	e000ed04 	.word	0xe000ed04

08004758 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004758:	b580      	push	{r7, lr}
 800475a:	b08e      	sub	sp, #56	; 0x38
 800475c:	af00      	add	r7, sp, #0
 800475e:	60f8      	str	r0, [r7, #12]
 8004760:	60b9      	str	r1, [r7, #8]
 8004762:	607a      	str	r2, [r7, #4]
 8004764:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800476a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800476c:	2b00      	cmp	r3, #0
 800476e:	d109      	bne.n	8004784 <xQueueGenericSendFromISR+0x2c>
 8004770:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004774:	f383 8811 	msr	BASEPRI, r3
 8004778:	f3bf 8f6f 	isb	sy
 800477c:	f3bf 8f4f 	dsb	sy
 8004780:	627b      	str	r3, [r7, #36]	; 0x24
 8004782:	e7fe      	b.n	8004782 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004784:	68bb      	ldr	r3, [r7, #8]
 8004786:	2b00      	cmp	r3, #0
 8004788:	d103      	bne.n	8004792 <xQueueGenericSendFromISR+0x3a>
 800478a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800478c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800478e:	2b00      	cmp	r3, #0
 8004790:	d101      	bne.n	8004796 <xQueueGenericSendFromISR+0x3e>
 8004792:	2301      	movs	r3, #1
 8004794:	e000      	b.n	8004798 <xQueueGenericSendFromISR+0x40>
 8004796:	2300      	movs	r3, #0
 8004798:	2b00      	cmp	r3, #0
 800479a:	d109      	bne.n	80047b0 <xQueueGenericSendFromISR+0x58>
 800479c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047a0:	f383 8811 	msr	BASEPRI, r3
 80047a4:	f3bf 8f6f 	isb	sy
 80047a8:	f3bf 8f4f 	dsb	sy
 80047ac:	623b      	str	r3, [r7, #32]
 80047ae:	e7fe      	b.n	80047ae <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80047b0:	683b      	ldr	r3, [r7, #0]
 80047b2:	2b02      	cmp	r3, #2
 80047b4:	d103      	bne.n	80047be <xQueueGenericSendFromISR+0x66>
 80047b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047ba:	2b01      	cmp	r3, #1
 80047bc:	d101      	bne.n	80047c2 <xQueueGenericSendFromISR+0x6a>
 80047be:	2301      	movs	r3, #1
 80047c0:	e000      	b.n	80047c4 <xQueueGenericSendFromISR+0x6c>
 80047c2:	2300      	movs	r3, #0
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d109      	bne.n	80047dc <xQueueGenericSendFromISR+0x84>
 80047c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047cc:	f383 8811 	msr	BASEPRI, r3
 80047d0:	f3bf 8f6f 	isb	sy
 80047d4:	f3bf 8f4f 	dsb	sy
 80047d8:	61fb      	str	r3, [r7, #28]
 80047da:	e7fe      	b.n	80047da <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80047dc:	f002 f99e 	bl	8006b1c <vPortValidateInterruptPriority>
	__asm volatile
 80047e0:	f3ef 8211 	mrs	r2, BASEPRI
 80047e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047e8:	f383 8811 	msr	BASEPRI, r3
 80047ec:	f3bf 8f6f 	isb	sy
 80047f0:	f3bf 8f4f 	dsb	sy
 80047f4:	61ba      	str	r2, [r7, #24]
 80047f6:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80047f8:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80047fa:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80047fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047fe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004800:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004802:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004804:	429a      	cmp	r2, r3
 8004806:	d302      	bcc.n	800480e <xQueueGenericSendFromISR+0xb6>
 8004808:	683b      	ldr	r3, [r7, #0]
 800480a:	2b02      	cmp	r3, #2
 800480c:	d12c      	bne.n	8004868 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800480e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004810:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004814:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004818:	683a      	ldr	r2, [r7, #0]
 800481a:	68b9      	ldr	r1, [r7, #8]
 800481c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800481e:	f000 faa7 	bl	8004d70 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004822:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8004826:	f1b3 3fff 	cmp.w	r3, #4294967295
 800482a:	d112      	bne.n	8004852 <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800482c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800482e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004830:	2b00      	cmp	r3, #0
 8004832:	d016      	beq.n	8004862 <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004834:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004836:	3324      	adds	r3, #36	; 0x24
 8004838:	4618      	mov	r0, r3
 800483a:	f001 f84f 	bl	80058dc <xTaskRemoveFromEventList>
 800483e:	4603      	mov	r3, r0
 8004840:	2b00      	cmp	r3, #0
 8004842:	d00e      	beq.n	8004862 <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	2b00      	cmp	r3, #0
 8004848:	d00b      	beq.n	8004862 <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	2201      	movs	r2, #1
 800484e:	601a      	str	r2, [r3, #0]
 8004850:	e007      	b.n	8004862 <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004852:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004856:	3301      	adds	r3, #1
 8004858:	b2db      	uxtb	r3, r3
 800485a:	b25a      	sxtb	r2, r3
 800485c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800485e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8004862:	2301      	movs	r3, #1
 8004864:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8004866:	e001      	b.n	800486c <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004868:	2300      	movs	r3, #0
 800486a:	637b      	str	r3, [r7, #52]	; 0x34
 800486c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800486e:	613b      	str	r3, [r7, #16]
	__asm volatile
 8004870:	693b      	ldr	r3, [r7, #16]
 8004872:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004876:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8004878:	4618      	mov	r0, r3
 800487a:	3738      	adds	r7, #56	; 0x38
 800487c:	46bd      	mov	sp, r7
 800487e:	bd80      	pop	{r7, pc}

08004880 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004880:	b580      	push	{r7, lr}
 8004882:	b08c      	sub	sp, #48	; 0x30
 8004884:	af00      	add	r7, sp, #0
 8004886:	60f8      	str	r0, [r7, #12]
 8004888:	60b9      	str	r1, [r7, #8]
 800488a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800488c:	2300      	movs	r3, #0
 800488e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004894:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004896:	2b00      	cmp	r3, #0
 8004898:	d109      	bne.n	80048ae <xQueueReceive+0x2e>
	__asm volatile
 800489a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800489e:	f383 8811 	msr	BASEPRI, r3
 80048a2:	f3bf 8f6f 	isb	sy
 80048a6:	f3bf 8f4f 	dsb	sy
 80048aa:	623b      	str	r3, [r7, #32]
 80048ac:	e7fe      	b.n	80048ac <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80048ae:	68bb      	ldr	r3, [r7, #8]
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d103      	bne.n	80048bc <xQueueReceive+0x3c>
 80048b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d101      	bne.n	80048c0 <xQueueReceive+0x40>
 80048bc:	2301      	movs	r3, #1
 80048be:	e000      	b.n	80048c2 <xQueueReceive+0x42>
 80048c0:	2300      	movs	r3, #0
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d109      	bne.n	80048da <xQueueReceive+0x5a>
 80048c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048ca:	f383 8811 	msr	BASEPRI, r3
 80048ce:	f3bf 8f6f 	isb	sy
 80048d2:	f3bf 8f4f 	dsb	sy
 80048d6:	61fb      	str	r3, [r7, #28]
 80048d8:	e7fe      	b.n	80048d8 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80048da:	f001 f9b9 	bl	8005c50 <xTaskGetSchedulerState>
 80048de:	4603      	mov	r3, r0
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d102      	bne.n	80048ea <xQueueReceive+0x6a>
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d101      	bne.n	80048ee <xQueueReceive+0x6e>
 80048ea:	2301      	movs	r3, #1
 80048ec:	e000      	b.n	80048f0 <xQueueReceive+0x70>
 80048ee:	2300      	movs	r3, #0
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d109      	bne.n	8004908 <xQueueReceive+0x88>
 80048f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048f8:	f383 8811 	msr	BASEPRI, r3
 80048fc:	f3bf 8f6f 	isb	sy
 8004900:	f3bf 8f4f 	dsb	sy
 8004904:	61bb      	str	r3, [r7, #24]
 8004906:	e7fe      	b.n	8004906 <xQueueReceive+0x86>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8004908:	f002 f84e 	bl	80069a8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800490c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800490e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004910:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004914:	2b00      	cmp	r3, #0
 8004916:	d01f      	beq.n	8004958 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004918:	68b9      	ldr	r1, [r7, #8]
 800491a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800491c:	f000 fa92 	bl	8004e44 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004922:	1e5a      	subs	r2, r3, #1
 8004924:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004926:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004928:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800492a:	691b      	ldr	r3, [r3, #16]
 800492c:	2b00      	cmp	r3, #0
 800492e:	d00f      	beq.n	8004950 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004930:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004932:	3310      	adds	r3, #16
 8004934:	4618      	mov	r0, r3
 8004936:	f000 ffd1 	bl	80058dc <xTaskRemoveFromEventList>
 800493a:	4603      	mov	r3, r0
 800493c:	2b00      	cmp	r3, #0
 800493e:	d007      	beq.n	8004950 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004940:	4b3c      	ldr	r3, [pc, #240]	; (8004a34 <xQueueReceive+0x1b4>)
 8004942:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004946:	601a      	str	r2, [r3, #0]
 8004948:	f3bf 8f4f 	dsb	sy
 800494c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004950:	f002 f858 	bl	8006a04 <vPortExitCritical>
				return pdPASS;
 8004954:	2301      	movs	r3, #1
 8004956:	e069      	b.n	8004a2c <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	2b00      	cmp	r3, #0
 800495c:	d103      	bne.n	8004966 <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800495e:	f002 f851 	bl	8006a04 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004962:	2300      	movs	r3, #0
 8004964:	e062      	b.n	8004a2c <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004966:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004968:	2b00      	cmp	r3, #0
 800496a:	d106      	bne.n	800497a <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800496c:	f107 0310 	add.w	r3, r7, #16
 8004970:	4618      	mov	r0, r3
 8004972:	f001 f815 	bl	80059a0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004976:	2301      	movs	r3, #1
 8004978:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800497a:	f002 f843 	bl	8006a04 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800497e:	f000 fd81 	bl	8005484 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004982:	f002 f811 	bl	80069a8 <vPortEnterCritical>
 8004986:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004988:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800498c:	b25b      	sxtb	r3, r3
 800498e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004992:	d103      	bne.n	800499c <xQueueReceive+0x11c>
 8004994:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004996:	2200      	movs	r2, #0
 8004998:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800499c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800499e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80049a2:	b25b      	sxtb	r3, r3
 80049a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049a8:	d103      	bne.n	80049b2 <xQueueReceive+0x132>
 80049aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049ac:	2200      	movs	r2, #0
 80049ae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80049b2:	f002 f827 	bl	8006a04 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80049b6:	1d3a      	adds	r2, r7, #4
 80049b8:	f107 0310 	add.w	r3, r7, #16
 80049bc:	4611      	mov	r1, r2
 80049be:	4618      	mov	r0, r3
 80049c0:	f001 f804 	bl	80059cc <xTaskCheckForTimeOut>
 80049c4:	4603      	mov	r3, r0
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d123      	bne.n	8004a12 <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80049ca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80049cc:	f000 fab2 	bl	8004f34 <prvIsQueueEmpty>
 80049d0:	4603      	mov	r3, r0
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d017      	beq.n	8004a06 <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80049d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049d8:	3324      	adds	r3, #36	; 0x24
 80049da:	687a      	ldr	r2, [r7, #4]
 80049dc:	4611      	mov	r1, r2
 80049de:	4618      	mov	r0, r3
 80049e0:	f000 ff2e 	bl	8005840 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80049e4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80049e6:	f000 fa53 	bl	8004e90 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80049ea:	f000 fd59 	bl	80054a0 <xTaskResumeAll>
 80049ee:	4603      	mov	r3, r0
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d189      	bne.n	8004908 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 80049f4:	4b0f      	ldr	r3, [pc, #60]	; (8004a34 <xQueueReceive+0x1b4>)
 80049f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80049fa:	601a      	str	r2, [r3, #0]
 80049fc:	f3bf 8f4f 	dsb	sy
 8004a00:	f3bf 8f6f 	isb	sy
 8004a04:	e780      	b.n	8004908 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004a06:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004a08:	f000 fa42 	bl	8004e90 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004a0c:	f000 fd48 	bl	80054a0 <xTaskResumeAll>
 8004a10:	e77a      	b.n	8004908 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004a12:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004a14:	f000 fa3c 	bl	8004e90 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004a18:	f000 fd42 	bl	80054a0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004a1c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004a1e:	f000 fa89 	bl	8004f34 <prvIsQueueEmpty>
 8004a22:	4603      	mov	r3, r0
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	f43f af6f 	beq.w	8004908 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004a2a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8004a2c:	4618      	mov	r0, r3
 8004a2e:	3730      	adds	r7, #48	; 0x30
 8004a30:	46bd      	mov	sp, r7
 8004a32:	bd80      	pop	{r7, pc}
 8004a34:	e000ed04 	.word	0xe000ed04

08004a38 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8004a38:	b580      	push	{r7, lr}
 8004a3a:	b08e      	sub	sp, #56	; 0x38
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	6078      	str	r0, [r7, #4]
 8004a40:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8004a42:	2300      	movs	r3, #0
 8004a44:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8004a4a:	2300      	movs	r3, #0
 8004a4c:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004a4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d109      	bne.n	8004a68 <xQueueSemaphoreTake+0x30>
 8004a54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a58:	f383 8811 	msr	BASEPRI, r3
 8004a5c:	f3bf 8f6f 	isb	sy
 8004a60:	f3bf 8f4f 	dsb	sy
 8004a64:	623b      	str	r3, [r7, #32]
 8004a66:	e7fe      	b.n	8004a66 <xQueueSemaphoreTake+0x2e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8004a68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d009      	beq.n	8004a84 <xQueueSemaphoreTake+0x4c>
 8004a70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a74:	f383 8811 	msr	BASEPRI, r3
 8004a78:	f3bf 8f6f 	isb	sy
 8004a7c:	f3bf 8f4f 	dsb	sy
 8004a80:	61fb      	str	r3, [r7, #28]
 8004a82:	e7fe      	b.n	8004a82 <xQueueSemaphoreTake+0x4a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004a84:	f001 f8e4 	bl	8005c50 <xTaskGetSchedulerState>
 8004a88:	4603      	mov	r3, r0
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d102      	bne.n	8004a94 <xQueueSemaphoreTake+0x5c>
 8004a8e:	683b      	ldr	r3, [r7, #0]
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d101      	bne.n	8004a98 <xQueueSemaphoreTake+0x60>
 8004a94:	2301      	movs	r3, #1
 8004a96:	e000      	b.n	8004a9a <xQueueSemaphoreTake+0x62>
 8004a98:	2300      	movs	r3, #0
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d109      	bne.n	8004ab2 <xQueueSemaphoreTake+0x7a>
 8004a9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004aa2:	f383 8811 	msr	BASEPRI, r3
 8004aa6:	f3bf 8f6f 	isb	sy
 8004aaa:	f3bf 8f4f 	dsb	sy
 8004aae:	61bb      	str	r3, [r7, #24]
 8004ab0:	e7fe      	b.n	8004ab0 <xQueueSemaphoreTake+0x78>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8004ab2:	f001 ff79 	bl	80069a8 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8004ab6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ab8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004aba:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8004abc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d024      	beq.n	8004b0c <xQueueSemaphoreTake+0xd4>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8004ac2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ac4:	1e5a      	subs	r2, r3, #1
 8004ac6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ac8:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004aca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d104      	bne.n	8004adc <xQueueSemaphoreTake+0xa4>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8004ad2:	f001 fa83 	bl	8005fdc <pvTaskIncrementMutexHeldCount>
 8004ad6:	4602      	mov	r2, r0
 8004ad8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ada:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004adc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ade:	691b      	ldr	r3, [r3, #16]
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d00f      	beq.n	8004b04 <xQueueSemaphoreTake+0xcc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004ae4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ae6:	3310      	adds	r3, #16
 8004ae8:	4618      	mov	r0, r3
 8004aea:	f000 fef7 	bl	80058dc <xTaskRemoveFromEventList>
 8004aee:	4603      	mov	r3, r0
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d007      	beq.n	8004b04 <xQueueSemaphoreTake+0xcc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004af4:	4b53      	ldr	r3, [pc, #332]	; (8004c44 <xQueueSemaphoreTake+0x20c>)
 8004af6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004afa:	601a      	str	r2, [r3, #0]
 8004afc:	f3bf 8f4f 	dsb	sy
 8004b00:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004b04:	f001 ff7e 	bl	8006a04 <vPortExitCritical>
				return pdPASS;
 8004b08:	2301      	movs	r3, #1
 8004b0a:	e096      	b.n	8004c3a <xQueueSemaphoreTake+0x202>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004b0c:	683b      	ldr	r3, [r7, #0]
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d110      	bne.n	8004b34 <xQueueSemaphoreTake+0xfc>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8004b12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d009      	beq.n	8004b2c <xQueueSemaphoreTake+0xf4>
 8004b18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b1c:	f383 8811 	msr	BASEPRI, r3
 8004b20:	f3bf 8f6f 	isb	sy
 8004b24:	f3bf 8f4f 	dsb	sy
 8004b28:	617b      	str	r3, [r7, #20]
 8004b2a:	e7fe      	b.n	8004b2a <xQueueSemaphoreTake+0xf2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8004b2c:	f001 ff6a 	bl	8006a04 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004b30:	2300      	movs	r3, #0
 8004b32:	e082      	b.n	8004c3a <xQueueSemaphoreTake+0x202>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004b34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d106      	bne.n	8004b48 <xQueueSemaphoreTake+0x110>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004b3a:	f107 030c 	add.w	r3, r7, #12
 8004b3e:	4618      	mov	r0, r3
 8004b40:	f000 ff2e 	bl	80059a0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004b44:	2301      	movs	r3, #1
 8004b46:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004b48:	f001 ff5c 	bl	8006a04 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004b4c:	f000 fc9a 	bl	8005484 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004b50:	f001 ff2a 	bl	80069a8 <vPortEnterCritical>
 8004b54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b56:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004b5a:	b25b      	sxtb	r3, r3
 8004b5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b60:	d103      	bne.n	8004b6a <xQueueSemaphoreTake+0x132>
 8004b62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b64:	2200      	movs	r2, #0
 8004b66:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004b6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b6c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004b70:	b25b      	sxtb	r3, r3
 8004b72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b76:	d103      	bne.n	8004b80 <xQueueSemaphoreTake+0x148>
 8004b78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b7a:	2200      	movs	r2, #0
 8004b7c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004b80:	f001 ff40 	bl	8006a04 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004b84:	463a      	mov	r2, r7
 8004b86:	f107 030c 	add.w	r3, r7, #12
 8004b8a:	4611      	mov	r1, r2
 8004b8c:	4618      	mov	r0, r3
 8004b8e:	f000 ff1d 	bl	80059cc <xTaskCheckForTimeOut>
 8004b92:	4603      	mov	r3, r0
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d132      	bne.n	8004bfe <xQueueSemaphoreTake+0x1c6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004b98:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004b9a:	f000 f9cb 	bl	8004f34 <prvIsQueueEmpty>
 8004b9e:	4603      	mov	r3, r0
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d026      	beq.n	8004bf2 <xQueueSemaphoreTake+0x1ba>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004ba4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d109      	bne.n	8004bc0 <xQueueSemaphoreTake+0x188>
					{
						taskENTER_CRITICAL();
 8004bac:	f001 fefc 	bl	80069a8 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8004bb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bb2:	685b      	ldr	r3, [r3, #4]
 8004bb4:	4618      	mov	r0, r3
 8004bb6:	f001 f869 	bl	8005c8c <xTaskPriorityInherit>
 8004bba:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8004bbc:	f001 ff22 	bl	8006a04 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004bc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bc2:	3324      	adds	r3, #36	; 0x24
 8004bc4:	683a      	ldr	r2, [r7, #0]
 8004bc6:	4611      	mov	r1, r2
 8004bc8:	4618      	mov	r0, r3
 8004bca:	f000 fe39 	bl	8005840 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004bce:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004bd0:	f000 f95e 	bl	8004e90 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004bd4:	f000 fc64 	bl	80054a0 <xTaskResumeAll>
 8004bd8:	4603      	mov	r3, r0
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	f47f af69 	bne.w	8004ab2 <xQueueSemaphoreTake+0x7a>
				{
					portYIELD_WITHIN_API();
 8004be0:	4b18      	ldr	r3, [pc, #96]	; (8004c44 <xQueueSemaphoreTake+0x20c>)
 8004be2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004be6:	601a      	str	r2, [r3, #0]
 8004be8:	f3bf 8f4f 	dsb	sy
 8004bec:	f3bf 8f6f 	isb	sy
 8004bf0:	e75f      	b.n	8004ab2 <xQueueSemaphoreTake+0x7a>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8004bf2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004bf4:	f000 f94c 	bl	8004e90 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004bf8:	f000 fc52 	bl	80054a0 <xTaskResumeAll>
 8004bfc:	e759      	b.n	8004ab2 <xQueueSemaphoreTake+0x7a>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8004bfe:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004c00:	f000 f946 	bl	8004e90 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004c04:	f000 fc4c 	bl	80054a0 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004c08:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004c0a:	f000 f993 	bl	8004f34 <prvIsQueueEmpty>
 8004c0e:	4603      	mov	r3, r0
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	f43f af4e 	beq.w	8004ab2 <xQueueSemaphoreTake+0x7a>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8004c16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d00d      	beq.n	8004c38 <xQueueSemaphoreTake+0x200>
					{
						taskENTER_CRITICAL();
 8004c1c:	f001 fec4 	bl	80069a8 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8004c20:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004c22:	f000 f88e 	bl	8004d42 <prvGetDisinheritPriorityAfterTimeout>
 8004c26:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 8004c28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c2a:	685b      	ldr	r3, [r3, #4]
 8004c2c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004c2e:	4618      	mov	r0, r3
 8004c30:	f001 f936 	bl	8005ea0 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8004c34:	f001 fee6 	bl	8006a04 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004c38:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8004c3a:	4618      	mov	r0, r3
 8004c3c:	3738      	adds	r7, #56	; 0x38
 8004c3e:	46bd      	mov	sp, r7
 8004c40:	bd80      	pop	{r7, pc}
 8004c42:	bf00      	nop
 8004c44:	e000ed04 	.word	0xe000ed04

08004c48 <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8004c48:	b580      	push	{r7, lr}
 8004c4a:	b08e      	sub	sp, #56	; 0x38
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	60f8      	str	r0, [r7, #12]
 8004c50:	60b9      	str	r1, [r7, #8]
 8004c52:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004c58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d109      	bne.n	8004c72 <xQueueReceiveFromISR+0x2a>
 8004c5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c62:	f383 8811 	msr	BASEPRI, r3
 8004c66:	f3bf 8f6f 	isb	sy
 8004c6a:	f3bf 8f4f 	dsb	sy
 8004c6e:	623b      	str	r3, [r7, #32]
 8004c70:	e7fe      	b.n	8004c70 <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004c72:	68bb      	ldr	r3, [r7, #8]
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d103      	bne.n	8004c80 <xQueueReceiveFromISR+0x38>
 8004c78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d101      	bne.n	8004c84 <xQueueReceiveFromISR+0x3c>
 8004c80:	2301      	movs	r3, #1
 8004c82:	e000      	b.n	8004c86 <xQueueReceiveFromISR+0x3e>
 8004c84:	2300      	movs	r3, #0
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d109      	bne.n	8004c9e <xQueueReceiveFromISR+0x56>
 8004c8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c8e:	f383 8811 	msr	BASEPRI, r3
 8004c92:	f3bf 8f6f 	isb	sy
 8004c96:	f3bf 8f4f 	dsb	sy
 8004c9a:	61fb      	str	r3, [r7, #28]
 8004c9c:	e7fe      	b.n	8004c9c <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004c9e:	f001 ff3d 	bl	8006b1c <vPortValidateInterruptPriority>
	__asm volatile
 8004ca2:	f3ef 8211 	mrs	r2, BASEPRI
 8004ca6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004caa:	f383 8811 	msr	BASEPRI, r3
 8004cae:	f3bf 8f6f 	isb	sy
 8004cb2:	f3bf 8f4f 	dsb	sy
 8004cb6:	61ba      	str	r2, [r7, #24]
 8004cb8:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8004cba:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004cbc:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004cbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cc2:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004cc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d02f      	beq.n	8004d2a <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8004cca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ccc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004cd0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004cd4:	68b9      	ldr	r1, [r7, #8]
 8004cd6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004cd8:	f000 f8b4 	bl	8004e44 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004cdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cde:	1e5a      	subs	r2, r3, #1
 8004ce0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ce2:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8004ce4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8004ce8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cec:	d112      	bne.n	8004d14 <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004cee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cf0:	691b      	ldr	r3, [r3, #16]
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d016      	beq.n	8004d24 <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004cf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cf8:	3310      	adds	r3, #16
 8004cfa:	4618      	mov	r0, r3
 8004cfc:	f000 fdee 	bl	80058dc <xTaskRemoveFromEventList>
 8004d00:	4603      	mov	r3, r0
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d00e      	beq.n	8004d24 <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d00b      	beq.n	8004d24 <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	2201      	movs	r2, #1
 8004d10:	601a      	str	r2, [r3, #0]
 8004d12:	e007      	b.n	8004d24 <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8004d14:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004d18:	3301      	adds	r3, #1
 8004d1a:	b2db      	uxtb	r3, r3
 8004d1c:	b25a      	sxtb	r2, r3
 8004d1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d20:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8004d24:	2301      	movs	r3, #1
 8004d26:	637b      	str	r3, [r7, #52]	; 0x34
 8004d28:	e001      	b.n	8004d2e <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 8004d2a:	2300      	movs	r3, #0
 8004d2c:	637b      	str	r3, [r7, #52]	; 0x34
 8004d2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d30:	613b      	str	r3, [r7, #16]
	__asm volatile
 8004d32:	693b      	ldr	r3, [r7, #16]
 8004d34:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004d38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8004d3a:	4618      	mov	r0, r3
 8004d3c:	3738      	adds	r7, #56	; 0x38
 8004d3e:	46bd      	mov	sp, r7
 8004d40:	bd80      	pop	{r7, pc}

08004d42 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8004d42:	b480      	push	{r7}
 8004d44:	b085      	sub	sp, #20
 8004d46:	af00      	add	r7, sp, #0
 8004d48:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d006      	beq.n	8004d60 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	f1c3 0307 	rsb	r3, r3, #7
 8004d5c:	60fb      	str	r3, [r7, #12]
 8004d5e:	e001      	b.n	8004d64 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8004d60:	2300      	movs	r3, #0
 8004d62:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8004d64:	68fb      	ldr	r3, [r7, #12]
	}
 8004d66:	4618      	mov	r0, r3
 8004d68:	3714      	adds	r7, #20
 8004d6a:	46bd      	mov	sp, r7
 8004d6c:	bc80      	pop	{r7}
 8004d6e:	4770      	bx	lr

08004d70 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004d70:	b580      	push	{r7, lr}
 8004d72:	b086      	sub	sp, #24
 8004d74:	af00      	add	r7, sp, #0
 8004d76:	60f8      	str	r0, [r7, #12]
 8004d78:	60b9      	str	r1, [r7, #8]
 8004d7a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004d7c:	2300      	movs	r3, #0
 8004d7e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d84:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d10d      	bne.n	8004daa <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d14d      	bne.n	8004e32 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	685b      	ldr	r3, [r3, #4]
 8004d9a:	4618      	mov	r0, r3
 8004d9c:	f000 fffc 	bl	8005d98 <xTaskPriorityDisinherit>
 8004da0:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	2200      	movs	r2, #0
 8004da6:	605a      	str	r2, [r3, #4]
 8004da8:	e043      	b.n	8004e32 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d119      	bne.n	8004de4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	6898      	ldr	r0, [r3, #8]
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004db8:	461a      	mov	r2, r3
 8004dba:	68b9      	ldr	r1, [r7, #8]
 8004dbc:	f002 f8ec 	bl	8006f98 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	689a      	ldr	r2, [r3, #8]
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dc8:	441a      	add	r2, r3
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	689a      	ldr	r2, [r3, #8]
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	685b      	ldr	r3, [r3, #4]
 8004dd6:	429a      	cmp	r2, r3
 8004dd8:	d32b      	bcc.n	8004e32 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	681a      	ldr	r2, [r3, #0]
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	609a      	str	r2, [r3, #8]
 8004de2:	e026      	b.n	8004e32 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	68d8      	ldr	r0, [r3, #12]
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dec:	461a      	mov	r2, r3
 8004dee:	68b9      	ldr	r1, [r7, #8]
 8004df0:	f002 f8d2 	bl	8006f98 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	68da      	ldr	r2, [r3, #12]
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dfc:	425b      	negs	r3, r3
 8004dfe:	441a      	add	r2, r3
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	68da      	ldr	r2, [r3, #12]
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	429a      	cmp	r2, r3
 8004e0e:	d207      	bcs.n	8004e20 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	685a      	ldr	r2, [r3, #4]
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e18:	425b      	negs	r3, r3
 8004e1a:	441a      	add	r2, r3
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	2b02      	cmp	r3, #2
 8004e24:	d105      	bne.n	8004e32 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004e26:	693b      	ldr	r3, [r7, #16]
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d002      	beq.n	8004e32 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004e2c:	693b      	ldr	r3, [r7, #16]
 8004e2e:	3b01      	subs	r3, #1
 8004e30:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004e32:	693b      	ldr	r3, [r7, #16]
 8004e34:	1c5a      	adds	r2, r3, #1
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8004e3a:	697b      	ldr	r3, [r7, #20]
}
 8004e3c:	4618      	mov	r0, r3
 8004e3e:	3718      	adds	r7, #24
 8004e40:	46bd      	mov	sp, r7
 8004e42:	bd80      	pop	{r7, pc}

08004e44 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004e44:	b580      	push	{r7, lr}
 8004e46:	b082      	sub	sp, #8
 8004e48:	af00      	add	r7, sp, #0
 8004e4a:	6078      	str	r0, [r7, #4]
 8004e4c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d018      	beq.n	8004e88 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	68da      	ldr	r2, [r3, #12]
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e5e:	441a      	add	r2, r3
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	68da      	ldr	r2, [r3, #12]
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	685b      	ldr	r3, [r3, #4]
 8004e6c:	429a      	cmp	r2, r3
 8004e6e:	d303      	bcc.n	8004e78 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681a      	ldr	r2, [r3, #0]
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	68d9      	ldr	r1, [r3, #12]
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e80:	461a      	mov	r2, r3
 8004e82:	6838      	ldr	r0, [r7, #0]
 8004e84:	f002 f888 	bl	8006f98 <memcpy>
	}
}
 8004e88:	bf00      	nop
 8004e8a:	3708      	adds	r7, #8
 8004e8c:	46bd      	mov	sp, r7
 8004e8e:	bd80      	pop	{r7, pc}

08004e90 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004e90:	b580      	push	{r7, lr}
 8004e92:	b084      	sub	sp, #16
 8004e94:	af00      	add	r7, sp, #0
 8004e96:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004e98:	f001 fd86 	bl	80069a8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004ea2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004ea4:	e011      	b.n	8004eca <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d012      	beq.n	8004ed4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	3324      	adds	r3, #36	; 0x24
 8004eb2:	4618      	mov	r0, r3
 8004eb4:	f000 fd12 	bl	80058dc <xTaskRemoveFromEventList>
 8004eb8:	4603      	mov	r3, r0
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d001      	beq.n	8004ec2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004ebe:	f000 fde5 	bl	8005a8c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004ec2:	7bfb      	ldrb	r3, [r7, #15]
 8004ec4:	3b01      	subs	r3, #1
 8004ec6:	b2db      	uxtb	r3, r3
 8004ec8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004eca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	dce9      	bgt.n	8004ea6 <prvUnlockQueue+0x16>
 8004ed2:	e000      	b.n	8004ed6 <prvUnlockQueue+0x46>
					break;
 8004ed4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	22ff      	movs	r2, #255	; 0xff
 8004eda:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8004ede:	f001 fd91 	bl	8006a04 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004ee2:	f001 fd61 	bl	80069a8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004eec:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004eee:	e011      	b.n	8004f14 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	691b      	ldr	r3, [r3, #16]
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d012      	beq.n	8004f1e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	3310      	adds	r3, #16
 8004efc:	4618      	mov	r0, r3
 8004efe:	f000 fced 	bl	80058dc <xTaskRemoveFromEventList>
 8004f02:	4603      	mov	r3, r0
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d001      	beq.n	8004f0c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004f08:	f000 fdc0 	bl	8005a8c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004f0c:	7bbb      	ldrb	r3, [r7, #14]
 8004f0e:	3b01      	subs	r3, #1
 8004f10:	b2db      	uxtb	r3, r3
 8004f12:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004f14:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	dce9      	bgt.n	8004ef0 <prvUnlockQueue+0x60>
 8004f1c:	e000      	b.n	8004f20 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004f1e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	22ff      	movs	r2, #255	; 0xff
 8004f24:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8004f28:	f001 fd6c 	bl	8006a04 <vPortExitCritical>
}
 8004f2c:	bf00      	nop
 8004f2e:	3710      	adds	r7, #16
 8004f30:	46bd      	mov	sp, r7
 8004f32:	bd80      	pop	{r7, pc}

08004f34 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004f34:	b580      	push	{r7, lr}
 8004f36:	b084      	sub	sp, #16
 8004f38:	af00      	add	r7, sp, #0
 8004f3a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004f3c:	f001 fd34 	bl	80069a8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d102      	bne.n	8004f4e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004f48:	2301      	movs	r3, #1
 8004f4a:	60fb      	str	r3, [r7, #12]
 8004f4c:	e001      	b.n	8004f52 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004f4e:	2300      	movs	r3, #0
 8004f50:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004f52:	f001 fd57 	bl	8006a04 <vPortExitCritical>

	return xReturn;
 8004f56:	68fb      	ldr	r3, [r7, #12]
}
 8004f58:	4618      	mov	r0, r3
 8004f5a:	3710      	adds	r7, #16
 8004f5c:	46bd      	mov	sp, r7
 8004f5e:	bd80      	pop	{r7, pc}

08004f60 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004f60:	b580      	push	{r7, lr}
 8004f62:	b084      	sub	sp, #16
 8004f64:	af00      	add	r7, sp, #0
 8004f66:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004f68:	f001 fd1e 	bl	80069a8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f74:	429a      	cmp	r2, r3
 8004f76:	d102      	bne.n	8004f7e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004f78:	2301      	movs	r3, #1
 8004f7a:	60fb      	str	r3, [r7, #12]
 8004f7c:	e001      	b.n	8004f82 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004f7e:	2300      	movs	r3, #0
 8004f80:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004f82:	f001 fd3f 	bl	8006a04 <vPortExitCritical>

	return xReturn;
 8004f86:	68fb      	ldr	r3, [r7, #12]
}
 8004f88:	4618      	mov	r0, r3
 8004f8a:	3710      	adds	r7, #16
 8004f8c:	46bd      	mov	sp, r7
 8004f8e:	bd80      	pop	{r7, pc}

08004f90 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004f90:	b480      	push	{r7}
 8004f92:	b085      	sub	sp, #20
 8004f94:	af00      	add	r7, sp, #0
 8004f96:	6078      	str	r0, [r7, #4]
 8004f98:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004f9a:	2300      	movs	r3, #0
 8004f9c:	60fb      	str	r3, [r7, #12]
 8004f9e:	e014      	b.n	8004fca <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004fa0:	4a0e      	ldr	r2, [pc, #56]	; (8004fdc <vQueueAddToRegistry+0x4c>)
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d10b      	bne.n	8004fc4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004fac:	490b      	ldr	r1, [pc, #44]	; (8004fdc <vQueueAddToRegistry+0x4c>)
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	683a      	ldr	r2, [r7, #0]
 8004fb2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8004fb6:	4a09      	ldr	r2, [pc, #36]	; (8004fdc <vQueueAddToRegistry+0x4c>)
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	00db      	lsls	r3, r3, #3
 8004fbc:	4413      	add	r3, r2
 8004fbe:	687a      	ldr	r2, [r7, #4]
 8004fc0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8004fc2:	e005      	b.n	8004fd0 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	3301      	adds	r3, #1
 8004fc8:	60fb      	str	r3, [r7, #12]
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	2b07      	cmp	r3, #7
 8004fce:	d9e7      	bls.n	8004fa0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004fd0:	bf00      	nop
 8004fd2:	3714      	adds	r7, #20
 8004fd4:	46bd      	mov	sp, r7
 8004fd6:	bc80      	pop	{r7}
 8004fd8:	4770      	bx	lr
 8004fda:	bf00      	nop
 8004fdc:	20001668 	.word	0x20001668

08004fe0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004fe0:	b580      	push	{r7, lr}
 8004fe2:	b086      	sub	sp, #24
 8004fe4:	af00      	add	r7, sp, #0
 8004fe6:	60f8      	str	r0, [r7, #12]
 8004fe8:	60b9      	str	r1, [r7, #8]
 8004fea:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8004ff0:	f001 fcda 	bl	80069a8 <vPortEnterCritical>
 8004ff4:	697b      	ldr	r3, [r7, #20]
 8004ff6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004ffa:	b25b      	sxtb	r3, r3
 8004ffc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005000:	d103      	bne.n	800500a <vQueueWaitForMessageRestricted+0x2a>
 8005002:	697b      	ldr	r3, [r7, #20]
 8005004:	2200      	movs	r2, #0
 8005006:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800500a:	697b      	ldr	r3, [r7, #20]
 800500c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005010:	b25b      	sxtb	r3, r3
 8005012:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005016:	d103      	bne.n	8005020 <vQueueWaitForMessageRestricted+0x40>
 8005018:	697b      	ldr	r3, [r7, #20]
 800501a:	2200      	movs	r2, #0
 800501c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005020:	f001 fcf0 	bl	8006a04 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005024:	697b      	ldr	r3, [r7, #20]
 8005026:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005028:	2b00      	cmp	r3, #0
 800502a:	d106      	bne.n	800503a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800502c:	697b      	ldr	r3, [r7, #20]
 800502e:	3324      	adds	r3, #36	; 0x24
 8005030:	687a      	ldr	r2, [r7, #4]
 8005032:	68b9      	ldr	r1, [r7, #8]
 8005034:	4618      	mov	r0, r3
 8005036:	f000 fc27 	bl	8005888 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800503a:	6978      	ldr	r0, [r7, #20]
 800503c:	f7ff ff28 	bl	8004e90 <prvUnlockQueue>
	}
 8005040:	bf00      	nop
 8005042:	3718      	adds	r7, #24
 8005044:	46bd      	mov	sp, r7
 8005046:	bd80      	pop	{r7, pc}

08005048 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005048:	b580      	push	{r7, lr}
 800504a:	b08e      	sub	sp, #56	; 0x38
 800504c:	af04      	add	r7, sp, #16
 800504e:	60f8      	str	r0, [r7, #12]
 8005050:	60b9      	str	r1, [r7, #8]
 8005052:	607a      	str	r2, [r7, #4]
 8005054:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005056:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005058:	2b00      	cmp	r3, #0
 800505a:	d109      	bne.n	8005070 <xTaskCreateStatic+0x28>
	__asm volatile
 800505c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005060:	f383 8811 	msr	BASEPRI, r3
 8005064:	f3bf 8f6f 	isb	sy
 8005068:	f3bf 8f4f 	dsb	sy
 800506c:	623b      	str	r3, [r7, #32]
 800506e:	e7fe      	b.n	800506e <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8005070:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005072:	2b00      	cmp	r3, #0
 8005074:	d109      	bne.n	800508a <xTaskCreateStatic+0x42>
 8005076:	f04f 0350 	mov.w	r3, #80	; 0x50
 800507a:	f383 8811 	msr	BASEPRI, r3
 800507e:	f3bf 8f6f 	isb	sy
 8005082:	f3bf 8f4f 	dsb	sy
 8005086:	61fb      	str	r3, [r7, #28]
 8005088:	e7fe      	b.n	8005088 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800508a:	2354      	movs	r3, #84	; 0x54
 800508c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800508e:	693b      	ldr	r3, [r7, #16]
 8005090:	2b54      	cmp	r3, #84	; 0x54
 8005092:	d009      	beq.n	80050a8 <xTaskCreateStatic+0x60>
 8005094:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005098:	f383 8811 	msr	BASEPRI, r3
 800509c:	f3bf 8f6f 	isb	sy
 80050a0:	f3bf 8f4f 	dsb	sy
 80050a4:	61bb      	str	r3, [r7, #24]
 80050a6:	e7fe      	b.n	80050a6 <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80050a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d01e      	beq.n	80050ec <xTaskCreateStatic+0xa4>
 80050ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d01b      	beq.n	80050ec <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80050b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050b6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80050b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050ba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80050bc:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80050be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050c0:	2202      	movs	r2, #2
 80050c2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80050c6:	2300      	movs	r3, #0
 80050c8:	9303      	str	r3, [sp, #12]
 80050ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050cc:	9302      	str	r3, [sp, #8]
 80050ce:	f107 0314 	add.w	r3, r7, #20
 80050d2:	9301      	str	r3, [sp, #4]
 80050d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050d6:	9300      	str	r3, [sp, #0]
 80050d8:	683b      	ldr	r3, [r7, #0]
 80050da:	687a      	ldr	r2, [r7, #4]
 80050dc:	68b9      	ldr	r1, [r7, #8]
 80050de:	68f8      	ldr	r0, [r7, #12]
 80050e0:	f000 f850 	bl	8005184 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80050e4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80050e6:	f000 f8cb 	bl	8005280 <prvAddNewTaskToReadyList>
 80050ea:	e001      	b.n	80050f0 <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 80050ec:	2300      	movs	r3, #0
 80050ee:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80050f0:	697b      	ldr	r3, [r7, #20]
	}
 80050f2:	4618      	mov	r0, r3
 80050f4:	3728      	adds	r7, #40	; 0x28
 80050f6:	46bd      	mov	sp, r7
 80050f8:	bd80      	pop	{r7, pc}

080050fa <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80050fa:	b580      	push	{r7, lr}
 80050fc:	b08c      	sub	sp, #48	; 0x30
 80050fe:	af04      	add	r7, sp, #16
 8005100:	60f8      	str	r0, [r7, #12]
 8005102:	60b9      	str	r1, [r7, #8]
 8005104:	603b      	str	r3, [r7, #0]
 8005106:	4613      	mov	r3, r2
 8005108:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800510a:	88fb      	ldrh	r3, [r7, #6]
 800510c:	009b      	lsls	r3, r3, #2
 800510e:	4618      	mov	r0, r3
 8005110:	f001 fd40 	bl	8006b94 <pvPortMalloc>
 8005114:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005116:	697b      	ldr	r3, [r7, #20]
 8005118:	2b00      	cmp	r3, #0
 800511a:	d00e      	beq.n	800513a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800511c:	2054      	movs	r0, #84	; 0x54
 800511e:	f001 fd39 	bl	8006b94 <pvPortMalloc>
 8005122:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005124:	69fb      	ldr	r3, [r7, #28]
 8005126:	2b00      	cmp	r3, #0
 8005128:	d003      	beq.n	8005132 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800512a:	69fb      	ldr	r3, [r7, #28]
 800512c:	697a      	ldr	r2, [r7, #20]
 800512e:	631a      	str	r2, [r3, #48]	; 0x30
 8005130:	e005      	b.n	800513e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005132:	6978      	ldr	r0, [r7, #20]
 8005134:	f001 fdf4 	bl	8006d20 <vPortFree>
 8005138:	e001      	b.n	800513e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800513a:	2300      	movs	r3, #0
 800513c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800513e:	69fb      	ldr	r3, [r7, #28]
 8005140:	2b00      	cmp	r3, #0
 8005142:	d017      	beq.n	8005174 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005144:	69fb      	ldr	r3, [r7, #28]
 8005146:	2200      	movs	r2, #0
 8005148:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800514c:	88fa      	ldrh	r2, [r7, #6]
 800514e:	2300      	movs	r3, #0
 8005150:	9303      	str	r3, [sp, #12]
 8005152:	69fb      	ldr	r3, [r7, #28]
 8005154:	9302      	str	r3, [sp, #8]
 8005156:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005158:	9301      	str	r3, [sp, #4]
 800515a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800515c:	9300      	str	r3, [sp, #0]
 800515e:	683b      	ldr	r3, [r7, #0]
 8005160:	68b9      	ldr	r1, [r7, #8]
 8005162:	68f8      	ldr	r0, [r7, #12]
 8005164:	f000 f80e 	bl	8005184 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005168:	69f8      	ldr	r0, [r7, #28]
 800516a:	f000 f889 	bl	8005280 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800516e:	2301      	movs	r3, #1
 8005170:	61bb      	str	r3, [r7, #24]
 8005172:	e002      	b.n	800517a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005174:	f04f 33ff 	mov.w	r3, #4294967295
 8005178:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800517a:	69bb      	ldr	r3, [r7, #24]
	}
 800517c:	4618      	mov	r0, r3
 800517e:	3720      	adds	r7, #32
 8005180:	46bd      	mov	sp, r7
 8005182:	bd80      	pop	{r7, pc}

08005184 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005184:	b580      	push	{r7, lr}
 8005186:	b088      	sub	sp, #32
 8005188:	af00      	add	r7, sp, #0
 800518a:	60f8      	str	r0, [r7, #12]
 800518c:	60b9      	str	r1, [r7, #8]
 800518e:	607a      	str	r2, [r7, #4]
 8005190:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8005192:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005194:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800519c:	3b01      	subs	r3, #1
 800519e:	009b      	lsls	r3, r3, #2
 80051a0:	4413      	add	r3, r2
 80051a2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80051a4:	69bb      	ldr	r3, [r7, #24]
 80051a6:	f023 0307 	bic.w	r3, r3, #7
 80051aa:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80051ac:	69bb      	ldr	r3, [r7, #24]
 80051ae:	f003 0307 	and.w	r3, r3, #7
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d009      	beq.n	80051ca <prvInitialiseNewTask+0x46>
 80051b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051ba:	f383 8811 	msr	BASEPRI, r3
 80051be:	f3bf 8f6f 	isb	sy
 80051c2:	f3bf 8f4f 	dsb	sy
 80051c6:	617b      	str	r3, [r7, #20]
 80051c8:	e7fe      	b.n	80051c8 <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80051ca:	2300      	movs	r3, #0
 80051cc:	61fb      	str	r3, [r7, #28]
 80051ce:	e012      	b.n	80051f6 <prvInitialiseNewTask+0x72>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80051d0:	68ba      	ldr	r2, [r7, #8]
 80051d2:	69fb      	ldr	r3, [r7, #28]
 80051d4:	4413      	add	r3, r2
 80051d6:	7819      	ldrb	r1, [r3, #0]
 80051d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80051da:	69fb      	ldr	r3, [r7, #28]
 80051dc:	4413      	add	r3, r2
 80051de:	3334      	adds	r3, #52	; 0x34
 80051e0:	460a      	mov	r2, r1
 80051e2:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 80051e4:	68ba      	ldr	r2, [r7, #8]
 80051e6:	69fb      	ldr	r3, [r7, #28]
 80051e8:	4413      	add	r3, r2
 80051ea:	781b      	ldrb	r3, [r3, #0]
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d006      	beq.n	80051fe <prvInitialiseNewTask+0x7a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80051f0:	69fb      	ldr	r3, [r7, #28]
 80051f2:	3301      	adds	r3, #1
 80051f4:	61fb      	str	r3, [r7, #28]
 80051f6:	69fb      	ldr	r3, [r7, #28]
 80051f8:	2b0f      	cmp	r3, #15
 80051fa:	d9e9      	bls.n	80051d0 <prvInitialiseNewTask+0x4c>
 80051fc:	e000      	b.n	8005200 <prvInitialiseNewTask+0x7c>
		{
			break;
 80051fe:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005200:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005202:	2200      	movs	r2, #0
 8005204:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005208:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800520a:	2b06      	cmp	r3, #6
 800520c:	d901      	bls.n	8005212 <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800520e:	2306      	movs	r3, #6
 8005210:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005212:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005214:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005216:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005218:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800521a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800521c:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800521e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005220:	2200      	movs	r2, #0
 8005222:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005224:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005226:	3304      	adds	r3, #4
 8005228:	4618      	mov	r0, r3
 800522a:	f7fe ff86 	bl	800413a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800522e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005230:	3318      	adds	r3, #24
 8005232:	4618      	mov	r0, r3
 8005234:	f7fe ff81 	bl	800413a <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005238:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800523a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800523c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800523e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005240:	f1c3 0207 	rsb	r2, r3, #7
 8005244:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005246:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005248:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800524a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800524c:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800524e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005250:	2200      	movs	r2, #0
 8005252:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005254:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005256:	2200      	movs	r2, #0
 8005258:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800525c:	683a      	ldr	r2, [r7, #0]
 800525e:	68f9      	ldr	r1, [r7, #12]
 8005260:	69b8      	ldr	r0, [r7, #24]
 8005262:	f001 fab3 	bl	80067cc <pxPortInitialiseStack>
 8005266:	4602      	mov	r2, r0
 8005268:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800526a:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 800526c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800526e:	2b00      	cmp	r3, #0
 8005270:	d002      	beq.n	8005278 <prvInitialiseNewTask+0xf4>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005272:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005274:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005276:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005278:	bf00      	nop
 800527a:	3720      	adds	r7, #32
 800527c:	46bd      	mov	sp, r7
 800527e:	bd80      	pop	{r7, pc}

08005280 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005280:	b580      	push	{r7, lr}
 8005282:	b082      	sub	sp, #8
 8005284:	af00      	add	r7, sp, #0
 8005286:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005288:	f001 fb8e 	bl	80069a8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800528c:	4b2a      	ldr	r3, [pc, #168]	; (8005338 <prvAddNewTaskToReadyList+0xb8>)
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	3301      	adds	r3, #1
 8005292:	4a29      	ldr	r2, [pc, #164]	; (8005338 <prvAddNewTaskToReadyList+0xb8>)
 8005294:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005296:	4b29      	ldr	r3, [pc, #164]	; (800533c <prvAddNewTaskToReadyList+0xbc>)
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	2b00      	cmp	r3, #0
 800529c:	d109      	bne.n	80052b2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800529e:	4a27      	ldr	r2, [pc, #156]	; (800533c <prvAddNewTaskToReadyList+0xbc>)
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80052a4:	4b24      	ldr	r3, [pc, #144]	; (8005338 <prvAddNewTaskToReadyList+0xb8>)
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	2b01      	cmp	r3, #1
 80052aa:	d110      	bne.n	80052ce <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80052ac:	f000 fc12 	bl	8005ad4 <prvInitialiseTaskLists>
 80052b0:	e00d      	b.n	80052ce <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80052b2:	4b23      	ldr	r3, [pc, #140]	; (8005340 <prvAddNewTaskToReadyList+0xc0>)
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d109      	bne.n	80052ce <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80052ba:	4b20      	ldr	r3, [pc, #128]	; (800533c <prvAddNewTaskToReadyList+0xbc>)
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052c4:	429a      	cmp	r2, r3
 80052c6:	d802      	bhi.n	80052ce <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80052c8:	4a1c      	ldr	r2, [pc, #112]	; (800533c <prvAddNewTaskToReadyList+0xbc>)
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80052ce:	4b1d      	ldr	r3, [pc, #116]	; (8005344 <prvAddNewTaskToReadyList+0xc4>)
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	3301      	adds	r3, #1
 80052d4:	4a1b      	ldr	r2, [pc, #108]	; (8005344 <prvAddNewTaskToReadyList+0xc4>)
 80052d6:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052dc:	2201      	movs	r2, #1
 80052de:	409a      	lsls	r2, r3
 80052e0:	4b19      	ldr	r3, [pc, #100]	; (8005348 <prvAddNewTaskToReadyList+0xc8>)
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	4313      	orrs	r3, r2
 80052e6:	4a18      	ldr	r2, [pc, #96]	; (8005348 <prvAddNewTaskToReadyList+0xc8>)
 80052e8:	6013      	str	r3, [r2, #0]
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80052ee:	4613      	mov	r3, r2
 80052f0:	009b      	lsls	r3, r3, #2
 80052f2:	4413      	add	r3, r2
 80052f4:	009b      	lsls	r3, r3, #2
 80052f6:	4a15      	ldr	r2, [pc, #84]	; (800534c <prvAddNewTaskToReadyList+0xcc>)
 80052f8:	441a      	add	r2, r3
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	3304      	adds	r3, #4
 80052fe:	4619      	mov	r1, r3
 8005300:	4610      	mov	r0, r2
 8005302:	f7fe ff26 	bl	8004152 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005306:	f001 fb7d 	bl	8006a04 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800530a:	4b0d      	ldr	r3, [pc, #52]	; (8005340 <prvAddNewTaskToReadyList+0xc0>)
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	2b00      	cmp	r3, #0
 8005310:	d00e      	beq.n	8005330 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005312:	4b0a      	ldr	r3, [pc, #40]	; (800533c <prvAddNewTaskToReadyList+0xbc>)
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800531c:	429a      	cmp	r2, r3
 800531e:	d207      	bcs.n	8005330 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005320:	4b0b      	ldr	r3, [pc, #44]	; (8005350 <prvAddNewTaskToReadyList+0xd0>)
 8005322:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005326:	601a      	str	r2, [r3, #0]
 8005328:	f3bf 8f4f 	dsb	sy
 800532c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005330:	bf00      	nop
 8005332:	3708      	adds	r7, #8
 8005334:	46bd      	mov	sp, r7
 8005336:	bd80      	pop	{r7, pc}
 8005338:	20000640 	.word	0x20000640
 800533c:	20000540 	.word	0x20000540
 8005340:	2000064c 	.word	0x2000064c
 8005344:	2000065c 	.word	0x2000065c
 8005348:	20000648 	.word	0x20000648
 800534c:	20000544 	.word	0x20000544
 8005350:	e000ed04 	.word	0xe000ed04

08005354 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005354:	b580      	push	{r7, lr}
 8005356:	b084      	sub	sp, #16
 8005358:	af00      	add	r7, sp, #0
 800535a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800535c:	2300      	movs	r3, #0
 800535e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	2b00      	cmp	r3, #0
 8005364:	d016      	beq.n	8005394 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005366:	4b13      	ldr	r3, [pc, #76]	; (80053b4 <vTaskDelay+0x60>)
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	2b00      	cmp	r3, #0
 800536c:	d009      	beq.n	8005382 <vTaskDelay+0x2e>
 800536e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005372:	f383 8811 	msr	BASEPRI, r3
 8005376:	f3bf 8f6f 	isb	sy
 800537a:	f3bf 8f4f 	dsb	sy
 800537e:	60bb      	str	r3, [r7, #8]
 8005380:	e7fe      	b.n	8005380 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8005382:	f000 f87f 	bl	8005484 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005386:	2100      	movs	r1, #0
 8005388:	6878      	ldr	r0, [r7, #4]
 800538a:	f000 fe3b 	bl	8006004 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800538e:	f000 f887 	bl	80054a0 <xTaskResumeAll>
 8005392:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	2b00      	cmp	r3, #0
 8005398:	d107      	bne.n	80053aa <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 800539a:	4b07      	ldr	r3, [pc, #28]	; (80053b8 <vTaskDelay+0x64>)
 800539c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80053a0:	601a      	str	r2, [r3, #0]
 80053a2:	f3bf 8f4f 	dsb	sy
 80053a6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80053aa:	bf00      	nop
 80053ac:	3710      	adds	r7, #16
 80053ae:	46bd      	mov	sp, r7
 80053b0:	bd80      	pop	{r7, pc}
 80053b2:	bf00      	nop
 80053b4:	20000668 	.word	0x20000668
 80053b8:	e000ed04 	.word	0xe000ed04

080053bc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80053bc:	b580      	push	{r7, lr}
 80053be:	b08a      	sub	sp, #40	; 0x28
 80053c0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80053c2:	2300      	movs	r3, #0
 80053c4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80053c6:	2300      	movs	r3, #0
 80053c8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80053ca:	463a      	mov	r2, r7
 80053cc:	1d39      	adds	r1, r7, #4
 80053ce:	f107 0308 	add.w	r3, r7, #8
 80053d2:	4618      	mov	r0, r3
 80053d4:	f7fa fed4 	bl	8000180 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80053d8:	6839      	ldr	r1, [r7, #0]
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	68ba      	ldr	r2, [r7, #8]
 80053de:	9202      	str	r2, [sp, #8]
 80053e0:	9301      	str	r3, [sp, #4]
 80053e2:	2300      	movs	r3, #0
 80053e4:	9300      	str	r3, [sp, #0]
 80053e6:	2300      	movs	r3, #0
 80053e8:	460a      	mov	r2, r1
 80053ea:	4920      	ldr	r1, [pc, #128]	; (800546c <vTaskStartScheduler+0xb0>)
 80053ec:	4820      	ldr	r0, [pc, #128]	; (8005470 <vTaskStartScheduler+0xb4>)
 80053ee:	f7ff fe2b 	bl	8005048 <xTaskCreateStatic>
 80053f2:	4602      	mov	r2, r0
 80053f4:	4b1f      	ldr	r3, [pc, #124]	; (8005474 <vTaskStartScheduler+0xb8>)
 80053f6:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80053f8:	4b1e      	ldr	r3, [pc, #120]	; (8005474 <vTaskStartScheduler+0xb8>)
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d002      	beq.n	8005406 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005400:	2301      	movs	r3, #1
 8005402:	617b      	str	r3, [r7, #20]
 8005404:	e001      	b.n	800540a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005406:	2300      	movs	r3, #0
 8005408:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800540a:	697b      	ldr	r3, [r7, #20]
 800540c:	2b01      	cmp	r3, #1
 800540e:	d102      	bne.n	8005416 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8005410:	f000 fe5e 	bl	80060d0 <xTimerCreateTimerTask>
 8005414:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005416:	697b      	ldr	r3, [r7, #20]
 8005418:	2b01      	cmp	r3, #1
 800541a:	d115      	bne.n	8005448 <vTaskStartScheduler+0x8c>
 800541c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005420:	f383 8811 	msr	BASEPRI, r3
 8005424:	f3bf 8f6f 	isb	sy
 8005428:	f3bf 8f4f 	dsb	sy
 800542c:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800542e:	4b12      	ldr	r3, [pc, #72]	; (8005478 <vTaskStartScheduler+0xbc>)
 8005430:	f04f 32ff 	mov.w	r2, #4294967295
 8005434:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005436:	4b11      	ldr	r3, [pc, #68]	; (800547c <vTaskStartScheduler+0xc0>)
 8005438:	2201      	movs	r2, #1
 800543a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800543c:	4b10      	ldr	r3, [pc, #64]	; (8005480 <vTaskStartScheduler+0xc4>)
 800543e:	2200      	movs	r2, #0
 8005440:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005442:	f001 fa41 	bl	80068c8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005446:	e00d      	b.n	8005464 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005448:	697b      	ldr	r3, [r7, #20]
 800544a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800544e:	d109      	bne.n	8005464 <vTaskStartScheduler+0xa8>
 8005450:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005454:	f383 8811 	msr	BASEPRI, r3
 8005458:	f3bf 8f6f 	isb	sy
 800545c:	f3bf 8f4f 	dsb	sy
 8005460:	60fb      	str	r3, [r7, #12]
 8005462:	e7fe      	b.n	8005462 <vTaskStartScheduler+0xa6>
}
 8005464:	bf00      	nop
 8005466:	3718      	adds	r7, #24
 8005468:	46bd      	mov	sp, r7
 800546a:	bd80      	pop	{r7, pc}
 800546c:	080079d8 	.word	0x080079d8
 8005470:	08005aa5 	.word	0x08005aa5
 8005474:	20000664 	.word	0x20000664
 8005478:	20000660 	.word	0x20000660
 800547c:	2000064c 	.word	0x2000064c
 8005480:	20000644 	.word	0x20000644

08005484 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005484:	b480      	push	{r7}
 8005486:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8005488:	4b04      	ldr	r3, [pc, #16]	; (800549c <vTaskSuspendAll+0x18>)
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	3301      	adds	r3, #1
 800548e:	4a03      	ldr	r2, [pc, #12]	; (800549c <vTaskSuspendAll+0x18>)
 8005490:	6013      	str	r3, [r2, #0]
}
 8005492:	bf00      	nop
 8005494:	46bd      	mov	sp, r7
 8005496:	bc80      	pop	{r7}
 8005498:	4770      	bx	lr
 800549a:	bf00      	nop
 800549c:	20000668 	.word	0x20000668

080054a0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80054a0:	b580      	push	{r7, lr}
 80054a2:	b084      	sub	sp, #16
 80054a4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80054a6:	2300      	movs	r3, #0
 80054a8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80054aa:	2300      	movs	r3, #0
 80054ac:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80054ae:	4b41      	ldr	r3, [pc, #260]	; (80055b4 <xTaskResumeAll+0x114>)
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d109      	bne.n	80054ca <xTaskResumeAll+0x2a>
 80054b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054ba:	f383 8811 	msr	BASEPRI, r3
 80054be:	f3bf 8f6f 	isb	sy
 80054c2:	f3bf 8f4f 	dsb	sy
 80054c6:	603b      	str	r3, [r7, #0]
 80054c8:	e7fe      	b.n	80054c8 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80054ca:	f001 fa6d 	bl	80069a8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80054ce:	4b39      	ldr	r3, [pc, #228]	; (80055b4 <xTaskResumeAll+0x114>)
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	3b01      	subs	r3, #1
 80054d4:	4a37      	ldr	r2, [pc, #220]	; (80055b4 <xTaskResumeAll+0x114>)
 80054d6:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80054d8:	4b36      	ldr	r3, [pc, #216]	; (80055b4 <xTaskResumeAll+0x114>)
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d161      	bne.n	80055a4 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80054e0:	4b35      	ldr	r3, [pc, #212]	; (80055b8 <xTaskResumeAll+0x118>)
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d05d      	beq.n	80055a4 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80054e8:	e02e      	b.n	8005548 <xTaskResumeAll+0xa8>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80054ea:	4b34      	ldr	r3, [pc, #208]	; (80055bc <xTaskResumeAll+0x11c>)
 80054ec:	68db      	ldr	r3, [r3, #12]
 80054ee:	68db      	ldr	r3, [r3, #12]
 80054f0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	3318      	adds	r3, #24
 80054f6:	4618      	mov	r0, r3
 80054f8:	f7fe fe86 	bl	8004208 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	3304      	adds	r3, #4
 8005500:	4618      	mov	r0, r3
 8005502:	f7fe fe81 	bl	8004208 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800550a:	2201      	movs	r2, #1
 800550c:	409a      	lsls	r2, r3
 800550e:	4b2c      	ldr	r3, [pc, #176]	; (80055c0 <xTaskResumeAll+0x120>)
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	4313      	orrs	r3, r2
 8005514:	4a2a      	ldr	r2, [pc, #168]	; (80055c0 <xTaskResumeAll+0x120>)
 8005516:	6013      	str	r3, [r2, #0]
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800551c:	4613      	mov	r3, r2
 800551e:	009b      	lsls	r3, r3, #2
 8005520:	4413      	add	r3, r2
 8005522:	009b      	lsls	r3, r3, #2
 8005524:	4a27      	ldr	r2, [pc, #156]	; (80055c4 <xTaskResumeAll+0x124>)
 8005526:	441a      	add	r2, r3
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	3304      	adds	r3, #4
 800552c:	4619      	mov	r1, r3
 800552e:	4610      	mov	r0, r2
 8005530:	f7fe fe0f 	bl	8004152 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005538:	4b23      	ldr	r3, [pc, #140]	; (80055c8 <xTaskResumeAll+0x128>)
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800553e:	429a      	cmp	r2, r3
 8005540:	d302      	bcc.n	8005548 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 8005542:	4b22      	ldr	r3, [pc, #136]	; (80055cc <xTaskResumeAll+0x12c>)
 8005544:	2201      	movs	r2, #1
 8005546:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005548:	4b1c      	ldr	r3, [pc, #112]	; (80055bc <xTaskResumeAll+0x11c>)
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	2b00      	cmp	r3, #0
 800554e:	d1cc      	bne.n	80054ea <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	2b00      	cmp	r3, #0
 8005554:	d001      	beq.n	800555a <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005556:	f000 fb57 	bl	8005c08 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800555a:	4b1d      	ldr	r3, [pc, #116]	; (80055d0 <xTaskResumeAll+0x130>)
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	2b00      	cmp	r3, #0
 8005564:	d010      	beq.n	8005588 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005566:	f000 f845 	bl	80055f4 <xTaskIncrementTick>
 800556a:	4603      	mov	r3, r0
 800556c:	2b00      	cmp	r3, #0
 800556e:	d002      	beq.n	8005576 <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 8005570:	4b16      	ldr	r3, [pc, #88]	; (80055cc <xTaskResumeAll+0x12c>)
 8005572:	2201      	movs	r2, #1
 8005574:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	3b01      	subs	r3, #1
 800557a:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	2b00      	cmp	r3, #0
 8005580:	d1f1      	bne.n	8005566 <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 8005582:	4b13      	ldr	r3, [pc, #76]	; (80055d0 <xTaskResumeAll+0x130>)
 8005584:	2200      	movs	r2, #0
 8005586:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005588:	4b10      	ldr	r3, [pc, #64]	; (80055cc <xTaskResumeAll+0x12c>)
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	2b00      	cmp	r3, #0
 800558e:	d009      	beq.n	80055a4 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005590:	2301      	movs	r3, #1
 8005592:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005594:	4b0f      	ldr	r3, [pc, #60]	; (80055d4 <xTaskResumeAll+0x134>)
 8005596:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800559a:	601a      	str	r2, [r3, #0]
 800559c:	f3bf 8f4f 	dsb	sy
 80055a0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80055a4:	f001 fa2e 	bl	8006a04 <vPortExitCritical>

	return xAlreadyYielded;
 80055a8:	68bb      	ldr	r3, [r7, #8]
}
 80055aa:	4618      	mov	r0, r3
 80055ac:	3710      	adds	r7, #16
 80055ae:	46bd      	mov	sp, r7
 80055b0:	bd80      	pop	{r7, pc}
 80055b2:	bf00      	nop
 80055b4:	20000668 	.word	0x20000668
 80055b8:	20000640 	.word	0x20000640
 80055bc:	20000600 	.word	0x20000600
 80055c0:	20000648 	.word	0x20000648
 80055c4:	20000544 	.word	0x20000544
 80055c8:	20000540 	.word	0x20000540
 80055cc:	20000654 	.word	0x20000654
 80055d0:	20000650 	.word	0x20000650
 80055d4:	e000ed04 	.word	0xe000ed04

080055d8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80055d8:	b480      	push	{r7}
 80055da:	b083      	sub	sp, #12
 80055dc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80055de:	4b04      	ldr	r3, [pc, #16]	; (80055f0 <xTaskGetTickCount+0x18>)
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80055e4:	687b      	ldr	r3, [r7, #4]
}
 80055e6:	4618      	mov	r0, r3
 80055e8:	370c      	adds	r7, #12
 80055ea:	46bd      	mov	sp, r7
 80055ec:	bc80      	pop	{r7}
 80055ee:	4770      	bx	lr
 80055f0:	20000644 	.word	0x20000644

080055f4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80055f4:	b580      	push	{r7, lr}
 80055f6:	b086      	sub	sp, #24
 80055f8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80055fa:	2300      	movs	r3, #0
 80055fc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80055fe:	4b50      	ldr	r3, [pc, #320]	; (8005740 <xTaskIncrementTick+0x14c>)
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	2b00      	cmp	r3, #0
 8005604:	f040 808c 	bne.w	8005720 <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005608:	4b4e      	ldr	r3, [pc, #312]	; (8005744 <xTaskIncrementTick+0x150>)
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	3301      	adds	r3, #1
 800560e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005610:	4a4c      	ldr	r2, [pc, #304]	; (8005744 <xTaskIncrementTick+0x150>)
 8005612:	693b      	ldr	r3, [r7, #16]
 8005614:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005616:	693b      	ldr	r3, [r7, #16]
 8005618:	2b00      	cmp	r3, #0
 800561a:	d11f      	bne.n	800565c <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 800561c:	4b4a      	ldr	r3, [pc, #296]	; (8005748 <xTaskIncrementTick+0x154>)
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	2b00      	cmp	r3, #0
 8005624:	d009      	beq.n	800563a <xTaskIncrementTick+0x46>
 8005626:	f04f 0350 	mov.w	r3, #80	; 0x50
 800562a:	f383 8811 	msr	BASEPRI, r3
 800562e:	f3bf 8f6f 	isb	sy
 8005632:	f3bf 8f4f 	dsb	sy
 8005636:	603b      	str	r3, [r7, #0]
 8005638:	e7fe      	b.n	8005638 <xTaskIncrementTick+0x44>
 800563a:	4b43      	ldr	r3, [pc, #268]	; (8005748 <xTaskIncrementTick+0x154>)
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	60fb      	str	r3, [r7, #12]
 8005640:	4b42      	ldr	r3, [pc, #264]	; (800574c <xTaskIncrementTick+0x158>)
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	4a40      	ldr	r2, [pc, #256]	; (8005748 <xTaskIncrementTick+0x154>)
 8005646:	6013      	str	r3, [r2, #0]
 8005648:	4a40      	ldr	r2, [pc, #256]	; (800574c <xTaskIncrementTick+0x158>)
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	6013      	str	r3, [r2, #0]
 800564e:	4b40      	ldr	r3, [pc, #256]	; (8005750 <xTaskIncrementTick+0x15c>)
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	3301      	adds	r3, #1
 8005654:	4a3e      	ldr	r2, [pc, #248]	; (8005750 <xTaskIncrementTick+0x15c>)
 8005656:	6013      	str	r3, [r2, #0]
 8005658:	f000 fad6 	bl	8005c08 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800565c:	4b3d      	ldr	r3, [pc, #244]	; (8005754 <xTaskIncrementTick+0x160>)
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	693a      	ldr	r2, [r7, #16]
 8005662:	429a      	cmp	r2, r3
 8005664:	d34d      	bcc.n	8005702 <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005666:	4b38      	ldr	r3, [pc, #224]	; (8005748 <xTaskIncrementTick+0x154>)
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	2b00      	cmp	r3, #0
 800566e:	d101      	bne.n	8005674 <xTaskIncrementTick+0x80>
 8005670:	2301      	movs	r3, #1
 8005672:	e000      	b.n	8005676 <xTaskIncrementTick+0x82>
 8005674:	2300      	movs	r3, #0
 8005676:	2b00      	cmp	r3, #0
 8005678:	d004      	beq.n	8005684 <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800567a:	4b36      	ldr	r3, [pc, #216]	; (8005754 <xTaskIncrementTick+0x160>)
 800567c:	f04f 32ff 	mov.w	r2, #4294967295
 8005680:	601a      	str	r2, [r3, #0]
					break;
 8005682:	e03e      	b.n	8005702 <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8005684:	4b30      	ldr	r3, [pc, #192]	; (8005748 <xTaskIncrementTick+0x154>)
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	68db      	ldr	r3, [r3, #12]
 800568a:	68db      	ldr	r3, [r3, #12]
 800568c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800568e:	68bb      	ldr	r3, [r7, #8]
 8005690:	685b      	ldr	r3, [r3, #4]
 8005692:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005694:	693a      	ldr	r2, [r7, #16]
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	429a      	cmp	r2, r3
 800569a:	d203      	bcs.n	80056a4 <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800569c:	4a2d      	ldr	r2, [pc, #180]	; (8005754 <xTaskIncrementTick+0x160>)
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	6013      	str	r3, [r2, #0]
						break;
 80056a2:	e02e      	b.n	8005702 <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80056a4:	68bb      	ldr	r3, [r7, #8]
 80056a6:	3304      	adds	r3, #4
 80056a8:	4618      	mov	r0, r3
 80056aa:	f7fe fdad 	bl	8004208 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80056ae:	68bb      	ldr	r3, [r7, #8]
 80056b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d004      	beq.n	80056c0 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80056b6:	68bb      	ldr	r3, [r7, #8]
 80056b8:	3318      	adds	r3, #24
 80056ba:	4618      	mov	r0, r3
 80056bc:	f7fe fda4 	bl	8004208 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80056c0:	68bb      	ldr	r3, [r7, #8]
 80056c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056c4:	2201      	movs	r2, #1
 80056c6:	409a      	lsls	r2, r3
 80056c8:	4b23      	ldr	r3, [pc, #140]	; (8005758 <xTaskIncrementTick+0x164>)
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	4313      	orrs	r3, r2
 80056ce:	4a22      	ldr	r2, [pc, #136]	; (8005758 <xTaskIncrementTick+0x164>)
 80056d0:	6013      	str	r3, [r2, #0]
 80056d2:	68bb      	ldr	r3, [r7, #8]
 80056d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80056d6:	4613      	mov	r3, r2
 80056d8:	009b      	lsls	r3, r3, #2
 80056da:	4413      	add	r3, r2
 80056dc:	009b      	lsls	r3, r3, #2
 80056de:	4a1f      	ldr	r2, [pc, #124]	; (800575c <xTaskIncrementTick+0x168>)
 80056e0:	441a      	add	r2, r3
 80056e2:	68bb      	ldr	r3, [r7, #8]
 80056e4:	3304      	adds	r3, #4
 80056e6:	4619      	mov	r1, r3
 80056e8:	4610      	mov	r0, r2
 80056ea:	f7fe fd32 	bl	8004152 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80056ee:	68bb      	ldr	r3, [r7, #8]
 80056f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80056f2:	4b1b      	ldr	r3, [pc, #108]	; (8005760 <xTaskIncrementTick+0x16c>)
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056f8:	429a      	cmp	r2, r3
 80056fa:	d3b4      	bcc.n	8005666 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 80056fc:	2301      	movs	r3, #1
 80056fe:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005700:	e7b1      	b.n	8005666 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005702:	4b17      	ldr	r3, [pc, #92]	; (8005760 <xTaskIncrementTick+0x16c>)
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005708:	4914      	ldr	r1, [pc, #80]	; (800575c <xTaskIncrementTick+0x168>)
 800570a:	4613      	mov	r3, r2
 800570c:	009b      	lsls	r3, r3, #2
 800570e:	4413      	add	r3, r2
 8005710:	009b      	lsls	r3, r3, #2
 8005712:	440b      	add	r3, r1
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	2b01      	cmp	r3, #1
 8005718:	d907      	bls.n	800572a <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 800571a:	2301      	movs	r3, #1
 800571c:	617b      	str	r3, [r7, #20]
 800571e:	e004      	b.n	800572a <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8005720:	4b10      	ldr	r3, [pc, #64]	; (8005764 <xTaskIncrementTick+0x170>)
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	3301      	adds	r3, #1
 8005726:	4a0f      	ldr	r2, [pc, #60]	; (8005764 <xTaskIncrementTick+0x170>)
 8005728:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800572a:	4b0f      	ldr	r3, [pc, #60]	; (8005768 <xTaskIncrementTick+0x174>)
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	2b00      	cmp	r3, #0
 8005730:	d001      	beq.n	8005736 <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 8005732:	2301      	movs	r3, #1
 8005734:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8005736:	697b      	ldr	r3, [r7, #20]
}
 8005738:	4618      	mov	r0, r3
 800573a:	3718      	adds	r7, #24
 800573c:	46bd      	mov	sp, r7
 800573e:	bd80      	pop	{r7, pc}
 8005740:	20000668 	.word	0x20000668
 8005744:	20000644 	.word	0x20000644
 8005748:	200005f8 	.word	0x200005f8
 800574c:	200005fc 	.word	0x200005fc
 8005750:	20000658 	.word	0x20000658
 8005754:	20000660 	.word	0x20000660
 8005758:	20000648 	.word	0x20000648
 800575c:	20000544 	.word	0x20000544
 8005760:	20000540 	.word	0x20000540
 8005764:	20000650 	.word	0x20000650
 8005768:	20000654 	.word	0x20000654

0800576c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800576c:	b580      	push	{r7, lr}
 800576e:	b086      	sub	sp, #24
 8005770:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005772:	4b2e      	ldr	r3, [pc, #184]	; (800582c <vTaskSwitchContext+0xc0>)
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	2b00      	cmp	r3, #0
 8005778:	d003      	beq.n	8005782 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800577a:	4b2d      	ldr	r3, [pc, #180]	; (8005830 <vTaskSwitchContext+0xc4>)
 800577c:	2201      	movs	r2, #1
 800577e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005780:	e04f      	b.n	8005822 <vTaskSwitchContext+0xb6>
		xYieldPending = pdFALSE;
 8005782:	4b2b      	ldr	r3, [pc, #172]	; (8005830 <vTaskSwitchContext+0xc4>)
 8005784:	2200      	movs	r2, #0
 8005786:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 8005788:	4b2a      	ldr	r3, [pc, #168]	; (8005834 <vTaskSwitchContext+0xc8>)
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	681a      	ldr	r2, [r3, #0]
 800578e:	4b29      	ldr	r3, [pc, #164]	; (8005834 <vTaskSwitchContext+0xc8>)
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005794:	429a      	cmp	r2, r3
 8005796:	d808      	bhi.n	80057aa <vTaskSwitchContext+0x3e>
 8005798:	4b26      	ldr	r3, [pc, #152]	; (8005834 <vTaskSwitchContext+0xc8>)
 800579a:	681a      	ldr	r2, [r3, #0]
 800579c:	4b25      	ldr	r3, [pc, #148]	; (8005834 <vTaskSwitchContext+0xc8>)
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	3334      	adds	r3, #52	; 0x34
 80057a2:	4619      	mov	r1, r3
 80057a4:	4610      	mov	r0, r2
 80057a6:	f7fa fcdb 	bl	8000160 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80057aa:	4b23      	ldr	r3, [pc, #140]	; (8005838 <vTaskSwitchContext+0xcc>)
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	fab3 f383 	clz	r3, r3
 80057b6:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80057b8:	7afb      	ldrb	r3, [r7, #11]
 80057ba:	f1c3 031f 	rsb	r3, r3, #31
 80057be:	617b      	str	r3, [r7, #20]
 80057c0:	491e      	ldr	r1, [pc, #120]	; (800583c <vTaskSwitchContext+0xd0>)
 80057c2:	697a      	ldr	r2, [r7, #20]
 80057c4:	4613      	mov	r3, r2
 80057c6:	009b      	lsls	r3, r3, #2
 80057c8:	4413      	add	r3, r2
 80057ca:	009b      	lsls	r3, r3, #2
 80057cc:	440b      	add	r3, r1
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d109      	bne.n	80057e8 <vTaskSwitchContext+0x7c>
	__asm volatile
 80057d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057d8:	f383 8811 	msr	BASEPRI, r3
 80057dc:	f3bf 8f6f 	isb	sy
 80057e0:	f3bf 8f4f 	dsb	sy
 80057e4:	607b      	str	r3, [r7, #4]
 80057e6:	e7fe      	b.n	80057e6 <vTaskSwitchContext+0x7a>
 80057e8:	697a      	ldr	r2, [r7, #20]
 80057ea:	4613      	mov	r3, r2
 80057ec:	009b      	lsls	r3, r3, #2
 80057ee:	4413      	add	r3, r2
 80057f0:	009b      	lsls	r3, r3, #2
 80057f2:	4a12      	ldr	r2, [pc, #72]	; (800583c <vTaskSwitchContext+0xd0>)
 80057f4:	4413      	add	r3, r2
 80057f6:	613b      	str	r3, [r7, #16]
 80057f8:	693b      	ldr	r3, [r7, #16]
 80057fa:	685b      	ldr	r3, [r3, #4]
 80057fc:	685a      	ldr	r2, [r3, #4]
 80057fe:	693b      	ldr	r3, [r7, #16]
 8005800:	605a      	str	r2, [r3, #4]
 8005802:	693b      	ldr	r3, [r7, #16]
 8005804:	685a      	ldr	r2, [r3, #4]
 8005806:	693b      	ldr	r3, [r7, #16]
 8005808:	3308      	adds	r3, #8
 800580a:	429a      	cmp	r2, r3
 800580c:	d104      	bne.n	8005818 <vTaskSwitchContext+0xac>
 800580e:	693b      	ldr	r3, [r7, #16]
 8005810:	685b      	ldr	r3, [r3, #4]
 8005812:	685a      	ldr	r2, [r3, #4]
 8005814:	693b      	ldr	r3, [r7, #16]
 8005816:	605a      	str	r2, [r3, #4]
 8005818:	693b      	ldr	r3, [r7, #16]
 800581a:	685b      	ldr	r3, [r3, #4]
 800581c:	68db      	ldr	r3, [r3, #12]
 800581e:	4a05      	ldr	r2, [pc, #20]	; (8005834 <vTaskSwitchContext+0xc8>)
 8005820:	6013      	str	r3, [r2, #0]
}
 8005822:	bf00      	nop
 8005824:	3718      	adds	r7, #24
 8005826:	46bd      	mov	sp, r7
 8005828:	bd80      	pop	{r7, pc}
 800582a:	bf00      	nop
 800582c:	20000668 	.word	0x20000668
 8005830:	20000654 	.word	0x20000654
 8005834:	20000540 	.word	0x20000540
 8005838:	20000648 	.word	0x20000648
 800583c:	20000544 	.word	0x20000544

08005840 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005840:	b580      	push	{r7, lr}
 8005842:	b084      	sub	sp, #16
 8005844:	af00      	add	r7, sp, #0
 8005846:	6078      	str	r0, [r7, #4]
 8005848:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	2b00      	cmp	r3, #0
 800584e:	d109      	bne.n	8005864 <vTaskPlaceOnEventList+0x24>
 8005850:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005854:	f383 8811 	msr	BASEPRI, r3
 8005858:	f3bf 8f6f 	isb	sy
 800585c:	f3bf 8f4f 	dsb	sy
 8005860:	60fb      	str	r3, [r7, #12]
 8005862:	e7fe      	b.n	8005862 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005864:	4b07      	ldr	r3, [pc, #28]	; (8005884 <vTaskPlaceOnEventList+0x44>)
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	3318      	adds	r3, #24
 800586a:	4619      	mov	r1, r3
 800586c:	6878      	ldr	r0, [r7, #4]
 800586e:	f7fe fc93 	bl	8004198 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005872:	2101      	movs	r1, #1
 8005874:	6838      	ldr	r0, [r7, #0]
 8005876:	f000 fbc5 	bl	8006004 <prvAddCurrentTaskToDelayedList>
}
 800587a:	bf00      	nop
 800587c:	3710      	adds	r7, #16
 800587e:	46bd      	mov	sp, r7
 8005880:	bd80      	pop	{r7, pc}
 8005882:	bf00      	nop
 8005884:	20000540 	.word	0x20000540

08005888 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005888:	b580      	push	{r7, lr}
 800588a:	b086      	sub	sp, #24
 800588c:	af00      	add	r7, sp, #0
 800588e:	60f8      	str	r0, [r7, #12]
 8005890:	60b9      	str	r1, [r7, #8]
 8005892:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	2b00      	cmp	r3, #0
 8005898:	d109      	bne.n	80058ae <vTaskPlaceOnEventListRestricted+0x26>
 800589a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800589e:	f383 8811 	msr	BASEPRI, r3
 80058a2:	f3bf 8f6f 	isb	sy
 80058a6:	f3bf 8f4f 	dsb	sy
 80058aa:	617b      	str	r3, [r7, #20]
 80058ac:	e7fe      	b.n	80058ac <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80058ae:	4b0a      	ldr	r3, [pc, #40]	; (80058d8 <vTaskPlaceOnEventListRestricted+0x50>)
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	3318      	adds	r3, #24
 80058b4:	4619      	mov	r1, r3
 80058b6:	68f8      	ldr	r0, [r7, #12]
 80058b8:	f7fe fc4b 	bl	8004152 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d002      	beq.n	80058c8 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 80058c2:	f04f 33ff 	mov.w	r3, #4294967295
 80058c6:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80058c8:	6879      	ldr	r1, [r7, #4]
 80058ca:	68b8      	ldr	r0, [r7, #8]
 80058cc:	f000 fb9a 	bl	8006004 <prvAddCurrentTaskToDelayedList>
	}
 80058d0:	bf00      	nop
 80058d2:	3718      	adds	r7, #24
 80058d4:	46bd      	mov	sp, r7
 80058d6:	bd80      	pop	{r7, pc}
 80058d8:	20000540 	.word	0x20000540

080058dc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80058dc:	b580      	push	{r7, lr}
 80058de:	b086      	sub	sp, #24
 80058e0:	af00      	add	r7, sp, #0
 80058e2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	68db      	ldr	r3, [r3, #12]
 80058e8:	68db      	ldr	r3, [r3, #12]
 80058ea:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80058ec:	693b      	ldr	r3, [r7, #16]
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d109      	bne.n	8005906 <xTaskRemoveFromEventList+0x2a>
 80058f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058f6:	f383 8811 	msr	BASEPRI, r3
 80058fa:	f3bf 8f6f 	isb	sy
 80058fe:	f3bf 8f4f 	dsb	sy
 8005902:	60fb      	str	r3, [r7, #12]
 8005904:	e7fe      	b.n	8005904 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005906:	693b      	ldr	r3, [r7, #16]
 8005908:	3318      	adds	r3, #24
 800590a:	4618      	mov	r0, r3
 800590c:	f7fe fc7c 	bl	8004208 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005910:	4b1d      	ldr	r3, [pc, #116]	; (8005988 <xTaskRemoveFromEventList+0xac>)
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	2b00      	cmp	r3, #0
 8005916:	d11c      	bne.n	8005952 <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005918:	693b      	ldr	r3, [r7, #16]
 800591a:	3304      	adds	r3, #4
 800591c:	4618      	mov	r0, r3
 800591e:	f7fe fc73 	bl	8004208 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005922:	693b      	ldr	r3, [r7, #16]
 8005924:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005926:	2201      	movs	r2, #1
 8005928:	409a      	lsls	r2, r3
 800592a:	4b18      	ldr	r3, [pc, #96]	; (800598c <xTaskRemoveFromEventList+0xb0>)
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	4313      	orrs	r3, r2
 8005930:	4a16      	ldr	r2, [pc, #88]	; (800598c <xTaskRemoveFromEventList+0xb0>)
 8005932:	6013      	str	r3, [r2, #0]
 8005934:	693b      	ldr	r3, [r7, #16]
 8005936:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005938:	4613      	mov	r3, r2
 800593a:	009b      	lsls	r3, r3, #2
 800593c:	4413      	add	r3, r2
 800593e:	009b      	lsls	r3, r3, #2
 8005940:	4a13      	ldr	r2, [pc, #76]	; (8005990 <xTaskRemoveFromEventList+0xb4>)
 8005942:	441a      	add	r2, r3
 8005944:	693b      	ldr	r3, [r7, #16]
 8005946:	3304      	adds	r3, #4
 8005948:	4619      	mov	r1, r3
 800594a:	4610      	mov	r0, r2
 800594c:	f7fe fc01 	bl	8004152 <vListInsertEnd>
 8005950:	e005      	b.n	800595e <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005952:	693b      	ldr	r3, [r7, #16]
 8005954:	3318      	adds	r3, #24
 8005956:	4619      	mov	r1, r3
 8005958:	480e      	ldr	r0, [pc, #56]	; (8005994 <xTaskRemoveFromEventList+0xb8>)
 800595a:	f7fe fbfa 	bl	8004152 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800595e:	693b      	ldr	r3, [r7, #16]
 8005960:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005962:	4b0d      	ldr	r3, [pc, #52]	; (8005998 <xTaskRemoveFromEventList+0xbc>)
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005968:	429a      	cmp	r2, r3
 800596a:	d905      	bls.n	8005978 <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800596c:	2301      	movs	r3, #1
 800596e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005970:	4b0a      	ldr	r3, [pc, #40]	; (800599c <xTaskRemoveFromEventList+0xc0>)
 8005972:	2201      	movs	r2, #1
 8005974:	601a      	str	r2, [r3, #0]
 8005976:	e001      	b.n	800597c <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 8005978:	2300      	movs	r3, #0
 800597a:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 800597c:	697b      	ldr	r3, [r7, #20]
}
 800597e:	4618      	mov	r0, r3
 8005980:	3718      	adds	r7, #24
 8005982:	46bd      	mov	sp, r7
 8005984:	bd80      	pop	{r7, pc}
 8005986:	bf00      	nop
 8005988:	20000668 	.word	0x20000668
 800598c:	20000648 	.word	0x20000648
 8005990:	20000544 	.word	0x20000544
 8005994:	20000600 	.word	0x20000600
 8005998:	20000540 	.word	0x20000540
 800599c:	20000654 	.word	0x20000654

080059a0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80059a0:	b480      	push	{r7}
 80059a2:	b083      	sub	sp, #12
 80059a4:	af00      	add	r7, sp, #0
 80059a6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80059a8:	4b06      	ldr	r3, [pc, #24]	; (80059c4 <vTaskInternalSetTimeOutState+0x24>)
 80059aa:	681a      	ldr	r2, [r3, #0]
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80059b0:	4b05      	ldr	r3, [pc, #20]	; (80059c8 <vTaskInternalSetTimeOutState+0x28>)
 80059b2:	681a      	ldr	r2, [r3, #0]
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	605a      	str	r2, [r3, #4]
}
 80059b8:	bf00      	nop
 80059ba:	370c      	adds	r7, #12
 80059bc:	46bd      	mov	sp, r7
 80059be:	bc80      	pop	{r7}
 80059c0:	4770      	bx	lr
 80059c2:	bf00      	nop
 80059c4:	20000658 	.word	0x20000658
 80059c8:	20000644 	.word	0x20000644

080059cc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80059cc:	b580      	push	{r7, lr}
 80059ce:	b088      	sub	sp, #32
 80059d0:	af00      	add	r7, sp, #0
 80059d2:	6078      	str	r0, [r7, #4]
 80059d4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d109      	bne.n	80059f0 <xTaskCheckForTimeOut+0x24>
 80059dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059e0:	f383 8811 	msr	BASEPRI, r3
 80059e4:	f3bf 8f6f 	isb	sy
 80059e8:	f3bf 8f4f 	dsb	sy
 80059ec:	613b      	str	r3, [r7, #16]
 80059ee:	e7fe      	b.n	80059ee <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 80059f0:	683b      	ldr	r3, [r7, #0]
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d109      	bne.n	8005a0a <xTaskCheckForTimeOut+0x3e>
 80059f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059fa:	f383 8811 	msr	BASEPRI, r3
 80059fe:	f3bf 8f6f 	isb	sy
 8005a02:	f3bf 8f4f 	dsb	sy
 8005a06:	60fb      	str	r3, [r7, #12]
 8005a08:	e7fe      	b.n	8005a08 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8005a0a:	f000 ffcd 	bl	80069a8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005a0e:	4b1d      	ldr	r3, [pc, #116]	; (8005a84 <xTaskCheckForTimeOut+0xb8>)
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	685b      	ldr	r3, [r3, #4]
 8005a18:	69ba      	ldr	r2, [r7, #24]
 8005a1a:	1ad3      	subs	r3, r2, r3
 8005a1c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005a1e:	683b      	ldr	r3, [r7, #0]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a26:	d102      	bne.n	8005a2e <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005a28:	2300      	movs	r3, #0
 8005a2a:	61fb      	str	r3, [r7, #28]
 8005a2c:	e023      	b.n	8005a76 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681a      	ldr	r2, [r3, #0]
 8005a32:	4b15      	ldr	r3, [pc, #84]	; (8005a88 <xTaskCheckForTimeOut+0xbc>)
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	429a      	cmp	r2, r3
 8005a38:	d007      	beq.n	8005a4a <xTaskCheckForTimeOut+0x7e>
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	685b      	ldr	r3, [r3, #4]
 8005a3e:	69ba      	ldr	r2, [r7, #24]
 8005a40:	429a      	cmp	r2, r3
 8005a42:	d302      	bcc.n	8005a4a <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005a44:	2301      	movs	r3, #1
 8005a46:	61fb      	str	r3, [r7, #28]
 8005a48:	e015      	b.n	8005a76 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005a4a:	683b      	ldr	r3, [r7, #0]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	697a      	ldr	r2, [r7, #20]
 8005a50:	429a      	cmp	r2, r3
 8005a52:	d20b      	bcs.n	8005a6c <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005a54:	683b      	ldr	r3, [r7, #0]
 8005a56:	681a      	ldr	r2, [r3, #0]
 8005a58:	697b      	ldr	r3, [r7, #20]
 8005a5a:	1ad2      	subs	r2, r2, r3
 8005a5c:	683b      	ldr	r3, [r7, #0]
 8005a5e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005a60:	6878      	ldr	r0, [r7, #4]
 8005a62:	f7ff ff9d 	bl	80059a0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005a66:	2300      	movs	r3, #0
 8005a68:	61fb      	str	r3, [r7, #28]
 8005a6a:	e004      	b.n	8005a76 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8005a6c:	683b      	ldr	r3, [r7, #0]
 8005a6e:	2200      	movs	r2, #0
 8005a70:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005a72:	2301      	movs	r3, #1
 8005a74:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005a76:	f000 ffc5 	bl	8006a04 <vPortExitCritical>

	return xReturn;
 8005a7a:	69fb      	ldr	r3, [r7, #28]
}
 8005a7c:	4618      	mov	r0, r3
 8005a7e:	3720      	adds	r7, #32
 8005a80:	46bd      	mov	sp, r7
 8005a82:	bd80      	pop	{r7, pc}
 8005a84:	20000644 	.word	0x20000644
 8005a88:	20000658 	.word	0x20000658

08005a8c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005a8c:	b480      	push	{r7}
 8005a8e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005a90:	4b03      	ldr	r3, [pc, #12]	; (8005aa0 <vTaskMissedYield+0x14>)
 8005a92:	2201      	movs	r2, #1
 8005a94:	601a      	str	r2, [r3, #0]
}
 8005a96:	bf00      	nop
 8005a98:	46bd      	mov	sp, r7
 8005a9a:	bc80      	pop	{r7}
 8005a9c:	4770      	bx	lr
 8005a9e:	bf00      	nop
 8005aa0:	20000654 	.word	0x20000654

08005aa4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005aa4:	b580      	push	{r7, lr}
 8005aa6:	b082      	sub	sp, #8
 8005aa8:	af00      	add	r7, sp, #0
 8005aaa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005aac:	f000 f852 	bl	8005b54 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005ab0:	4b06      	ldr	r3, [pc, #24]	; (8005acc <prvIdleTask+0x28>)
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	2b01      	cmp	r3, #1
 8005ab6:	d9f9      	bls.n	8005aac <prvIdleTask+0x8>
			{
				taskYIELD();
 8005ab8:	4b05      	ldr	r3, [pc, #20]	; (8005ad0 <prvIdleTask+0x2c>)
 8005aba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005abe:	601a      	str	r2, [r3, #0]
 8005ac0:	f3bf 8f4f 	dsb	sy
 8005ac4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005ac8:	e7f0      	b.n	8005aac <prvIdleTask+0x8>
 8005aca:	bf00      	nop
 8005acc:	20000544 	.word	0x20000544
 8005ad0:	e000ed04 	.word	0xe000ed04

08005ad4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005ad4:	b580      	push	{r7, lr}
 8005ad6:	b082      	sub	sp, #8
 8005ad8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005ada:	2300      	movs	r3, #0
 8005adc:	607b      	str	r3, [r7, #4]
 8005ade:	e00c      	b.n	8005afa <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005ae0:	687a      	ldr	r2, [r7, #4]
 8005ae2:	4613      	mov	r3, r2
 8005ae4:	009b      	lsls	r3, r3, #2
 8005ae6:	4413      	add	r3, r2
 8005ae8:	009b      	lsls	r3, r3, #2
 8005aea:	4a12      	ldr	r2, [pc, #72]	; (8005b34 <prvInitialiseTaskLists+0x60>)
 8005aec:	4413      	add	r3, r2
 8005aee:	4618      	mov	r0, r3
 8005af0:	f7fe fb04 	bl	80040fc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	3301      	adds	r3, #1
 8005af8:	607b      	str	r3, [r7, #4]
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	2b06      	cmp	r3, #6
 8005afe:	d9ef      	bls.n	8005ae0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005b00:	480d      	ldr	r0, [pc, #52]	; (8005b38 <prvInitialiseTaskLists+0x64>)
 8005b02:	f7fe fafb 	bl	80040fc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005b06:	480d      	ldr	r0, [pc, #52]	; (8005b3c <prvInitialiseTaskLists+0x68>)
 8005b08:	f7fe faf8 	bl	80040fc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005b0c:	480c      	ldr	r0, [pc, #48]	; (8005b40 <prvInitialiseTaskLists+0x6c>)
 8005b0e:	f7fe faf5 	bl	80040fc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005b12:	480c      	ldr	r0, [pc, #48]	; (8005b44 <prvInitialiseTaskLists+0x70>)
 8005b14:	f7fe faf2 	bl	80040fc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005b18:	480b      	ldr	r0, [pc, #44]	; (8005b48 <prvInitialiseTaskLists+0x74>)
 8005b1a:	f7fe faef 	bl	80040fc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005b1e:	4b0b      	ldr	r3, [pc, #44]	; (8005b4c <prvInitialiseTaskLists+0x78>)
 8005b20:	4a05      	ldr	r2, [pc, #20]	; (8005b38 <prvInitialiseTaskLists+0x64>)
 8005b22:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005b24:	4b0a      	ldr	r3, [pc, #40]	; (8005b50 <prvInitialiseTaskLists+0x7c>)
 8005b26:	4a05      	ldr	r2, [pc, #20]	; (8005b3c <prvInitialiseTaskLists+0x68>)
 8005b28:	601a      	str	r2, [r3, #0]
}
 8005b2a:	bf00      	nop
 8005b2c:	3708      	adds	r7, #8
 8005b2e:	46bd      	mov	sp, r7
 8005b30:	bd80      	pop	{r7, pc}
 8005b32:	bf00      	nop
 8005b34:	20000544 	.word	0x20000544
 8005b38:	200005d0 	.word	0x200005d0
 8005b3c:	200005e4 	.word	0x200005e4
 8005b40:	20000600 	.word	0x20000600
 8005b44:	20000614 	.word	0x20000614
 8005b48:	2000062c 	.word	0x2000062c
 8005b4c:	200005f8 	.word	0x200005f8
 8005b50:	200005fc 	.word	0x200005fc

08005b54 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005b54:	b580      	push	{r7, lr}
 8005b56:	b082      	sub	sp, #8
 8005b58:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005b5a:	e019      	b.n	8005b90 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005b5c:	f000 ff24 	bl	80069a8 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8005b60:	4b0f      	ldr	r3, [pc, #60]	; (8005ba0 <prvCheckTasksWaitingTermination+0x4c>)
 8005b62:	68db      	ldr	r3, [r3, #12]
 8005b64:	68db      	ldr	r3, [r3, #12]
 8005b66:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	3304      	adds	r3, #4
 8005b6c:	4618      	mov	r0, r3
 8005b6e:	f7fe fb4b 	bl	8004208 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005b72:	4b0c      	ldr	r3, [pc, #48]	; (8005ba4 <prvCheckTasksWaitingTermination+0x50>)
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	3b01      	subs	r3, #1
 8005b78:	4a0a      	ldr	r2, [pc, #40]	; (8005ba4 <prvCheckTasksWaitingTermination+0x50>)
 8005b7a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005b7c:	4b0a      	ldr	r3, [pc, #40]	; (8005ba8 <prvCheckTasksWaitingTermination+0x54>)
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	3b01      	subs	r3, #1
 8005b82:	4a09      	ldr	r2, [pc, #36]	; (8005ba8 <prvCheckTasksWaitingTermination+0x54>)
 8005b84:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005b86:	f000 ff3d 	bl	8006a04 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005b8a:	6878      	ldr	r0, [r7, #4]
 8005b8c:	f000 f80e 	bl	8005bac <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005b90:	4b05      	ldr	r3, [pc, #20]	; (8005ba8 <prvCheckTasksWaitingTermination+0x54>)
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d1e1      	bne.n	8005b5c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005b98:	bf00      	nop
 8005b9a:	3708      	adds	r7, #8
 8005b9c:	46bd      	mov	sp, r7
 8005b9e:	bd80      	pop	{r7, pc}
 8005ba0:	20000614 	.word	0x20000614
 8005ba4:	20000640 	.word	0x20000640
 8005ba8:	20000628 	.word	0x20000628

08005bac <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005bac:	b580      	push	{r7, lr}
 8005bae:	b084      	sub	sp, #16
 8005bb0:	af00      	add	r7, sp, #0
 8005bb2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d108      	bne.n	8005bd0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bc2:	4618      	mov	r0, r3
 8005bc4:	f001 f8ac 	bl	8006d20 <vPortFree>
				vPortFree( pxTCB );
 8005bc8:	6878      	ldr	r0, [r7, #4]
 8005bca:	f001 f8a9 	bl	8006d20 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005bce:	e017      	b.n	8005c00 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005bd6:	2b01      	cmp	r3, #1
 8005bd8:	d103      	bne.n	8005be2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8005bda:	6878      	ldr	r0, [r7, #4]
 8005bdc:	f001 f8a0 	bl	8006d20 <vPortFree>
	}
 8005be0:	e00e      	b.n	8005c00 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005be8:	2b02      	cmp	r3, #2
 8005bea:	d009      	beq.n	8005c00 <prvDeleteTCB+0x54>
 8005bec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bf0:	f383 8811 	msr	BASEPRI, r3
 8005bf4:	f3bf 8f6f 	isb	sy
 8005bf8:	f3bf 8f4f 	dsb	sy
 8005bfc:	60fb      	str	r3, [r7, #12]
 8005bfe:	e7fe      	b.n	8005bfe <prvDeleteTCB+0x52>
	}
 8005c00:	bf00      	nop
 8005c02:	3710      	adds	r7, #16
 8005c04:	46bd      	mov	sp, r7
 8005c06:	bd80      	pop	{r7, pc}

08005c08 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005c08:	b480      	push	{r7}
 8005c0a:	b083      	sub	sp, #12
 8005c0c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005c0e:	4b0e      	ldr	r3, [pc, #56]	; (8005c48 <prvResetNextTaskUnblockTime+0x40>)
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d101      	bne.n	8005c1c <prvResetNextTaskUnblockTime+0x14>
 8005c18:	2301      	movs	r3, #1
 8005c1a:	e000      	b.n	8005c1e <prvResetNextTaskUnblockTime+0x16>
 8005c1c:	2300      	movs	r3, #0
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d004      	beq.n	8005c2c <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005c22:	4b0a      	ldr	r3, [pc, #40]	; (8005c4c <prvResetNextTaskUnblockTime+0x44>)
 8005c24:	f04f 32ff 	mov.w	r2, #4294967295
 8005c28:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005c2a:	e008      	b.n	8005c3e <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8005c2c:	4b06      	ldr	r3, [pc, #24]	; (8005c48 <prvResetNextTaskUnblockTime+0x40>)
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	68db      	ldr	r3, [r3, #12]
 8005c32:	68db      	ldr	r3, [r3, #12]
 8005c34:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	685b      	ldr	r3, [r3, #4]
 8005c3a:	4a04      	ldr	r2, [pc, #16]	; (8005c4c <prvResetNextTaskUnblockTime+0x44>)
 8005c3c:	6013      	str	r3, [r2, #0]
}
 8005c3e:	bf00      	nop
 8005c40:	370c      	adds	r7, #12
 8005c42:	46bd      	mov	sp, r7
 8005c44:	bc80      	pop	{r7}
 8005c46:	4770      	bx	lr
 8005c48:	200005f8 	.word	0x200005f8
 8005c4c:	20000660 	.word	0x20000660

08005c50 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005c50:	b480      	push	{r7}
 8005c52:	b083      	sub	sp, #12
 8005c54:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005c56:	4b0b      	ldr	r3, [pc, #44]	; (8005c84 <xTaskGetSchedulerState+0x34>)
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d102      	bne.n	8005c64 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005c5e:	2301      	movs	r3, #1
 8005c60:	607b      	str	r3, [r7, #4]
 8005c62:	e008      	b.n	8005c76 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005c64:	4b08      	ldr	r3, [pc, #32]	; (8005c88 <xTaskGetSchedulerState+0x38>)
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d102      	bne.n	8005c72 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005c6c:	2302      	movs	r3, #2
 8005c6e:	607b      	str	r3, [r7, #4]
 8005c70:	e001      	b.n	8005c76 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005c72:	2300      	movs	r3, #0
 8005c74:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005c76:	687b      	ldr	r3, [r7, #4]
	}
 8005c78:	4618      	mov	r0, r3
 8005c7a:	370c      	adds	r7, #12
 8005c7c:	46bd      	mov	sp, r7
 8005c7e:	bc80      	pop	{r7}
 8005c80:	4770      	bx	lr
 8005c82:	bf00      	nop
 8005c84:	2000064c 	.word	0x2000064c
 8005c88:	20000668 	.word	0x20000668

08005c8c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8005c8c:	b580      	push	{r7, lr}
 8005c8e:	b084      	sub	sp, #16
 8005c90:	af00      	add	r7, sp, #0
 8005c92:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8005c98:	2300      	movs	r3, #0
 8005c9a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d06e      	beq.n	8005d80 <xTaskPriorityInherit+0xf4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8005ca2:	68bb      	ldr	r3, [r7, #8]
 8005ca4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ca6:	4b39      	ldr	r3, [pc, #228]	; (8005d8c <xTaskPriorityInherit+0x100>)
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cac:	429a      	cmp	r2, r3
 8005cae:	d25e      	bcs.n	8005d6e <xTaskPriorityInherit+0xe2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005cb0:	68bb      	ldr	r3, [r7, #8]
 8005cb2:	699b      	ldr	r3, [r3, #24]
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	db06      	blt.n	8005cc6 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005cb8:	4b34      	ldr	r3, [pc, #208]	; (8005d8c <xTaskPriorityInherit+0x100>)
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cbe:	f1c3 0207 	rsb	r2, r3, #7
 8005cc2:	68bb      	ldr	r3, [r7, #8]
 8005cc4:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8005cc6:	68bb      	ldr	r3, [r7, #8]
 8005cc8:	6959      	ldr	r1, [r3, #20]
 8005cca:	68bb      	ldr	r3, [r7, #8]
 8005ccc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005cce:	4613      	mov	r3, r2
 8005cd0:	009b      	lsls	r3, r3, #2
 8005cd2:	4413      	add	r3, r2
 8005cd4:	009b      	lsls	r3, r3, #2
 8005cd6:	4a2e      	ldr	r2, [pc, #184]	; (8005d90 <xTaskPriorityInherit+0x104>)
 8005cd8:	4413      	add	r3, r2
 8005cda:	4299      	cmp	r1, r3
 8005cdc:	d101      	bne.n	8005ce2 <xTaskPriorityInherit+0x56>
 8005cde:	2301      	movs	r3, #1
 8005ce0:	e000      	b.n	8005ce4 <xTaskPriorityInherit+0x58>
 8005ce2:	2300      	movs	r3, #0
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d03a      	beq.n	8005d5e <xTaskPriorityInherit+0xd2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005ce8:	68bb      	ldr	r3, [r7, #8]
 8005cea:	3304      	adds	r3, #4
 8005cec:	4618      	mov	r0, r3
 8005cee:	f7fe fa8b 	bl	8004208 <uxListRemove>
 8005cf2:	4603      	mov	r3, r0
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d115      	bne.n	8005d24 <xTaskPriorityInherit+0x98>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 8005cf8:	68bb      	ldr	r3, [r7, #8]
 8005cfa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005cfc:	4924      	ldr	r1, [pc, #144]	; (8005d90 <xTaskPriorityInherit+0x104>)
 8005cfe:	4613      	mov	r3, r2
 8005d00:	009b      	lsls	r3, r3, #2
 8005d02:	4413      	add	r3, r2
 8005d04:	009b      	lsls	r3, r3, #2
 8005d06:	440b      	add	r3, r1
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d10a      	bne.n	8005d24 <xTaskPriorityInherit+0x98>
 8005d0e:	68bb      	ldr	r3, [r7, #8]
 8005d10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d12:	2201      	movs	r2, #1
 8005d14:	fa02 f303 	lsl.w	r3, r2, r3
 8005d18:	43da      	mvns	r2, r3
 8005d1a:	4b1e      	ldr	r3, [pc, #120]	; (8005d94 <xTaskPriorityInherit+0x108>)
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	4013      	ands	r3, r2
 8005d20:	4a1c      	ldr	r2, [pc, #112]	; (8005d94 <xTaskPriorityInherit+0x108>)
 8005d22:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005d24:	4b19      	ldr	r3, [pc, #100]	; (8005d8c <xTaskPriorityInherit+0x100>)
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d2a:	68bb      	ldr	r3, [r7, #8]
 8005d2c:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8005d2e:	68bb      	ldr	r3, [r7, #8]
 8005d30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d32:	2201      	movs	r2, #1
 8005d34:	409a      	lsls	r2, r3
 8005d36:	4b17      	ldr	r3, [pc, #92]	; (8005d94 <xTaskPriorityInherit+0x108>)
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	4313      	orrs	r3, r2
 8005d3c:	4a15      	ldr	r2, [pc, #84]	; (8005d94 <xTaskPriorityInherit+0x108>)
 8005d3e:	6013      	str	r3, [r2, #0]
 8005d40:	68bb      	ldr	r3, [r7, #8]
 8005d42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d44:	4613      	mov	r3, r2
 8005d46:	009b      	lsls	r3, r3, #2
 8005d48:	4413      	add	r3, r2
 8005d4a:	009b      	lsls	r3, r3, #2
 8005d4c:	4a10      	ldr	r2, [pc, #64]	; (8005d90 <xTaskPriorityInherit+0x104>)
 8005d4e:	441a      	add	r2, r3
 8005d50:	68bb      	ldr	r3, [r7, #8]
 8005d52:	3304      	adds	r3, #4
 8005d54:	4619      	mov	r1, r3
 8005d56:	4610      	mov	r0, r2
 8005d58:	f7fe f9fb 	bl	8004152 <vListInsertEnd>
 8005d5c:	e004      	b.n	8005d68 <xTaskPriorityInherit+0xdc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005d5e:	4b0b      	ldr	r3, [pc, #44]	; (8005d8c <xTaskPriorityInherit+0x100>)
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d64:	68bb      	ldr	r3, [r7, #8]
 8005d66:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8005d68:	2301      	movs	r3, #1
 8005d6a:	60fb      	str	r3, [r7, #12]
 8005d6c:	e008      	b.n	8005d80 <xTaskPriorityInherit+0xf4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8005d6e:	68bb      	ldr	r3, [r7, #8]
 8005d70:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005d72:	4b06      	ldr	r3, [pc, #24]	; (8005d8c <xTaskPriorityInherit+0x100>)
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d78:	429a      	cmp	r2, r3
 8005d7a:	d201      	bcs.n	8005d80 <xTaskPriorityInherit+0xf4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8005d7c:	2301      	movs	r3, #1
 8005d7e:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005d80:	68fb      	ldr	r3, [r7, #12]
	}
 8005d82:	4618      	mov	r0, r3
 8005d84:	3710      	adds	r7, #16
 8005d86:	46bd      	mov	sp, r7
 8005d88:	bd80      	pop	{r7, pc}
 8005d8a:	bf00      	nop
 8005d8c:	20000540 	.word	0x20000540
 8005d90:	20000544 	.word	0x20000544
 8005d94:	20000648 	.word	0x20000648

08005d98 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005d98:	b580      	push	{r7, lr}
 8005d9a:	b086      	sub	sp, #24
 8005d9c:	af00      	add	r7, sp, #0
 8005d9e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005da4:	2300      	movs	r3, #0
 8005da6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d06c      	beq.n	8005e88 <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005dae:	4b39      	ldr	r3, [pc, #228]	; (8005e94 <xTaskPriorityDisinherit+0xfc>)
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	693a      	ldr	r2, [r7, #16]
 8005db4:	429a      	cmp	r2, r3
 8005db6:	d009      	beq.n	8005dcc <xTaskPriorityDisinherit+0x34>
 8005db8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dbc:	f383 8811 	msr	BASEPRI, r3
 8005dc0:	f3bf 8f6f 	isb	sy
 8005dc4:	f3bf 8f4f 	dsb	sy
 8005dc8:	60fb      	str	r3, [r7, #12]
 8005dca:	e7fe      	b.n	8005dca <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8005dcc:	693b      	ldr	r3, [r7, #16]
 8005dce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d109      	bne.n	8005de8 <xTaskPriorityDisinherit+0x50>
 8005dd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dd8:	f383 8811 	msr	BASEPRI, r3
 8005ddc:	f3bf 8f6f 	isb	sy
 8005de0:	f3bf 8f4f 	dsb	sy
 8005de4:	60bb      	str	r3, [r7, #8]
 8005de6:	e7fe      	b.n	8005de6 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8005de8:	693b      	ldr	r3, [r7, #16]
 8005dea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005dec:	1e5a      	subs	r2, r3, #1
 8005dee:	693b      	ldr	r3, [r7, #16]
 8005df0:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005df2:	693b      	ldr	r3, [r7, #16]
 8005df4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005df6:	693b      	ldr	r3, [r7, #16]
 8005df8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005dfa:	429a      	cmp	r2, r3
 8005dfc:	d044      	beq.n	8005e88 <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005dfe:	693b      	ldr	r3, [r7, #16]
 8005e00:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d140      	bne.n	8005e88 <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005e06:	693b      	ldr	r3, [r7, #16]
 8005e08:	3304      	adds	r3, #4
 8005e0a:	4618      	mov	r0, r3
 8005e0c:	f7fe f9fc 	bl	8004208 <uxListRemove>
 8005e10:	4603      	mov	r3, r0
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d115      	bne.n	8005e42 <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8005e16:	693b      	ldr	r3, [r7, #16]
 8005e18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e1a:	491f      	ldr	r1, [pc, #124]	; (8005e98 <xTaskPriorityDisinherit+0x100>)
 8005e1c:	4613      	mov	r3, r2
 8005e1e:	009b      	lsls	r3, r3, #2
 8005e20:	4413      	add	r3, r2
 8005e22:	009b      	lsls	r3, r3, #2
 8005e24:	440b      	add	r3, r1
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d10a      	bne.n	8005e42 <xTaskPriorityDisinherit+0xaa>
 8005e2c:	693b      	ldr	r3, [r7, #16]
 8005e2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e30:	2201      	movs	r2, #1
 8005e32:	fa02 f303 	lsl.w	r3, r2, r3
 8005e36:	43da      	mvns	r2, r3
 8005e38:	4b18      	ldr	r3, [pc, #96]	; (8005e9c <xTaskPriorityDisinherit+0x104>)
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	4013      	ands	r3, r2
 8005e3e:	4a17      	ldr	r2, [pc, #92]	; (8005e9c <xTaskPriorityDisinherit+0x104>)
 8005e40:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005e42:	693b      	ldr	r3, [r7, #16]
 8005e44:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005e46:	693b      	ldr	r3, [r7, #16]
 8005e48:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005e4a:	693b      	ldr	r3, [r7, #16]
 8005e4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e4e:	f1c3 0207 	rsb	r2, r3, #7
 8005e52:	693b      	ldr	r3, [r7, #16]
 8005e54:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005e56:	693b      	ldr	r3, [r7, #16]
 8005e58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e5a:	2201      	movs	r2, #1
 8005e5c:	409a      	lsls	r2, r3
 8005e5e:	4b0f      	ldr	r3, [pc, #60]	; (8005e9c <xTaskPriorityDisinherit+0x104>)
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	4313      	orrs	r3, r2
 8005e64:	4a0d      	ldr	r2, [pc, #52]	; (8005e9c <xTaskPriorityDisinherit+0x104>)
 8005e66:	6013      	str	r3, [r2, #0]
 8005e68:	693b      	ldr	r3, [r7, #16]
 8005e6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e6c:	4613      	mov	r3, r2
 8005e6e:	009b      	lsls	r3, r3, #2
 8005e70:	4413      	add	r3, r2
 8005e72:	009b      	lsls	r3, r3, #2
 8005e74:	4a08      	ldr	r2, [pc, #32]	; (8005e98 <xTaskPriorityDisinherit+0x100>)
 8005e76:	441a      	add	r2, r3
 8005e78:	693b      	ldr	r3, [r7, #16]
 8005e7a:	3304      	adds	r3, #4
 8005e7c:	4619      	mov	r1, r3
 8005e7e:	4610      	mov	r0, r2
 8005e80:	f7fe f967 	bl	8004152 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005e84:	2301      	movs	r3, #1
 8005e86:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005e88:	697b      	ldr	r3, [r7, #20]
	}
 8005e8a:	4618      	mov	r0, r3
 8005e8c:	3718      	adds	r7, #24
 8005e8e:	46bd      	mov	sp, r7
 8005e90:	bd80      	pop	{r7, pc}
 8005e92:	bf00      	nop
 8005e94:	20000540 	.word	0x20000540
 8005e98:	20000544 	.word	0x20000544
 8005e9c:	20000648 	.word	0x20000648

08005ea0 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8005ea0:	b580      	push	{r7, lr}
 8005ea2:	b088      	sub	sp, #32
 8005ea4:	af00      	add	r7, sp, #0
 8005ea6:	6078      	str	r0, [r7, #4]
 8005ea8:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8005eae:	2301      	movs	r3, #1
 8005eb0:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	f000 8086 	beq.w	8005fc6 <vTaskPriorityDisinheritAfterTimeout+0x126>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8005eba:	69bb      	ldr	r3, [r7, #24]
 8005ebc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d109      	bne.n	8005ed6 <vTaskPriorityDisinheritAfterTimeout+0x36>
 8005ec2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ec6:	f383 8811 	msr	BASEPRI, r3
 8005eca:	f3bf 8f6f 	isb	sy
 8005ece:	f3bf 8f4f 	dsb	sy
 8005ed2:	60fb      	str	r3, [r7, #12]
 8005ed4:	e7fe      	b.n	8005ed4 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8005ed6:	69bb      	ldr	r3, [r7, #24]
 8005ed8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005eda:	683a      	ldr	r2, [r7, #0]
 8005edc:	429a      	cmp	r2, r3
 8005ede:	d902      	bls.n	8005ee6 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8005ee0:	683b      	ldr	r3, [r7, #0]
 8005ee2:	61fb      	str	r3, [r7, #28]
 8005ee4:	e002      	b.n	8005eec <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8005ee6:	69bb      	ldr	r3, [r7, #24]
 8005ee8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005eea:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8005eec:	69bb      	ldr	r3, [r7, #24]
 8005eee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ef0:	69fa      	ldr	r2, [r7, #28]
 8005ef2:	429a      	cmp	r2, r3
 8005ef4:	d067      	beq.n	8005fc6 <vTaskPriorityDisinheritAfterTimeout+0x126>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8005ef6:	69bb      	ldr	r3, [r7, #24]
 8005ef8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005efa:	697a      	ldr	r2, [r7, #20]
 8005efc:	429a      	cmp	r2, r3
 8005efe:	d162      	bne.n	8005fc6 <vTaskPriorityDisinheritAfterTimeout+0x126>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8005f00:	4b33      	ldr	r3, [pc, #204]	; (8005fd0 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	69ba      	ldr	r2, [r7, #24]
 8005f06:	429a      	cmp	r2, r3
 8005f08:	d109      	bne.n	8005f1e <vTaskPriorityDisinheritAfterTimeout+0x7e>
 8005f0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f0e:	f383 8811 	msr	BASEPRI, r3
 8005f12:	f3bf 8f6f 	isb	sy
 8005f16:	f3bf 8f4f 	dsb	sy
 8005f1a:	60bb      	str	r3, [r7, #8]
 8005f1c:	e7fe      	b.n	8005f1c <vTaskPriorityDisinheritAfterTimeout+0x7c>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8005f1e:	69bb      	ldr	r3, [r7, #24]
 8005f20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f22:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8005f24:	69bb      	ldr	r3, [r7, #24]
 8005f26:	69fa      	ldr	r2, [r7, #28]
 8005f28:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005f2a:	69bb      	ldr	r3, [r7, #24]
 8005f2c:	699b      	ldr	r3, [r3, #24]
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	db04      	blt.n	8005f3c <vTaskPriorityDisinheritAfterTimeout+0x9c>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005f32:	69fb      	ldr	r3, [r7, #28]
 8005f34:	f1c3 0207 	rsb	r2, r3, #7
 8005f38:	69bb      	ldr	r3, [r7, #24]
 8005f3a:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8005f3c:	69bb      	ldr	r3, [r7, #24]
 8005f3e:	6959      	ldr	r1, [r3, #20]
 8005f40:	693a      	ldr	r2, [r7, #16]
 8005f42:	4613      	mov	r3, r2
 8005f44:	009b      	lsls	r3, r3, #2
 8005f46:	4413      	add	r3, r2
 8005f48:	009b      	lsls	r3, r3, #2
 8005f4a:	4a22      	ldr	r2, [pc, #136]	; (8005fd4 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8005f4c:	4413      	add	r3, r2
 8005f4e:	4299      	cmp	r1, r3
 8005f50:	d101      	bne.n	8005f56 <vTaskPriorityDisinheritAfterTimeout+0xb6>
 8005f52:	2301      	movs	r3, #1
 8005f54:	e000      	b.n	8005f58 <vTaskPriorityDisinheritAfterTimeout+0xb8>
 8005f56:	2300      	movs	r3, #0
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d034      	beq.n	8005fc6 <vTaskPriorityDisinheritAfterTimeout+0x126>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005f5c:	69bb      	ldr	r3, [r7, #24]
 8005f5e:	3304      	adds	r3, #4
 8005f60:	4618      	mov	r0, r3
 8005f62:	f7fe f951 	bl	8004208 <uxListRemove>
 8005f66:	4603      	mov	r3, r0
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d115      	bne.n	8005f98 <vTaskPriorityDisinheritAfterTimeout+0xf8>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8005f6c:	69bb      	ldr	r3, [r7, #24]
 8005f6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f70:	4918      	ldr	r1, [pc, #96]	; (8005fd4 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8005f72:	4613      	mov	r3, r2
 8005f74:	009b      	lsls	r3, r3, #2
 8005f76:	4413      	add	r3, r2
 8005f78:	009b      	lsls	r3, r3, #2
 8005f7a:	440b      	add	r3, r1
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d10a      	bne.n	8005f98 <vTaskPriorityDisinheritAfterTimeout+0xf8>
 8005f82:	69bb      	ldr	r3, [r7, #24]
 8005f84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f86:	2201      	movs	r2, #1
 8005f88:	fa02 f303 	lsl.w	r3, r2, r3
 8005f8c:	43da      	mvns	r2, r3
 8005f8e:	4b12      	ldr	r3, [pc, #72]	; (8005fd8 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	4013      	ands	r3, r2
 8005f94:	4a10      	ldr	r2, [pc, #64]	; (8005fd8 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8005f96:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8005f98:	69bb      	ldr	r3, [r7, #24]
 8005f9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f9c:	2201      	movs	r2, #1
 8005f9e:	409a      	lsls	r2, r3
 8005fa0:	4b0d      	ldr	r3, [pc, #52]	; (8005fd8 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	4313      	orrs	r3, r2
 8005fa6:	4a0c      	ldr	r2, [pc, #48]	; (8005fd8 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8005fa8:	6013      	str	r3, [r2, #0]
 8005faa:	69bb      	ldr	r3, [r7, #24]
 8005fac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005fae:	4613      	mov	r3, r2
 8005fb0:	009b      	lsls	r3, r3, #2
 8005fb2:	4413      	add	r3, r2
 8005fb4:	009b      	lsls	r3, r3, #2
 8005fb6:	4a07      	ldr	r2, [pc, #28]	; (8005fd4 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8005fb8:	441a      	add	r2, r3
 8005fba:	69bb      	ldr	r3, [r7, #24]
 8005fbc:	3304      	adds	r3, #4
 8005fbe:	4619      	mov	r1, r3
 8005fc0:	4610      	mov	r0, r2
 8005fc2:	f7fe f8c6 	bl	8004152 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005fc6:	bf00      	nop
 8005fc8:	3720      	adds	r7, #32
 8005fca:	46bd      	mov	sp, r7
 8005fcc:	bd80      	pop	{r7, pc}
 8005fce:	bf00      	nop
 8005fd0:	20000540 	.word	0x20000540
 8005fd4:	20000544 	.word	0x20000544
 8005fd8:	20000648 	.word	0x20000648

08005fdc <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 8005fdc:	b480      	push	{r7}
 8005fde:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8005fe0:	4b07      	ldr	r3, [pc, #28]	; (8006000 <pvTaskIncrementMutexHeldCount+0x24>)
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d004      	beq.n	8005ff2 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8005fe8:	4b05      	ldr	r3, [pc, #20]	; (8006000 <pvTaskIncrementMutexHeldCount+0x24>)
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005fee:	3201      	adds	r2, #1
 8005ff0:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 8005ff2:	4b03      	ldr	r3, [pc, #12]	; (8006000 <pvTaskIncrementMutexHeldCount+0x24>)
 8005ff4:	681b      	ldr	r3, [r3, #0]
	}
 8005ff6:	4618      	mov	r0, r3
 8005ff8:	46bd      	mov	sp, r7
 8005ffa:	bc80      	pop	{r7}
 8005ffc:	4770      	bx	lr
 8005ffe:	bf00      	nop
 8006000:	20000540 	.word	0x20000540

08006004 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006004:	b580      	push	{r7, lr}
 8006006:	b084      	sub	sp, #16
 8006008:	af00      	add	r7, sp, #0
 800600a:	6078      	str	r0, [r7, #4]
 800600c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800600e:	4b29      	ldr	r3, [pc, #164]	; (80060b4 <prvAddCurrentTaskToDelayedList+0xb0>)
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006014:	4b28      	ldr	r3, [pc, #160]	; (80060b8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	3304      	adds	r3, #4
 800601a:	4618      	mov	r0, r3
 800601c:	f7fe f8f4 	bl	8004208 <uxListRemove>
 8006020:	4603      	mov	r3, r0
 8006022:	2b00      	cmp	r3, #0
 8006024:	d10b      	bne.n	800603e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8006026:	4b24      	ldr	r3, [pc, #144]	; (80060b8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800602c:	2201      	movs	r2, #1
 800602e:	fa02 f303 	lsl.w	r3, r2, r3
 8006032:	43da      	mvns	r2, r3
 8006034:	4b21      	ldr	r3, [pc, #132]	; (80060bc <prvAddCurrentTaskToDelayedList+0xb8>)
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	4013      	ands	r3, r2
 800603a:	4a20      	ldr	r2, [pc, #128]	; (80060bc <prvAddCurrentTaskToDelayedList+0xb8>)
 800603c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006044:	d10a      	bne.n	800605c <prvAddCurrentTaskToDelayedList+0x58>
 8006046:	683b      	ldr	r3, [r7, #0]
 8006048:	2b00      	cmp	r3, #0
 800604a:	d007      	beq.n	800605c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800604c:	4b1a      	ldr	r3, [pc, #104]	; (80060b8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	3304      	adds	r3, #4
 8006052:	4619      	mov	r1, r3
 8006054:	481a      	ldr	r0, [pc, #104]	; (80060c0 <prvAddCurrentTaskToDelayedList+0xbc>)
 8006056:	f7fe f87c 	bl	8004152 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800605a:	e026      	b.n	80060aa <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800605c:	68fa      	ldr	r2, [r7, #12]
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	4413      	add	r3, r2
 8006062:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006064:	4b14      	ldr	r3, [pc, #80]	; (80060b8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	68ba      	ldr	r2, [r7, #8]
 800606a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800606c:	68ba      	ldr	r2, [r7, #8]
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	429a      	cmp	r2, r3
 8006072:	d209      	bcs.n	8006088 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006074:	4b13      	ldr	r3, [pc, #76]	; (80060c4 <prvAddCurrentTaskToDelayedList+0xc0>)
 8006076:	681a      	ldr	r2, [r3, #0]
 8006078:	4b0f      	ldr	r3, [pc, #60]	; (80060b8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	3304      	adds	r3, #4
 800607e:	4619      	mov	r1, r3
 8006080:	4610      	mov	r0, r2
 8006082:	f7fe f889 	bl	8004198 <vListInsert>
}
 8006086:	e010      	b.n	80060aa <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006088:	4b0f      	ldr	r3, [pc, #60]	; (80060c8 <prvAddCurrentTaskToDelayedList+0xc4>)
 800608a:	681a      	ldr	r2, [r3, #0]
 800608c:	4b0a      	ldr	r3, [pc, #40]	; (80060b8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	3304      	adds	r3, #4
 8006092:	4619      	mov	r1, r3
 8006094:	4610      	mov	r0, r2
 8006096:	f7fe f87f 	bl	8004198 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800609a:	4b0c      	ldr	r3, [pc, #48]	; (80060cc <prvAddCurrentTaskToDelayedList+0xc8>)
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	68ba      	ldr	r2, [r7, #8]
 80060a0:	429a      	cmp	r2, r3
 80060a2:	d202      	bcs.n	80060aa <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80060a4:	4a09      	ldr	r2, [pc, #36]	; (80060cc <prvAddCurrentTaskToDelayedList+0xc8>)
 80060a6:	68bb      	ldr	r3, [r7, #8]
 80060a8:	6013      	str	r3, [r2, #0]
}
 80060aa:	bf00      	nop
 80060ac:	3710      	adds	r7, #16
 80060ae:	46bd      	mov	sp, r7
 80060b0:	bd80      	pop	{r7, pc}
 80060b2:	bf00      	nop
 80060b4:	20000644 	.word	0x20000644
 80060b8:	20000540 	.word	0x20000540
 80060bc:	20000648 	.word	0x20000648
 80060c0:	2000062c 	.word	0x2000062c
 80060c4:	200005fc 	.word	0x200005fc
 80060c8:	200005f8 	.word	0x200005f8
 80060cc:	20000660 	.word	0x20000660

080060d0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80060d0:	b580      	push	{r7, lr}
 80060d2:	b08a      	sub	sp, #40	; 0x28
 80060d4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80060d6:	2300      	movs	r3, #0
 80060d8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80060da:	f000 fb37 	bl	800674c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80060de:	4b1c      	ldr	r3, [pc, #112]	; (8006150 <xTimerCreateTimerTask+0x80>)
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d021      	beq.n	800612a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80060e6:	2300      	movs	r3, #0
 80060e8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80060ea:	2300      	movs	r3, #0
 80060ec:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80060ee:	1d3a      	adds	r2, r7, #4
 80060f0:	f107 0108 	add.w	r1, r7, #8
 80060f4:	f107 030c 	add.w	r3, r7, #12
 80060f8:	4618      	mov	r0, r3
 80060fa:	f7fa f859 	bl	80001b0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80060fe:	6879      	ldr	r1, [r7, #4]
 8006100:	68bb      	ldr	r3, [r7, #8]
 8006102:	68fa      	ldr	r2, [r7, #12]
 8006104:	9202      	str	r2, [sp, #8]
 8006106:	9301      	str	r3, [sp, #4]
 8006108:	2302      	movs	r3, #2
 800610a:	9300      	str	r3, [sp, #0]
 800610c:	2300      	movs	r3, #0
 800610e:	460a      	mov	r2, r1
 8006110:	4910      	ldr	r1, [pc, #64]	; (8006154 <xTimerCreateTimerTask+0x84>)
 8006112:	4811      	ldr	r0, [pc, #68]	; (8006158 <xTimerCreateTimerTask+0x88>)
 8006114:	f7fe ff98 	bl	8005048 <xTaskCreateStatic>
 8006118:	4602      	mov	r2, r0
 800611a:	4b10      	ldr	r3, [pc, #64]	; (800615c <xTimerCreateTimerTask+0x8c>)
 800611c:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800611e:	4b0f      	ldr	r3, [pc, #60]	; (800615c <xTimerCreateTimerTask+0x8c>)
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	2b00      	cmp	r3, #0
 8006124:	d001      	beq.n	800612a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8006126:	2301      	movs	r3, #1
 8006128:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800612a:	697b      	ldr	r3, [r7, #20]
 800612c:	2b00      	cmp	r3, #0
 800612e:	d109      	bne.n	8006144 <xTimerCreateTimerTask+0x74>
 8006130:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006134:	f383 8811 	msr	BASEPRI, r3
 8006138:	f3bf 8f6f 	isb	sy
 800613c:	f3bf 8f4f 	dsb	sy
 8006140:	613b      	str	r3, [r7, #16]
 8006142:	e7fe      	b.n	8006142 <xTimerCreateTimerTask+0x72>
	return xReturn;
 8006144:	697b      	ldr	r3, [r7, #20]
}
 8006146:	4618      	mov	r0, r3
 8006148:	3718      	adds	r7, #24
 800614a:	46bd      	mov	sp, r7
 800614c:	bd80      	pop	{r7, pc}
 800614e:	bf00      	nop
 8006150:	2000069c 	.word	0x2000069c
 8006154:	080079e0 	.word	0x080079e0
 8006158:	08006395 	.word	0x08006395
 800615c:	200006a0 	.word	0x200006a0

08006160 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 8006160:	b580      	push	{r7, lr}
 8006162:	b088      	sub	sp, #32
 8006164:	af02      	add	r7, sp, #8
 8006166:	60f8      	str	r0, [r7, #12]
 8006168:	60b9      	str	r1, [r7, #8]
 800616a:	607a      	str	r2, [r7, #4]
 800616c:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) );
 800616e:	202c      	movs	r0, #44	; 0x2c
 8006170:	f000 fd10 	bl	8006b94 <pvPortMalloc>
 8006174:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 8006176:	697b      	ldr	r3, [r7, #20]
 8006178:	2b00      	cmp	r3, #0
 800617a:	d00d      	beq.n	8006198 <xTimerCreate+0x38>
		{
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800617c:	697b      	ldr	r3, [r7, #20]
 800617e:	9301      	str	r3, [sp, #4]
 8006180:	6a3b      	ldr	r3, [r7, #32]
 8006182:	9300      	str	r3, [sp, #0]
 8006184:	683b      	ldr	r3, [r7, #0]
 8006186:	687a      	ldr	r2, [r7, #4]
 8006188:	68b9      	ldr	r1, [r7, #8]
 800618a:	68f8      	ldr	r0, [r7, #12]
 800618c:	f000 f844 	bl	8006218 <prvInitialiseNewTimer>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Timers can be created statically or dynamically, so note this
				timer was created dynamically in case the timer is later
				deleted. */
				pxNewTimer->ucStaticallyAllocated = pdFALSE;
 8006190:	697b      	ldr	r3, [r7, #20]
 8006192:	2200      	movs	r2, #0
 8006194:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */
		}

		return pxNewTimer;
 8006198:	697b      	ldr	r3, [r7, #20]
	}
 800619a:	4618      	mov	r0, r3
 800619c:	3718      	adds	r7, #24
 800619e:	46bd      	mov	sp, r7
 80061a0:	bd80      	pop	{r7, pc}

080061a2 <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 80061a2:	b580      	push	{r7, lr}
 80061a4:	b08a      	sub	sp, #40	; 0x28
 80061a6:	af02      	add	r7, sp, #8
 80061a8:	60f8      	str	r0, [r7, #12]
 80061aa:	60b9      	str	r1, [r7, #8]
 80061ac:	607a      	str	r2, [r7, #4]
 80061ae:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 80061b0:	232c      	movs	r3, #44	; 0x2c
 80061b2:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 80061b4:	693b      	ldr	r3, [r7, #16]
 80061b6:	2b2c      	cmp	r3, #44	; 0x2c
 80061b8:	d009      	beq.n	80061ce <xTimerCreateStatic+0x2c>
 80061ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061be:	f383 8811 	msr	BASEPRI, r3
 80061c2:	f3bf 8f6f 	isb	sy
 80061c6:	f3bf 8f4f 	dsb	sy
 80061ca:	61bb      	str	r3, [r7, #24]
 80061cc:	e7fe      	b.n	80061cc <xTimerCreateStatic+0x2a>
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 80061ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d109      	bne.n	80061e8 <xTimerCreateStatic+0x46>
 80061d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061d8:	f383 8811 	msr	BASEPRI, r3
 80061dc:	f3bf 8f6f 	isb	sy
 80061e0:	f3bf 8f4f 	dsb	sy
 80061e4:	617b      	str	r3, [r7, #20]
 80061e6:	e7fe      	b.n	80061e6 <xTimerCreateStatic+0x44>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80061e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061ea:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 80061ec:	69fb      	ldr	r3, [r7, #28]
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d00d      	beq.n	800620e <xTimerCreateStatic+0x6c>
		{
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 80061f2:	69fb      	ldr	r3, [r7, #28]
 80061f4:	9301      	str	r3, [sp, #4]
 80061f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061f8:	9300      	str	r3, [sp, #0]
 80061fa:	683b      	ldr	r3, [r7, #0]
 80061fc:	687a      	ldr	r2, [r7, #4]
 80061fe:	68b9      	ldr	r1, [r7, #8]
 8006200:	68f8      	ldr	r0, [r7, #12]
 8006202:	f000 f809 	bl	8006218 <prvInitialiseNewTimer>

			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Timers can be created statically or dynamically so note this
				timer was created statically in case it is later deleted. */
				pxNewTimer->ucStaticallyAllocated = pdTRUE;
 8006206:	69fb      	ldr	r3, [r7, #28]
 8006208:	2201      	movs	r2, #1
 800620a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
		}

		return pxNewTimer;
 800620e:	69fb      	ldr	r3, [r7, #28]
	}
 8006210:	4618      	mov	r0, r3
 8006212:	3720      	adds	r7, #32
 8006214:	46bd      	mov	sp, r7
 8006216:	bd80      	pop	{r7, pc}

08006218 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 8006218:	b580      	push	{r7, lr}
 800621a:	b086      	sub	sp, #24
 800621c:	af00      	add	r7, sp, #0
 800621e:	60f8      	str	r0, [r7, #12]
 8006220:	60b9      	str	r1, [r7, #8]
 8006222:	607a      	str	r2, [r7, #4]
 8006224:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8006226:	68bb      	ldr	r3, [r7, #8]
 8006228:	2b00      	cmp	r3, #0
 800622a:	d109      	bne.n	8006240 <prvInitialiseNewTimer+0x28>
 800622c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006230:	f383 8811 	msr	BASEPRI, r3
 8006234:	f3bf 8f6f 	isb	sy
 8006238:	f3bf 8f4f 	dsb	sy
 800623c:	617b      	str	r3, [r7, #20]
 800623e:	e7fe      	b.n	800623e <prvInitialiseNewTimer+0x26>

	if( pxNewTimer != NULL )
 8006240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006242:	2b00      	cmp	r3, #0
 8006244:	d015      	beq.n	8006272 <prvInitialiseNewTimer+0x5a>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 8006246:	f000 fa81 	bl	800674c <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 800624a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800624c:	68fa      	ldr	r2, [r7, #12]
 800624e:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8006250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006252:	68ba      	ldr	r2, [r7, #8]
 8006254:	619a      	str	r2, [r3, #24]
		pxNewTimer->uxAutoReload = uxAutoReload;
 8006256:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006258:	687a      	ldr	r2, [r7, #4]
 800625a:	61da      	str	r2, [r3, #28]
		pxNewTimer->pvTimerID = pvTimerID;
 800625c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800625e:	683a      	ldr	r2, [r7, #0]
 8006260:	621a      	str	r2, [r3, #32]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8006262:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006264:	6a3a      	ldr	r2, [r7, #32]
 8006266:	625a      	str	r2, [r3, #36]	; 0x24
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8006268:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800626a:	3304      	adds	r3, #4
 800626c:	4618      	mov	r0, r3
 800626e:	f7fd ff64 	bl	800413a <vListInitialiseItem>
		traceTIMER_CREATE( pxNewTimer );
	}
}
 8006272:	bf00      	nop
 8006274:	3718      	adds	r7, #24
 8006276:	46bd      	mov	sp, r7
 8006278:	bd80      	pop	{r7, pc}
	...

0800627c <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800627c:	b580      	push	{r7, lr}
 800627e:	b08a      	sub	sp, #40	; 0x28
 8006280:	af00      	add	r7, sp, #0
 8006282:	60f8      	str	r0, [r7, #12]
 8006284:	60b9      	str	r1, [r7, #8]
 8006286:	607a      	str	r2, [r7, #4]
 8006288:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800628a:	2300      	movs	r3, #0
 800628c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	2b00      	cmp	r3, #0
 8006292:	d109      	bne.n	80062a8 <xTimerGenericCommand+0x2c>
 8006294:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006298:	f383 8811 	msr	BASEPRI, r3
 800629c:	f3bf 8f6f 	isb	sy
 80062a0:	f3bf 8f4f 	dsb	sy
 80062a4:	623b      	str	r3, [r7, #32]
 80062a6:	e7fe      	b.n	80062a6 <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80062a8:	4b19      	ldr	r3, [pc, #100]	; (8006310 <xTimerGenericCommand+0x94>)
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d02a      	beq.n	8006306 <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80062b0:	68bb      	ldr	r3, [r7, #8]
 80062b2:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80062bc:	68bb      	ldr	r3, [r7, #8]
 80062be:	2b05      	cmp	r3, #5
 80062c0:	dc18      	bgt.n	80062f4 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80062c2:	f7ff fcc5 	bl	8005c50 <xTaskGetSchedulerState>
 80062c6:	4603      	mov	r3, r0
 80062c8:	2b02      	cmp	r3, #2
 80062ca:	d109      	bne.n	80062e0 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80062cc:	4b10      	ldr	r3, [pc, #64]	; (8006310 <xTimerGenericCommand+0x94>)
 80062ce:	6818      	ldr	r0, [r3, #0]
 80062d0:	f107 0114 	add.w	r1, r7, #20
 80062d4:	2300      	movs	r3, #0
 80062d6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80062d8:	f7fe f944 	bl	8004564 <xQueueGenericSend>
 80062dc:	6278      	str	r0, [r7, #36]	; 0x24
 80062de:	e012      	b.n	8006306 <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80062e0:	4b0b      	ldr	r3, [pc, #44]	; (8006310 <xTimerGenericCommand+0x94>)
 80062e2:	6818      	ldr	r0, [r3, #0]
 80062e4:	f107 0114 	add.w	r1, r7, #20
 80062e8:	2300      	movs	r3, #0
 80062ea:	2200      	movs	r2, #0
 80062ec:	f7fe f93a 	bl	8004564 <xQueueGenericSend>
 80062f0:	6278      	str	r0, [r7, #36]	; 0x24
 80062f2:	e008      	b.n	8006306 <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80062f4:	4b06      	ldr	r3, [pc, #24]	; (8006310 <xTimerGenericCommand+0x94>)
 80062f6:	6818      	ldr	r0, [r3, #0]
 80062f8:	f107 0114 	add.w	r1, r7, #20
 80062fc:	2300      	movs	r3, #0
 80062fe:	683a      	ldr	r2, [r7, #0]
 8006300:	f7fe fa2a 	bl	8004758 <xQueueGenericSendFromISR>
 8006304:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8006306:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006308:	4618      	mov	r0, r3
 800630a:	3728      	adds	r7, #40	; 0x28
 800630c:	46bd      	mov	sp, r7
 800630e:	bd80      	pop	{r7, pc}
 8006310:	2000069c 	.word	0x2000069c

08006314 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8006314:	b580      	push	{r7, lr}
 8006316:	b088      	sub	sp, #32
 8006318:	af02      	add	r7, sp, #8
 800631a:	6078      	str	r0, [r7, #4]
 800631c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800631e:	4b1c      	ldr	r3, [pc, #112]	; (8006390 <prvProcessExpiredTimer+0x7c>)
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	68db      	ldr	r3, [r3, #12]
 8006324:	68db      	ldr	r3, [r3, #12]
 8006326:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006328:	697b      	ldr	r3, [r7, #20]
 800632a:	3304      	adds	r3, #4
 800632c:	4618      	mov	r0, r3
 800632e:	f7fd ff6b 	bl	8004208 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8006332:	697b      	ldr	r3, [r7, #20]
 8006334:	69db      	ldr	r3, [r3, #28]
 8006336:	2b01      	cmp	r3, #1
 8006338:	d121      	bne.n	800637e <prvProcessExpiredTimer+0x6a>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800633a:	697b      	ldr	r3, [r7, #20]
 800633c:	699a      	ldr	r2, [r3, #24]
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	18d1      	adds	r1, r2, r3
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	683a      	ldr	r2, [r7, #0]
 8006346:	6978      	ldr	r0, [r7, #20]
 8006348:	f000 f8c8 	bl	80064dc <prvInsertTimerInActiveList>
 800634c:	4603      	mov	r3, r0
 800634e:	2b00      	cmp	r3, #0
 8006350:	d015      	beq.n	800637e <prvProcessExpiredTimer+0x6a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006352:	2300      	movs	r3, #0
 8006354:	9300      	str	r3, [sp, #0]
 8006356:	2300      	movs	r3, #0
 8006358:	687a      	ldr	r2, [r7, #4]
 800635a:	2100      	movs	r1, #0
 800635c:	6978      	ldr	r0, [r7, #20]
 800635e:	f7ff ff8d 	bl	800627c <xTimerGenericCommand>
 8006362:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8006364:	693b      	ldr	r3, [r7, #16]
 8006366:	2b00      	cmp	r3, #0
 8006368:	d109      	bne.n	800637e <prvProcessExpiredTimer+0x6a>
 800636a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800636e:	f383 8811 	msr	BASEPRI, r3
 8006372:	f3bf 8f6f 	isb	sy
 8006376:	f3bf 8f4f 	dsb	sy
 800637a:	60fb      	str	r3, [r7, #12]
 800637c:	e7fe      	b.n	800637c <prvProcessExpiredTimer+0x68>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800637e:	697b      	ldr	r3, [r7, #20]
 8006380:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006382:	6978      	ldr	r0, [r7, #20]
 8006384:	4798      	blx	r3
}
 8006386:	bf00      	nop
 8006388:	3718      	adds	r7, #24
 800638a:	46bd      	mov	sp, r7
 800638c:	bd80      	pop	{r7, pc}
 800638e:	bf00      	nop
 8006390:	20000694 	.word	0x20000694

08006394 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8006394:	b580      	push	{r7, lr}
 8006396:	b084      	sub	sp, #16
 8006398:	af00      	add	r7, sp, #0
 800639a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800639c:	f107 0308 	add.w	r3, r7, #8
 80063a0:	4618      	mov	r0, r3
 80063a2:	f000 f857 	bl	8006454 <prvGetNextExpireTime>
 80063a6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80063a8:	68bb      	ldr	r3, [r7, #8]
 80063aa:	4619      	mov	r1, r3
 80063ac:	68f8      	ldr	r0, [r7, #12]
 80063ae:	f000 f803 	bl	80063b8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80063b2:	f000 f8d5 	bl	8006560 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80063b6:	e7f1      	b.n	800639c <prvTimerTask+0x8>

080063b8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80063b8:	b580      	push	{r7, lr}
 80063ba:	b084      	sub	sp, #16
 80063bc:	af00      	add	r7, sp, #0
 80063be:	6078      	str	r0, [r7, #4]
 80063c0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80063c2:	f7ff f85f 	bl	8005484 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80063c6:	f107 0308 	add.w	r3, r7, #8
 80063ca:	4618      	mov	r0, r3
 80063cc:	f000 f866 	bl	800649c <prvSampleTimeNow>
 80063d0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80063d2:	68bb      	ldr	r3, [r7, #8]
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d130      	bne.n	800643a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80063d8:	683b      	ldr	r3, [r7, #0]
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d10a      	bne.n	80063f4 <prvProcessTimerOrBlockTask+0x3c>
 80063de:	687a      	ldr	r2, [r7, #4]
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	429a      	cmp	r2, r3
 80063e4:	d806      	bhi.n	80063f4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80063e6:	f7ff f85b 	bl	80054a0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80063ea:	68f9      	ldr	r1, [r7, #12]
 80063ec:	6878      	ldr	r0, [r7, #4]
 80063ee:	f7ff ff91 	bl	8006314 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80063f2:	e024      	b.n	800643e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80063f4:	683b      	ldr	r3, [r7, #0]
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d008      	beq.n	800640c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80063fa:	4b13      	ldr	r3, [pc, #76]	; (8006448 <prvProcessTimerOrBlockTask+0x90>)
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	2b00      	cmp	r3, #0
 8006402:	bf0c      	ite	eq
 8006404:	2301      	moveq	r3, #1
 8006406:	2300      	movne	r3, #0
 8006408:	b2db      	uxtb	r3, r3
 800640a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800640c:	4b0f      	ldr	r3, [pc, #60]	; (800644c <prvProcessTimerOrBlockTask+0x94>)
 800640e:	6818      	ldr	r0, [r3, #0]
 8006410:	687a      	ldr	r2, [r7, #4]
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	1ad3      	subs	r3, r2, r3
 8006416:	683a      	ldr	r2, [r7, #0]
 8006418:	4619      	mov	r1, r3
 800641a:	f7fe fde1 	bl	8004fe0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800641e:	f7ff f83f 	bl	80054a0 <xTaskResumeAll>
 8006422:	4603      	mov	r3, r0
 8006424:	2b00      	cmp	r3, #0
 8006426:	d10a      	bne.n	800643e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006428:	4b09      	ldr	r3, [pc, #36]	; (8006450 <prvProcessTimerOrBlockTask+0x98>)
 800642a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800642e:	601a      	str	r2, [r3, #0]
 8006430:	f3bf 8f4f 	dsb	sy
 8006434:	f3bf 8f6f 	isb	sy
}
 8006438:	e001      	b.n	800643e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800643a:	f7ff f831 	bl	80054a0 <xTaskResumeAll>
}
 800643e:	bf00      	nop
 8006440:	3710      	adds	r7, #16
 8006442:	46bd      	mov	sp, r7
 8006444:	bd80      	pop	{r7, pc}
 8006446:	bf00      	nop
 8006448:	20000698 	.word	0x20000698
 800644c:	2000069c 	.word	0x2000069c
 8006450:	e000ed04 	.word	0xe000ed04

08006454 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006454:	b480      	push	{r7}
 8006456:	b085      	sub	sp, #20
 8006458:	af00      	add	r7, sp, #0
 800645a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800645c:	4b0e      	ldr	r3, [pc, #56]	; (8006498 <prvGetNextExpireTime+0x44>)
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	2b00      	cmp	r3, #0
 8006464:	bf0c      	ite	eq
 8006466:	2301      	moveq	r3, #1
 8006468:	2300      	movne	r3, #0
 800646a:	b2db      	uxtb	r3, r3
 800646c:	461a      	mov	r2, r3
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	2b00      	cmp	r3, #0
 8006478:	d105      	bne.n	8006486 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800647a:	4b07      	ldr	r3, [pc, #28]	; (8006498 <prvGetNextExpireTime+0x44>)
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	68db      	ldr	r3, [r3, #12]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	60fb      	str	r3, [r7, #12]
 8006484:	e001      	b.n	800648a <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006486:	2300      	movs	r3, #0
 8006488:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800648a:	68fb      	ldr	r3, [r7, #12]
}
 800648c:	4618      	mov	r0, r3
 800648e:	3714      	adds	r7, #20
 8006490:	46bd      	mov	sp, r7
 8006492:	bc80      	pop	{r7}
 8006494:	4770      	bx	lr
 8006496:	bf00      	nop
 8006498:	20000694 	.word	0x20000694

0800649c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800649c:	b580      	push	{r7, lr}
 800649e:	b084      	sub	sp, #16
 80064a0:	af00      	add	r7, sp, #0
 80064a2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80064a4:	f7ff f898 	bl	80055d8 <xTaskGetTickCount>
 80064a8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80064aa:	4b0b      	ldr	r3, [pc, #44]	; (80064d8 <prvSampleTimeNow+0x3c>)
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	68fa      	ldr	r2, [r7, #12]
 80064b0:	429a      	cmp	r2, r3
 80064b2:	d205      	bcs.n	80064c0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80064b4:	f000 f8ea 	bl	800668c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	2201      	movs	r2, #1
 80064bc:	601a      	str	r2, [r3, #0]
 80064be:	e002      	b.n	80064c6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	2200      	movs	r2, #0
 80064c4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80064c6:	4a04      	ldr	r2, [pc, #16]	; (80064d8 <prvSampleTimeNow+0x3c>)
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80064cc:	68fb      	ldr	r3, [r7, #12]
}
 80064ce:	4618      	mov	r0, r3
 80064d0:	3710      	adds	r7, #16
 80064d2:	46bd      	mov	sp, r7
 80064d4:	bd80      	pop	{r7, pc}
 80064d6:	bf00      	nop
 80064d8:	200006a4 	.word	0x200006a4

080064dc <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80064dc:	b580      	push	{r7, lr}
 80064de:	b086      	sub	sp, #24
 80064e0:	af00      	add	r7, sp, #0
 80064e2:	60f8      	str	r0, [r7, #12]
 80064e4:	60b9      	str	r1, [r7, #8]
 80064e6:	607a      	str	r2, [r7, #4]
 80064e8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80064ea:	2300      	movs	r3, #0
 80064ec:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	68ba      	ldr	r2, [r7, #8]
 80064f2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	68fa      	ldr	r2, [r7, #12]
 80064f8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80064fa:	68ba      	ldr	r2, [r7, #8]
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	429a      	cmp	r2, r3
 8006500:	d812      	bhi.n	8006528 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006502:	687a      	ldr	r2, [r7, #4]
 8006504:	683b      	ldr	r3, [r7, #0]
 8006506:	1ad2      	subs	r2, r2, r3
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	699b      	ldr	r3, [r3, #24]
 800650c:	429a      	cmp	r2, r3
 800650e:	d302      	bcc.n	8006516 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8006510:	2301      	movs	r3, #1
 8006512:	617b      	str	r3, [r7, #20]
 8006514:	e01b      	b.n	800654e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006516:	4b10      	ldr	r3, [pc, #64]	; (8006558 <prvInsertTimerInActiveList+0x7c>)
 8006518:	681a      	ldr	r2, [r3, #0]
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	3304      	adds	r3, #4
 800651e:	4619      	mov	r1, r3
 8006520:	4610      	mov	r0, r2
 8006522:	f7fd fe39 	bl	8004198 <vListInsert>
 8006526:	e012      	b.n	800654e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006528:	687a      	ldr	r2, [r7, #4]
 800652a:	683b      	ldr	r3, [r7, #0]
 800652c:	429a      	cmp	r2, r3
 800652e:	d206      	bcs.n	800653e <prvInsertTimerInActiveList+0x62>
 8006530:	68ba      	ldr	r2, [r7, #8]
 8006532:	683b      	ldr	r3, [r7, #0]
 8006534:	429a      	cmp	r2, r3
 8006536:	d302      	bcc.n	800653e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8006538:	2301      	movs	r3, #1
 800653a:	617b      	str	r3, [r7, #20]
 800653c:	e007      	b.n	800654e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800653e:	4b07      	ldr	r3, [pc, #28]	; (800655c <prvInsertTimerInActiveList+0x80>)
 8006540:	681a      	ldr	r2, [r3, #0]
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	3304      	adds	r3, #4
 8006546:	4619      	mov	r1, r3
 8006548:	4610      	mov	r0, r2
 800654a:	f7fd fe25 	bl	8004198 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800654e:	697b      	ldr	r3, [r7, #20]
}
 8006550:	4618      	mov	r0, r3
 8006552:	3718      	adds	r7, #24
 8006554:	46bd      	mov	sp, r7
 8006556:	bd80      	pop	{r7, pc}
 8006558:	20000698 	.word	0x20000698
 800655c:	20000694 	.word	0x20000694

08006560 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8006560:	b580      	push	{r7, lr}
 8006562:	b08c      	sub	sp, #48	; 0x30
 8006564:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006566:	e07f      	b.n	8006668 <prvProcessReceivedCommands+0x108>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006568:	68bb      	ldr	r3, [r7, #8]
 800656a:	2b00      	cmp	r3, #0
 800656c:	db7b      	blt.n	8006666 <prvProcessReceivedCommands+0x106>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800656e:	693b      	ldr	r3, [r7, #16]
 8006570:	627b      	str	r3, [r7, #36]	; 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006572:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006574:	695b      	ldr	r3, [r3, #20]
 8006576:	2b00      	cmp	r3, #0
 8006578:	d004      	beq.n	8006584 <prvProcessReceivedCommands+0x24>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800657a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800657c:	3304      	adds	r3, #4
 800657e:	4618      	mov	r0, r3
 8006580:	f7fd fe42 	bl	8004208 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006584:	1d3b      	adds	r3, r7, #4
 8006586:	4618      	mov	r0, r3
 8006588:	f7ff ff88 	bl	800649c <prvSampleTimeNow>
 800658c:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 800658e:	68bb      	ldr	r3, [r7, #8]
 8006590:	2b09      	cmp	r3, #9
 8006592:	d869      	bhi.n	8006668 <prvProcessReceivedCommands+0x108>
 8006594:	a201      	add	r2, pc, #4	; (adr r2, 800659c <prvProcessReceivedCommands+0x3c>)
 8006596:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800659a:	bf00      	nop
 800659c:	080065c5 	.word	0x080065c5
 80065a0:	080065c5 	.word	0x080065c5
 80065a4:	080065c5 	.word	0x080065c5
 80065a8:	08006669 	.word	0x08006669
 80065ac:	0800661f 	.word	0x0800661f
 80065b0:	08006655 	.word	0x08006655
 80065b4:	080065c5 	.word	0x080065c5
 80065b8:	080065c5 	.word	0x080065c5
 80065bc:	08006669 	.word	0x08006669
 80065c0:	0800661f 	.word	0x0800661f
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80065c4:	68fa      	ldr	r2, [r7, #12]
 80065c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065c8:	699b      	ldr	r3, [r3, #24]
 80065ca:	18d1      	adds	r1, r2, r3
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	6a3a      	ldr	r2, [r7, #32]
 80065d0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80065d2:	f7ff ff83 	bl	80064dc <prvInsertTimerInActiveList>
 80065d6:	4603      	mov	r3, r0
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d045      	beq.n	8006668 <prvProcessReceivedCommands+0x108>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80065dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065e0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80065e2:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80065e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065e6:	69db      	ldr	r3, [r3, #28]
 80065e8:	2b01      	cmp	r3, #1
 80065ea:	d13d      	bne.n	8006668 <prvProcessReceivedCommands+0x108>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80065ec:	68fa      	ldr	r2, [r7, #12]
 80065ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065f0:	699b      	ldr	r3, [r3, #24]
 80065f2:	441a      	add	r2, r3
 80065f4:	2300      	movs	r3, #0
 80065f6:	9300      	str	r3, [sp, #0]
 80065f8:	2300      	movs	r3, #0
 80065fa:	2100      	movs	r1, #0
 80065fc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80065fe:	f7ff fe3d 	bl	800627c <xTimerGenericCommand>
 8006602:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 8006604:	69fb      	ldr	r3, [r7, #28]
 8006606:	2b00      	cmp	r3, #0
 8006608:	d12e      	bne.n	8006668 <prvProcessReceivedCommands+0x108>
 800660a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800660e:	f383 8811 	msr	BASEPRI, r3
 8006612:	f3bf 8f6f 	isb	sy
 8006616:	f3bf 8f4f 	dsb	sy
 800661a:	61bb      	str	r3, [r7, #24]
 800661c:	e7fe      	b.n	800661c <prvProcessReceivedCommands+0xbc>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800661e:	68fa      	ldr	r2, [r7, #12]
 8006620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006622:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006626:	699b      	ldr	r3, [r3, #24]
 8006628:	2b00      	cmp	r3, #0
 800662a:	d109      	bne.n	8006640 <prvProcessReceivedCommands+0xe0>
 800662c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006630:	f383 8811 	msr	BASEPRI, r3
 8006634:	f3bf 8f6f 	isb	sy
 8006638:	f3bf 8f4f 	dsb	sy
 800663c:	617b      	str	r3, [r7, #20]
 800663e:	e7fe      	b.n	800663e <prvProcessReceivedCommands+0xde>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006642:	699a      	ldr	r2, [r3, #24]
 8006644:	6a3b      	ldr	r3, [r7, #32]
 8006646:	18d1      	adds	r1, r2, r3
 8006648:	6a3b      	ldr	r3, [r7, #32]
 800664a:	6a3a      	ldr	r2, [r7, #32]
 800664c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800664e:	f7ff ff45 	bl	80064dc <prvInsertTimerInActiveList>
					break;
 8006652:	e009      	b.n	8006668 <prvProcessReceivedCommands+0x108>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8006654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006656:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800665a:	2b00      	cmp	r3, #0
 800665c:	d104      	bne.n	8006668 <prvProcessReceivedCommands+0x108>
						{
							vPortFree( pxTimer );
 800665e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006660:	f000 fb5e 	bl	8006d20 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8006664:	e000      	b.n	8006668 <prvProcessReceivedCommands+0x108>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8006666:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006668:	4b07      	ldr	r3, [pc, #28]	; (8006688 <prvProcessReceivedCommands+0x128>)
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	f107 0108 	add.w	r1, r7, #8
 8006670:	2200      	movs	r2, #0
 8006672:	4618      	mov	r0, r3
 8006674:	f7fe f904 	bl	8004880 <xQueueReceive>
 8006678:	4603      	mov	r3, r0
 800667a:	2b00      	cmp	r3, #0
 800667c:	f47f af74 	bne.w	8006568 <prvProcessReceivedCommands+0x8>
	}
}
 8006680:	bf00      	nop
 8006682:	3728      	adds	r7, #40	; 0x28
 8006684:	46bd      	mov	sp, r7
 8006686:	bd80      	pop	{r7, pc}
 8006688:	2000069c 	.word	0x2000069c

0800668c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800668c:	b580      	push	{r7, lr}
 800668e:	b088      	sub	sp, #32
 8006690:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006692:	e044      	b.n	800671e <prvSwitchTimerLists+0x92>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006694:	4b2b      	ldr	r3, [pc, #172]	; (8006744 <prvSwitchTimerLists+0xb8>)
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	68db      	ldr	r3, [r3, #12]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800669e:	4b29      	ldr	r3, [pc, #164]	; (8006744 <prvSwitchTimerLists+0xb8>)
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	68db      	ldr	r3, [r3, #12]
 80066a4:	68db      	ldr	r3, [r3, #12]
 80066a6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	3304      	adds	r3, #4
 80066ac:	4618      	mov	r0, r3
 80066ae:	f7fd fdab 	bl	8004208 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066b6:	68f8      	ldr	r0, [r7, #12]
 80066b8:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	69db      	ldr	r3, [r3, #28]
 80066be:	2b01      	cmp	r3, #1
 80066c0:	d12d      	bne.n	800671e <prvSwitchTimerLists+0x92>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	699b      	ldr	r3, [r3, #24]
 80066c6:	693a      	ldr	r2, [r7, #16]
 80066c8:	4413      	add	r3, r2
 80066ca:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80066cc:	68ba      	ldr	r2, [r7, #8]
 80066ce:	693b      	ldr	r3, [r7, #16]
 80066d0:	429a      	cmp	r2, r3
 80066d2:	d90e      	bls.n	80066f2 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	68ba      	ldr	r2, [r7, #8]
 80066d8:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	68fa      	ldr	r2, [r7, #12]
 80066de:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80066e0:	4b18      	ldr	r3, [pc, #96]	; (8006744 <prvSwitchTimerLists+0xb8>)
 80066e2:	681a      	ldr	r2, [r3, #0]
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	3304      	adds	r3, #4
 80066e8:	4619      	mov	r1, r3
 80066ea:	4610      	mov	r0, r2
 80066ec:	f7fd fd54 	bl	8004198 <vListInsert>
 80066f0:	e015      	b.n	800671e <prvSwitchTimerLists+0x92>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80066f2:	2300      	movs	r3, #0
 80066f4:	9300      	str	r3, [sp, #0]
 80066f6:	2300      	movs	r3, #0
 80066f8:	693a      	ldr	r2, [r7, #16]
 80066fa:	2100      	movs	r1, #0
 80066fc:	68f8      	ldr	r0, [r7, #12]
 80066fe:	f7ff fdbd 	bl	800627c <xTimerGenericCommand>
 8006702:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	2b00      	cmp	r3, #0
 8006708:	d109      	bne.n	800671e <prvSwitchTimerLists+0x92>
 800670a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800670e:	f383 8811 	msr	BASEPRI, r3
 8006712:	f3bf 8f6f 	isb	sy
 8006716:	f3bf 8f4f 	dsb	sy
 800671a:	603b      	str	r3, [r7, #0]
 800671c:	e7fe      	b.n	800671c <prvSwitchTimerLists+0x90>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800671e:	4b09      	ldr	r3, [pc, #36]	; (8006744 <prvSwitchTimerLists+0xb8>)
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	2b00      	cmp	r3, #0
 8006726:	d1b5      	bne.n	8006694 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8006728:	4b06      	ldr	r3, [pc, #24]	; (8006744 <prvSwitchTimerLists+0xb8>)
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800672e:	4b06      	ldr	r3, [pc, #24]	; (8006748 <prvSwitchTimerLists+0xbc>)
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	4a04      	ldr	r2, [pc, #16]	; (8006744 <prvSwitchTimerLists+0xb8>)
 8006734:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8006736:	4a04      	ldr	r2, [pc, #16]	; (8006748 <prvSwitchTimerLists+0xbc>)
 8006738:	697b      	ldr	r3, [r7, #20]
 800673a:	6013      	str	r3, [r2, #0]
}
 800673c:	bf00      	nop
 800673e:	3718      	adds	r7, #24
 8006740:	46bd      	mov	sp, r7
 8006742:	bd80      	pop	{r7, pc}
 8006744:	20000694 	.word	0x20000694
 8006748:	20000698 	.word	0x20000698

0800674c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800674c:	b580      	push	{r7, lr}
 800674e:	b082      	sub	sp, #8
 8006750:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8006752:	f000 f929 	bl	80069a8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8006756:	4b15      	ldr	r3, [pc, #84]	; (80067ac <prvCheckForValidListAndQueue+0x60>)
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	2b00      	cmp	r3, #0
 800675c:	d120      	bne.n	80067a0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800675e:	4814      	ldr	r0, [pc, #80]	; (80067b0 <prvCheckForValidListAndQueue+0x64>)
 8006760:	f7fd fccc 	bl	80040fc <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006764:	4813      	ldr	r0, [pc, #76]	; (80067b4 <prvCheckForValidListAndQueue+0x68>)
 8006766:	f7fd fcc9 	bl	80040fc <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800676a:	4b13      	ldr	r3, [pc, #76]	; (80067b8 <prvCheckForValidListAndQueue+0x6c>)
 800676c:	4a10      	ldr	r2, [pc, #64]	; (80067b0 <prvCheckForValidListAndQueue+0x64>)
 800676e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8006770:	4b12      	ldr	r3, [pc, #72]	; (80067bc <prvCheckForValidListAndQueue+0x70>)
 8006772:	4a10      	ldr	r2, [pc, #64]	; (80067b4 <prvCheckForValidListAndQueue+0x68>)
 8006774:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8006776:	2300      	movs	r3, #0
 8006778:	9300      	str	r3, [sp, #0]
 800677a:	4b11      	ldr	r3, [pc, #68]	; (80067c0 <prvCheckForValidListAndQueue+0x74>)
 800677c:	4a11      	ldr	r2, [pc, #68]	; (80067c4 <prvCheckForValidListAndQueue+0x78>)
 800677e:	210c      	movs	r1, #12
 8006780:	200a      	movs	r0, #10
 8006782:	f7fd fdd3 	bl	800432c <xQueueGenericCreateStatic>
 8006786:	4602      	mov	r2, r0
 8006788:	4b08      	ldr	r3, [pc, #32]	; (80067ac <prvCheckForValidListAndQueue+0x60>)
 800678a:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800678c:	4b07      	ldr	r3, [pc, #28]	; (80067ac <prvCheckForValidListAndQueue+0x60>)
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	2b00      	cmp	r3, #0
 8006792:	d005      	beq.n	80067a0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006794:	4b05      	ldr	r3, [pc, #20]	; (80067ac <prvCheckForValidListAndQueue+0x60>)
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	490b      	ldr	r1, [pc, #44]	; (80067c8 <prvCheckForValidListAndQueue+0x7c>)
 800679a:	4618      	mov	r0, r3
 800679c:	f7fe fbf8 	bl	8004f90 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80067a0:	f000 f930 	bl	8006a04 <vPortExitCritical>
}
 80067a4:	bf00      	nop
 80067a6:	46bd      	mov	sp, r7
 80067a8:	bd80      	pop	{r7, pc}
 80067aa:	bf00      	nop
 80067ac:	2000069c 	.word	0x2000069c
 80067b0:	2000066c 	.word	0x2000066c
 80067b4:	20000680 	.word	0x20000680
 80067b8:	20000694 	.word	0x20000694
 80067bc:	20000698 	.word	0x20000698
 80067c0:	20000720 	.word	0x20000720
 80067c4:	200006a8 	.word	0x200006a8
 80067c8:	080079e8 	.word	0x080079e8

080067cc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80067cc:	b480      	push	{r7}
 80067ce:	b085      	sub	sp, #20
 80067d0:	af00      	add	r7, sp, #0
 80067d2:	60f8      	str	r0, [r7, #12]
 80067d4:	60b9      	str	r1, [r7, #8]
 80067d6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	3b04      	subs	r3, #4
 80067dc:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80067e4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	3b04      	subs	r3, #4
 80067ea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80067ec:	68bb      	ldr	r3, [r7, #8]
 80067ee:	f023 0201 	bic.w	r2, r3, #1
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	3b04      	subs	r3, #4
 80067fa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80067fc:	4a08      	ldr	r2, [pc, #32]	; (8006820 <pxPortInitialiseStack+0x54>)
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	3b14      	subs	r3, #20
 8006806:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006808:	687a      	ldr	r2, [r7, #4]
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	3b20      	subs	r3, #32
 8006812:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006814:	68fb      	ldr	r3, [r7, #12]
}
 8006816:	4618      	mov	r0, r3
 8006818:	3714      	adds	r7, #20
 800681a:	46bd      	mov	sp, r7
 800681c:	bc80      	pop	{r7}
 800681e:	4770      	bx	lr
 8006820:	08006825 	.word	0x08006825

08006824 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006824:	b480      	push	{r7}
 8006826:	b085      	sub	sp, #20
 8006828:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800682a:	2300      	movs	r3, #0
 800682c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800682e:	4b10      	ldr	r3, [pc, #64]	; (8006870 <prvTaskExitError+0x4c>)
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006836:	d009      	beq.n	800684c <prvTaskExitError+0x28>
 8006838:	f04f 0350 	mov.w	r3, #80	; 0x50
 800683c:	f383 8811 	msr	BASEPRI, r3
 8006840:	f3bf 8f6f 	isb	sy
 8006844:	f3bf 8f4f 	dsb	sy
 8006848:	60fb      	str	r3, [r7, #12]
 800684a:	e7fe      	b.n	800684a <prvTaskExitError+0x26>
 800684c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006850:	f383 8811 	msr	BASEPRI, r3
 8006854:	f3bf 8f6f 	isb	sy
 8006858:	f3bf 8f4f 	dsb	sy
 800685c:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800685e:	bf00      	nop
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	2b00      	cmp	r3, #0
 8006864:	d0fc      	beq.n	8006860 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006866:	bf00      	nop
 8006868:	3714      	adds	r7, #20
 800686a:	46bd      	mov	sp, r7
 800686c:	bc80      	pop	{r7}
 800686e:	4770      	bx	lr
 8006870:	2000000c 	.word	0x2000000c
	...

08006880 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006880:	4b07      	ldr	r3, [pc, #28]	; (80068a0 <pxCurrentTCBConst2>)
 8006882:	6819      	ldr	r1, [r3, #0]
 8006884:	6808      	ldr	r0, [r1, #0]
 8006886:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800688a:	f380 8809 	msr	PSP, r0
 800688e:	f3bf 8f6f 	isb	sy
 8006892:	f04f 0000 	mov.w	r0, #0
 8006896:	f380 8811 	msr	BASEPRI, r0
 800689a:	f04e 0e0d 	orr.w	lr, lr, #13
 800689e:	4770      	bx	lr

080068a0 <pxCurrentTCBConst2>:
 80068a0:	20000540 	.word	0x20000540
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80068a4:	bf00      	nop
 80068a6:	bf00      	nop

080068a8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 80068a8:	4806      	ldr	r0, [pc, #24]	; (80068c4 <prvPortStartFirstTask+0x1c>)
 80068aa:	6800      	ldr	r0, [r0, #0]
 80068ac:	6800      	ldr	r0, [r0, #0]
 80068ae:	f380 8808 	msr	MSP, r0
 80068b2:	b662      	cpsie	i
 80068b4:	b661      	cpsie	f
 80068b6:	f3bf 8f4f 	dsb	sy
 80068ba:	f3bf 8f6f 	isb	sy
 80068be:	df00      	svc	0
 80068c0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80068c2:	bf00      	nop
 80068c4:	e000ed08 	.word	0xe000ed08

080068c8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80068c8:	b580      	push	{r7, lr}
 80068ca:	b084      	sub	sp, #16
 80068cc:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80068ce:	4b31      	ldr	r3, [pc, #196]	; (8006994 <xPortStartScheduler+0xcc>)
 80068d0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	781b      	ldrb	r3, [r3, #0]
 80068d6:	b2db      	uxtb	r3, r3
 80068d8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	22ff      	movs	r2, #255	; 0xff
 80068de:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	781b      	ldrb	r3, [r3, #0]
 80068e4:	b2db      	uxtb	r3, r3
 80068e6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80068e8:	78fb      	ldrb	r3, [r7, #3]
 80068ea:	b2db      	uxtb	r3, r3
 80068ec:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80068f0:	b2da      	uxtb	r2, r3
 80068f2:	4b29      	ldr	r3, [pc, #164]	; (8006998 <xPortStartScheduler+0xd0>)
 80068f4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80068f6:	4b29      	ldr	r3, [pc, #164]	; (800699c <xPortStartScheduler+0xd4>)
 80068f8:	2207      	movs	r2, #7
 80068fa:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80068fc:	e009      	b.n	8006912 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80068fe:	4b27      	ldr	r3, [pc, #156]	; (800699c <xPortStartScheduler+0xd4>)
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	3b01      	subs	r3, #1
 8006904:	4a25      	ldr	r2, [pc, #148]	; (800699c <xPortStartScheduler+0xd4>)
 8006906:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006908:	78fb      	ldrb	r3, [r7, #3]
 800690a:	b2db      	uxtb	r3, r3
 800690c:	005b      	lsls	r3, r3, #1
 800690e:	b2db      	uxtb	r3, r3
 8006910:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006912:	78fb      	ldrb	r3, [r7, #3]
 8006914:	b2db      	uxtb	r3, r3
 8006916:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800691a:	2b80      	cmp	r3, #128	; 0x80
 800691c:	d0ef      	beq.n	80068fe <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800691e:	4b1f      	ldr	r3, [pc, #124]	; (800699c <xPortStartScheduler+0xd4>)
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	f1c3 0307 	rsb	r3, r3, #7
 8006926:	2b04      	cmp	r3, #4
 8006928:	d009      	beq.n	800693e <xPortStartScheduler+0x76>
 800692a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800692e:	f383 8811 	msr	BASEPRI, r3
 8006932:	f3bf 8f6f 	isb	sy
 8006936:	f3bf 8f4f 	dsb	sy
 800693a:	60bb      	str	r3, [r7, #8]
 800693c:	e7fe      	b.n	800693c <xPortStartScheduler+0x74>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800693e:	4b17      	ldr	r3, [pc, #92]	; (800699c <xPortStartScheduler+0xd4>)
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	021b      	lsls	r3, r3, #8
 8006944:	4a15      	ldr	r2, [pc, #84]	; (800699c <xPortStartScheduler+0xd4>)
 8006946:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006948:	4b14      	ldr	r3, [pc, #80]	; (800699c <xPortStartScheduler+0xd4>)
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006950:	4a12      	ldr	r2, [pc, #72]	; (800699c <xPortStartScheduler+0xd4>)
 8006952:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	b2da      	uxtb	r2, r3
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800695c:	4b10      	ldr	r3, [pc, #64]	; (80069a0 <xPortStartScheduler+0xd8>)
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	4a0f      	ldr	r2, [pc, #60]	; (80069a0 <xPortStartScheduler+0xd8>)
 8006962:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006966:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006968:	4b0d      	ldr	r3, [pc, #52]	; (80069a0 <xPortStartScheduler+0xd8>)
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	4a0c      	ldr	r2, [pc, #48]	; (80069a0 <xPortStartScheduler+0xd8>)
 800696e:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8006972:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006974:	f000 f8b0 	bl	8006ad8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006978:	4b0a      	ldr	r3, [pc, #40]	; (80069a4 <xPortStartScheduler+0xdc>)
 800697a:	2200      	movs	r2, #0
 800697c:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800697e:	f7ff ff93 	bl	80068a8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006982:	f7fe fef3 	bl	800576c <vTaskSwitchContext>
	prvTaskExitError();
 8006986:	f7ff ff4d 	bl	8006824 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800698a:	2300      	movs	r3, #0
}
 800698c:	4618      	mov	r0, r3
 800698e:	3710      	adds	r7, #16
 8006990:	46bd      	mov	sp, r7
 8006992:	bd80      	pop	{r7, pc}
 8006994:	e000e400 	.word	0xe000e400
 8006998:	20000768 	.word	0x20000768
 800699c:	2000076c 	.word	0x2000076c
 80069a0:	e000ed20 	.word	0xe000ed20
 80069a4:	2000000c 	.word	0x2000000c

080069a8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80069a8:	b480      	push	{r7}
 80069aa:	b083      	sub	sp, #12
 80069ac:	af00      	add	r7, sp, #0
 80069ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069b2:	f383 8811 	msr	BASEPRI, r3
 80069b6:	f3bf 8f6f 	isb	sy
 80069ba:	f3bf 8f4f 	dsb	sy
 80069be:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80069c0:	4b0e      	ldr	r3, [pc, #56]	; (80069fc <vPortEnterCritical+0x54>)
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	3301      	adds	r3, #1
 80069c6:	4a0d      	ldr	r2, [pc, #52]	; (80069fc <vPortEnterCritical+0x54>)
 80069c8:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80069ca:	4b0c      	ldr	r3, [pc, #48]	; (80069fc <vPortEnterCritical+0x54>)
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	2b01      	cmp	r3, #1
 80069d0:	d10e      	bne.n	80069f0 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80069d2:	4b0b      	ldr	r3, [pc, #44]	; (8006a00 <vPortEnterCritical+0x58>)
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	b2db      	uxtb	r3, r3
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d009      	beq.n	80069f0 <vPortEnterCritical+0x48>
 80069dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069e0:	f383 8811 	msr	BASEPRI, r3
 80069e4:	f3bf 8f6f 	isb	sy
 80069e8:	f3bf 8f4f 	dsb	sy
 80069ec:	603b      	str	r3, [r7, #0]
 80069ee:	e7fe      	b.n	80069ee <vPortEnterCritical+0x46>
	}
}
 80069f0:	bf00      	nop
 80069f2:	370c      	adds	r7, #12
 80069f4:	46bd      	mov	sp, r7
 80069f6:	bc80      	pop	{r7}
 80069f8:	4770      	bx	lr
 80069fa:	bf00      	nop
 80069fc:	2000000c 	.word	0x2000000c
 8006a00:	e000ed04 	.word	0xe000ed04

08006a04 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006a04:	b480      	push	{r7}
 8006a06:	b083      	sub	sp, #12
 8006a08:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006a0a:	4b10      	ldr	r3, [pc, #64]	; (8006a4c <vPortExitCritical+0x48>)
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d109      	bne.n	8006a26 <vPortExitCritical+0x22>
 8006a12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a16:	f383 8811 	msr	BASEPRI, r3
 8006a1a:	f3bf 8f6f 	isb	sy
 8006a1e:	f3bf 8f4f 	dsb	sy
 8006a22:	607b      	str	r3, [r7, #4]
 8006a24:	e7fe      	b.n	8006a24 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8006a26:	4b09      	ldr	r3, [pc, #36]	; (8006a4c <vPortExitCritical+0x48>)
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	3b01      	subs	r3, #1
 8006a2c:	4a07      	ldr	r2, [pc, #28]	; (8006a4c <vPortExitCritical+0x48>)
 8006a2e:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006a30:	4b06      	ldr	r3, [pc, #24]	; (8006a4c <vPortExitCritical+0x48>)
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d104      	bne.n	8006a42 <vPortExitCritical+0x3e>
 8006a38:	2300      	movs	r3, #0
 8006a3a:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006a3c:	683b      	ldr	r3, [r7, #0]
 8006a3e:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8006a42:	bf00      	nop
 8006a44:	370c      	adds	r7, #12
 8006a46:	46bd      	mov	sp, r7
 8006a48:	bc80      	pop	{r7}
 8006a4a:	4770      	bx	lr
 8006a4c:	2000000c 	.word	0x2000000c

08006a50 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006a50:	f3ef 8009 	mrs	r0, PSP
 8006a54:	f3bf 8f6f 	isb	sy
 8006a58:	4b0d      	ldr	r3, [pc, #52]	; (8006a90 <pxCurrentTCBConst>)
 8006a5a:	681a      	ldr	r2, [r3, #0]
 8006a5c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8006a60:	6010      	str	r0, [r2, #0]
 8006a62:	e92d 4008 	stmdb	sp!, {r3, lr}
 8006a66:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006a6a:	f380 8811 	msr	BASEPRI, r0
 8006a6e:	f7fe fe7d 	bl	800576c <vTaskSwitchContext>
 8006a72:	f04f 0000 	mov.w	r0, #0
 8006a76:	f380 8811 	msr	BASEPRI, r0
 8006a7a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8006a7e:	6819      	ldr	r1, [r3, #0]
 8006a80:	6808      	ldr	r0, [r1, #0]
 8006a82:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8006a86:	f380 8809 	msr	PSP, r0
 8006a8a:	f3bf 8f6f 	isb	sy
 8006a8e:	4770      	bx	lr

08006a90 <pxCurrentTCBConst>:
 8006a90:	20000540 	.word	0x20000540
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006a94:	bf00      	nop
 8006a96:	bf00      	nop

08006a98 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006a98:	b580      	push	{r7, lr}
 8006a9a:	b082      	sub	sp, #8
 8006a9c:	af00      	add	r7, sp, #0
	__asm volatile
 8006a9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006aa2:	f383 8811 	msr	BASEPRI, r3
 8006aa6:	f3bf 8f6f 	isb	sy
 8006aaa:	f3bf 8f4f 	dsb	sy
 8006aae:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006ab0:	f7fe fda0 	bl	80055f4 <xTaskIncrementTick>
 8006ab4:	4603      	mov	r3, r0
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d003      	beq.n	8006ac2 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006aba:	4b06      	ldr	r3, [pc, #24]	; (8006ad4 <SysTick_Handler+0x3c>)
 8006abc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006ac0:	601a      	str	r2, [r3, #0]
 8006ac2:	2300      	movs	r3, #0
 8006ac4:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006ac6:	683b      	ldr	r3, [r7, #0]
 8006ac8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8006acc:	bf00      	nop
 8006ace:	3708      	adds	r7, #8
 8006ad0:	46bd      	mov	sp, r7
 8006ad2:	bd80      	pop	{r7, pc}
 8006ad4:	e000ed04 	.word	0xe000ed04

08006ad8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006ad8:	b480      	push	{r7}
 8006ada:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006adc:	4b0a      	ldr	r3, [pc, #40]	; (8006b08 <vPortSetupTimerInterrupt+0x30>)
 8006ade:	2200      	movs	r2, #0
 8006ae0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006ae2:	4b0a      	ldr	r3, [pc, #40]	; (8006b0c <vPortSetupTimerInterrupt+0x34>)
 8006ae4:	2200      	movs	r2, #0
 8006ae6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006ae8:	4b09      	ldr	r3, [pc, #36]	; (8006b10 <vPortSetupTimerInterrupt+0x38>)
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	4a09      	ldr	r2, [pc, #36]	; (8006b14 <vPortSetupTimerInterrupt+0x3c>)
 8006aee:	fba2 2303 	umull	r2, r3, r2, r3
 8006af2:	099b      	lsrs	r3, r3, #6
 8006af4:	4a08      	ldr	r2, [pc, #32]	; (8006b18 <vPortSetupTimerInterrupt+0x40>)
 8006af6:	3b01      	subs	r3, #1
 8006af8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006afa:	4b03      	ldr	r3, [pc, #12]	; (8006b08 <vPortSetupTimerInterrupt+0x30>)
 8006afc:	2207      	movs	r2, #7
 8006afe:	601a      	str	r2, [r3, #0]
}
 8006b00:	bf00      	nop
 8006b02:	46bd      	mov	sp, r7
 8006b04:	bc80      	pop	{r7}
 8006b06:	4770      	bx	lr
 8006b08:	e000e010 	.word	0xe000e010
 8006b0c:	e000e018 	.word	0xe000e018
 8006b10:	20000000 	.word	0x20000000
 8006b14:	10624dd3 	.word	0x10624dd3
 8006b18:	e000e014 	.word	0xe000e014

08006b1c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006b1c:	b480      	push	{r7}
 8006b1e:	b085      	sub	sp, #20
 8006b20:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8006b22:	f3ef 8305 	mrs	r3, IPSR
 8006b26:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	2b0f      	cmp	r3, #15
 8006b2c:	d913      	bls.n	8006b56 <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8006b2e:	4a15      	ldr	r2, [pc, #84]	; (8006b84 <vPortValidateInterruptPriority+0x68>)
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	4413      	add	r3, r2
 8006b34:	781b      	ldrb	r3, [r3, #0]
 8006b36:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006b38:	4b13      	ldr	r3, [pc, #76]	; (8006b88 <vPortValidateInterruptPriority+0x6c>)
 8006b3a:	781b      	ldrb	r3, [r3, #0]
 8006b3c:	7afa      	ldrb	r2, [r7, #11]
 8006b3e:	429a      	cmp	r2, r3
 8006b40:	d209      	bcs.n	8006b56 <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 8006b42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b46:	f383 8811 	msr	BASEPRI, r3
 8006b4a:	f3bf 8f6f 	isb	sy
 8006b4e:	f3bf 8f4f 	dsb	sy
 8006b52:	607b      	str	r3, [r7, #4]
 8006b54:	e7fe      	b.n	8006b54 <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006b56:	4b0d      	ldr	r3, [pc, #52]	; (8006b8c <vPortValidateInterruptPriority+0x70>)
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006b5e:	4b0c      	ldr	r3, [pc, #48]	; (8006b90 <vPortValidateInterruptPriority+0x74>)
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	429a      	cmp	r2, r3
 8006b64:	d909      	bls.n	8006b7a <vPortValidateInterruptPriority+0x5e>
 8006b66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b6a:	f383 8811 	msr	BASEPRI, r3
 8006b6e:	f3bf 8f6f 	isb	sy
 8006b72:	f3bf 8f4f 	dsb	sy
 8006b76:	603b      	str	r3, [r7, #0]
 8006b78:	e7fe      	b.n	8006b78 <vPortValidateInterruptPriority+0x5c>
	}
 8006b7a:	bf00      	nop
 8006b7c:	3714      	adds	r7, #20
 8006b7e:	46bd      	mov	sp, r7
 8006b80:	bc80      	pop	{r7}
 8006b82:	4770      	bx	lr
 8006b84:	e000e3f0 	.word	0xe000e3f0
 8006b88:	20000768 	.word	0x20000768
 8006b8c:	e000ed0c 	.word	0xe000ed0c
 8006b90:	2000076c 	.word	0x2000076c

08006b94 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006b94:	b580      	push	{r7, lr}
 8006b96:	b08a      	sub	sp, #40	; 0x28
 8006b98:	af00      	add	r7, sp, #0
 8006b9a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006b9c:	2300      	movs	r3, #0
 8006b9e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006ba0:	f7fe fc70 	bl	8005484 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006ba4:	4b59      	ldr	r3, [pc, #356]	; (8006d0c <pvPortMalloc+0x178>)
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d101      	bne.n	8006bb0 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006bac:	f000 f910 	bl	8006dd0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006bb0:	4b57      	ldr	r3, [pc, #348]	; (8006d10 <pvPortMalloc+0x17c>)
 8006bb2:	681a      	ldr	r2, [r3, #0]
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	4013      	ands	r3, r2
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	f040 808c 	bne.w	8006cd6 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d01c      	beq.n	8006bfe <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8006bc4:	2208      	movs	r2, #8
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	4413      	add	r3, r2
 8006bca:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	f003 0307 	and.w	r3, r3, #7
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d013      	beq.n	8006bfe <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	f023 0307 	bic.w	r3, r3, #7
 8006bdc:	3308      	adds	r3, #8
 8006bde:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	f003 0307 	and.w	r3, r3, #7
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d009      	beq.n	8006bfe <pvPortMalloc+0x6a>
 8006bea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bee:	f383 8811 	msr	BASEPRI, r3
 8006bf2:	f3bf 8f6f 	isb	sy
 8006bf6:	f3bf 8f4f 	dsb	sy
 8006bfa:	617b      	str	r3, [r7, #20]
 8006bfc:	e7fe      	b.n	8006bfc <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d068      	beq.n	8006cd6 <pvPortMalloc+0x142>
 8006c04:	4b43      	ldr	r3, [pc, #268]	; (8006d14 <pvPortMalloc+0x180>)
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	687a      	ldr	r2, [r7, #4]
 8006c0a:	429a      	cmp	r2, r3
 8006c0c:	d863      	bhi.n	8006cd6 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006c0e:	4b42      	ldr	r3, [pc, #264]	; (8006d18 <pvPortMalloc+0x184>)
 8006c10:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006c12:	4b41      	ldr	r3, [pc, #260]	; (8006d18 <pvPortMalloc+0x184>)
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006c18:	e004      	b.n	8006c24 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8006c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c1c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006c1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006c24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c26:	685b      	ldr	r3, [r3, #4]
 8006c28:	687a      	ldr	r2, [r7, #4]
 8006c2a:	429a      	cmp	r2, r3
 8006c2c:	d903      	bls.n	8006c36 <pvPortMalloc+0xa2>
 8006c2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d1f1      	bne.n	8006c1a <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006c36:	4b35      	ldr	r3, [pc, #212]	; (8006d0c <pvPortMalloc+0x178>)
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006c3c:	429a      	cmp	r2, r3
 8006c3e:	d04a      	beq.n	8006cd6 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006c40:	6a3b      	ldr	r3, [r7, #32]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	2208      	movs	r2, #8
 8006c46:	4413      	add	r3, r2
 8006c48:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006c4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c4c:	681a      	ldr	r2, [r3, #0]
 8006c4e:	6a3b      	ldr	r3, [r7, #32]
 8006c50:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006c52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c54:	685a      	ldr	r2, [r3, #4]
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	1ad2      	subs	r2, r2, r3
 8006c5a:	2308      	movs	r3, #8
 8006c5c:	005b      	lsls	r3, r3, #1
 8006c5e:	429a      	cmp	r2, r3
 8006c60:	d91e      	bls.n	8006ca0 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006c62:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	4413      	add	r3, r2
 8006c68:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006c6a:	69bb      	ldr	r3, [r7, #24]
 8006c6c:	f003 0307 	and.w	r3, r3, #7
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d009      	beq.n	8006c88 <pvPortMalloc+0xf4>
 8006c74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c78:	f383 8811 	msr	BASEPRI, r3
 8006c7c:	f3bf 8f6f 	isb	sy
 8006c80:	f3bf 8f4f 	dsb	sy
 8006c84:	613b      	str	r3, [r7, #16]
 8006c86:	e7fe      	b.n	8006c86 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006c88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c8a:	685a      	ldr	r2, [r3, #4]
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	1ad2      	subs	r2, r2, r3
 8006c90:	69bb      	ldr	r3, [r7, #24]
 8006c92:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006c94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c96:	687a      	ldr	r2, [r7, #4]
 8006c98:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006c9a:	69b8      	ldr	r0, [r7, #24]
 8006c9c:	f000 f8fa 	bl	8006e94 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006ca0:	4b1c      	ldr	r3, [pc, #112]	; (8006d14 <pvPortMalloc+0x180>)
 8006ca2:	681a      	ldr	r2, [r3, #0]
 8006ca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ca6:	685b      	ldr	r3, [r3, #4]
 8006ca8:	1ad3      	subs	r3, r2, r3
 8006caa:	4a1a      	ldr	r2, [pc, #104]	; (8006d14 <pvPortMalloc+0x180>)
 8006cac:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006cae:	4b19      	ldr	r3, [pc, #100]	; (8006d14 <pvPortMalloc+0x180>)
 8006cb0:	681a      	ldr	r2, [r3, #0]
 8006cb2:	4b1a      	ldr	r3, [pc, #104]	; (8006d1c <pvPortMalloc+0x188>)
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	429a      	cmp	r2, r3
 8006cb8:	d203      	bcs.n	8006cc2 <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006cba:	4b16      	ldr	r3, [pc, #88]	; (8006d14 <pvPortMalloc+0x180>)
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	4a17      	ldr	r2, [pc, #92]	; (8006d1c <pvPortMalloc+0x188>)
 8006cc0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006cc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cc4:	685a      	ldr	r2, [r3, #4]
 8006cc6:	4b12      	ldr	r3, [pc, #72]	; (8006d10 <pvPortMalloc+0x17c>)
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	431a      	orrs	r2, r3
 8006ccc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cce:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006cd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cd2:	2200      	movs	r2, #0
 8006cd4:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006cd6:	f7fe fbe3 	bl	80054a0 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 8006cda:	69fb      	ldr	r3, [r7, #28]
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d101      	bne.n	8006ce4 <pvPortMalloc+0x150>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 8006ce0:	f7f9 fa48 	bl	8000174 <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006ce4:	69fb      	ldr	r3, [r7, #28]
 8006ce6:	f003 0307 	and.w	r3, r3, #7
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d009      	beq.n	8006d02 <pvPortMalloc+0x16e>
 8006cee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cf2:	f383 8811 	msr	BASEPRI, r3
 8006cf6:	f3bf 8f6f 	isb	sy
 8006cfa:	f3bf 8f4f 	dsb	sy
 8006cfe:	60fb      	str	r3, [r7, #12]
 8006d00:	e7fe      	b.n	8006d00 <pvPortMalloc+0x16c>
	return pvReturn;
 8006d02:	69fb      	ldr	r3, [r7, #28]
}
 8006d04:	4618      	mov	r0, r3
 8006d06:	3728      	adds	r7, #40	; 0x28
 8006d08:	46bd      	mov	sp, r7
 8006d0a:	bd80      	pop	{r7, pc}
 8006d0c:	20001378 	.word	0x20001378
 8006d10:	20001384 	.word	0x20001384
 8006d14:	2000137c 	.word	0x2000137c
 8006d18:	20001370 	.word	0x20001370
 8006d1c:	20001380 	.word	0x20001380

08006d20 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006d20:	b580      	push	{r7, lr}
 8006d22:	b086      	sub	sp, #24
 8006d24:	af00      	add	r7, sp, #0
 8006d26:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d046      	beq.n	8006dc0 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006d32:	2308      	movs	r3, #8
 8006d34:	425b      	negs	r3, r3
 8006d36:	697a      	ldr	r2, [r7, #20]
 8006d38:	4413      	add	r3, r2
 8006d3a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006d3c:	697b      	ldr	r3, [r7, #20]
 8006d3e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006d40:	693b      	ldr	r3, [r7, #16]
 8006d42:	685a      	ldr	r2, [r3, #4]
 8006d44:	4b20      	ldr	r3, [pc, #128]	; (8006dc8 <vPortFree+0xa8>)
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	4013      	ands	r3, r2
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d109      	bne.n	8006d62 <vPortFree+0x42>
 8006d4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d52:	f383 8811 	msr	BASEPRI, r3
 8006d56:	f3bf 8f6f 	isb	sy
 8006d5a:	f3bf 8f4f 	dsb	sy
 8006d5e:	60fb      	str	r3, [r7, #12]
 8006d60:	e7fe      	b.n	8006d60 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006d62:	693b      	ldr	r3, [r7, #16]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d009      	beq.n	8006d7e <vPortFree+0x5e>
 8006d6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d6e:	f383 8811 	msr	BASEPRI, r3
 8006d72:	f3bf 8f6f 	isb	sy
 8006d76:	f3bf 8f4f 	dsb	sy
 8006d7a:	60bb      	str	r3, [r7, #8]
 8006d7c:	e7fe      	b.n	8006d7c <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006d7e:	693b      	ldr	r3, [r7, #16]
 8006d80:	685a      	ldr	r2, [r3, #4]
 8006d82:	4b11      	ldr	r3, [pc, #68]	; (8006dc8 <vPortFree+0xa8>)
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	4013      	ands	r3, r2
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d019      	beq.n	8006dc0 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006d8c:	693b      	ldr	r3, [r7, #16]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d115      	bne.n	8006dc0 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006d94:	693b      	ldr	r3, [r7, #16]
 8006d96:	685a      	ldr	r2, [r3, #4]
 8006d98:	4b0b      	ldr	r3, [pc, #44]	; (8006dc8 <vPortFree+0xa8>)
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	43db      	mvns	r3, r3
 8006d9e:	401a      	ands	r2, r3
 8006da0:	693b      	ldr	r3, [r7, #16]
 8006da2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006da4:	f7fe fb6e 	bl	8005484 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006da8:	693b      	ldr	r3, [r7, #16]
 8006daa:	685a      	ldr	r2, [r3, #4]
 8006dac:	4b07      	ldr	r3, [pc, #28]	; (8006dcc <vPortFree+0xac>)
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	4413      	add	r3, r2
 8006db2:	4a06      	ldr	r2, [pc, #24]	; (8006dcc <vPortFree+0xac>)
 8006db4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006db6:	6938      	ldr	r0, [r7, #16]
 8006db8:	f000 f86c 	bl	8006e94 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8006dbc:	f7fe fb70 	bl	80054a0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006dc0:	bf00      	nop
 8006dc2:	3718      	adds	r7, #24
 8006dc4:	46bd      	mov	sp, r7
 8006dc6:	bd80      	pop	{r7, pc}
 8006dc8:	20001384 	.word	0x20001384
 8006dcc:	2000137c 	.word	0x2000137c

08006dd0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006dd0:	b480      	push	{r7}
 8006dd2:	b085      	sub	sp, #20
 8006dd4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006dd6:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8006dda:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006ddc:	4b27      	ldr	r3, [pc, #156]	; (8006e7c <prvHeapInit+0xac>)
 8006dde:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	f003 0307 	and.w	r3, r3, #7
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d00c      	beq.n	8006e04 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	3307      	adds	r3, #7
 8006dee:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	f023 0307 	bic.w	r3, r3, #7
 8006df6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006df8:	68ba      	ldr	r2, [r7, #8]
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	1ad3      	subs	r3, r2, r3
 8006dfe:	4a1f      	ldr	r2, [pc, #124]	; (8006e7c <prvHeapInit+0xac>)
 8006e00:	4413      	add	r3, r2
 8006e02:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006e08:	4a1d      	ldr	r2, [pc, #116]	; (8006e80 <prvHeapInit+0xb0>)
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006e0e:	4b1c      	ldr	r3, [pc, #112]	; (8006e80 <prvHeapInit+0xb0>)
 8006e10:	2200      	movs	r2, #0
 8006e12:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	68ba      	ldr	r2, [r7, #8]
 8006e18:	4413      	add	r3, r2
 8006e1a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006e1c:	2208      	movs	r2, #8
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	1a9b      	subs	r3, r3, r2
 8006e22:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	f023 0307 	bic.w	r3, r3, #7
 8006e2a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	4a15      	ldr	r2, [pc, #84]	; (8006e84 <prvHeapInit+0xb4>)
 8006e30:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006e32:	4b14      	ldr	r3, [pc, #80]	; (8006e84 <prvHeapInit+0xb4>)
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	2200      	movs	r2, #0
 8006e38:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006e3a:	4b12      	ldr	r3, [pc, #72]	; (8006e84 <prvHeapInit+0xb4>)
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	2200      	movs	r2, #0
 8006e40:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006e46:	683b      	ldr	r3, [r7, #0]
 8006e48:	68fa      	ldr	r2, [r7, #12]
 8006e4a:	1ad2      	subs	r2, r2, r3
 8006e4c:	683b      	ldr	r3, [r7, #0]
 8006e4e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006e50:	4b0c      	ldr	r3, [pc, #48]	; (8006e84 <prvHeapInit+0xb4>)
 8006e52:	681a      	ldr	r2, [r3, #0]
 8006e54:	683b      	ldr	r3, [r7, #0]
 8006e56:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006e58:	683b      	ldr	r3, [r7, #0]
 8006e5a:	685b      	ldr	r3, [r3, #4]
 8006e5c:	4a0a      	ldr	r2, [pc, #40]	; (8006e88 <prvHeapInit+0xb8>)
 8006e5e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006e60:	683b      	ldr	r3, [r7, #0]
 8006e62:	685b      	ldr	r3, [r3, #4]
 8006e64:	4a09      	ldr	r2, [pc, #36]	; (8006e8c <prvHeapInit+0xbc>)
 8006e66:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006e68:	4b09      	ldr	r3, [pc, #36]	; (8006e90 <prvHeapInit+0xc0>)
 8006e6a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006e6e:	601a      	str	r2, [r3, #0]
}
 8006e70:	bf00      	nop
 8006e72:	3714      	adds	r7, #20
 8006e74:	46bd      	mov	sp, r7
 8006e76:	bc80      	pop	{r7}
 8006e78:	4770      	bx	lr
 8006e7a:	bf00      	nop
 8006e7c:	20000770 	.word	0x20000770
 8006e80:	20001370 	.word	0x20001370
 8006e84:	20001378 	.word	0x20001378
 8006e88:	20001380 	.word	0x20001380
 8006e8c:	2000137c 	.word	0x2000137c
 8006e90:	20001384 	.word	0x20001384

08006e94 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006e94:	b480      	push	{r7}
 8006e96:	b085      	sub	sp, #20
 8006e98:	af00      	add	r7, sp, #0
 8006e9a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006e9c:	4b27      	ldr	r3, [pc, #156]	; (8006f3c <prvInsertBlockIntoFreeList+0xa8>)
 8006e9e:	60fb      	str	r3, [r7, #12]
 8006ea0:	e002      	b.n	8006ea8 <prvInsertBlockIntoFreeList+0x14>
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	60fb      	str	r3, [r7, #12]
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	687a      	ldr	r2, [r7, #4]
 8006eae:	429a      	cmp	r2, r3
 8006eb0:	d8f7      	bhi.n	8006ea2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	685b      	ldr	r3, [r3, #4]
 8006eba:	68ba      	ldr	r2, [r7, #8]
 8006ebc:	4413      	add	r3, r2
 8006ebe:	687a      	ldr	r2, [r7, #4]
 8006ec0:	429a      	cmp	r2, r3
 8006ec2:	d108      	bne.n	8006ed6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	685a      	ldr	r2, [r3, #4]
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	685b      	ldr	r3, [r3, #4]
 8006ecc:	441a      	add	r2, r3
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	685b      	ldr	r3, [r3, #4]
 8006ede:	68ba      	ldr	r2, [r7, #8]
 8006ee0:	441a      	add	r2, r3
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	429a      	cmp	r2, r3
 8006ee8:	d118      	bne.n	8006f1c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	681a      	ldr	r2, [r3, #0]
 8006eee:	4b14      	ldr	r3, [pc, #80]	; (8006f40 <prvInsertBlockIntoFreeList+0xac>)
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	429a      	cmp	r2, r3
 8006ef4:	d00d      	beq.n	8006f12 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	685a      	ldr	r2, [r3, #4]
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	685b      	ldr	r3, [r3, #4]
 8006f00:	441a      	add	r2, r3
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	681a      	ldr	r2, [r3, #0]
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	601a      	str	r2, [r3, #0]
 8006f10:	e008      	b.n	8006f24 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006f12:	4b0b      	ldr	r3, [pc, #44]	; (8006f40 <prvInsertBlockIntoFreeList+0xac>)
 8006f14:	681a      	ldr	r2, [r3, #0]
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	601a      	str	r2, [r3, #0]
 8006f1a:	e003      	b.n	8006f24 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	681a      	ldr	r2, [r3, #0]
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006f24:	68fa      	ldr	r2, [r7, #12]
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	429a      	cmp	r2, r3
 8006f2a:	d002      	beq.n	8006f32 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	687a      	ldr	r2, [r7, #4]
 8006f30:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006f32:	bf00      	nop
 8006f34:	3714      	adds	r7, #20
 8006f36:	46bd      	mov	sp, r7
 8006f38:	bc80      	pop	{r7}
 8006f3a:	4770      	bx	lr
 8006f3c:	20001370 	.word	0x20001370
 8006f40:	20001378 	.word	0x20001378

08006f44 <__errno>:
 8006f44:	4b01      	ldr	r3, [pc, #4]	; (8006f4c <__errno+0x8>)
 8006f46:	6818      	ldr	r0, [r3, #0]
 8006f48:	4770      	bx	lr
 8006f4a:	bf00      	nop
 8006f4c:	20000010 	.word	0x20000010

08006f50 <__libc_init_array>:
 8006f50:	b570      	push	{r4, r5, r6, lr}
 8006f52:	2500      	movs	r5, #0
 8006f54:	4e0c      	ldr	r6, [pc, #48]	; (8006f88 <__libc_init_array+0x38>)
 8006f56:	4c0d      	ldr	r4, [pc, #52]	; (8006f8c <__libc_init_array+0x3c>)
 8006f58:	1ba4      	subs	r4, r4, r6
 8006f5a:	10a4      	asrs	r4, r4, #2
 8006f5c:	42a5      	cmp	r5, r4
 8006f5e:	d109      	bne.n	8006f74 <__libc_init_array+0x24>
 8006f60:	f000 fc6a 	bl	8007838 <_init>
 8006f64:	2500      	movs	r5, #0
 8006f66:	4e0a      	ldr	r6, [pc, #40]	; (8006f90 <__libc_init_array+0x40>)
 8006f68:	4c0a      	ldr	r4, [pc, #40]	; (8006f94 <__libc_init_array+0x44>)
 8006f6a:	1ba4      	subs	r4, r4, r6
 8006f6c:	10a4      	asrs	r4, r4, #2
 8006f6e:	42a5      	cmp	r5, r4
 8006f70:	d105      	bne.n	8006f7e <__libc_init_array+0x2e>
 8006f72:	bd70      	pop	{r4, r5, r6, pc}
 8006f74:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006f78:	4798      	blx	r3
 8006f7a:	3501      	adds	r5, #1
 8006f7c:	e7ee      	b.n	8006f5c <__libc_init_array+0xc>
 8006f7e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006f82:	4798      	blx	r3
 8006f84:	3501      	adds	r5, #1
 8006f86:	e7f2      	b.n	8006f6e <__libc_init_array+0x1e>
 8006f88:	08007a60 	.word	0x08007a60
 8006f8c:	08007a60 	.word	0x08007a60
 8006f90:	08007a60 	.word	0x08007a60
 8006f94:	08007a64 	.word	0x08007a64

08006f98 <memcpy>:
 8006f98:	b510      	push	{r4, lr}
 8006f9a:	1e43      	subs	r3, r0, #1
 8006f9c:	440a      	add	r2, r1
 8006f9e:	4291      	cmp	r1, r2
 8006fa0:	d100      	bne.n	8006fa4 <memcpy+0xc>
 8006fa2:	bd10      	pop	{r4, pc}
 8006fa4:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006fa8:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006fac:	e7f7      	b.n	8006f9e <memcpy+0x6>

08006fae <memset>:
 8006fae:	4603      	mov	r3, r0
 8006fb0:	4402      	add	r2, r0
 8006fb2:	4293      	cmp	r3, r2
 8006fb4:	d100      	bne.n	8006fb8 <memset+0xa>
 8006fb6:	4770      	bx	lr
 8006fb8:	f803 1b01 	strb.w	r1, [r3], #1
 8006fbc:	e7f9      	b.n	8006fb2 <memset+0x4>
	...

08006fc0 <sniprintf>:
 8006fc0:	b40c      	push	{r2, r3}
 8006fc2:	b530      	push	{r4, r5, lr}
 8006fc4:	4b17      	ldr	r3, [pc, #92]	; (8007024 <sniprintf+0x64>)
 8006fc6:	1e0c      	subs	r4, r1, #0
 8006fc8:	b09d      	sub	sp, #116	; 0x74
 8006fca:	681d      	ldr	r5, [r3, #0]
 8006fcc:	da08      	bge.n	8006fe0 <sniprintf+0x20>
 8006fce:	238b      	movs	r3, #139	; 0x8b
 8006fd0:	f04f 30ff 	mov.w	r0, #4294967295
 8006fd4:	602b      	str	r3, [r5, #0]
 8006fd6:	b01d      	add	sp, #116	; 0x74
 8006fd8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006fdc:	b002      	add	sp, #8
 8006fde:	4770      	bx	lr
 8006fe0:	f44f 7302 	mov.w	r3, #520	; 0x208
 8006fe4:	f8ad 3014 	strh.w	r3, [sp, #20]
 8006fe8:	bf0c      	ite	eq
 8006fea:	4623      	moveq	r3, r4
 8006fec:	f104 33ff 	addne.w	r3, r4, #4294967295
 8006ff0:	9304      	str	r3, [sp, #16]
 8006ff2:	9307      	str	r3, [sp, #28]
 8006ff4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006ff8:	9002      	str	r0, [sp, #8]
 8006ffa:	9006      	str	r0, [sp, #24]
 8006ffc:	f8ad 3016 	strh.w	r3, [sp, #22]
 8007000:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8007002:	ab21      	add	r3, sp, #132	; 0x84
 8007004:	a902      	add	r1, sp, #8
 8007006:	4628      	mov	r0, r5
 8007008:	9301      	str	r3, [sp, #4]
 800700a:	f000 f887 	bl	800711c <_svfiprintf_r>
 800700e:	1c43      	adds	r3, r0, #1
 8007010:	bfbc      	itt	lt
 8007012:	238b      	movlt	r3, #139	; 0x8b
 8007014:	602b      	strlt	r3, [r5, #0]
 8007016:	2c00      	cmp	r4, #0
 8007018:	d0dd      	beq.n	8006fd6 <sniprintf+0x16>
 800701a:	2200      	movs	r2, #0
 800701c:	9b02      	ldr	r3, [sp, #8]
 800701e:	701a      	strb	r2, [r3, #0]
 8007020:	e7d9      	b.n	8006fd6 <sniprintf+0x16>
 8007022:	bf00      	nop
 8007024:	20000010 	.word	0x20000010

08007028 <siprintf>:
 8007028:	b40e      	push	{r1, r2, r3}
 800702a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800702e:	b500      	push	{lr}
 8007030:	b09c      	sub	sp, #112	; 0x70
 8007032:	ab1d      	add	r3, sp, #116	; 0x74
 8007034:	9002      	str	r0, [sp, #8]
 8007036:	9006      	str	r0, [sp, #24]
 8007038:	9107      	str	r1, [sp, #28]
 800703a:	9104      	str	r1, [sp, #16]
 800703c:	4808      	ldr	r0, [pc, #32]	; (8007060 <siprintf+0x38>)
 800703e:	4909      	ldr	r1, [pc, #36]	; (8007064 <siprintf+0x3c>)
 8007040:	f853 2b04 	ldr.w	r2, [r3], #4
 8007044:	9105      	str	r1, [sp, #20]
 8007046:	6800      	ldr	r0, [r0, #0]
 8007048:	a902      	add	r1, sp, #8
 800704a:	9301      	str	r3, [sp, #4]
 800704c:	f000 f866 	bl	800711c <_svfiprintf_r>
 8007050:	2200      	movs	r2, #0
 8007052:	9b02      	ldr	r3, [sp, #8]
 8007054:	701a      	strb	r2, [r3, #0]
 8007056:	b01c      	add	sp, #112	; 0x70
 8007058:	f85d eb04 	ldr.w	lr, [sp], #4
 800705c:	b003      	add	sp, #12
 800705e:	4770      	bx	lr
 8007060:	20000010 	.word	0x20000010
 8007064:	ffff0208 	.word	0xffff0208

08007068 <__ssputs_r>:
 8007068:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800706c:	688e      	ldr	r6, [r1, #8]
 800706e:	4682      	mov	sl, r0
 8007070:	429e      	cmp	r6, r3
 8007072:	460c      	mov	r4, r1
 8007074:	4690      	mov	r8, r2
 8007076:	4699      	mov	r9, r3
 8007078:	d837      	bhi.n	80070ea <__ssputs_r+0x82>
 800707a:	898a      	ldrh	r2, [r1, #12]
 800707c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007080:	d031      	beq.n	80070e6 <__ssputs_r+0x7e>
 8007082:	2302      	movs	r3, #2
 8007084:	6825      	ldr	r5, [r4, #0]
 8007086:	6909      	ldr	r1, [r1, #16]
 8007088:	1a6f      	subs	r7, r5, r1
 800708a:	6965      	ldr	r5, [r4, #20]
 800708c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007090:	fb95 f5f3 	sdiv	r5, r5, r3
 8007094:	f109 0301 	add.w	r3, r9, #1
 8007098:	443b      	add	r3, r7
 800709a:	429d      	cmp	r5, r3
 800709c:	bf38      	it	cc
 800709e:	461d      	movcc	r5, r3
 80070a0:	0553      	lsls	r3, r2, #21
 80070a2:	d530      	bpl.n	8007106 <__ssputs_r+0x9e>
 80070a4:	4629      	mov	r1, r5
 80070a6:	f000 fb2d 	bl	8007704 <_malloc_r>
 80070aa:	4606      	mov	r6, r0
 80070ac:	b950      	cbnz	r0, 80070c4 <__ssputs_r+0x5c>
 80070ae:	230c      	movs	r3, #12
 80070b0:	f04f 30ff 	mov.w	r0, #4294967295
 80070b4:	f8ca 3000 	str.w	r3, [sl]
 80070b8:	89a3      	ldrh	r3, [r4, #12]
 80070ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80070be:	81a3      	strh	r3, [r4, #12]
 80070c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80070c4:	463a      	mov	r2, r7
 80070c6:	6921      	ldr	r1, [r4, #16]
 80070c8:	f7ff ff66 	bl	8006f98 <memcpy>
 80070cc:	89a3      	ldrh	r3, [r4, #12]
 80070ce:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80070d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80070d6:	81a3      	strh	r3, [r4, #12]
 80070d8:	6126      	str	r6, [r4, #16]
 80070da:	443e      	add	r6, r7
 80070dc:	6026      	str	r6, [r4, #0]
 80070de:	464e      	mov	r6, r9
 80070e0:	6165      	str	r5, [r4, #20]
 80070e2:	1bed      	subs	r5, r5, r7
 80070e4:	60a5      	str	r5, [r4, #8]
 80070e6:	454e      	cmp	r6, r9
 80070e8:	d900      	bls.n	80070ec <__ssputs_r+0x84>
 80070ea:	464e      	mov	r6, r9
 80070ec:	4632      	mov	r2, r6
 80070ee:	4641      	mov	r1, r8
 80070f0:	6820      	ldr	r0, [r4, #0]
 80070f2:	f000 faa1 	bl	8007638 <memmove>
 80070f6:	68a3      	ldr	r3, [r4, #8]
 80070f8:	2000      	movs	r0, #0
 80070fa:	1b9b      	subs	r3, r3, r6
 80070fc:	60a3      	str	r3, [r4, #8]
 80070fe:	6823      	ldr	r3, [r4, #0]
 8007100:	441e      	add	r6, r3
 8007102:	6026      	str	r6, [r4, #0]
 8007104:	e7dc      	b.n	80070c0 <__ssputs_r+0x58>
 8007106:	462a      	mov	r2, r5
 8007108:	f000 fb56 	bl	80077b8 <_realloc_r>
 800710c:	4606      	mov	r6, r0
 800710e:	2800      	cmp	r0, #0
 8007110:	d1e2      	bne.n	80070d8 <__ssputs_r+0x70>
 8007112:	6921      	ldr	r1, [r4, #16]
 8007114:	4650      	mov	r0, sl
 8007116:	f000 faa9 	bl	800766c <_free_r>
 800711a:	e7c8      	b.n	80070ae <__ssputs_r+0x46>

0800711c <_svfiprintf_r>:
 800711c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007120:	461d      	mov	r5, r3
 8007122:	898b      	ldrh	r3, [r1, #12]
 8007124:	b09d      	sub	sp, #116	; 0x74
 8007126:	061f      	lsls	r7, r3, #24
 8007128:	4680      	mov	r8, r0
 800712a:	460c      	mov	r4, r1
 800712c:	4616      	mov	r6, r2
 800712e:	d50f      	bpl.n	8007150 <_svfiprintf_r+0x34>
 8007130:	690b      	ldr	r3, [r1, #16]
 8007132:	b96b      	cbnz	r3, 8007150 <_svfiprintf_r+0x34>
 8007134:	2140      	movs	r1, #64	; 0x40
 8007136:	f000 fae5 	bl	8007704 <_malloc_r>
 800713a:	6020      	str	r0, [r4, #0]
 800713c:	6120      	str	r0, [r4, #16]
 800713e:	b928      	cbnz	r0, 800714c <_svfiprintf_r+0x30>
 8007140:	230c      	movs	r3, #12
 8007142:	f8c8 3000 	str.w	r3, [r8]
 8007146:	f04f 30ff 	mov.w	r0, #4294967295
 800714a:	e0c8      	b.n	80072de <_svfiprintf_r+0x1c2>
 800714c:	2340      	movs	r3, #64	; 0x40
 800714e:	6163      	str	r3, [r4, #20]
 8007150:	2300      	movs	r3, #0
 8007152:	9309      	str	r3, [sp, #36]	; 0x24
 8007154:	2320      	movs	r3, #32
 8007156:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800715a:	2330      	movs	r3, #48	; 0x30
 800715c:	f04f 0b01 	mov.w	fp, #1
 8007160:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007164:	9503      	str	r5, [sp, #12]
 8007166:	4637      	mov	r7, r6
 8007168:	463d      	mov	r5, r7
 800716a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800716e:	b10b      	cbz	r3, 8007174 <_svfiprintf_r+0x58>
 8007170:	2b25      	cmp	r3, #37	; 0x25
 8007172:	d13e      	bne.n	80071f2 <_svfiprintf_r+0xd6>
 8007174:	ebb7 0a06 	subs.w	sl, r7, r6
 8007178:	d00b      	beq.n	8007192 <_svfiprintf_r+0x76>
 800717a:	4653      	mov	r3, sl
 800717c:	4632      	mov	r2, r6
 800717e:	4621      	mov	r1, r4
 8007180:	4640      	mov	r0, r8
 8007182:	f7ff ff71 	bl	8007068 <__ssputs_r>
 8007186:	3001      	adds	r0, #1
 8007188:	f000 80a4 	beq.w	80072d4 <_svfiprintf_r+0x1b8>
 800718c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800718e:	4453      	add	r3, sl
 8007190:	9309      	str	r3, [sp, #36]	; 0x24
 8007192:	783b      	ldrb	r3, [r7, #0]
 8007194:	2b00      	cmp	r3, #0
 8007196:	f000 809d 	beq.w	80072d4 <_svfiprintf_r+0x1b8>
 800719a:	2300      	movs	r3, #0
 800719c:	f04f 32ff 	mov.w	r2, #4294967295
 80071a0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80071a4:	9304      	str	r3, [sp, #16]
 80071a6:	9307      	str	r3, [sp, #28]
 80071a8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80071ac:	931a      	str	r3, [sp, #104]	; 0x68
 80071ae:	462f      	mov	r7, r5
 80071b0:	2205      	movs	r2, #5
 80071b2:	f817 1b01 	ldrb.w	r1, [r7], #1
 80071b6:	4850      	ldr	r0, [pc, #320]	; (80072f8 <_svfiprintf_r+0x1dc>)
 80071b8:	f000 fa30 	bl	800761c <memchr>
 80071bc:	9b04      	ldr	r3, [sp, #16]
 80071be:	b9d0      	cbnz	r0, 80071f6 <_svfiprintf_r+0xda>
 80071c0:	06d9      	lsls	r1, r3, #27
 80071c2:	bf44      	itt	mi
 80071c4:	2220      	movmi	r2, #32
 80071c6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80071ca:	071a      	lsls	r2, r3, #28
 80071cc:	bf44      	itt	mi
 80071ce:	222b      	movmi	r2, #43	; 0x2b
 80071d0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80071d4:	782a      	ldrb	r2, [r5, #0]
 80071d6:	2a2a      	cmp	r2, #42	; 0x2a
 80071d8:	d015      	beq.n	8007206 <_svfiprintf_r+0xea>
 80071da:	462f      	mov	r7, r5
 80071dc:	2000      	movs	r0, #0
 80071de:	250a      	movs	r5, #10
 80071e0:	9a07      	ldr	r2, [sp, #28]
 80071e2:	4639      	mov	r1, r7
 80071e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80071e8:	3b30      	subs	r3, #48	; 0x30
 80071ea:	2b09      	cmp	r3, #9
 80071ec:	d94d      	bls.n	800728a <_svfiprintf_r+0x16e>
 80071ee:	b1b8      	cbz	r0, 8007220 <_svfiprintf_r+0x104>
 80071f0:	e00f      	b.n	8007212 <_svfiprintf_r+0xf6>
 80071f2:	462f      	mov	r7, r5
 80071f4:	e7b8      	b.n	8007168 <_svfiprintf_r+0x4c>
 80071f6:	4a40      	ldr	r2, [pc, #256]	; (80072f8 <_svfiprintf_r+0x1dc>)
 80071f8:	463d      	mov	r5, r7
 80071fa:	1a80      	subs	r0, r0, r2
 80071fc:	fa0b f000 	lsl.w	r0, fp, r0
 8007200:	4318      	orrs	r0, r3
 8007202:	9004      	str	r0, [sp, #16]
 8007204:	e7d3      	b.n	80071ae <_svfiprintf_r+0x92>
 8007206:	9a03      	ldr	r2, [sp, #12]
 8007208:	1d11      	adds	r1, r2, #4
 800720a:	6812      	ldr	r2, [r2, #0]
 800720c:	9103      	str	r1, [sp, #12]
 800720e:	2a00      	cmp	r2, #0
 8007210:	db01      	blt.n	8007216 <_svfiprintf_r+0xfa>
 8007212:	9207      	str	r2, [sp, #28]
 8007214:	e004      	b.n	8007220 <_svfiprintf_r+0x104>
 8007216:	4252      	negs	r2, r2
 8007218:	f043 0302 	orr.w	r3, r3, #2
 800721c:	9207      	str	r2, [sp, #28]
 800721e:	9304      	str	r3, [sp, #16]
 8007220:	783b      	ldrb	r3, [r7, #0]
 8007222:	2b2e      	cmp	r3, #46	; 0x2e
 8007224:	d10c      	bne.n	8007240 <_svfiprintf_r+0x124>
 8007226:	787b      	ldrb	r3, [r7, #1]
 8007228:	2b2a      	cmp	r3, #42	; 0x2a
 800722a:	d133      	bne.n	8007294 <_svfiprintf_r+0x178>
 800722c:	9b03      	ldr	r3, [sp, #12]
 800722e:	3702      	adds	r7, #2
 8007230:	1d1a      	adds	r2, r3, #4
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	9203      	str	r2, [sp, #12]
 8007236:	2b00      	cmp	r3, #0
 8007238:	bfb8      	it	lt
 800723a:	f04f 33ff 	movlt.w	r3, #4294967295
 800723e:	9305      	str	r3, [sp, #20]
 8007240:	4d2e      	ldr	r5, [pc, #184]	; (80072fc <_svfiprintf_r+0x1e0>)
 8007242:	2203      	movs	r2, #3
 8007244:	7839      	ldrb	r1, [r7, #0]
 8007246:	4628      	mov	r0, r5
 8007248:	f000 f9e8 	bl	800761c <memchr>
 800724c:	b138      	cbz	r0, 800725e <_svfiprintf_r+0x142>
 800724e:	2340      	movs	r3, #64	; 0x40
 8007250:	1b40      	subs	r0, r0, r5
 8007252:	fa03 f000 	lsl.w	r0, r3, r0
 8007256:	9b04      	ldr	r3, [sp, #16]
 8007258:	3701      	adds	r7, #1
 800725a:	4303      	orrs	r3, r0
 800725c:	9304      	str	r3, [sp, #16]
 800725e:	7839      	ldrb	r1, [r7, #0]
 8007260:	2206      	movs	r2, #6
 8007262:	4827      	ldr	r0, [pc, #156]	; (8007300 <_svfiprintf_r+0x1e4>)
 8007264:	1c7e      	adds	r6, r7, #1
 8007266:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800726a:	f000 f9d7 	bl	800761c <memchr>
 800726e:	2800      	cmp	r0, #0
 8007270:	d038      	beq.n	80072e4 <_svfiprintf_r+0x1c8>
 8007272:	4b24      	ldr	r3, [pc, #144]	; (8007304 <_svfiprintf_r+0x1e8>)
 8007274:	bb13      	cbnz	r3, 80072bc <_svfiprintf_r+0x1a0>
 8007276:	9b03      	ldr	r3, [sp, #12]
 8007278:	3307      	adds	r3, #7
 800727a:	f023 0307 	bic.w	r3, r3, #7
 800727e:	3308      	adds	r3, #8
 8007280:	9303      	str	r3, [sp, #12]
 8007282:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007284:	444b      	add	r3, r9
 8007286:	9309      	str	r3, [sp, #36]	; 0x24
 8007288:	e76d      	b.n	8007166 <_svfiprintf_r+0x4a>
 800728a:	fb05 3202 	mla	r2, r5, r2, r3
 800728e:	2001      	movs	r0, #1
 8007290:	460f      	mov	r7, r1
 8007292:	e7a6      	b.n	80071e2 <_svfiprintf_r+0xc6>
 8007294:	2300      	movs	r3, #0
 8007296:	250a      	movs	r5, #10
 8007298:	4619      	mov	r1, r3
 800729a:	3701      	adds	r7, #1
 800729c:	9305      	str	r3, [sp, #20]
 800729e:	4638      	mov	r0, r7
 80072a0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80072a4:	3a30      	subs	r2, #48	; 0x30
 80072a6:	2a09      	cmp	r2, #9
 80072a8:	d903      	bls.n	80072b2 <_svfiprintf_r+0x196>
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d0c8      	beq.n	8007240 <_svfiprintf_r+0x124>
 80072ae:	9105      	str	r1, [sp, #20]
 80072b0:	e7c6      	b.n	8007240 <_svfiprintf_r+0x124>
 80072b2:	fb05 2101 	mla	r1, r5, r1, r2
 80072b6:	2301      	movs	r3, #1
 80072b8:	4607      	mov	r7, r0
 80072ba:	e7f0      	b.n	800729e <_svfiprintf_r+0x182>
 80072bc:	ab03      	add	r3, sp, #12
 80072be:	9300      	str	r3, [sp, #0]
 80072c0:	4622      	mov	r2, r4
 80072c2:	4b11      	ldr	r3, [pc, #68]	; (8007308 <_svfiprintf_r+0x1ec>)
 80072c4:	a904      	add	r1, sp, #16
 80072c6:	4640      	mov	r0, r8
 80072c8:	f3af 8000 	nop.w
 80072cc:	f1b0 3fff 	cmp.w	r0, #4294967295
 80072d0:	4681      	mov	r9, r0
 80072d2:	d1d6      	bne.n	8007282 <_svfiprintf_r+0x166>
 80072d4:	89a3      	ldrh	r3, [r4, #12]
 80072d6:	065b      	lsls	r3, r3, #25
 80072d8:	f53f af35 	bmi.w	8007146 <_svfiprintf_r+0x2a>
 80072dc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80072de:	b01d      	add	sp, #116	; 0x74
 80072e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80072e4:	ab03      	add	r3, sp, #12
 80072e6:	9300      	str	r3, [sp, #0]
 80072e8:	4622      	mov	r2, r4
 80072ea:	4b07      	ldr	r3, [pc, #28]	; (8007308 <_svfiprintf_r+0x1ec>)
 80072ec:	a904      	add	r1, sp, #16
 80072ee:	4640      	mov	r0, r8
 80072f0:	f000 f882 	bl	80073f8 <_printf_i>
 80072f4:	e7ea      	b.n	80072cc <_svfiprintf_r+0x1b0>
 80072f6:	bf00      	nop
 80072f8:	08007a2c 	.word	0x08007a2c
 80072fc:	08007a32 	.word	0x08007a32
 8007300:	08007a36 	.word	0x08007a36
 8007304:	00000000 	.word	0x00000000
 8007308:	08007069 	.word	0x08007069

0800730c <_printf_common>:
 800730c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007310:	4691      	mov	r9, r2
 8007312:	461f      	mov	r7, r3
 8007314:	688a      	ldr	r2, [r1, #8]
 8007316:	690b      	ldr	r3, [r1, #16]
 8007318:	4606      	mov	r6, r0
 800731a:	4293      	cmp	r3, r2
 800731c:	bfb8      	it	lt
 800731e:	4613      	movlt	r3, r2
 8007320:	f8c9 3000 	str.w	r3, [r9]
 8007324:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007328:	460c      	mov	r4, r1
 800732a:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800732e:	b112      	cbz	r2, 8007336 <_printf_common+0x2a>
 8007330:	3301      	adds	r3, #1
 8007332:	f8c9 3000 	str.w	r3, [r9]
 8007336:	6823      	ldr	r3, [r4, #0]
 8007338:	0699      	lsls	r1, r3, #26
 800733a:	bf42      	ittt	mi
 800733c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8007340:	3302      	addmi	r3, #2
 8007342:	f8c9 3000 	strmi.w	r3, [r9]
 8007346:	6825      	ldr	r5, [r4, #0]
 8007348:	f015 0506 	ands.w	r5, r5, #6
 800734c:	d107      	bne.n	800735e <_printf_common+0x52>
 800734e:	f104 0a19 	add.w	sl, r4, #25
 8007352:	68e3      	ldr	r3, [r4, #12]
 8007354:	f8d9 2000 	ldr.w	r2, [r9]
 8007358:	1a9b      	subs	r3, r3, r2
 800735a:	42ab      	cmp	r3, r5
 800735c:	dc29      	bgt.n	80073b2 <_printf_common+0xa6>
 800735e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8007362:	6822      	ldr	r2, [r4, #0]
 8007364:	3300      	adds	r3, #0
 8007366:	bf18      	it	ne
 8007368:	2301      	movne	r3, #1
 800736a:	0692      	lsls	r2, r2, #26
 800736c:	d42e      	bmi.n	80073cc <_printf_common+0xc0>
 800736e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007372:	4639      	mov	r1, r7
 8007374:	4630      	mov	r0, r6
 8007376:	47c0      	blx	r8
 8007378:	3001      	adds	r0, #1
 800737a:	d021      	beq.n	80073c0 <_printf_common+0xb4>
 800737c:	6823      	ldr	r3, [r4, #0]
 800737e:	68e5      	ldr	r5, [r4, #12]
 8007380:	f003 0306 	and.w	r3, r3, #6
 8007384:	2b04      	cmp	r3, #4
 8007386:	bf18      	it	ne
 8007388:	2500      	movne	r5, #0
 800738a:	f8d9 2000 	ldr.w	r2, [r9]
 800738e:	f04f 0900 	mov.w	r9, #0
 8007392:	bf08      	it	eq
 8007394:	1aad      	subeq	r5, r5, r2
 8007396:	68a3      	ldr	r3, [r4, #8]
 8007398:	6922      	ldr	r2, [r4, #16]
 800739a:	bf08      	it	eq
 800739c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80073a0:	4293      	cmp	r3, r2
 80073a2:	bfc4      	itt	gt
 80073a4:	1a9b      	subgt	r3, r3, r2
 80073a6:	18ed      	addgt	r5, r5, r3
 80073a8:	341a      	adds	r4, #26
 80073aa:	454d      	cmp	r5, r9
 80073ac:	d11a      	bne.n	80073e4 <_printf_common+0xd8>
 80073ae:	2000      	movs	r0, #0
 80073b0:	e008      	b.n	80073c4 <_printf_common+0xb8>
 80073b2:	2301      	movs	r3, #1
 80073b4:	4652      	mov	r2, sl
 80073b6:	4639      	mov	r1, r7
 80073b8:	4630      	mov	r0, r6
 80073ba:	47c0      	blx	r8
 80073bc:	3001      	adds	r0, #1
 80073be:	d103      	bne.n	80073c8 <_printf_common+0xbc>
 80073c0:	f04f 30ff 	mov.w	r0, #4294967295
 80073c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80073c8:	3501      	adds	r5, #1
 80073ca:	e7c2      	b.n	8007352 <_printf_common+0x46>
 80073cc:	2030      	movs	r0, #48	; 0x30
 80073ce:	18e1      	adds	r1, r4, r3
 80073d0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80073d4:	1c5a      	adds	r2, r3, #1
 80073d6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80073da:	4422      	add	r2, r4
 80073dc:	3302      	adds	r3, #2
 80073de:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80073e2:	e7c4      	b.n	800736e <_printf_common+0x62>
 80073e4:	2301      	movs	r3, #1
 80073e6:	4622      	mov	r2, r4
 80073e8:	4639      	mov	r1, r7
 80073ea:	4630      	mov	r0, r6
 80073ec:	47c0      	blx	r8
 80073ee:	3001      	adds	r0, #1
 80073f0:	d0e6      	beq.n	80073c0 <_printf_common+0xb4>
 80073f2:	f109 0901 	add.w	r9, r9, #1
 80073f6:	e7d8      	b.n	80073aa <_printf_common+0x9e>

080073f8 <_printf_i>:
 80073f8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80073fc:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8007400:	460c      	mov	r4, r1
 8007402:	7e09      	ldrb	r1, [r1, #24]
 8007404:	b085      	sub	sp, #20
 8007406:	296e      	cmp	r1, #110	; 0x6e
 8007408:	4617      	mov	r7, r2
 800740a:	4606      	mov	r6, r0
 800740c:	4698      	mov	r8, r3
 800740e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007410:	f000 80b3 	beq.w	800757a <_printf_i+0x182>
 8007414:	d822      	bhi.n	800745c <_printf_i+0x64>
 8007416:	2963      	cmp	r1, #99	; 0x63
 8007418:	d036      	beq.n	8007488 <_printf_i+0x90>
 800741a:	d80a      	bhi.n	8007432 <_printf_i+0x3a>
 800741c:	2900      	cmp	r1, #0
 800741e:	f000 80b9 	beq.w	8007594 <_printf_i+0x19c>
 8007422:	2958      	cmp	r1, #88	; 0x58
 8007424:	f000 8083 	beq.w	800752e <_printf_i+0x136>
 8007428:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800742c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8007430:	e032      	b.n	8007498 <_printf_i+0xa0>
 8007432:	2964      	cmp	r1, #100	; 0x64
 8007434:	d001      	beq.n	800743a <_printf_i+0x42>
 8007436:	2969      	cmp	r1, #105	; 0x69
 8007438:	d1f6      	bne.n	8007428 <_printf_i+0x30>
 800743a:	6820      	ldr	r0, [r4, #0]
 800743c:	6813      	ldr	r3, [r2, #0]
 800743e:	0605      	lsls	r5, r0, #24
 8007440:	f103 0104 	add.w	r1, r3, #4
 8007444:	d52a      	bpl.n	800749c <_printf_i+0xa4>
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	6011      	str	r1, [r2, #0]
 800744a:	2b00      	cmp	r3, #0
 800744c:	da03      	bge.n	8007456 <_printf_i+0x5e>
 800744e:	222d      	movs	r2, #45	; 0x2d
 8007450:	425b      	negs	r3, r3
 8007452:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8007456:	486f      	ldr	r0, [pc, #444]	; (8007614 <_printf_i+0x21c>)
 8007458:	220a      	movs	r2, #10
 800745a:	e039      	b.n	80074d0 <_printf_i+0xd8>
 800745c:	2973      	cmp	r1, #115	; 0x73
 800745e:	f000 809d 	beq.w	800759c <_printf_i+0x1a4>
 8007462:	d808      	bhi.n	8007476 <_printf_i+0x7e>
 8007464:	296f      	cmp	r1, #111	; 0x6f
 8007466:	d020      	beq.n	80074aa <_printf_i+0xb2>
 8007468:	2970      	cmp	r1, #112	; 0x70
 800746a:	d1dd      	bne.n	8007428 <_printf_i+0x30>
 800746c:	6823      	ldr	r3, [r4, #0]
 800746e:	f043 0320 	orr.w	r3, r3, #32
 8007472:	6023      	str	r3, [r4, #0]
 8007474:	e003      	b.n	800747e <_printf_i+0x86>
 8007476:	2975      	cmp	r1, #117	; 0x75
 8007478:	d017      	beq.n	80074aa <_printf_i+0xb2>
 800747a:	2978      	cmp	r1, #120	; 0x78
 800747c:	d1d4      	bne.n	8007428 <_printf_i+0x30>
 800747e:	2378      	movs	r3, #120	; 0x78
 8007480:	4865      	ldr	r0, [pc, #404]	; (8007618 <_printf_i+0x220>)
 8007482:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007486:	e055      	b.n	8007534 <_printf_i+0x13c>
 8007488:	6813      	ldr	r3, [r2, #0]
 800748a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800748e:	1d19      	adds	r1, r3, #4
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	6011      	str	r1, [r2, #0]
 8007494:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007498:	2301      	movs	r3, #1
 800749a:	e08c      	b.n	80075b6 <_printf_i+0x1be>
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	f010 0f40 	tst.w	r0, #64	; 0x40
 80074a2:	6011      	str	r1, [r2, #0]
 80074a4:	bf18      	it	ne
 80074a6:	b21b      	sxthne	r3, r3
 80074a8:	e7cf      	b.n	800744a <_printf_i+0x52>
 80074aa:	6813      	ldr	r3, [r2, #0]
 80074ac:	6825      	ldr	r5, [r4, #0]
 80074ae:	1d18      	adds	r0, r3, #4
 80074b0:	6010      	str	r0, [r2, #0]
 80074b2:	0628      	lsls	r0, r5, #24
 80074b4:	d501      	bpl.n	80074ba <_printf_i+0xc2>
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	e002      	b.n	80074c0 <_printf_i+0xc8>
 80074ba:	0668      	lsls	r0, r5, #25
 80074bc:	d5fb      	bpl.n	80074b6 <_printf_i+0xbe>
 80074be:	881b      	ldrh	r3, [r3, #0]
 80074c0:	296f      	cmp	r1, #111	; 0x6f
 80074c2:	bf14      	ite	ne
 80074c4:	220a      	movne	r2, #10
 80074c6:	2208      	moveq	r2, #8
 80074c8:	4852      	ldr	r0, [pc, #328]	; (8007614 <_printf_i+0x21c>)
 80074ca:	2100      	movs	r1, #0
 80074cc:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80074d0:	6865      	ldr	r5, [r4, #4]
 80074d2:	2d00      	cmp	r5, #0
 80074d4:	60a5      	str	r5, [r4, #8]
 80074d6:	f2c0 8095 	blt.w	8007604 <_printf_i+0x20c>
 80074da:	6821      	ldr	r1, [r4, #0]
 80074dc:	f021 0104 	bic.w	r1, r1, #4
 80074e0:	6021      	str	r1, [r4, #0]
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d13d      	bne.n	8007562 <_printf_i+0x16a>
 80074e6:	2d00      	cmp	r5, #0
 80074e8:	f040 808e 	bne.w	8007608 <_printf_i+0x210>
 80074ec:	4665      	mov	r5, ip
 80074ee:	2a08      	cmp	r2, #8
 80074f0:	d10b      	bne.n	800750a <_printf_i+0x112>
 80074f2:	6823      	ldr	r3, [r4, #0]
 80074f4:	07db      	lsls	r3, r3, #31
 80074f6:	d508      	bpl.n	800750a <_printf_i+0x112>
 80074f8:	6923      	ldr	r3, [r4, #16]
 80074fa:	6862      	ldr	r2, [r4, #4]
 80074fc:	429a      	cmp	r2, r3
 80074fe:	bfde      	ittt	le
 8007500:	2330      	movle	r3, #48	; 0x30
 8007502:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007506:	f105 35ff 	addle.w	r5, r5, #4294967295
 800750a:	ebac 0305 	sub.w	r3, ip, r5
 800750e:	6123      	str	r3, [r4, #16]
 8007510:	f8cd 8000 	str.w	r8, [sp]
 8007514:	463b      	mov	r3, r7
 8007516:	aa03      	add	r2, sp, #12
 8007518:	4621      	mov	r1, r4
 800751a:	4630      	mov	r0, r6
 800751c:	f7ff fef6 	bl	800730c <_printf_common>
 8007520:	3001      	adds	r0, #1
 8007522:	d14d      	bne.n	80075c0 <_printf_i+0x1c8>
 8007524:	f04f 30ff 	mov.w	r0, #4294967295
 8007528:	b005      	add	sp, #20
 800752a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800752e:	4839      	ldr	r0, [pc, #228]	; (8007614 <_printf_i+0x21c>)
 8007530:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8007534:	6813      	ldr	r3, [r2, #0]
 8007536:	6821      	ldr	r1, [r4, #0]
 8007538:	1d1d      	adds	r5, r3, #4
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	6015      	str	r5, [r2, #0]
 800753e:	060a      	lsls	r2, r1, #24
 8007540:	d50b      	bpl.n	800755a <_printf_i+0x162>
 8007542:	07ca      	lsls	r2, r1, #31
 8007544:	bf44      	itt	mi
 8007546:	f041 0120 	orrmi.w	r1, r1, #32
 800754a:	6021      	strmi	r1, [r4, #0]
 800754c:	b91b      	cbnz	r3, 8007556 <_printf_i+0x15e>
 800754e:	6822      	ldr	r2, [r4, #0]
 8007550:	f022 0220 	bic.w	r2, r2, #32
 8007554:	6022      	str	r2, [r4, #0]
 8007556:	2210      	movs	r2, #16
 8007558:	e7b7      	b.n	80074ca <_printf_i+0xd2>
 800755a:	064d      	lsls	r5, r1, #25
 800755c:	bf48      	it	mi
 800755e:	b29b      	uxthmi	r3, r3
 8007560:	e7ef      	b.n	8007542 <_printf_i+0x14a>
 8007562:	4665      	mov	r5, ip
 8007564:	fbb3 f1f2 	udiv	r1, r3, r2
 8007568:	fb02 3311 	mls	r3, r2, r1, r3
 800756c:	5cc3      	ldrb	r3, [r0, r3]
 800756e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8007572:	460b      	mov	r3, r1
 8007574:	2900      	cmp	r1, #0
 8007576:	d1f5      	bne.n	8007564 <_printf_i+0x16c>
 8007578:	e7b9      	b.n	80074ee <_printf_i+0xf6>
 800757a:	6813      	ldr	r3, [r2, #0]
 800757c:	6825      	ldr	r5, [r4, #0]
 800757e:	1d18      	adds	r0, r3, #4
 8007580:	6961      	ldr	r1, [r4, #20]
 8007582:	6010      	str	r0, [r2, #0]
 8007584:	0628      	lsls	r0, r5, #24
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	d501      	bpl.n	800758e <_printf_i+0x196>
 800758a:	6019      	str	r1, [r3, #0]
 800758c:	e002      	b.n	8007594 <_printf_i+0x19c>
 800758e:	066a      	lsls	r2, r5, #25
 8007590:	d5fb      	bpl.n	800758a <_printf_i+0x192>
 8007592:	8019      	strh	r1, [r3, #0]
 8007594:	2300      	movs	r3, #0
 8007596:	4665      	mov	r5, ip
 8007598:	6123      	str	r3, [r4, #16]
 800759a:	e7b9      	b.n	8007510 <_printf_i+0x118>
 800759c:	6813      	ldr	r3, [r2, #0]
 800759e:	1d19      	adds	r1, r3, #4
 80075a0:	6011      	str	r1, [r2, #0]
 80075a2:	681d      	ldr	r5, [r3, #0]
 80075a4:	6862      	ldr	r2, [r4, #4]
 80075a6:	2100      	movs	r1, #0
 80075a8:	4628      	mov	r0, r5
 80075aa:	f000 f837 	bl	800761c <memchr>
 80075ae:	b108      	cbz	r0, 80075b4 <_printf_i+0x1bc>
 80075b0:	1b40      	subs	r0, r0, r5
 80075b2:	6060      	str	r0, [r4, #4]
 80075b4:	6863      	ldr	r3, [r4, #4]
 80075b6:	6123      	str	r3, [r4, #16]
 80075b8:	2300      	movs	r3, #0
 80075ba:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80075be:	e7a7      	b.n	8007510 <_printf_i+0x118>
 80075c0:	6923      	ldr	r3, [r4, #16]
 80075c2:	462a      	mov	r2, r5
 80075c4:	4639      	mov	r1, r7
 80075c6:	4630      	mov	r0, r6
 80075c8:	47c0      	blx	r8
 80075ca:	3001      	adds	r0, #1
 80075cc:	d0aa      	beq.n	8007524 <_printf_i+0x12c>
 80075ce:	6823      	ldr	r3, [r4, #0]
 80075d0:	079b      	lsls	r3, r3, #30
 80075d2:	d413      	bmi.n	80075fc <_printf_i+0x204>
 80075d4:	68e0      	ldr	r0, [r4, #12]
 80075d6:	9b03      	ldr	r3, [sp, #12]
 80075d8:	4298      	cmp	r0, r3
 80075da:	bfb8      	it	lt
 80075dc:	4618      	movlt	r0, r3
 80075de:	e7a3      	b.n	8007528 <_printf_i+0x130>
 80075e0:	2301      	movs	r3, #1
 80075e2:	464a      	mov	r2, r9
 80075e4:	4639      	mov	r1, r7
 80075e6:	4630      	mov	r0, r6
 80075e8:	47c0      	blx	r8
 80075ea:	3001      	adds	r0, #1
 80075ec:	d09a      	beq.n	8007524 <_printf_i+0x12c>
 80075ee:	3501      	adds	r5, #1
 80075f0:	68e3      	ldr	r3, [r4, #12]
 80075f2:	9a03      	ldr	r2, [sp, #12]
 80075f4:	1a9b      	subs	r3, r3, r2
 80075f6:	42ab      	cmp	r3, r5
 80075f8:	dcf2      	bgt.n	80075e0 <_printf_i+0x1e8>
 80075fa:	e7eb      	b.n	80075d4 <_printf_i+0x1dc>
 80075fc:	2500      	movs	r5, #0
 80075fe:	f104 0919 	add.w	r9, r4, #25
 8007602:	e7f5      	b.n	80075f0 <_printf_i+0x1f8>
 8007604:	2b00      	cmp	r3, #0
 8007606:	d1ac      	bne.n	8007562 <_printf_i+0x16a>
 8007608:	7803      	ldrb	r3, [r0, #0]
 800760a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800760e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007612:	e76c      	b.n	80074ee <_printf_i+0xf6>
 8007614:	08007a3d 	.word	0x08007a3d
 8007618:	08007a4e 	.word	0x08007a4e

0800761c <memchr>:
 800761c:	b510      	push	{r4, lr}
 800761e:	b2c9      	uxtb	r1, r1
 8007620:	4402      	add	r2, r0
 8007622:	4290      	cmp	r0, r2
 8007624:	4603      	mov	r3, r0
 8007626:	d101      	bne.n	800762c <memchr+0x10>
 8007628:	2300      	movs	r3, #0
 800762a:	e003      	b.n	8007634 <memchr+0x18>
 800762c:	781c      	ldrb	r4, [r3, #0]
 800762e:	3001      	adds	r0, #1
 8007630:	428c      	cmp	r4, r1
 8007632:	d1f6      	bne.n	8007622 <memchr+0x6>
 8007634:	4618      	mov	r0, r3
 8007636:	bd10      	pop	{r4, pc}

08007638 <memmove>:
 8007638:	4288      	cmp	r0, r1
 800763a:	b510      	push	{r4, lr}
 800763c:	eb01 0302 	add.w	r3, r1, r2
 8007640:	d807      	bhi.n	8007652 <memmove+0x1a>
 8007642:	1e42      	subs	r2, r0, #1
 8007644:	4299      	cmp	r1, r3
 8007646:	d00a      	beq.n	800765e <memmove+0x26>
 8007648:	f811 4b01 	ldrb.w	r4, [r1], #1
 800764c:	f802 4f01 	strb.w	r4, [r2, #1]!
 8007650:	e7f8      	b.n	8007644 <memmove+0xc>
 8007652:	4283      	cmp	r3, r0
 8007654:	d9f5      	bls.n	8007642 <memmove+0xa>
 8007656:	1881      	adds	r1, r0, r2
 8007658:	1ad2      	subs	r2, r2, r3
 800765a:	42d3      	cmn	r3, r2
 800765c:	d100      	bne.n	8007660 <memmove+0x28>
 800765e:	bd10      	pop	{r4, pc}
 8007660:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007664:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8007668:	e7f7      	b.n	800765a <memmove+0x22>
	...

0800766c <_free_r>:
 800766c:	b538      	push	{r3, r4, r5, lr}
 800766e:	4605      	mov	r5, r0
 8007670:	2900      	cmp	r1, #0
 8007672:	d043      	beq.n	80076fc <_free_r+0x90>
 8007674:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007678:	1f0c      	subs	r4, r1, #4
 800767a:	2b00      	cmp	r3, #0
 800767c:	bfb8      	it	lt
 800767e:	18e4      	addlt	r4, r4, r3
 8007680:	f000 f8d0 	bl	8007824 <__malloc_lock>
 8007684:	4a1e      	ldr	r2, [pc, #120]	; (8007700 <_free_r+0x94>)
 8007686:	6813      	ldr	r3, [r2, #0]
 8007688:	4610      	mov	r0, r2
 800768a:	b933      	cbnz	r3, 800769a <_free_r+0x2e>
 800768c:	6063      	str	r3, [r4, #4]
 800768e:	6014      	str	r4, [r2, #0]
 8007690:	4628      	mov	r0, r5
 8007692:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007696:	f000 b8c6 	b.w	8007826 <__malloc_unlock>
 800769a:	42a3      	cmp	r3, r4
 800769c:	d90b      	bls.n	80076b6 <_free_r+0x4a>
 800769e:	6821      	ldr	r1, [r4, #0]
 80076a0:	1862      	adds	r2, r4, r1
 80076a2:	4293      	cmp	r3, r2
 80076a4:	bf01      	itttt	eq
 80076a6:	681a      	ldreq	r2, [r3, #0]
 80076a8:	685b      	ldreq	r3, [r3, #4]
 80076aa:	1852      	addeq	r2, r2, r1
 80076ac:	6022      	streq	r2, [r4, #0]
 80076ae:	6063      	str	r3, [r4, #4]
 80076b0:	6004      	str	r4, [r0, #0]
 80076b2:	e7ed      	b.n	8007690 <_free_r+0x24>
 80076b4:	4613      	mov	r3, r2
 80076b6:	685a      	ldr	r2, [r3, #4]
 80076b8:	b10a      	cbz	r2, 80076be <_free_r+0x52>
 80076ba:	42a2      	cmp	r2, r4
 80076bc:	d9fa      	bls.n	80076b4 <_free_r+0x48>
 80076be:	6819      	ldr	r1, [r3, #0]
 80076c0:	1858      	adds	r0, r3, r1
 80076c2:	42a0      	cmp	r0, r4
 80076c4:	d10b      	bne.n	80076de <_free_r+0x72>
 80076c6:	6820      	ldr	r0, [r4, #0]
 80076c8:	4401      	add	r1, r0
 80076ca:	1858      	adds	r0, r3, r1
 80076cc:	4282      	cmp	r2, r0
 80076ce:	6019      	str	r1, [r3, #0]
 80076d0:	d1de      	bne.n	8007690 <_free_r+0x24>
 80076d2:	6810      	ldr	r0, [r2, #0]
 80076d4:	6852      	ldr	r2, [r2, #4]
 80076d6:	4401      	add	r1, r0
 80076d8:	6019      	str	r1, [r3, #0]
 80076da:	605a      	str	r2, [r3, #4]
 80076dc:	e7d8      	b.n	8007690 <_free_r+0x24>
 80076de:	d902      	bls.n	80076e6 <_free_r+0x7a>
 80076e0:	230c      	movs	r3, #12
 80076e2:	602b      	str	r3, [r5, #0]
 80076e4:	e7d4      	b.n	8007690 <_free_r+0x24>
 80076e6:	6820      	ldr	r0, [r4, #0]
 80076e8:	1821      	adds	r1, r4, r0
 80076ea:	428a      	cmp	r2, r1
 80076ec:	bf01      	itttt	eq
 80076ee:	6811      	ldreq	r1, [r2, #0]
 80076f0:	6852      	ldreq	r2, [r2, #4]
 80076f2:	1809      	addeq	r1, r1, r0
 80076f4:	6021      	streq	r1, [r4, #0]
 80076f6:	6062      	str	r2, [r4, #4]
 80076f8:	605c      	str	r4, [r3, #4]
 80076fa:	e7c9      	b.n	8007690 <_free_r+0x24>
 80076fc:	bd38      	pop	{r3, r4, r5, pc}
 80076fe:	bf00      	nop
 8007700:	20001388 	.word	0x20001388

08007704 <_malloc_r>:
 8007704:	b570      	push	{r4, r5, r6, lr}
 8007706:	1ccd      	adds	r5, r1, #3
 8007708:	f025 0503 	bic.w	r5, r5, #3
 800770c:	3508      	adds	r5, #8
 800770e:	2d0c      	cmp	r5, #12
 8007710:	bf38      	it	cc
 8007712:	250c      	movcc	r5, #12
 8007714:	2d00      	cmp	r5, #0
 8007716:	4606      	mov	r6, r0
 8007718:	db01      	blt.n	800771e <_malloc_r+0x1a>
 800771a:	42a9      	cmp	r1, r5
 800771c:	d903      	bls.n	8007726 <_malloc_r+0x22>
 800771e:	230c      	movs	r3, #12
 8007720:	6033      	str	r3, [r6, #0]
 8007722:	2000      	movs	r0, #0
 8007724:	bd70      	pop	{r4, r5, r6, pc}
 8007726:	f000 f87d 	bl	8007824 <__malloc_lock>
 800772a:	4a21      	ldr	r2, [pc, #132]	; (80077b0 <_malloc_r+0xac>)
 800772c:	6814      	ldr	r4, [r2, #0]
 800772e:	4621      	mov	r1, r4
 8007730:	b991      	cbnz	r1, 8007758 <_malloc_r+0x54>
 8007732:	4c20      	ldr	r4, [pc, #128]	; (80077b4 <_malloc_r+0xb0>)
 8007734:	6823      	ldr	r3, [r4, #0]
 8007736:	b91b      	cbnz	r3, 8007740 <_malloc_r+0x3c>
 8007738:	4630      	mov	r0, r6
 800773a:	f000 f863 	bl	8007804 <_sbrk_r>
 800773e:	6020      	str	r0, [r4, #0]
 8007740:	4629      	mov	r1, r5
 8007742:	4630      	mov	r0, r6
 8007744:	f000 f85e 	bl	8007804 <_sbrk_r>
 8007748:	1c43      	adds	r3, r0, #1
 800774a:	d124      	bne.n	8007796 <_malloc_r+0x92>
 800774c:	230c      	movs	r3, #12
 800774e:	4630      	mov	r0, r6
 8007750:	6033      	str	r3, [r6, #0]
 8007752:	f000 f868 	bl	8007826 <__malloc_unlock>
 8007756:	e7e4      	b.n	8007722 <_malloc_r+0x1e>
 8007758:	680b      	ldr	r3, [r1, #0]
 800775a:	1b5b      	subs	r3, r3, r5
 800775c:	d418      	bmi.n	8007790 <_malloc_r+0x8c>
 800775e:	2b0b      	cmp	r3, #11
 8007760:	d90f      	bls.n	8007782 <_malloc_r+0x7e>
 8007762:	600b      	str	r3, [r1, #0]
 8007764:	18cc      	adds	r4, r1, r3
 8007766:	50cd      	str	r5, [r1, r3]
 8007768:	4630      	mov	r0, r6
 800776a:	f000 f85c 	bl	8007826 <__malloc_unlock>
 800776e:	f104 000b 	add.w	r0, r4, #11
 8007772:	1d23      	adds	r3, r4, #4
 8007774:	f020 0007 	bic.w	r0, r0, #7
 8007778:	1ac3      	subs	r3, r0, r3
 800777a:	d0d3      	beq.n	8007724 <_malloc_r+0x20>
 800777c:	425a      	negs	r2, r3
 800777e:	50e2      	str	r2, [r4, r3]
 8007780:	e7d0      	b.n	8007724 <_malloc_r+0x20>
 8007782:	684b      	ldr	r3, [r1, #4]
 8007784:	428c      	cmp	r4, r1
 8007786:	bf16      	itet	ne
 8007788:	6063      	strne	r3, [r4, #4]
 800778a:	6013      	streq	r3, [r2, #0]
 800778c:	460c      	movne	r4, r1
 800778e:	e7eb      	b.n	8007768 <_malloc_r+0x64>
 8007790:	460c      	mov	r4, r1
 8007792:	6849      	ldr	r1, [r1, #4]
 8007794:	e7cc      	b.n	8007730 <_malloc_r+0x2c>
 8007796:	1cc4      	adds	r4, r0, #3
 8007798:	f024 0403 	bic.w	r4, r4, #3
 800779c:	42a0      	cmp	r0, r4
 800779e:	d005      	beq.n	80077ac <_malloc_r+0xa8>
 80077a0:	1a21      	subs	r1, r4, r0
 80077a2:	4630      	mov	r0, r6
 80077a4:	f000 f82e 	bl	8007804 <_sbrk_r>
 80077a8:	3001      	adds	r0, #1
 80077aa:	d0cf      	beq.n	800774c <_malloc_r+0x48>
 80077ac:	6025      	str	r5, [r4, #0]
 80077ae:	e7db      	b.n	8007768 <_malloc_r+0x64>
 80077b0:	20001388 	.word	0x20001388
 80077b4:	2000138c 	.word	0x2000138c

080077b8 <_realloc_r>:
 80077b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80077ba:	4607      	mov	r7, r0
 80077bc:	4614      	mov	r4, r2
 80077be:	460e      	mov	r6, r1
 80077c0:	b921      	cbnz	r1, 80077cc <_realloc_r+0x14>
 80077c2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80077c6:	4611      	mov	r1, r2
 80077c8:	f7ff bf9c 	b.w	8007704 <_malloc_r>
 80077cc:	b922      	cbnz	r2, 80077d8 <_realloc_r+0x20>
 80077ce:	f7ff ff4d 	bl	800766c <_free_r>
 80077d2:	4625      	mov	r5, r4
 80077d4:	4628      	mov	r0, r5
 80077d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80077d8:	f000 f826 	bl	8007828 <_malloc_usable_size_r>
 80077dc:	42a0      	cmp	r0, r4
 80077de:	d20f      	bcs.n	8007800 <_realloc_r+0x48>
 80077e0:	4621      	mov	r1, r4
 80077e2:	4638      	mov	r0, r7
 80077e4:	f7ff ff8e 	bl	8007704 <_malloc_r>
 80077e8:	4605      	mov	r5, r0
 80077ea:	2800      	cmp	r0, #0
 80077ec:	d0f2      	beq.n	80077d4 <_realloc_r+0x1c>
 80077ee:	4631      	mov	r1, r6
 80077f0:	4622      	mov	r2, r4
 80077f2:	f7ff fbd1 	bl	8006f98 <memcpy>
 80077f6:	4631      	mov	r1, r6
 80077f8:	4638      	mov	r0, r7
 80077fa:	f7ff ff37 	bl	800766c <_free_r>
 80077fe:	e7e9      	b.n	80077d4 <_realloc_r+0x1c>
 8007800:	4635      	mov	r5, r6
 8007802:	e7e7      	b.n	80077d4 <_realloc_r+0x1c>

08007804 <_sbrk_r>:
 8007804:	b538      	push	{r3, r4, r5, lr}
 8007806:	2300      	movs	r3, #0
 8007808:	4c05      	ldr	r4, [pc, #20]	; (8007820 <_sbrk_r+0x1c>)
 800780a:	4605      	mov	r5, r0
 800780c:	4608      	mov	r0, r1
 800780e:	6023      	str	r3, [r4, #0]
 8007810:	f7fa f8b2 	bl	8001978 <_sbrk>
 8007814:	1c43      	adds	r3, r0, #1
 8007816:	d102      	bne.n	800781e <_sbrk_r+0x1a>
 8007818:	6823      	ldr	r3, [r4, #0]
 800781a:	b103      	cbz	r3, 800781e <_sbrk_r+0x1a>
 800781c:	602b      	str	r3, [r5, #0]
 800781e:	bd38      	pop	{r3, r4, r5, pc}
 8007820:	200016a8 	.word	0x200016a8

08007824 <__malloc_lock>:
 8007824:	4770      	bx	lr

08007826 <__malloc_unlock>:
 8007826:	4770      	bx	lr

08007828 <_malloc_usable_size_r>:
 8007828:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800782c:	1f18      	subs	r0, r3, #4
 800782e:	2b00      	cmp	r3, #0
 8007830:	bfbc      	itt	lt
 8007832:	580b      	ldrlt	r3, [r1, r0]
 8007834:	18c0      	addlt	r0, r0, r3
 8007836:	4770      	bx	lr

08007838 <_init>:
 8007838:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800783a:	bf00      	nop
 800783c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800783e:	bc08      	pop	{r3}
 8007840:	469e      	mov	lr, r3
 8007842:	4770      	bx	lr

08007844 <_fini>:
 8007844:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007846:	bf00      	nop
 8007848:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800784a:	bc08      	pop	{r3}
 800784c:	469e      	mov	lr, r3
 800784e:	4770      	bx	lr
