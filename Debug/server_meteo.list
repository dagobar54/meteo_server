
server_meteo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007770  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000022c  08007880  08007880  00017880  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007aac  08007aac  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  08007aac  08007aac  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007aac  08007aac  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007aac  08007aac  00017aac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007ab0  08007ab0  00017ab0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08007ab4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001648  20000074  08007b28  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200016bc  08007b28  000216bc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   000199e8  00000000  00000000  0002009d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003802  00000000  00000000  00039a85  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000015d0  00000000  00000000  0003d288  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001438  00000000  00000000  0003e858  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00017a94  00000000  00000000  0003fc90  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000ff84  00000000  00000000  00057724  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0007e15e  00000000  00000000  000676a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000e5806  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005da0  00000000  00000000  000e5884  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000074 	.word	0x20000074
 800012c:	00000000 	.word	0x00000000
 8000130:	08007868 	.word	0x08007868

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000078 	.word	0x20000078
 800014c:	08007868 	.word	0x08007868

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <vApplicationStackOverflowHook>:
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);
void vApplicationMallocFailedHook(void);

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 8000160:	b480      	push	{r7}
 8000162:	b083      	sub	sp, #12
 8000164:	af00      	add	r7, sp, #0
 8000166:	6078      	str	r0, [r7, #4]
 8000168:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 800016a:	bf00      	nop
 800016c:	370c      	adds	r7, #12
 800016e:	46bd      	mov	sp, r7
 8000170:	bc80      	pop	{r7}
 8000172:	4770      	bx	lr

08000174 <vApplicationMallocFailedHook>:
/* USER CODE END 4 */

/* USER CODE BEGIN 5 */
__weak void vApplicationMallocFailedHook(void)
{
 8000174:	b480      	push	{r7}
 8000176:	af00      	add	r7, sp, #0
   demo application. If heap_1.c or heap_2.c are used, then the size of the
   heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
   FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
   to query the size of free heap space that remains (although it does not
   provide information on how the remaining heap might be fragmented). */
}
 8000178:	bf00      	nop
 800017a:	46bd      	mov	sp, r7
 800017c:	bc80      	pop	{r7}
 800017e:	4770      	bx	lr

08000180 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000180:	b480      	push	{r7}
 8000182:	b085      	sub	sp, #20
 8000184:	af00      	add	r7, sp, #0
 8000186:	60f8      	str	r0, [r7, #12]
 8000188:	60b9      	str	r1, [r7, #8]
 800018a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800018c:	68fb      	ldr	r3, [r7, #12]
 800018e:	4a06      	ldr	r2, [pc, #24]	; (80001a8 <vApplicationGetIdleTaskMemory+0x28>)
 8000190:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000192:	68bb      	ldr	r3, [r7, #8]
 8000194:	4a05      	ldr	r2, [pc, #20]	; (80001ac <vApplicationGetIdleTaskMemory+0x2c>)
 8000196:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000198:	687b      	ldr	r3, [r7, #4]
 800019a:	2240      	movs	r2, #64	; 0x40
 800019c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}                   
 800019e:	bf00      	nop
 80001a0:	3714      	adds	r7, #20
 80001a2:	46bd      	mov	sp, r7
 80001a4:	bc80      	pop	{r7}
 80001a6:	4770      	bx	lr
 80001a8:	20000090 	.word	0x20000090
 80001ac:	200000e4 	.word	0x200000e4

080001b0 <vApplicationGetTimerTaskMemory>:
/* USER CODE BEGIN GET_TIMER_TASK_MEMORY */
static StaticTask_t xTimerTaskTCBBuffer;
static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];
  
void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize )  
{
 80001b0:	b480      	push	{r7}
 80001b2:	b085      	sub	sp, #20
 80001b4:	af00      	add	r7, sp, #0
 80001b6:	60f8      	str	r0, [r7, #12]
 80001b8:	60b9      	str	r1, [r7, #8]
 80001ba:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 80001bc:	68fb      	ldr	r3, [r7, #12]
 80001be:	4a06      	ldr	r2, [pc, #24]	; (80001d8 <vApplicationGetTimerTaskMemory+0x28>)
 80001c0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
 80001c2:	68bb      	ldr	r3, [r7, #8]
 80001c4:	4a05      	ldr	r2, [pc, #20]	; (80001dc <vApplicationGetTimerTaskMemory+0x2c>)
 80001c6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 80001c8:	687b      	ldr	r3, [r7, #4]
 80001ca:	2280      	movs	r2, #128	; 0x80
 80001cc:	601a      	str	r2, [r3, #0]
  /* place for user code */
}                   
 80001ce:	bf00      	nop
 80001d0:	3714      	adds	r7, #20
 80001d2:	46bd      	mov	sp, r7
 80001d4:	bc80      	pop	{r7}
 80001d6:	4770      	bx	lr
 80001d8:	200001e4 	.word	0x200001e4
 80001dc:	20000238 	.word	0x20000238

080001e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001e0:	b5b0      	push	{r4, r5, r7, lr}
 80001e2:	b09e      	sub	sp, #120	; 0x78
 80001e4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001e6:	f001 fccf 	bl	8001b88 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001ea:	f000 f8a3 	bl	8000334 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001ee:	f000 f947 	bl	8000480 <MX_GPIO_Init>
  MX_SPI1_Init();
 80001f2:	f000 f8e5 	bl	80003c0 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 80001f6:	f000 f919 	bl	800042c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  DWT_Init(); // счётчик для микросекундных пауз
 80001fa:	f000 fcd7 	bl	8000bac <DWT_Init>
  pipe_pool_id = osPoolCreate(osPool(pipe_pool));
 80001fe:	483f      	ldr	r0, [pc, #252]	; (80002fc <main+0x11c>)
 8000200:	f003 feec 	bl	8003fdc <osPoolCreate>
 8000204:	4602      	mov	r2, r0
 8000206:	4b3e      	ldr	r3, [pc, #248]	; (8000300 <main+0x120>)
 8000208:	601a      	str	r2, [r3, #0]
  //MX_USB_DEVICE_Init();
  /* USER CODE END 2 */

  /* Create the mutex(es) */
  /* definition and creation of unixtimeMutex */
  osMutexDef(unixtimeMutex);
 800020a:	2300      	movs	r3, #0
 800020c:	673b      	str	r3, [r7, #112]	; 0x70
 800020e:	2300      	movs	r3, #0
 8000210:	677b      	str	r3, [r7, #116]	; 0x74
  unixtimeMutexHandle = osMutexCreate(osMutex(unixtimeMutex));
 8000212:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000216:	4618      	mov	r0, r3
 8000218:	f003 fe10 	bl	8003e3c <osMutexCreate>
 800021c:	4602      	mov	r2, r0
 800021e:	4b39      	ldr	r3, [pc, #228]	; (8000304 <main+0x124>)
 8000220:	601a      	str	r2, [r3, #0]
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* definition and creation of semTimeClock */
  osSemaphoreDef(semTimeClock);
 8000222:	2300      	movs	r3, #0
 8000224:	66bb      	str	r3, [r7, #104]	; 0x68
 8000226:	2300      	movs	r3, #0
 8000228:	66fb      	str	r3, [r7, #108]	; 0x6c
  semTimeClockHandle = osSemaphoreCreate(osSemaphore(semTimeClock), 1);
 800022a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800022e:	2101      	movs	r1, #1
 8000230:	4618      	mov	r0, r3
 8000232:	f003 fe1b 	bl	8003e6c <osSemaphoreCreate>
 8000236:	4602      	mov	r2, r0
 8000238:	4b33      	ldr	r3, [pc, #204]	; (8000308 <main+0x128>)
 800023a:	601a      	str	r2, [r3, #0]

  /* definition and creation of semRadio */
  osSemaphoreDef(semRadio);
 800023c:	2300      	movs	r3, #0
 800023e:	663b      	str	r3, [r7, #96]	; 0x60
 8000240:	2300      	movs	r3, #0
 8000242:	667b      	str	r3, [r7, #100]	; 0x64
  semRadioHandle = osSemaphoreCreate(osSemaphore(semRadio), 1);
 8000244:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000248:	2101      	movs	r1, #1
 800024a:	4618      	mov	r0, r3
 800024c:	f003 fe0e 	bl	8003e6c <osSemaphoreCreate>
 8000250:	4602      	mov	r2, r0
 8000252:	4b2e      	ldr	r3, [pc, #184]	; (800030c <main+0x12c>)
 8000254:	601a      	str	r2, [r3, #0]
  /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* Create the timer(s) */
  /* definition and creation of unixTimerCounter */
  osTimerDef(unixTimerCounter, CallbackUnixTimerCounter);
 8000256:	4b2e      	ldr	r3, [pc, #184]	; (8000310 <main+0x130>)
 8000258:	65bb      	str	r3, [r7, #88]	; 0x58
 800025a:	2300      	movs	r3, #0
 800025c:	65fb      	str	r3, [r7, #92]	; 0x5c
  unixTimerCounterHandle = osTimerCreate(osTimer(unixTimerCounter), osTimerPeriodic, NULL);
 800025e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000262:	2200      	movs	r2, #0
 8000264:	2101      	movs	r1, #1
 8000266:	4618      	mov	r0, r3
 8000268:	f003 fd6e 	bl	8003d48 <osTimerCreate>
 800026c:	4602      	mov	r2, r0
 800026e:	4b29      	ldr	r3, [pc, #164]	; (8000314 <main+0x134>)
 8000270:	601a      	str	r2, [r3, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* definition and creation of msgUnixTimer */
  osMessageQDef(msgUnixTimer, 16, uint32_t);
 8000272:	4b29      	ldr	r3, [pc, #164]	; (8000318 <main+0x138>)
 8000274:	f107 0448 	add.w	r4, r7, #72	; 0x48
 8000278:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800027a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  msgUnixTimerHandle = osMessageCreate(osMessageQ(msgUnixTimer), NULL);
 800027e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000282:	2100      	movs	r1, #0
 8000284:	4618      	mov	r0, r3
 8000286:	f003 ff06 	bl	8004096 <osMessageCreate>
 800028a:	4602      	mov	r2, r0
 800028c:	4b23      	ldr	r3, [pc, #140]	; (800031c <main+0x13c>)
 800028e:	601a      	str	r2, [r3, #0]

  /* definition and creation of msgPipeAlloc */
  osMessageQDef(msgPipeAlloc, 16, uint32_t);
 8000290:	4b21      	ldr	r3, [pc, #132]	; (8000318 <main+0x138>)
 8000292:	f107 0438 	add.w	r4, r7, #56	; 0x38
 8000296:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000298:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  msgPipeAllocHandle = osMessageCreate(osMessageQ(msgPipeAlloc), NULL);
 800029c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80002a0:	2100      	movs	r1, #0
 80002a2:	4618      	mov	r0, r3
 80002a4:	f003 fef7 	bl	8004096 <osMessageCreate>
 80002a8:	4602      	mov	r2, r0
 80002aa:	4b1d      	ldr	r3, [pc, #116]	; (8000320 <main+0x140>)
 80002ac:	601a      	str	r2, [r3, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityAboveNormal, 0, 128);
 80002ae:	4b1d      	ldr	r3, [pc, #116]	; (8000324 <main+0x144>)
 80002b0:	f107 041c 	add.w	r4, r7, #28
 80002b4:	461d      	mov	r5, r3
 80002b6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80002b8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80002ba:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80002be:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80002c2:	f107 031c 	add.w	r3, r7, #28
 80002c6:	2100      	movs	r1, #0
 80002c8:	4618      	mov	r0, r3
 80002ca:	f003 fcca 	bl	8003c62 <osThreadCreate>
 80002ce:	4602      	mov	r2, r0
 80002d0:	4b15      	ldr	r3, [pc, #84]	; (8000328 <main+0x148>)
 80002d2:	601a      	str	r2, [r3, #0]

  /* definition and creation of myRadio */
  osThreadDef(myRadio, StartRadio, osPriorityNormal, 0, 128);
 80002d4:	4b15      	ldr	r3, [pc, #84]	; (800032c <main+0x14c>)
 80002d6:	463c      	mov	r4, r7
 80002d8:	461d      	mov	r5, r3
 80002da:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80002dc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80002de:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80002e2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myRadioHandle = osThreadCreate(osThread(myRadio), NULL);
 80002e6:	463b      	mov	r3, r7
 80002e8:	2100      	movs	r1, #0
 80002ea:	4618      	mov	r0, r3
 80002ec:	f003 fcb9 	bl	8003c62 <osThreadCreate>
 80002f0:	4602      	mov	r2, r0
 80002f2:	4b0f      	ldr	r3, [pc, #60]	; (8000330 <main+0x150>)
 80002f4:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80002f6:	f003 fcad 	bl	8003c54 <osKernelStart>
 
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80002fa:	e7fe      	b.n	80002fa <main+0x11a>
 80002fc:	08007a3c 	.word	0x08007a3c
 8000300:	200013b4 	.word	0x200013b4
 8000304:	20001438 	.word	0x20001438
 8000308:	20001434 	.word	0x20001434
 800030c:	200013c8 	.word	0x200013c8
 8000310:	08000aa1 	.word	0x08000aa1
 8000314:	2000143c 	.word	0x2000143c
 8000318:	08007880 	.word	0x08007880
 800031c:	20001594 	.word	0x20001594
 8000320:	20001440 	.word	0x20001440
 8000324:	0800789c 	.word	0x0800789c
 8000328:	200013ac 	.word	0x200013ac
 800032c:	080078c0 	.word	0x080078c0
 8000330:	2000140c 	.word	0x2000140c

08000334 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000334:	b580      	push	{r7, lr}
 8000336:	b090      	sub	sp, #64	; 0x40
 8000338:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800033a:	f107 0318 	add.w	r3, r7, #24
 800033e:	2228      	movs	r2, #40	; 0x28
 8000340:	2100      	movs	r1, #0
 8000342:	4618      	mov	r0, r3
 8000344:	f006 fe4b 	bl	8006fde <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000348:	1d3b      	adds	r3, r7, #4
 800034a:	2200      	movs	r2, #0
 800034c:	601a      	str	r2, [r3, #0]
 800034e:	605a      	str	r2, [r3, #4]
 8000350:	609a      	str	r2, [r3, #8]
 8000352:	60da      	str	r2, [r3, #12]
 8000354:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000356:	2301      	movs	r3, #1
 8000358:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800035a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800035e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000360:	2300      	movs	r3, #0
 8000362:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000364:	2301      	movs	r3, #1
 8000366:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000368:	2302      	movs	r3, #2
 800036a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800036c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000370:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000372:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000376:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000378:	f107 0318 	add.w	r3, r7, #24
 800037c:	4618      	mov	r0, r3
 800037e:	f001 fed9 	bl	8002134 <HAL_RCC_OscConfig>
 8000382:	4603      	mov	r3, r0
 8000384:	2b00      	cmp	r3, #0
 8000386:	d001      	beq.n	800038c <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000388:	f000 fbac 	bl	8000ae4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800038c:	230f      	movs	r3, #15
 800038e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000390:	2302      	movs	r3, #2
 8000392:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000394:	2300      	movs	r3, #0
 8000396:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000398:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800039c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800039e:	2300      	movs	r3, #0
 80003a0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80003a2:	1d3b      	adds	r3, r7, #4
 80003a4:	2102      	movs	r1, #2
 80003a6:	4618      	mov	r0, r3
 80003a8:	f002 f944 	bl	8002634 <HAL_RCC_ClockConfig>
 80003ac:	4603      	mov	r3, r0
 80003ae:	2b00      	cmp	r3, #0
 80003b0:	d001      	beq.n	80003b6 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80003b2:	f000 fb97 	bl	8000ae4 <Error_Handler>
  }
}
 80003b6:	bf00      	nop
 80003b8:	3740      	adds	r7, #64	; 0x40
 80003ba:	46bd      	mov	sp, r7
 80003bc:	bd80      	pop	{r7, pc}
	...

080003c0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80003c0:	b580      	push	{r7, lr}
 80003c2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80003c4:	4b17      	ldr	r3, [pc, #92]	; (8000424 <MX_SPI1_Init+0x64>)
 80003c6:	4a18      	ldr	r2, [pc, #96]	; (8000428 <MX_SPI1_Init+0x68>)
 80003c8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80003ca:	4b16      	ldr	r3, [pc, #88]	; (8000424 <MX_SPI1_Init+0x64>)
 80003cc:	f44f 7282 	mov.w	r2, #260	; 0x104
 80003d0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80003d2:	4b14      	ldr	r3, [pc, #80]	; (8000424 <MX_SPI1_Init+0x64>)
 80003d4:	2200      	movs	r2, #0
 80003d6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80003d8:	4b12      	ldr	r3, [pc, #72]	; (8000424 <MX_SPI1_Init+0x64>)
 80003da:	2200      	movs	r2, #0
 80003dc:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80003de:	4b11      	ldr	r3, [pc, #68]	; (8000424 <MX_SPI1_Init+0x64>)
 80003e0:	2200      	movs	r2, #0
 80003e2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80003e4:	4b0f      	ldr	r3, [pc, #60]	; (8000424 <MX_SPI1_Init+0x64>)
 80003e6:	2200      	movs	r2, #0
 80003e8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80003ea:	4b0e      	ldr	r3, [pc, #56]	; (8000424 <MX_SPI1_Init+0x64>)
 80003ec:	f44f 7200 	mov.w	r2, #512	; 0x200
 80003f0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80003f2:	4b0c      	ldr	r3, [pc, #48]	; (8000424 <MX_SPI1_Init+0x64>)
 80003f4:	2218      	movs	r2, #24
 80003f6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80003f8:	4b0a      	ldr	r3, [pc, #40]	; (8000424 <MX_SPI1_Init+0x64>)
 80003fa:	2200      	movs	r2, #0
 80003fc:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80003fe:	4b09      	ldr	r3, [pc, #36]	; (8000424 <MX_SPI1_Init+0x64>)
 8000400:	2200      	movs	r2, #0
 8000402:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000404:	4b07      	ldr	r3, [pc, #28]	; (8000424 <MX_SPI1_Init+0x64>)
 8000406:	2200      	movs	r2, #0
 8000408:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800040a:	4b06      	ldr	r3, [pc, #24]	; (8000424 <MX_SPI1_Init+0x64>)
 800040c:	220a      	movs	r2, #10
 800040e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000410:	4804      	ldr	r0, [pc, #16]	; (8000424 <MX_SPI1_Init+0x64>)
 8000412:	f002 fadb 	bl	80029cc <HAL_SPI_Init>
 8000416:	4603      	mov	r3, r0
 8000418:	2b00      	cmp	r3, #0
 800041a:	d001      	beq.n	8000420 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800041c:	f000 fb62 	bl	8000ae4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000420:	bf00      	nop
 8000422:	bd80      	pop	{r7, pc}
 8000424:	20001534 	.word	0x20001534
 8000428:	40013000 	.word	0x40013000

0800042c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800042c:	b580      	push	{r7, lr}
 800042e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000430:	4b11      	ldr	r3, [pc, #68]	; (8000478 <MX_USART1_UART_Init+0x4c>)
 8000432:	4a12      	ldr	r2, [pc, #72]	; (800047c <MX_USART1_UART_Init+0x50>)
 8000434:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000436:	4b10      	ldr	r3, [pc, #64]	; (8000478 <MX_USART1_UART_Init+0x4c>)
 8000438:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800043c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800043e:	4b0e      	ldr	r3, [pc, #56]	; (8000478 <MX_USART1_UART_Init+0x4c>)
 8000440:	2200      	movs	r2, #0
 8000442:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000444:	4b0c      	ldr	r3, [pc, #48]	; (8000478 <MX_USART1_UART_Init+0x4c>)
 8000446:	2200      	movs	r2, #0
 8000448:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800044a:	4b0b      	ldr	r3, [pc, #44]	; (8000478 <MX_USART1_UART_Init+0x4c>)
 800044c:	2200      	movs	r2, #0
 800044e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000450:	4b09      	ldr	r3, [pc, #36]	; (8000478 <MX_USART1_UART_Init+0x4c>)
 8000452:	220c      	movs	r2, #12
 8000454:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000456:	4b08      	ldr	r3, [pc, #32]	; (8000478 <MX_USART1_UART_Init+0x4c>)
 8000458:	2200      	movs	r2, #0
 800045a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800045c:	4b06      	ldr	r3, [pc, #24]	; (8000478 <MX_USART1_UART_Init+0x4c>)
 800045e:	2200      	movs	r2, #0
 8000460:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000462:	4805      	ldr	r0, [pc, #20]	; (8000478 <MX_USART1_UART_Init+0x4c>)
 8000464:	f003 f9c4 	bl	80037f0 <HAL_UART_Init>
 8000468:	4603      	mov	r3, r0
 800046a:	2b00      	cmp	r3, #0
 800046c:	d001      	beq.n	8000472 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800046e:	f000 fb39 	bl	8000ae4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000472:	bf00      	nop
 8000474:	bd80      	pop	{r7, pc}
 8000476:	bf00      	nop
 8000478:	200013cc 	.word	0x200013cc
 800047c:	40013800 	.word	0x40013800

08000480 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000480:	b580      	push	{r7, lr}
 8000482:	b088      	sub	sp, #32
 8000484:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000486:	f107 0310 	add.w	r3, r7, #16
 800048a:	2200      	movs	r2, #0
 800048c:	601a      	str	r2, [r3, #0]
 800048e:	605a      	str	r2, [r3, #4]
 8000490:	609a      	str	r2, [r3, #8]
 8000492:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000494:	4b38      	ldr	r3, [pc, #224]	; (8000578 <MX_GPIO_Init+0xf8>)
 8000496:	699b      	ldr	r3, [r3, #24]
 8000498:	4a37      	ldr	r2, [pc, #220]	; (8000578 <MX_GPIO_Init+0xf8>)
 800049a:	f043 0310 	orr.w	r3, r3, #16
 800049e:	6193      	str	r3, [r2, #24]
 80004a0:	4b35      	ldr	r3, [pc, #212]	; (8000578 <MX_GPIO_Init+0xf8>)
 80004a2:	699b      	ldr	r3, [r3, #24]
 80004a4:	f003 0310 	and.w	r3, r3, #16
 80004a8:	60fb      	str	r3, [r7, #12]
 80004aa:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80004ac:	4b32      	ldr	r3, [pc, #200]	; (8000578 <MX_GPIO_Init+0xf8>)
 80004ae:	699b      	ldr	r3, [r3, #24]
 80004b0:	4a31      	ldr	r2, [pc, #196]	; (8000578 <MX_GPIO_Init+0xf8>)
 80004b2:	f043 0320 	orr.w	r3, r3, #32
 80004b6:	6193      	str	r3, [r2, #24]
 80004b8:	4b2f      	ldr	r3, [pc, #188]	; (8000578 <MX_GPIO_Init+0xf8>)
 80004ba:	699b      	ldr	r3, [r3, #24]
 80004bc:	f003 0320 	and.w	r3, r3, #32
 80004c0:	60bb      	str	r3, [r7, #8]
 80004c2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004c4:	4b2c      	ldr	r3, [pc, #176]	; (8000578 <MX_GPIO_Init+0xf8>)
 80004c6:	699b      	ldr	r3, [r3, #24]
 80004c8:	4a2b      	ldr	r2, [pc, #172]	; (8000578 <MX_GPIO_Init+0xf8>)
 80004ca:	f043 0304 	orr.w	r3, r3, #4
 80004ce:	6193      	str	r3, [r2, #24]
 80004d0:	4b29      	ldr	r3, [pc, #164]	; (8000578 <MX_GPIO_Init+0xf8>)
 80004d2:	699b      	ldr	r3, [r3, #24]
 80004d4:	f003 0304 	and.w	r3, r3, #4
 80004d8:	607b      	str	r3, [r7, #4]
 80004da:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80004dc:	4b26      	ldr	r3, [pc, #152]	; (8000578 <MX_GPIO_Init+0xf8>)
 80004de:	699b      	ldr	r3, [r3, #24]
 80004e0:	4a25      	ldr	r2, [pc, #148]	; (8000578 <MX_GPIO_Init+0xf8>)
 80004e2:	f043 0308 	orr.w	r3, r3, #8
 80004e6:	6193      	str	r3, [r2, #24]
 80004e8:	4b23      	ldr	r3, [pc, #140]	; (8000578 <MX_GPIO_Init+0xf8>)
 80004ea:	699b      	ldr	r3, [r3, #24]
 80004ec:	f003 0308 	and.w	r3, r3, #8
 80004f0:	603b      	str	r3, [r7, #0]
 80004f2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(IND_GPIO_Port, IND_Pin, GPIO_PIN_RESET);
 80004f4:	2200      	movs	r2, #0
 80004f6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80004fa:	4820      	ldr	r0, [pc, #128]	; (800057c <MX_GPIO_Init+0xfc>)
 80004fc:	f001 fdd2 	bl	80020a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, CSN_Pin|CE_Pin, GPIO_PIN_RESET);
 8000500:	2200      	movs	r2, #0
 8000502:	f44f 7140 	mov.w	r1, #768	; 0x300
 8000506:	481e      	ldr	r0, [pc, #120]	; (8000580 <MX_GPIO_Init+0x100>)
 8000508:	f001 fdcc 	bl	80020a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : IND_Pin */
  GPIO_InitStruct.Pin = IND_Pin;
 800050c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000510:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000512:	2301      	movs	r3, #1
 8000514:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000516:	2300      	movs	r3, #0
 8000518:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800051a:	2302      	movs	r3, #2
 800051c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(IND_GPIO_Port, &GPIO_InitStruct);
 800051e:	f107 0310 	add.w	r3, r7, #16
 8000522:	4619      	mov	r1, r3
 8000524:	4815      	ldr	r0, [pc, #84]	; (800057c <MX_GPIO_Init+0xfc>)
 8000526:	f001 fc63 	bl	8001df0 <HAL_GPIO_Init>

  /*Configure GPIO pin : RF24_IRQ_Pin */
  GPIO_InitStruct.Pin = RF24_IRQ_Pin;
 800052a:	2301      	movs	r3, #1
 800052c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800052e:	4b15      	ldr	r3, [pc, #84]	; (8000584 <MX_GPIO_Init+0x104>)
 8000530:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000532:	2301      	movs	r3, #1
 8000534:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(RF24_IRQ_GPIO_Port, &GPIO_InitStruct);
 8000536:	f107 0310 	add.w	r3, r7, #16
 800053a:	4619      	mov	r1, r3
 800053c:	4810      	ldr	r0, [pc, #64]	; (8000580 <MX_GPIO_Init+0x100>)
 800053e:	f001 fc57 	bl	8001df0 <HAL_GPIO_Init>

  /*Configure GPIO pins : CSN_Pin CE_Pin */
  GPIO_InitStruct.Pin = CSN_Pin|CE_Pin;
 8000542:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000546:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000548:	2301      	movs	r3, #1
 800054a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800054c:	2300      	movs	r3, #0
 800054e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000550:	2302      	movs	r3, #2
 8000552:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000554:	f107 0310 	add.w	r3, r7, #16
 8000558:	4619      	mov	r1, r3
 800055a:	4809      	ldr	r0, [pc, #36]	; (8000580 <MX_GPIO_Init+0x100>)
 800055c:	f001 fc48 	bl	8001df0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 8000560:	2200      	movs	r2, #0
 8000562:	2105      	movs	r1, #5
 8000564:	2006      	movs	r0, #6
 8000566:	f001 fc18 	bl	8001d9a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800056a:	2006      	movs	r0, #6
 800056c:	f001 fc31 	bl	8001dd2 <HAL_NVIC_EnableIRQ>

}
 8000570:	bf00      	nop
 8000572:	3720      	adds	r7, #32
 8000574:	46bd      	mov	sp, r7
 8000576:	bd80      	pop	{r7, pc}
 8000578:	40021000 	.word	0x40021000
 800057c:	40011000 	.word	0x40011000
 8000580:	40010c00 	.word	0x40010c00
 8000584:	10210000 	.word	0x10210000

08000588 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	b082      	sub	sp, #8
 800058c:	af00      	add	r7, sp, #0
 800058e:	4603      	mov	r3, r0
 8000590:	80fb      	strh	r3, [r7, #6]
  if (GPIO_Pin == GPIO_PIN_0)
 8000592:	88fb      	ldrh	r3, [r7, #6]
 8000594:	2b01      	cmp	r3, #1
 8000596:	d10b      	bne.n	80005b0 <HAL_GPIO_EXTI_Callback+0x28>
  {
	  HAL_GPIO_WritePin(CE_GPIO_Port, CE_Pin, 0);
 8000598:	2200      	movs	r2, #0
 800059a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800059e:	4807      	ldr	r0, [pc, #28]	; (80005bc <HAL_GPIO_EXTI_Callback+0x34>)
 80005a0:	f001 fd80 	bl	80020a4 <HAL_GPIO_WritePin>
	  osSemaphoreRelease(semRadioHandle);
 80005a4:	4b06      	ldr	r3, [pc, #24]	; (80005c0 <HAL_GPIO_EXTI_Callback+0x38>)
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	4618      	mov	r0, r3
 80005aa:	f003 fce1 	bl	8003f70 <osSemaphoreRelease>
  else
    {
      __NOP();

    }
}
 80005ae:	e000      	b.n	80005b2 <HAL_GPIO_EXTI_Callback+0x2a>
      __NOP();
 80005b0:	bf00      	nop
}
 80005b2:	bf00      	nop
 80005b4:	3708      	adds	r7, #8
 80005b6:	46bd      	mov	sp, r7
 80005b8:	bd80      	pop	{r7, pc}
 80005ba:	bf00      	nop
 80005bc:	40010c00 	.word	0x40010c00
 80005c0:	200013c8 	.word	0x200013c8

080005c4 <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b084      	sub	sp, #16
 80005c8:	af02      	add	r7, sp, #8
 80005ca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	osTimerStart(unixTimerCounterHandle, 1000);
 80005cc:	4b2c      	ldr	r3, [pc, #176]	; (8000680 <StartDefaultTask+0xbc>)
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80005d4:	4618      	mov	r0, r3
 80005d6:	f003 fbeb 	bl	8003db0 <osTimerStart>
	static uint8_t strT[8];

    //unixtimeToString(unixtime,(char*)&strT);
#if defined( SERIAL_DEBUG)
		  static char str[100] = {0,};
		  sprintf(str, "start time: %s unixtime=%li\r\n",strT,unixtime);
 80005da:	4b2a      	ldr	r3, [pc, #168]	; (8000684 <StartDefaultTask+0xc0>)
 80005dc:	681b      	ldr	r3, [r3, #0]
 80005de:	4a2a      	ldr	r2, [pc, #168]	; (8000688 <StartDefaultTask+0xc4>)
 80005e0:	492a      	ldr	r1, [pc, #168]	; (800068c <StartDefaultTask+0xc8>)
 80005e2:	482b      	ldr	r0, [pc, #172]	; (8000690 <StartDefaultTask+0xcc>)
 80005e4:	f006 fd38 	bl	8007058 <siprintf>
		  HAL_UART_Transmit(&huart1, (uint8_t*)str, strlen(str), 1000);
 80005e8:	4829      	ldr	r0, [pc, #164]	; (8000690 <StartDefaultTask+0xcc>)
 80005ea:	f7ff fdb1 	bl	8000150 <strlen>
 80005ee:	4603      	mov	r3, r0
 80005f0:	b29a      	uxth	r2, r3
 80005f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005f6:	4926      	ldr	r1, [pc, #152]	; (8000690 <StartDefaultTask+0xcc>)
 80005f8:	4826      	ldr	r0, [pc, #152]	; (8000694 <StartDefaultTask+0xd0>)
 80005fa:	f003 f946 	bl	800388a <HAL_UART_Transmit>
  /* Infinite loop */
  for(;;)
  {

	  //event = osMessageGet(msgUnixTimerHandle, osWaitForever);
	  osSemaphoreWait(semTimeClockHandle,osWaitForever);
 80005fe:	4b26      	ldr	r3, [pc, #152]	; (8000698 <StartDefaultTask+0xd4>)
 8000600:	681b      	ldr	r3, [r3, #0]
 8000602:	f04f 31ff 	mov.w	r1, #4294967295
 8000606:	4618      	mov	r0, r3
 8000608:	f003 fc64 	bl	8003ed4 <osSemaphoreWait>

		  unixtime++;
 800060c:	4b1d      	ldr	r3, [pc, #116]	; (8000684 <StartDefaultTask+0xc0>)
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	3301      	adds	r3, #1
 8000612:	4a1c      	ldr	r2, [pc, #112]	; (8000684 <StartDefaultTask+0xc0>)
 8000614:	6013      	str	r3, [r2, #0]
		  //xSemaphoreGive(unixtimeMutexHandle);
		  if (unixtime % 60 ==0)
 8000616:	4b1b      	ldr	r3, [pc, #108]	; (8000684 <StartDefaultTask+0xc0>)
 8000618:	681a      	ldr	r2, [r3, #0]
 800061a:	4b20      	ldr	r3, [pc, #128]	; (800069c <StartDefaultTask+0xd8>)
 800061c:	fb83 1302 	smull	r1, r3, r3, r2
 8000620:	4413      	add	r3, r2
 8000622:	1159      	asrs	r1, r3, #5
 8000624:	17d3      	asrs	r3, r2, #31
 8000626:	1ac9      	subs	r1, r1, r3
 8000628:	460b      	mov	r3, r1
 800062a:	011b      	lsls	r3, r3, #4
 800062c:	1a5b      	subs	r3, r3, r1
 800062e:	009b      	lsls	r3, r3, #2
 8000630:	1ad1      	subs	r1, r2, r3
 8000632:	2900      	cmp	r1, #0
 8000634:	d11c      	bne.n	8000670 <StartDefaultTask+0xac>
		  {
		    unixtimeToString(unixtime,(char*)&strT);
 8000636:	4b13      	ldr	r3, [pc, #76]	; (8000684 <StartDefaultTask+0xc0>)
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	4913      	ldr	r1, [pc, #76]	; (8000688 <StartDefaultTask+0xc4>)
 800063c:	4618      	mov	r0, r3
 800063e:	f000 fa57 	bl	8000af0 <unixtimeToString>
#if defined( SERIAL_DEBUG)
		    snprintf(str,100, "\r\nserver time: %s unixtime=%li  %i\r\n\r\n",strT,unixtime,event.value.v);
 8000642:	4b10      	ldr	r3, [pc, #64]	; (8000684 <StartDefaultTask+0xc0>)
 8000644:	681b      	ldr	r3, [r3, #0]
 8000646:	4a16      	ldr	r2, [pc, #88]	; (80006a0 <StartDefaultTask+0xdc>)
 8000648:	6852      	ldr	r2, [r2, #4]
 800064a:	9201      	str	r2, [sp, #4]
 800064c:	9300      	str	r3, [sp, #0]
 800064e:	4b0e      	ldr	r3, [pc, #56]	; (8000688 <StartDefaultTask+0xc4>)
 8000650:	4a14      	ldr	r2, [pc, #80]	; (80006a4 <StartDefaultTask+0xe0>)
 8000652:	2164      	movs	r1, #100	; 0x64
 8000654:	480e      	ldr	r0, [pc, #56]	; (8000690 <StartDefaultTask+0xcc>)
 8000656:	f006 fccb 	bl	8006ff0 <sniprintf>
		    HAL_UART_Transmit(&huart1, (uint8_t*)str, strlen(str), 1000);
 800065a:	480d      	ldr	r0, [pc, #52]	; (8000690 <StartDefaultTask+0xcc>)
 800065c:	f7ff fd78 	bl	8000150 <strlen>
 8000660:	4603      	mov	r3, r0
 8000662:	b29a      	uxth	r2, r3
 8000664:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000668:	4909      	ldr	r1, [pc, #36]	; (8000690 <StartDefaultTask+0xcc>)
 800066a:	480a      	ldr	r0, [pc, #40]	; (8000694 <StartDefaultTask+0xd0>)
 800066c:	f003 f90d 	bl	800388a <HAL_UART_Transmit>
#endif
		  }
	  HAL_GPIO_TogglePin(GPIOC,IND_Pin);
 8000670:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000674:	480c      	ldr	r0, [pc, #48]	; (80006a8 <StartDefaultTask+0xe4>)
 8000676:	f001 fd2d 	bl	80020d4 <HAL_GPIO_TogglePin>
	  //osDelay(1000);
	  osThreadYield ();
 800067a:	f003 fb3f 	bl	8003cfc <osThreadYield>
	  osSemaphoreWait(semTimeClockHandle,osWaitForever);
 800067e:	e7be      	b.n	80005fe <StartDefaultTask+0x3a>
 8000680:	2000143c 	.word	0x2000143c
 8000684:	2000162c 	.word	0x2000162c
 8000688:	2000049c 	.word	0x2000049c
 800068c:	080078dc 	.word	0x080078dc
 8000690:	20000438 	.word	0x20000438
 8000694:	200013cc 	.word	0x200013cc
 8000698:	20001434 	.word	0x20001434
 800069c:	88888889 	.word	0x88888889
 80006a0:	200004a4 	.word	0x200004a4
 80006a4:	080078fc 	.word	0x080078fc
 80006a8:	40011000 	.word	0x40011000
 80006ac:	00000000 	.word	0x00000000

080006b0 <StartRadio>:

/* USER CODE BEGIN Header_StartRadio */

/* USER CODE END Header_StartRadio */
void StartRadio(void const * argument)
{
 80006b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80006b2:	b091      	sub	sp, #68	; 0x44
 80006b4:	af0a      	add	r7, sp, #40	; 0x28
 80006b6:	60f8      	str	r0, [r7, #12]
  /* USER CODE BEGIN StartRadio */
	static osEvent event;
	  receiver_init();
 80006b8:	f000 ff50 	bl	800155c <receiver_init>
	  uint8_t res = nRF24_Check(); //isChipConnected(); // проверяет подключён ли модуль к SPI
 80006bc:	f000 fcbc 	bl	8001038 <nRF24_Check>
 80006c0:	4603      	mov	r3, r0
 80006c2:	75fb      	strb	r3, [r7, #23]

	  static char str[100] = {0,};
	  snprintf(str, 64, "Connected: %s\n", res ? "OK" : "NOT OK");
 80006c4:	7dfb      	ldrb	r3, [r7, #23]
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d001      	beq.n	80006ce <StartRadio+0x1e>
 80006ca:	4b65      	ldr	r3, [pc, #404]	; (8000860 <StartRadio+0x1b0>)
 80006cc:	e000      	b.n	80006d0 <StartRadio+0x20>
 80006ce:	4b65      	ldr	r3, [pc, #404]	; (8000864 <StartRadio+0x1b4>)
 80006d0:	4a65      	ldr	r2, [pc, #404]	; (8000868 <StartRadio+0x1b8>)
 80006d2:	2140      	movs	r1, #64	; 0x40
 80006d4:	4865      	ldr	r0, [pc, #404]	; (800086c <StartRadio+0x1bc>)
 80006d6:	f006 fc8b 	bl	8006ff0 <sniprintf>
	  HAL_UART_Transmit(&huart1, (uint8_t*)str, strlen(str), 1000);
 80006da:	4864      	ldr	r0, [pc, #400]	; (800086c <StartRadio+0x1bc>)
 80006dc:	f7ff fd38 	bl	8000150 <strlen>
 80006e0:	4603      	mov	r3, r0
 80006e2:	b29a      	uxth	r2, r3
 80006e4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006e8:	4960      	ldr	r1, [pc, #384]	; (800086c <StartRadio+0x1bc>)
 80006ea:	4861      	ldr	r0, [pc, #388]	; (8000870 <StartRadio+0x1c0>)
 80006ec:	f003 f8cd 	bl	800388a <HAL_UART_Transmit>

	  res = NRF_Init(); // инициализация
 80006f0:	f000 fbfa 	bl	8000ee8 <NRF_Init>
 80006f4:	4603      	mov	r3, r0
 80006f6:	75fb      	strb	r3, [r7, #23]
#if defined( SERIAL_DEBUG)
	  snprintf(str, 64, "Init: %s\n", res > 0 && res < 255 ? "OK" : "NOT OK");
 80006f8:	7dfb      	ldrb	r3, [r7, #23]
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d004      	beq.n	8000708 <StartRadio+0x58>
 80006fe:	7dfb      	ldrb	r3, [r7, #23]
 8000700:	2bff      	cmp	r3, #255	; 0xff
 8000702:	d001      	beq.n	8000708 <StartRadio+0x58>
 8000704:	4b56      	ldr	r3, [pc, #344]	; (8000860 <StartRadio+0x1b0>)
 8000706:	e000      	b.n	800070a <StartRadio+0x5a>
 8000708:	4b56      	ldr	r3, [pc, #344]	; (8000864 <StartRadio+0x1b4>)
 800070a:	4a5a      	ldr	r2, [pc, #360]	; (8000874 <StartRadio+0x1c4>)
 800070c:	2140      	movs	r1, #64	; 0x40
 800070e:	4857      	ldr	r0, [pc, #348]	; (800086c <StartRadio+0x1bc>)
 8000710:	f006 fc6e 	bl	8006ff0 <sniprintf>
	  HAL_UART_Transmit(&huart1, (uint8_t*)str, strlen(str), 1000);
 8000714:	4855      	ldr	r0, [pc, #340]	; (800086c <StartRadio+0x1bc>)
 8000716:	f7ff fd1b 	bl	8000150 <strlen>
 800071a:	4603      	mov	r3, r0
 800071c:	b29a      	uxth	r2, r3
 800071e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000722:	4952      	ldr	r1, [pc, #328]	; (800086c <StartRadio+0x1bc>)
 8000724:	4852      	ldr	r0, [pc, #328]	; (8000870 <StartRadio+0x1c0>)
 8000726:	f003 f8b0 	bl	800388a <HAL_UART_Transmit>
#endif
	  ////////////// SET ////////////////

	  setPALevel(RF24_PA_LOW);
 800072a:	2001      	movs	r0, #1
 800072c:	f000 fe97 	bl	800145e <setPALevel>
	  //uint8_t status = getPALevel();
	  setAutoAck(true);
 8000730:	2001      	movs	r0, #1
 8000732:	f000 fe7f 	bl	8001434 <setAutoAck>
	  setPayloadSize(sizeof(struct meteo_data_struct));
 8000736:	201c      	movs	r0, #28
 8000738:	f000 fbb8 	bl	8000eac <setPayloadSize>
	  enableDynamicPayloads();
 800073c:	f000 fe04 	bl	8001348 <enableDynamicPayloads>
	  enableAckPayload();
 8000740:	f000 fe22 	bl	8001388 <enableAckPayload>
	  setChannel(106);
 8000744:	206a      	movs	r0, #106	; 0x6a
 8000746:	f000 fba3 	bl	8000e90 <setChannel>
		  openWritingPipe(pipe_addresses[0]);
 800074a:	a439      	add	r4, pc, #228	; (adr r4, 8000830 <StartRadio+0x180>)
 800074c:	e9d4 3400 	ldrd	r3, r4, [r4]
 8000750:	4618      	mov	r0, r3
 8000752:	4621      	mov	r1, r4
 8000754:	f000 fd3e 	bl	80011d4 <openWritingPipe>
		  openReadingPipe(1,pipe_addresses[1]); //0xF0F0F0F0E1LL);
 8000758:	a437      	add	r4, pc, #220	; (adr r4, 8000838 <StartRadio+0x188>)
 800075a:	e9d4 3400 	ldrd	r3, r4, [r4]
 800075e:	461a      	mov	r2, r3
 8000760:	4623      	mov	r3, r4
 8000762:	2001      	movs	r0, #1
 8000764:	f000 fd58 	bl	8001218 <openReadingPipe>
		  openReadingPipe(2,pipe_addresses[2]);
 8000768:	a435      	add	r4, pc, #212	; (adr r4, 8000840 <StartRadio+0x190>)
 800076a:	e9d4 3400 	ldrd	r3, r4, [r4]
 800076e:	461a      	mov	r2, r3
 8000770:	4623      	mov	r3, r4
 8000772:	2002      	movs	r0, #2
 8000774:	f000 fd50 	bl	8001218 <openReadingPipe>
		  openReadingPipe(3,pipe_addresses[3]);
 8000778:	a433      	add	r4, pc, #204	; (adr r4, 8000848 <StartRadio+0x198>)
 800077a:	e9d4 3400 	ldrd	r3, r4, [r4]
 800077e:	461a      	mov	r2, r3
 8000780:	4623      	mov	r3, r4
 8000782:	2003      	movs	r0, #3
 8000784:	f000 fd48 	bl	8001218 <openReadingPipe>
		  openReadingPipe(4,pipe_addresses[4]);
 8000788:	a431      	add	r4, pc, #196	; (adr r4, 8000850 <StartRadio+0x1a0>)
 800078a:	e9d4 3400 	ldrd	r3, r4, [r4]
 800078e:	461a      	mov	r2, r3
 8000790:	4623      	mov	r3, r4
 8000792:	2004      	movs	r0, #4
 8000794:	f000 fd40 	bl	8001218 <openReadingPipe>
		  openReadingPipe(5,pipe_addresses[5]);
 8000798:	a42f      	add	r4, pc, #188	; (adr r4, 8000858 <StartRadio+0x1a8>)
 800079a:	e9d4 3400 	ldrd	r3, r4, [r4]
 800079e:	461a      	mov	r2, r3
 80007a0:	4623      	mov	r3, r4
 80007a2:	2005      	movs	r0, #5
 80007a4:	f000 fd38 	bl	8001218 <openReadingPipe>
		  CreateNullAck(1);
 80007a8:	2001      	movs	r0, #1
 80007aa:	f000 ff81 	bl	80016b0 <CreateNullAck>
		  writeAckPayload(1,&pipeData[1].ackData, sizeof(struct server_ack ));
 80007ae:	221c      	movs	r2, #28
 80007b0:	4931      	ldr	r1, [pc, #196]	; (8000878 <StartRadio+0x1c8>)
 80007b2:	2001      	movs	r0, #1
 80007b4:	f000 fe08 	bl	80013c8 <writeAckPayload>
		  CreateNullAck(2);
 80007b8:	2002      	movs	r0, #2
 80007ba:	f000 ff79 	bl	80016b0 <CreateNullAck>
		  writeAckPayload(2,&pipeData[2].ackData, sizeof(struct server_ack ));
 80007be:	221c      	movs	r2, #28
 80007c0:	492e      	ldr	r1, [pc, #184]	; (800087c <StartRadio+0x1cc>)
 80007c2:	2002      	movs	r0, #2
 80007c4:	f000 fe00 	bl	80013c8 <writeAckPayload>
		  CreateNullAck(3);
 80007c8:	2003      	movs	r0, #3
 80007ca:	f000 ff71 	bl	80016b0 <CreateNullAck>
		  writeAckPayload(3,&pipeData[3].ackData, sizeof(struct server_ack ));
 80007ce:	221c      	movs	r2, #28
 80007d0:	492b      	ldr	r1, [pc, #172]	; (8000880 <StartRadio+0x1d0>)
 80007d2:	2003      	movs	r0, #3
 80007d4:	f000 fdf8 	bl	80013c8 <writeAckPayload>
		  CreateNullAck(4);
 80007d8:	2004      	movs	r0, #4
 80007da:	f000 ff69 	bl	80016b0 <CreateNullAck>
		  writeAckPayload(4,&pipeData[4].ackData, sizeof(struct server_ack ));
 80007de:	221c      	movs	r2, #28
 80007e0:	4928      	ldr	r1, [pc, #160]	; (8000884 <StartRadio+0x1d4>)
 80007e2:	2004      	movs	r0, #4
 80007e4:	f000 fdf0 	bl	80013c8 <writeAckPayload>
		  CreateNullAck(5);
 80007e8:	2005      	movs	r0, #5
 80007ea:	f000 ff61 	bl	80016b0 <CreateNullAck>
		  writeAckPayload(5,&pipeData[5].ackData, sizeof(struct server_ack ));
 80007ee:	221c      	movs	r2, #28
 80007f0:	4925      	ldr	r1, [pc, #148]	; (8000888 <StartRadio+0x1d8>)
 80007f2:	2005      	movs	r0, #5
 80007f4:	f000 fde8 	bl	80013c8 <writeAckPayload>
		  //writeAckPayload(3,&pipeData[3].ackData, sizeof(struct server_ack ));
		  startListening();
 80007f8:	f000 fc56 	bl	80010a8 <startListening>
	  static uint8_t pipeNo;
	  static char strT[8];
	  static struct ReceivedData rData;

	  //event = osMessageGet(msgPipeAllocHandle, osWaitForever);
	  osSemaphoreWait(semRadioHandle,osWaitForever);
 80007fc:	4b23      	ldr	r3, [pc, #140]	; (800088c <StartRadio+0x1dc>)
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	f04f 31ff 	mov.w	r1, #4294967295
 8000804:	4618      	mov	r0, r3
 8000806:	f003 fb65 	bl	8003ed4 <osSemaphoreWait>
	  status = whatHappened();
 800080a:	f000 fcd4 	bl	80011b6 <whatHappened>
 800080e:	4603      	mov	r3, r0
 8000810:	461a      	mov	r2, r3
 8000812:	4b1f      	ldr	r3, [pc, #124]	; (8000890 <StartRadio+0x1e0>)
 8000814:	701a      	strb	r2, [r3, #0]
	  rx_ready = status & (1 << RX_DR);
 8000816:	4b1e      	ldr	r3, [pc, #120]	; (8000890 <StartRadio+0x1e0>)
 8000818:	781b      	ldrb	r3, [r3, #0]
 800081a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800081e:	b2da      	uxtb	r2, r3
 8000820:	4b1c      	ldr	r3, [pc, #112]	; (8000894 <StartRadio+0x1e4>)
 8000822:	701a      	strb	r2, [r3, #0]
	  if (rx_ready){
 8000824:	4b1b      	ldr	r3, [pc, #108]	; (8000894 <StartRadio+0x1e4>)
 8000826:	781b      	ldrb	r3, [r3, #0]
 8000828:	2b00      	cmp	r3, #0
 800082a:	f000 811c 	beq.w	8000a66 <StartRadio+0x3b6>
		  while( available(&pipeNo)){              // Read all available payloads
 800082e:	e113      	b.n	8000a58 <StartRadio+0x3a8>
 8000830:	f0f0f0d2 	.word	0xf0f0f0d2
 8000834:	000000f0 	.word	0x000000f0
 8000838:	f0f0f0e1 	.word	0xf0f0f0e1
 800083c:	000000f0 	.word	0x000000f0
 8000840:	f0f0f0e2 	.word	0xf0f0f0e2
 8000844:	000000f0 	.word	0x000000f0
 8000848:	f0f0f0e3 	.word	0xf0f0f0e3
 800084c:	000000f0 	.word	0x000000f0
 8000850:	f0f0f0e4 	.word	0xf0f0f0e4
 8000854:	000000f0 	.word	0x000000f0
 8000858:	f0f0f0e5 	.word	0xf0f0f0e5
 800085c:	000000f0 	.word	0x000000f0
 8000860:	08007924 	.word	0x08007924
 8000864:	08007928 	.word	0x08007928
 8000868:	08007930 	.word	0x08007930
 800086c:	200004b0 	.word	0x200004b0
 8000870:	200013cc 	.word	0x200013cc
 8000874:	08007940 	.word	0x08007940
 8000878:	20001488 	.word	0x20001488
 800087c:	200014b8 	.word	0x200014b8
 8000880:	200014e8 	.word	0x200014e8
 8000884:	20001518 	.word	0x20001518
 8000888:	20001548 	.word	0x20001548
 800088c:	200013c8 	.word	0x200013c8
 8000890:	20000514 	.word	0x20000514
 8000894:	20000515 	.word	0x20000515
			status = getPayloadSize();
 8000898:	f000 fb1c 	bl	8000ed4 <getPayloadSize>
 800089c:	4603      	mov	r3, r0
 800089e:	461a      	mov	r2, r3
 80008a0:	4b73      	ldr	r3, [pc, #460]	; (8000a70 <StartRadio+0x3c0>)
 80008a2:	701a      	strb	r2, [r3, #0]
			rData.pipeNo=pipeNo;
 80008a4:	4b73      	ldr	r3, [pc, #460]	; (8000a74 <StartRadio+0x3c4>)
 80008a6:	781a      	ldrb	r2, [r3, #0]
 80008a8:	4b73      	ldr	r3, [pc, #460]	; (8000a78 <StartRadio+0x3c8>)
 80008aa:	701a      	strb	r2, [r3, #0]
			read( &rData.data, sizeof(struct meteo_data_struct));
 80008ac:	211c      	movs	r1, #28
 80008ae:	4873      	ldr	r0, [pc, #460]	; (8000a7c <StartRadio+0x3cc>)
 80008b0:	f000 fc6e 	bl	8001190 <read>
  			PackDataToAck(&rData);
 80008b4:	4870      	ldr	r0, [pc, #448]	; (8000a78 <StartRadio+0x3c8>)
 80008b6:	f000 fe5f 	bl	8001578 <PackDataToAck>
			writeAckPayload(pipeNo,&pipeData[pipeNo].ackData, sizeof(struct server_ack ));
 80008ba:	4b6e      	ldr	r3, [pc, #440]	; (8000a74 <StartRadio+0x3c4>)
 80008bc:	7818      	ldrb	r0, [r3, #0]
 80008be:	4b6d      	ldr	r3, [pc, #436]	; (8000a74 <StartRadio+0x3c4>)
 80008c0:	781b      	ldrb	r3, [r3, #0]
 80008c2:	461a      	mov	r2, r3
 80008c4:	4613      	mov	r3, r2
 80008c6:	005b      	lsls	r3, r3, #1
 80008c8:	4413      	add	r3, r2
 80008ca:	011b      	lsls	r3, r3, #4
 80008cc:	3310      	adds	r3, #16
 80008ce:	4a6c      	ldr	r2, [pc, #432]	; (8000a80 <StartRadio+0x3d0>)
 80008d0:	4413      	add	r3, r2
 80008d2:	3304      	adds	r3, #4
 80008d4:	221c      	movs	r2, #28
 80008d6:	4619      	mov	r1, r3
 80008d8:	f000 fd76 	bl	80013c8 <writeAckPayload>


			#if defined( SERIAL_DEBUG)
		  	unixtimeToString( rData.data.meteo_data.measurement_time,(char*)&strT);
 80008dc:	4b66      	ldr	r3, [pc, #408]	; (8000a78 <StartRadio+0x3c8>)
 80008de:	68db      	ldr	r3, [r3, #12]
 80008e0:	4968      	ldr	r1, [pc, #416]	; (8000a84 <StartRadio+0x3d4>)
 80008e2:	4618      	mov	r0, r3
 80008e4:	f000 f904 	bl	8000af0 <unixtimeToString>
		  	snprintf(str, 100, "\r\npipe %i got: T=%i P=%i H=%i state=%i power=%i q=%i type=%i delay=%lius  time= %s Vcc=%i\r\n",
		  		rData.pipeNo,
 80008e8:	4b63      	ldr	r3, [pc, #396]	; (8000a78 <StartRadio+0x3c8>)
 80008ea:	781b      	ldrb	r3, [r3, #0]
		  	snprintf(str, 100, "\r\npipe %i got: T=%i P=%i H=%i state=%i power=%i q=%i type=%i delay=%lius  time= %s Vcc=%i\r\n",
 80008ec:	469c      	mov	ip, r3
		  		rData.data.meteo_data.T,
 80008ee:	4b62      	ldr	r3, [pc, #392]	; (8000a78 <StartRadio+0x3c8>)
 80008f0:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
		  	snprintf(str, 100, "\r\npipe %i got: T=%i P=%i H=%i state=%i power=%i q=%i type=%i delay=%lius  time= %s Vcc=%i\r\n",
 80008f4:	4619      	mov	r1, r3
				rData.data.meteo_data.P,
 80008f6:	4b60      	ldr	r3, [pc, #384]	; (8000a78 <StartRadio+0x3c8>)
 80008f8:	8a5b      	ldrh	r3, [r3, #18]
		  	snprintf(str, 100, "\r\npipe %i got: T=%i P=%i H=%i state=%i power=%i q=%i type=%i delay=%lius  time= %s Vcc=%i\r\n",
 80008fa:	4618      	mov	r0, r3
				rData.data.meteo_data.H,
 80008fc:	4b5e      	ldr	r3, [pc, #376]	; (8000a78 <StartRadio+0x3c8>)
 80008fe:	8a9b      	ldrh	r3, [r3, #20]
		  	snprintf(str, 100, "\r\npipe %i got: T=%i P=%i H=%i state=%i power=%i q=%i type=%i delay=%lius  time= %s Vcc=%i\r\n",
 8000900:	461c      	mov	r4, r3
				rData.data.state,
 8000902:	4b5d      	ldr	r3, [pc, #372]	; (8000a78 <StartRadio+0x3c8>)
 8000904:	7e9b      	ldrb	r3, [r3, #26]
		  	snprintf(str, 100, "\r\npipe %i got: T=%i P=%i H=%i state=%i power=%i q=%i type=%i delay=%lius  time= %s Vcc=%i\r\n",
 8000906:	461d      	mov	r5, r3
				rData.data.power,
 8000908:	4b5b      	ldr	r3, [pc, #364]	; (8000a78 <StartRadio+0x3c8>)
 800090a:	7edb      	ldrb	r3, [r3, #27]
		  	snprintf(str, 100, "\r\npipe %i got: T=%i P=%i H=%i state=%i power=%i q=%i type=%i delay=%lius  time= %s Vcc=%i\r\n",
 800090c:	461e      	mov	r6, r3
				rData.data.query,
 800090e:	4b5a      	ldr	r3, [pc, #360]	; (8000a78 <StartRadio+0x3c8>)
 8000910:	7e1b      	ldrb	r3, [r3, #24]
		  	snprintf(str, 100, "\r\npipe %i got: T=%i P=%i H=%i state=%i power=%i q=%i type=%i delay=%lius  time= %s Vcc=%i\r\n",
 8000912:	60bb      	str	r3, [r7, #8]
				rData.data.type_of_data,
 8000914:	4b58      	ldr	r3, [pc, #352]	; (8000a78 <StartRadio+0x3c8>)
 8000916:	7e5b      	ldrb	r3, [r3, #25]
		  	snprintf(str, 100, "\r\npipe %i got: T=%i P=%i H=%i state=%i power=%i q=%i type=%i delay=%lius  time= %s Vcc=%i\r\n",
 8000918:	607b      	str	r3, [r7, #4]
 800091a:	4b57      	ldr	r3, [pc, #348]	; (8000a78 <StartRadio+0x3c8>)
 800091c:	685b      	ldr	r3, [r3, #4]
				rData.data.round_tripDelay,
					  //pPipeData->data.unixtime,
				strT,
				rData.data.vcc);
 800091e:	4a56      	ldr	r2, [pc, #344]	; (8000a78 <StartRadio+0x3c8>)
 8000920:	7f12      	ldrb	r2, [r2, #28]
		  	snprintf(str, 100, "\r\npipe %i got: T=%i P=%i H=%i state=%i power=%i q=%i type=%i delay=%lius  time= %s Vcc=%i\r\n",
 8000922:	9209      	str	r2, [sp, #36]	; 0x24
 8000924:	4a57      	ldr	r2, [pc, #348]	; (8000a84 <StartRadio+0x3d4>)
 8000926:	9208      	str	r2, [sp, #32]
 8000928:	9307      	str	r3, [sp, #28]
 800092a:	687a      	ldr	r2, [r7, #4]
 800092c:	9206      	str	r2, [sp, #24]
 800092e:	68bb      	ldr	r3, [r7, #8]
 8000930:	9305      	str	r3, [sp, #20]
 8000932:	9604      	str	r6, [sp, #16]
 8000934:	9503      	str	r5, [sp, #12]
 8000936:	9402      	str	r4, [sp, #8]
 8000938:	9001      	str	r0, [sp, #4]
 800093a:	9100      	str	r1, [sp, #0]
 800093c:	4663      	mov	r3, ip
 800093e:	4a52      	ldr	r2, [pc, #328]	; (8000a88 <StartRadio+0x3d8>)
 8000940:	2164      	movs	r1, #100	; 0x64
 8000942:	4852      	ldr	r0, [pc, #328]	; (8000a8c <StartRadio+0x3dc>)
 8000944:	f006 fb54 	bl	8006ff0 <sniprintf>
	  			HAL_UART_Transmit(&huart1, (uint8_t*)str, strlen(str), 1000);
 8000948:	4850      	ldr	r0, [pc, #320]	; (8000a8c <StartRadio+0x3dc>)
 800094a:	f7ff fc01 	bl	8000150 <strlen>
 800094e:	4603      	mov	r3, r0
 8000950:	b29a      	uxth	r2, r3
 8000952:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000956:	494d      	ldr	r1, [pc, #308]	; (8000a8c <StartRadio+0x3dc>)
 8000958:	484d      	ldr	r0, [pc, #308]	; (8000a90 <StartRadio+0x3e0>)
 800095a:	f002 ff96 	bl	800388a <HAL_UART_Transmit>

			  	unixtimeToString( pipeData[pipeNo].ackData.server_time,(char*)&strT);
 800095e:	4b45      	ldr	r3, [pc, #276]	; (8000a74 <StartRadio+0x3c4>)
 8000960:	781b      	ldrb	r3, [r3, #0]
 8000962:	4619      	mov	r1, r3
 8000964:	4a46      	ldr	r2, [pc, #280]	; (8000a80 <StartRadio+0x3d0>)
 8000966:	460b      	mov	r3, r1
 8000968:	005b      	lsls	r3, r3, #1
 800096a:	440b      	add	r3, r1
 800096c:	011b      	lsls	r3, r3, #4
 800096e:	4413      	add	r3, r2
 8000970:	3318      	adds	r3, #24
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	4943      	ldr	r1, [pc, #268]	; (8000a84 <StartRadio+0x3d4>)
 8000976:	4618      	mov	r0, r3
 8000978:	f000 f8ba 	bl	8000af0 <unixtimeToString>
			  	snprintf(str, 100, "prepared ack: query=%i command=%i T=%i P=%i H=%i time= %s \r\n",
			  		pipeData[pipeNo].ackData.ack_query,
 800097c:	4b3d      	ldr	r3, [pc, #244]	; (8000a74 <StartRadio+0x3c4>)
 800097e:	781b      	ldrb	r3, [r3, #0]
 8000980:	4619      	mov	r1, r3
 8000982:	4a3f      	ldr	r2, [pc, #252]	; (8000a80 <StartRadio+0x3d0>)
 8000984:	460b      	mov	r3, r1
 8000986:	005b      	lsls	r3, r3, #1
 8000988:	440b      	add	r3, r1
 800098a:	011b      	lsls	r3, r3, #4
 800098c:	4413      	add	r3, r2
 800098e:	3329      	adds	r3, #41	; 0x29
 8000990:	781b      	ldrb	r3, [r3, #0]
			  	snprintf(str, 100, "prepared ack: query=%i command=%i T=%i P=%i H=%i time= %s \r\n",
 8000992:	461e      	mov	r6, r3
					pipeData[pipeNo].ackData.command,
 8000994:	4b37      	ldr	r3, [pc, #220]	; (8000a74 <StartRadio+0x3c4>)
 8000996:	781b      	ldrb	r3, [r3, #0]
 8000998:	4619      	mov	r1, r3
 800099a:	4a39      	ldr	r2, [pc, #228]	; (8000a80 <StartRadio+0x3d0>)
 800099c:	460b      	mov	r3, r1
 800099e:	005b      	lsls	r3, r3, #1
 80009a0:	440b      	add	r3, r1
 80009a2:	011b      	lsls	r3, r3, #4
 80009a4:	4413      	add	r3, r2
 80009a6:	3328      	adds	r3, #40	; 0x28
 80009a8:	781b      	ldrb	r3, [r3, #0]
			  	snprintf(str, 100, "prepared ack: query=%i command=%i T=%i P=%i H=%i time= %s \r\n",
 80009aa:	4618      	mov	r0, r3
					pipeData[pipeNo].ackData.meteo_data.T,
 80009ac:	4b31      	ldr	r3, [pc, #196]	; (8000a74 <StartRadio+0x3c4>)
 80009ae:	781b      	ldrb	r3, [r3, #0]
 80009b0:	4619      	mov	r1, r3
 80009b2:	4a33      	ldr	r2, [pc, #204]	; (8000a80 <StartRadio+0x3d0>)
 80009b4:	460b      	mov	r3, r1
 80009b6:	005b      	lsls	r3, r3, #1
 80009b8:	440b      	add	r3, r1
 80009ba:	011b      	lsls	r3, r3, #4
 80009bc:	4413      	add	r3, r2
 80009be:	3320      	adds	r3, #32
 80009c0:	f9b3 3000 	ldrsh.w	r3, [r3]
			  	snprintf(str, 100, "prepared ack: query=%i command=%i T=%i P=%i H=%i time= %s \r\n",
 80009c4:	461c      	mov	r4, r3
					pipeData[pipeNo].ackData.meteo_data.P,
 80009c6:	4b2b      	ldr	r3, [pc, #172]	; (8000a74 <StartRadio+0x3c4>)
 80009c8:	781b      	ldrb	r3, [r3, #0]
 80009ca:	4619      	mov	r1, r3
 80009cc:	4a2c      	ldr	r2, [pc, #176]	; (8000a80 <StartRadio+0x3d0>)
 80009ce:	460b      	mov	r3, r1
 80009d0:	005b      	lsls	r3, r3, #1
 80009d2:	440b      	add	r3, r1
 80009d4:	011b      	lsls	r3, r3, #4
 80009d6:	4413      	add	r3, r2
 80009d8:	3322      	adds	r3, #34	; 0x22
 80009da:	881b      	ldrh	r3, [r3, #0]
			  	snprintf(str, 100, "prepared ack: query=%i command=%i T=%i P=%i H=%i time= %s \r\n",
 80009dc:	461d      	mov	r5, r3
					pipeData[pipeNo].ackData.meteo_data.H,
 80009de:	4b25      	ldr	r3, [pc, #148]	; (8000a74 <StartRadio+0x3c4>)
 80009e0:	781b      	ldrb	r3, [r3, #0]
 80009e2:	4619      	mov	r1, r3
 80009e4:	4a26      	ldr	r2, [pc, #152]	; (8000a80 <StartRadio+0x3d0>)
 80009e6:	460b      	mov	r3, r1
 80009e8:	005b      	lsls	r3, r3, #1
 80009ea:	440b      	add	r3, r1
 80009ec:	011b      	lsls	r3, r3, #4
 80009ee:	4413      	add	r3, r2
 80009f0:	3324      	adds	r3, #36	; 0x24
 80009f2:	881b      	ldrh	r3, [r3, #0]
			  	snprintf(str, 100, "prepared ack: query=%i command=%i T=%i P=%i H=%i time= %s \r\n",
 80009f4:	461a      	mov	r2, r3
 80009f6:	4b23      	ldr	r3, [pc, #140]	; (8000a84 <StartRadio+0x3d4>)
 80009f8:	9304      	str	r3, [sp, #16]
 80009fa:	9203      	str	r2, [sp, #12]
 80009fc:	9502      	str	r5, [sp, #8]
 80009fe:	9401      	str	r4, [sp, #4]
 8000a00:	9000      	str	r0, [sp, #0]
 8000a02:	4633      	mov	r3, r6
 8000a04:	4a23      	ldr	r2, [pc, #140]	; (8000a94 <StartRadio+0x3e4>)
 8000a06:	2164      	movs	r1, #100	; 0x64
 8000a08:	4820      	ldr	r0, [pc, #128]	; (8000a8c <StartRadio+0x3dc>)
 8000a0a:	f006 faf1 	bl	8006ff0 <sniprintf>
					strT);
		  			HAL_UART_Transmit(&huart1, (uint8_t*)str, strlen(str), 1000);
 8000a0e:	481f      	ldr	r0, [pc, #124]	; (8000a8c <StartRadio+0x3dc>)
 8000a10:	f7ff fb9e 	bl	8000150 <strlen>
 8000a14:	4603      	mov	r3, r0
 8000a16:	b29a      	uxth	r2, r3
 8000a18:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a1c:	491b      	ldr	r1, [pc, #108]	; (8000a8c <StartRadio+0x3dc>)
 8000a1e:	481c      	ldr	r0, [pc, #112]	; (8000a90 <StartRadio+0x3e0>)
 8000a20:	f002 ff33 	bl	800388a <HAL_UART_Transmit>
	  			unixtimeToString(unixtime,(char*)&strT);
 8000a24:	4b1c      	ldr	r3, [pc, #112]	; (8000a98 <StartRadio+0x3e8>)
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	4916      	ldr	r1, [pc, #88]	; (8000a84 <StartRadio+0x3d4>)
 8000a2a:	4618      	mov	r0, r3
 8000a2c:	f000 f860 	bl	8000af0 <unixtimeToString>
  	  			snprintf(str, 100, "now: time= %s\r\n",strT);
 8000a30:	4b14      	ldr	r3, [pc, #80]	; (8000a84 <StartRadio+0x3d4>)
 8000a32:	4a1a      	ldr	r2, [pc, #104]	; (8000a9c <StartRadio+0x3ec>)
 8000a34:	2164      	movs	r1, #100	; 0x64
 8000a36:	4815      	ldr	r0, [pc, #84]	; (8000a8c <StartRadio+0x3dc>)
 8000a38:	f006 fada 	bl	8006ff0 <sniprintf>
	  			HAL_UART_Transmit(&huart1, (uint8_t*)str, strlen(str), 1000);
 8000a3c:	4813      	ldr	r0, [pc, #76]	; (8000a8c <StartRadio+0x3dc>)
 8000a3e:	f7ff fb87 	bl	8000150 <strlen>
 8000a42:	4603      	mov	r3, r0
 8000a44:	b29a      	uxth	r2, r3
 8000a46:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a4a:	4910      	ldr	r1, [pc, #64]	; (8000a8c <StartRadio+0x3dc>)
 8000a4c:	4810      	ldr	r0, [pc, #64]	; (8000a90 <StartRadio+0x3e0>)
 8000a4e:	f002 ff1c 	bl	800388a <HAL_UART_Transmit>
	  			osDelay(100);
 8000a52:	2064      	movs	r0, #100	; 0x64
 8000a54:	f003 f964 	bl	8003d20 <osDelay>
		  while( available(&pipeNo)){              // Read all available payloads
 8000a58:	4806      	ldr	r0, [pc, #24]	; (8000a74 <StartRadio+0x3c4>)
 8000a5a:	f000 fb77 	bl	800114c <available>
 8000a5e:	4603      	mov	r3, r0
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	f47f af19 	bne.w	8000898 <StartRadio+0x1e8>
			#endif

		  	}
		}
		startListening();
 8000a66:	f000 fb1f 	bl	80010a8 <startListening>
		osThreadYield ();
 8000a6a:	f003 f947 	bl	8003cfc <osThreadYield>
  {
 8000a6e:	e6c5      	b.n	80007fc <StartRadio+0x14c>
 8000a70:	20000514 	.word	0x20000514
 8000a74:	20000516 	.word	0x20000516
 8000a78:	20000518 	.word	0x20000518
 8000a7c:	2000051c 	.word	0x2000051c
 8000a80:	20001444 	.word	0x20001444
 8000a84:	20000538 	.word	0x20000538
 8000a88:	0800794c 	.word	0x0800794c
 8000a8c:	200004b0 	.word	0x200004b0
 8000a90:	200013cc 	.word	0x200013cc
 8000a94:	080079a8 	.word	0x080079a8
 8000a98:	2000162c 	.word	0x2000162c
 8000a9c:	080079e8 	.word	0x080079e8

08000aa0 <CallbackUnixTimerCounter>:
  /* USER CODE END StartRadio */
}

/* CallbackUnixTimerCounter function */
void CallbackUnixTimerCounter(void const * argument)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b082      	sub	sp, #8
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CallbackUnixTimerCounter */
	//osMessagePut(msgUnixTimerHandle, 0, 0);
	osSemaphoreRelease(semTimeClockHandle);
 8000aa8:	4b04      	ldr	r3, [pc, #16]	; (8000abc <CallbackUnixTimerCounter+0x1c>)
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	4618      	mov	r0, r3
 8000aae:	f003 fa5f 	bl	8003f70 <osSemaphoreRelease>

  /* USER CODE END CallbackUnixTimerCounter */
}
 8000ab2:	bf00      	nop
 8000ab4:	3708      	adds	r7, #8
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	bd80      	pop	{r7, pc}
 8000aba:	bf00      	nop
 8000abc:	20001434 	.word	0x20001434

08000ac0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b082      	sub	sp, #8
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	4a04      	ldr	r2, [pc, #16]	; (8000ae0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000ace:	4293      	cmp	r3, r2
 8000ad0:	d101      	bne.n	8000ad6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000ad2:	f001 f86f 	bl	8001bb4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
  /* USER CODE END Callback 1 */
}
 8000ad6:	bf00      	nop
 8000ad8:	3708      	adds	r7, #8
 8000ada:	46bd      	mov	sp, r7
 8000adc:	bd80      	pop	{r7, pc}
 8000ade:	bf00      	nop
 8000ae0:	40000800 	.word	0x40000800

08000ae4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000ae8:	bf00      	nop
 8000aea:	46bd      	mov	sp, r7
 8000aec:	bc80      	pop	{r7}
 8000aee:	4770      	bx	lr

08000af0 <unixtimeToString>:
struct meteo meteoOutDoor,meteoInDoor;



void unixtimeToString(uint32_t unixT,char* str)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b084      	sub	sp, #16
 8000af4:	af02      	add	r7, sp, #8
 8000af6:	6078      	str	r0, [r7, #4]
 8000af8:	6039      	str	r1, [r7, #0]
    unixT -= 946681200;
 8000afa:	687a      	ldr	r2, [r7, #4]
 8000afc:	4b24      	ldr	r3, [pc, #144]	; (8000b90 <unixtimeToString+0xa0>)
 8000afe:	4413      	add	r3, r2
 8000b00:	607b      	str	r3, [r7, #4]

    static uint8_t hour;
    static uint8_t minute;
    static uint8_t second;

    second = unixT % 60;
 8000b02:	6879      	ldr	r1, [r7, #4]
 8000b04:	4b23      	ldr	r3, [pc, #140]	; (8000b94 <unixtimeToString+0xa4>)
 8000b06:	fba3 2301 	umull	r2, r3, r3, r1
 8000b0a:	095a      	lsrs	r2, r3, #5
 8000b0c:	4613      	mov	r3, r2
 8000b0e:	011b      	lsls	r3, r3, #4
 8000b10:	1a9b      	subs	r3, r3, r2
 8000b12:	009b      	lsls	r3, r3, #2
 8000b14:	1aca      	subs	r2, r1, r3
 8000b16:	b2d2      	uxtb	r2, r2
 8000b18:	4b1f      	ldr	r3, [pc, #124]	; (8000b98 <unixtimeToString+0xa8>)
 8000b1a:	701a      	strb	r2, [r3, #0]
    unixT /= 60;
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	4a1d      	ldr	r2, [pc, #116]	; (8000b94 <unixtimeToString+0xa4>)
 8000b20:	fba2 2303 	umull	r2, r3, r2, r3
 8000b24:	095b      	lsrs	r3, r3, #5
 8000b26:	607b      	str	r3, [r7, #4]

    minute = unixT % 60;
 8000b28:	6879      	ldr	r1, [r7, #4]
 8000b2a:	4b1a      	ldr	r3, [pc, #104]	; (8000b94 <unixtimeToString+0xa4>)
 8000b2c:	fba3 2301 	umull	r2, r3, r3, r1
 8000b30:	095a      	lsrs	r2, r3, #5
 8000b32:	4613      	mov	r3, r2
 8000b34:	011b      	lsls	r3, r3, #4
 8000b36:	1a9b      	subs	r3, r3, r2
 8000b38:	009b      	lsls	r3, r3, #2
 8000b3a:	1aca      	subs	r2, r1, r3
 8000b3c:	b2d2      	uxtb	r2, r2
 8000b3e:	4b17      	ldr	r3, [pc, #92]	; (8000b9c <unixtimeToString+0xac>)
 8000b40:	701a      	strb	r2, [r3, #0]
    unixT /= 60;
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	4a13      	ldr	r2, [pc, #76]	; (8000b94 <unixtimeToString+0xa4>)
 8000b46:	fba2 2303 	umull	r2, r3, r2, r3
 8000b4a:	095b      	lsrs	r3, r3, #5
 8000b4c:	607b      	str	r3, [r7, #4]

    hour = unixT % 24;
 8000b4e:	6879      	ldr	r1, [r7, #4]
 8000b50:	4b13      	ldr	r3, [pc, #76]	; (8000ba0 <unixtimeToString+0xb0>)
 8000b52:	fba3 2301 	umull	r2, r3, r3, r1
 8000b56:	091a      	lsrs	r2, r3, #4
 8000b58:	4613      	mov	r3, r2
 8000b5a:	005b      	lsls	r3, r3, #1
 8000b5c:	4413      	add	r3, r2
 8000b5e:	00db      	lsls	r3, r3, #3
 8000b60:	1aca      	subs	r2, r1, r3
 8000b62:	b2d2      	uxtb	r2, r2
 8000b64:	4b0f      	ldr	r3, [pc, #60]	; (8000ba4 <unixtimeToString+0xb4>)
 8000b66:	701a      	strb	r2, [r3, #0]

	snprintf(str,8,"%i:%i:%i",hour,minute,second);
 8000b68:	4b0e      	ldr	r3, [pc, #56]	; (8000ba4 <unixtimeToString+0xb4>)
 8000b6a:	781b      	ldrb	r3, [r3, #0]
 8000b6c:	4619      	mov	r1, r3
 8000b6e:	4b0b      	ldr	r3, [pc, #44]	; (8000b9c <unixtimeToString+0xac>)
 8000b70:	781b      	ldrb	r3, [r3, #0]
 8000b72:	461a      	mov	r2, r3
 8000b74:	4b08      	ldr	r3, [pc, #32]	; (8000b98 <unixtimeToString+0xa8>)
 8000b76:	781b      	ldrb	r3, [r3, #0]
 8000b78:	9301      	str	r3, [sp, #4]
 8000b7a:	9200      	str	r2, [sp, #0]
 8000b7c:	460b      	mov	r3, r1
 8000b7e:	4a0a      	ldr	r2, [pc, #40]	; (8000ba8 <unixtimeToString+0xb8>)
 8000b80:	2108      	movs	r1, #8
 8000b82:	6838      	ldr	r0, [r7, #0]
 8000b84:	f006 fa34 	bl	8006ff0 <sniprintf>
	//Serial.println(str);
	//delay(50);
}
 8000b88:	bf00      	nop
 8000b8a:	3708      	adds	r7, #8
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	bd80      	pop	{r7, pc}
 8000b90:	c792ca90 	.word	0xc792ca90
 8000b94:	88888889 	.word	0x88888889
 8000b98:	20000540 	.word	0x20000540
 8000b9c:	20000541 	.word	0x20000541
 8000ba0:	aaaaaaab 	.word	0xaaaaaaab
 8000ba4:	20000542 	.word	0x20000542
 8000ba8:	080079f8 	.word	0x080079f8

08000bac <DWT_Init>:
uint8_t addr_width = 0; /**< The address width to use - 3,4 or 5 bytes. */
uint8_t txDelay = 0;


void DWT_Init(void)
{
 8000bac:	b480      	push	{r7}
 8000bae:	af00      	add	r7, sp, #0
    SCB_DEMCR |= CoreDebug_DEMCR_TRCENA_Msk; // разрешаем использовать счётчик
 8000bb0:	4b07      	ldr	r3, [pc, #28]	; (8000bd0 <DWT_Init+0x24>)
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	4a06      	ldr	r2, [pc, #24]	; (8000bd0 <DWT_Init+0x24>)
 8000bb6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000bba:	6013      	str	r3, [r2, #0]
	DWT_CONTROL |= DWT_CTRL_CYCCNTENA_Msk;   // запускаем счётчик
 8000bbc:	4b05      	ldr	r3, [pc, #20]	; (8000bd4 <DWT_Init+0x28>)
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	4a04      	ldr	r2, [pc, #16]	; (8000bd4 <DWT_Init+0x28>)
 8000bc2:	f043 0301 	orr.w	r3, r3, #1
 8000bc6:	6013      	str	r3, [r2, #0]
}
 8000bc8:	bf00      	nop
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	bc80      	pop	{r7}
 8000bce:	4770      	bx	lr
 8000bd0:	e000edfc 	.word	0xe000edfc
 8000bd4:	e0001000 	.word	0xe0001000

08000bd8 <delay_us>:

void delay_us(uint32_t us) // DelayMicro
{
 8000bd8:	b480      	push	{r7}
 8000bda:	b085      	sub	sp, #20
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]
    uint32_t us_count_tic =  us * (SystemCoreClock / 1000000);
 8000be0:	4b0b      	ldr	r3, [pc, #44]	; (8000c10 <delay_us+0x38>)
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	4a0b      	ldr	r2, [pc, #44]	; (8000c14 <delay_us+0x3c>)
 8000be6:	fba2 2303 	umull	r2, r3, r2, r3
 8000bea:	0c9a      	lsrs	r2, r3, #18
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	fb02 f303 	mul.w	r3, r2, r3
 8000bf2:	60fb      	str	r3, [r7, #12]
    DWT->CYCCNT = 0U; // обнуляем счётчик
 8000bf4:	4b08      	ldr	r3, [pc, #32]	; (8000c18 <delay_us+0x40>)
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	605a      	str	r2, [r3, #4]
    while(DWT->CYCCNT < us_count_tic);
 8000bfa:	bf00      	nop
 8000bfc:	4b06      	ldr	r3, [pc, #24]	; (8000c18 <delay_us+0x40>)
 8000bfe:	685b      	ldr	r3, [r3, #4]
 8000c00:	68fa      	ldr	r2, [r7, #12]
 8000c02:	429a      	cmp	r2, r3
 8000c04:	d8fa      	bhi.n	8000bfc <delay_us+0x24>
}
 8000c06:	bf00      	nop
 8000c08:	3714      	adds	r7, #20
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	bc80      	pop	{r7}
 8000c0e:	4770      	bx	lr
 8000c10:	20000000 	.word	0x20000000
 8000c14:	431bde83 	.word	0x431bde83
 8000c18:	e0001000 	.word	0xe0001000

08000c1c <csn>:

void csn(uint8_t level)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b082      	sub	sp, #8
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	4603      	mov	r3, r0
 8000c24:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(CSN_GPIO_Port, CSN_Pin, level);
 8000c26:	79fb      	ldrb	r3, [r7, #7]
 8000c28:	461a      	mov	r2, r3
 8000c2a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c2e:	4805      	ldr	r0, [pc, #20]	; (8000c44 <csn+0x28>)
 8000c30:	f001 fa38 	bl	80020a4 <HAL_GPIO_WritePin>
	delay_us(5);
 8000c34:	2005      	movs	r0, #5
 8000c36:	f7ff ffcf 	bl	8000bd8 <delay_us>
}
 8000c3a:	bf00      	nop
 8000c3c:	3708      	adds	r7, #8
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	bd80      	pop	{r7, pc}
 8000c42:	bf00      	nop
 8000c44:	40010c00 	.word	0x40010c00

08000c48 <ce>:

void ce(uint8_t level)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b082      	sub	sp, #8
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	4603      	mov	r3, r0
 8000c50:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(CE_GPIO_Port, CE_Pin, level);
 8000c52:	79fb      	ldrb	r3, [r7, #7]
 8000c54:	461a      	mov	r2, r3
 8000c56:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000c5a:	4803      	ldr	r0, [pc, #12]	; (8000c68 <ce+0x20>)
 8000c5c:	f001 fa22 	bl	80020a4 <HAL_GPIO_WritePin>
}
 8000c60:	bf00      	nop
 8000c62:	3708      	adds	r7, #8
 8000c64:	46bd      	mov	sp, r7
 8000c66:	bd80      	pop	{r7, pc}
 8000c68:	40010c00 	.word	0x40010c00

08000c6c <read_register>:

uint8_t read_register(uint8_t reg)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b086      	sub	sp, #24
 8000c70:	af02      	add	r7, sp, #8
 8000c72:	4603      	mov	r3, r0
 8000c74:	71fb      	strb	r3, [r7, #7]
	uint8_t addr = R_REGISTER | (REGISTER_MASK & reg);
 8000c76:	79fb      	ldrb	r3, [r7, #7]
 8000c78:	f003 031f 	and.w	r3, r3, #31
 8000c7c:	b2db      	uxtb	r3, r3
 8000c7e:	73fb      	strb	r3, [r7, #15]
	uint8_t dt = 0;
 8000c80:	2300      	movs	r3, #0
 8000c82:	73bb      	strb	r3, [r7, #14]

	csn(LOW);
 8000c84:	2000      	movs	r0, #0
 8000c86:	f7ff ffc9 	bl	8000c1c <csn>
	HAL_SPI_TransmitReceive(&hspi1, &addr, &dt, 1, 1000);
 8000c8a:	f107 020e 	add.w	r2, r7, #14
 8000c8e:	f107 010f 	add.w	r1, r7, #15
 8000c92:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c96:	9300      	str	r3, [sp, #0]
 8000c98:	2301      	movs	r3, #1
 8000c9a:	480a      	ldr	r0, [pc, #40]	; (8000cc4 <read_register+0x58>)
 8000c9c:	f002 f934 	bl	8002f08 <HAL_SPI_TransmitReceive>
	HAL_SPI_TransmitReceive(&hspi1, (uint8_t*)0xff, &dt, 1, 1000);
 8000ca0:	f107 020e 	add.w	r2, r7, #14
 8000ca4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ca8:	9300      	str	r3, [sp, #0]
 8000caa:	2301      	movs	r3, #1
 8000cac:	21ff      	movs	r1, #255	; 0xff
 8000cae:	4805      	ldr	r0, [pc, #20]	; (8000cc4 <read_register+0x58>)
 8000cb0:	f002 f92a 	bl	8002f08 <HAL_SPI_TransmitReceive>
	csn(HIGH);
 8000cb4:	2001      	movs	r0, #1
 8000cb6:	f7ff ffb1 	bl	8000c1c <csn>
	return dt;
 8000cba:	7bbb      	ldrb	r3, [r7, #14]
}
 8000cbc:	4618      	mov	r0, r3
 8000cbe:	3710      	adds	r7, #16
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	bd80      	pop	{r7, pc}
 8000cc4:	20001534 	.word	0x20001534

08000cc8 <write_registerMy>:

uint8_t write_registerMy(uint8_t reg, const uint8_t* buf, uint8_t len)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b086      	sub	sp, #24
 8000ccc:	af02      	add	r7, sp, #8
 8000cce:	4603      	mov	r3, r0
 8000cd0:	6039      	str	r1, [r7, #0]
 8000cd2:	71fb      	strb	r3, [r7, #7]
 8000cd4:	4613      	mov	r3, r2
 8000cd6:	71bb      	strb	r3, [r7, #6]
	uint8_t status = 0;
 8000cd8:	2300      	movs	r3, #0
 8000cda:	73fb      	strb	r3, [r7, #15]
	uint8_t addr = W_REGISTER | (REGISTER_MASK & reg);
 8000cdc:	79fb      	ldrb	r3, [r7, #7]
 8000cde:	f003 031f 	and.w	r3, r3, #31
 8000ce2:	b2db      	uxtb	r3, r3
 8000ce4:	f043 0320 	orr.w	r3, r3, #32
 8000ce8:	b2db      	uxtb	r3, r3
 8000cea:	73bb      	strb	r3, [r7, #14]

	csn(LOW);
 8000cec:	2000      	movs	r0, #0
 8000cee:	f7ff ff95 	bl	8000c1c <csn>
	HAL_SPI_TransmitReceive(&hspi1, &addr, &status, 1, 100);
 8000cf2:	f107 020f 	add.w	r2, r7, #15
 8000cf6:	f107 010e 	add.w	r1, r7, #14
 8000cfa:	2364      	movs	r3, #100	; 0x64
 8000cfc:	9300      	str	r3, [sp, #0]
 8000cfe:	2301      	movs	r3, #1
 8000d00:	4808      	ldr	r0, [pc, #32]	; (8000d24 <write_registerMy+0x5c>)
 8000d02:	f002 f901 	bl	8002f08 <HAL_SPI_TransmitReceive>
	HAL_SPI_Transmit(&hspi1, (uint8_t*)buf, len, 100);
 8000d06:	79bb      	ldrb	r3, [r7, #6]
 8000d08:	b29a      	uxth	r2, r3
 8000d0a:	2364      	movs	r3, #100	; 0x64
 8000d0c:	6839      	ldr	r1, [r7, #0]
 8000d0e:	4805      	ldr	r0, [pc, #20]	; (8000d24 <write_registerMy+0x5c>)
 8000d10:	f001 febd 	bl	8002a8e <HAL_SPI_Transmit>
	csn(HIGH);
 8000d14:	2001      	movs	r0, #1
 8000d16:	f7ff ff81 	bl	8000c1c <csn>
	return status;
 8000d1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	3710      	adds	r7, #16
 8000d20:	46bd      	mov	sp, r7
 8000d22:	bd80      	pop	{r7, pc}
 8000d24:	20001534 	.word	0x20001534

08000d28 <write_register>:

uint8_t write_register(uint8_t reg, uint8_t value)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b086      	sub	sp, #24
 8000d2c:	af02      	add	r7, sp, #8
 8000d2e:	4603      	mov	r3, r0
 8000d30:	460a      	mov	r2, r1
 8000d32:	71fb      	strb	r3, [r7, #7]
 8000d34:	4613      	mov	r3, r2
 8000d36:	71bb      	strb	r3, [r7, #6]
	uint8_t status = 0;
 8000d38:	2300      	movs	r3, #0
 8000d3a:	73fb      	strb	r3, [r7, #15]
	uint8_t addr = W_REGISTER | (REGISTER_MASK & reg);
 8000d3c:	79fb      	ldrb	r3, [r7, #7]
 8000d3e:	f003 031f 	and.w	r3, r3, #31
 8000d42:	b2db      	uxtb	r3, r3
 8000d44:	f043 0320 	orr.w	r3, r3, #32
 8000d48:	b2db      	uxtb	r3, r3
 8000d4a:	73bb      	strb	r3, [r7, #14]
	csn(LOW);
 8000d4c:	2000      	movs	r0, #0
 8000d4e:	f7ff ff65 	bl	8000c1c <csn>
	HAL_SPI_TransmitReceive(&hspi1, &addr, &status, 1, 100);
 8000d52:	f107 020f 	add.w	r2, r7, #15
 8000d56:	f107 010e 	add.w	r1, r7, #14
 8000d5a:	2364      	movs	r3, #100	; 0x64
 8000d5c:	9300      	str	r3, [sp, #0]
 8000d5e:	2301      	movs	r3, #1
 8000d60:	4808      	ldr	r0, [pc, #32]	; (8000d84 <write_register+0x5c>)
 8000d62:	f002 f8d1 	bl	8002f08 <HAL_SPI_TransmitReceive>
	HAL_SPI_Transmit(&hspi1, &value, 1, 1000);
 8000d66:	1db9      	adds	r1, r7, #6
 8000d68:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d6c:	2201      	movs	r2, #1
 8000d6e:	4805      	ldr	r0, [pc, #20]	; (8000d84 <write_register+0x5c>)
 8000d70:	f001 fe8d 	bl	8002a8e <HAL_SPI_Transmit>
	csn(HIGH);
 8000d74:	2001      	movs	r0, #1
 8000d76:	f7ff ff51 	bl	8000c1c <csn>
	return status;
 8000d7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	3710      	adds	r7, #16
 8000d80:	46bd      	mov	sp, r7
 8000d82:	bd80      	pop	{r7, pc}
 8000d84:	20001534 	.word	0x20001534

08000d88 <read_payload>:
	csn(HIGH);
	return status;
}

uint8_t read_payload(void* buf, uint8_t data_len)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b086      	sub	sp, #24
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
 8000d90:	460b      	mov	r3, r1
 8000d92:	70fb      	strb	r3, [r7, #3]
	uint8_t status = 0;
 8000d94:	2300      	movs	r3, #0
 8000d96:	75bb      	strb	r3, [r7, #22]
	uint8_t* current = (uint8_t*)buf;
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	613b      	str	r3, [r7, #16]

	if(data_len > payload_size)
 8000d9c:	4b1e      	ldr	r3, [pc, #120]	; (8000e18 <read_payload+0x90>)
 8000d9e:	781b      	ldrb	r3, [r3, #0]
 8000da0:	78fa      	ldrb	r2, [r7, #3]
 8000da2:	429a      	cmp	r2, r3
 8000da4:	d902      	bls.n	8000dac <read_payload+0x24>
	{
		data_len = payload_size;
 8000da6:	4b1c      	ldr	r3, [pc, #112]	; (8000e18 <read_payload+0x90>)
 8000da8:	781b      	ldrb	r3, [r3, #0]
 8000daa:	70fb      	strb	r3, [r7, #3]
	}

	uint8_t blank_len = dynamic_payloads_enabled ? 0 : payload_size - data_len;
 8000dac:	4b1b      	ldr	r3, [pc, #108]	; (8000e1c <read_payload+0x94>)
 8000dae:	781b      	ldrb	r3, [r3, #0]
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d001      	beq.n	8000db8 <read_payload+0x30>
 8000db4:	2300      	movs	r3, #0
 8000db6:	e004      	b.n	8000dc2 <read_payload+0x3a>
 8000db8:	4b17      	ldr	r3, [pc, #92]	; (8000e18 <read_payload+0x90>)
 8000dba:	781a      	ldrb	r2, [r3, #0]
 8000dbc:	78fb      	ldrb	r3, [r7, #3]
 8000dbe:	1ad3      	subs	r3, r2, r3
 8000dc0:	b2db      	uxtb	r3, r3
 8000dc2:	75fb      	strb	r3, [r7, #23]

	uint8_t addr = R_RX_PAYLOAD;
 8000dc4:	2361      	movs	r3, #97	; 0x61
 8000dc6:	73fb      	strb	r3, [r7, #15]
	csn(LOW);
 8000dc8:	2000      	movs	r0, #0
 8000dca:	f7ff ff27 	bl	8000c1c <csn>
	HAL_SPI_Transmit(&hspi1, &addr, 1, 100);
 8000dce:	f107 010f 	add.w	r1, r7, #15
 8000dd2:	2364      	movs	r3, #100	; 0x64
 8000dd4:	2201      	movs	r2, #1
 8000dd6:	4812      	ldr	r0, [pc, #72]	; (8000e20 <read_payload+0x98>)
 8000dd8:	f001 fe59 	bl	8002a8e <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi1, (uint8_t*)current, data_len, 100);
 8000ddc:	78fb      	ldrb	r3, [r7, #3]
 8000dde:	b29a      	uxth	r2, r3
 8000de0:	2364      	movs	r3, #100	; 0x64
 8000de2:	6939      	ldr	r1, [r7, #16]
 8000de4:	480e      	ldr	r0, [pc, #56]	; (8000e20 <read_payload+0x98>)
 8000de6:	f001 ff86 	bl	8002cf6 <HAL_SPI_Receive>

	while(blank_len--)
 8000dea:	e008      	b.n	8000dfe <read_payload+0x76>
	{
		uint8_t empt = 0;
 8000dec:	2300      	movs	r3, #0
 8000dee:	73bb      	strb	r3, [r7, #14]
		HAL_SPI_Receive(&hspi1, &empt, 1, 100);
 8000df0:	f107 010e 	add.w	r1, r7, #14
 8000df4:	2364      	movs	r3, #100	; 0x64
 8000df6:	2201      	movs	r2, #1
 8000df8:	4809      	ldr	r0, [pc, #36]	; (8000e20 <read_payload+0x98>)
 8000dfa:	f001 ff7c 	bl	8002cf6 <HAL_SPI_Receive>
	while(blank_len--)
 8000dfe:	7dfb      	ldrb	r3, [r7, #23]
 8000e00:	1e5a      	subs	r2, r3, #1
 8000e02:	75fa      	strb	r2, [r7, #23]
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d1f1      	bne.n	8000dec <read_payload+0x64>
	}

	csn(HIGH);
 8000e08:	2001      	movs	r0, #1
 8000e0a:	f7ff ff07 	bl	8000c1c <csn>
	return status;
 8000e0e:	7dbb      	ldrb	r3, [r7, #22]
}
 8000e10:	4618      	mov	r0, r3
 8000e12:	3718      	adds	r7, #24
 8000e14:	46bd      	mov	sp, r7
 8000e16:	bd80      	pop	{r7, pc}
 8000e18:	20000543 	.word	0x20000543
 8000e1c:	20001624 	.word	0x20001624
 8000e20:	20001534 	.word	0x20001534

08000e24 <flush_rx>:

uint8_t flush_rx(void)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	af00      	add	r7, sp, #0
	return spiTrans(FLUSH_RX);
 8000e28:	20e2      	movs	r0, #226	; 0xe2
 8000e2a:	f000 f80b 	bl	8000e44 <spiTrans>
 8000e2e:	4603      	mov	r3, r0
}
 8000e30:	4618      	mov	r0, r3
 8000e32:	bd80      	pop	{r7, pc}

08000e34 <flush_tx>:

uint8_t flush_tx(void)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	af00      	add	r7, sp, #0
	return spiTrans(FLUSH_TX);
 8000e38:	20e1      	movs	r0, #225	; 0xe1
 8000e3a:	f000 f803 	bl	8000e44 <spiTrans>
 8000e3e:	4603      	mov	r3, r0
}
 8000e40:	4618      	mov	r0, r3
 8000e42:	bd80      	pop	{r7, pc}

08000e44 <spiTrans>:

uint8_t spiTrans(uint8_t cmd)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b086      	sub	sp, #24
 8000e48:	af02      	add	r7, sp, #8
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	71fb      	strb	r3, [r7, #7]
	uint8_t status = 0;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	73fb      	strb	r3, [r7, #15]
	csn(LOW);
 8000e52:	2000      	movs	r0, #0
 8000e54:	f7ff fee2 	bl	8000c1c <csn>
	HAL_SPI_TransmitReceive(&hspi1, &cmd, &status, 1, 1000);
 8000e58:	f107 020f 	add.w	r2, r7, #15
 8000e5c:	1df9      	adds	r1, r7, #7
 8000e5e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e62:	9300      	str	r3, [sp, #0]
 8000e64:	2301      	movs	r3, #1
 8000e66:	4805      	ldr	r0, [pc, #20]	; (8000e7c <spiTrans+0x38>)
 8000e68:	f002 f84e 	bl	8002f08 <HAL_SPI_TransmitReceive>
	csn(HIGH);
 8000e6c:	2001      	movs	r0, #1
 8000e6e:	f7ff fed5 	bl	8000c1c <csn>
	return status;
 8000e72:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e74:	4618      	mov	r0, r3
 8000e76:	3710      	adds	r7, #16
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	bd80      	pop	{r7, pc}
 8000e7c:	20001534 	.word	0x20001534

08000e80 <get_status>:

uint8_t get_status(void)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	af00      	add	r7, sp, #0
	return spiTrans(NOP);
 8000e84:	20ff      	movs	r0, #255	; 0xff
 8000e86:	f7ff ffdd 	bl	8000e44 <spiTrans>
 8000e8a:	4603      	mov	r3, r0
}
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	bd80      	pop	{r7, pc}

08000e90 <setChannel>:

void setChannel(uint8_t channel)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b082      	sub	sp, #8
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	4603      	mov	r3, r0
 8000e98:	71fb      	strb	r3, [r7, #7]
	write_register(RF_CH, channel);
 8000e9a:	79fb      	ldrb	r3, [r7, #7]
 8000e9c:	4619      	mov	r1, r3
 8000e9e:	2005      	movs	r0, #5
 8000ea0:	f7ff ff42 	bl	8000d28 <write_register>
}
 8000ea4:	bf00      	nop
 8000ea6:	3708      	adds	r7, #8
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	bd80      	pop	{r7, pc}

08000eac <setPayloadSize>:
{
	return read_register(RF_CH);
}

void setPayloadSize(uint8_t size)
{
 8000eac:	b480      	push	{r7}
 8000eae:	b083      	sub	sp, #12
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	71fb      	strb	r3, [r7, #7]
	payload_size = rf24_min(size, 32);
 8000eb6:	79fb      	ldrb	r3, [r7, #7]
 8000eb8:	2b20      	cmp	r3, #32
 8000eba:	bf28      	it	cs
 8000ebc:	2320      	movcs	r3, #32
 8000ebe:	b2da      	uxtb	r2, r3
 8000ec0:	4b03      	ldr	r3, [pc, #12]	; (8000ed0 <setPayloadSize+0x24>)
 8000ec2:	701a      	strb	r2, [r3, #0]
}
 8000ec4:	bf00      	nop
 8000ec6:	370c      	adds	r7, #12
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	bc80      	pop	{r7}
 8000ecc:	4770      	bx	lr
 8000ece:	bf00      	nop
 8000ed0:	20000543 	.word	0x20000543

08000ed4 <getPayloadSize>:

uint8_t getPayloadSize(void)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	af00      	add	r7, sp, #0
	return payload_size;
 8000ed8:	4b02      	ldr	r3, [pc, #8]	; (8000ee4 <getPayloadSize+0x10>)
 8000eda:	781b      	ldrb	r3, [r3, #0]
}
 8000edc:	4618      	mov	r0, r3
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	bc80      	pop	{r7}
 8000ee2:	4770      	bx	lr
 8000ee4:	20000543 	.word	0x20000543

08000ee8 <NRF_Init>:

uint8_t NRF_Init(void)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b082      	sub	sp, #8
 8000eec:	af00      	add	r7, sp, #0
	uint8_t setup = 0;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	71fb      	strb	r3, [r7, #7]
	p_variant = false;
 8000ef2:	4b33      	ldr	r3, [pc, #204]	; (8000fc0 <NRF_Init+0xd8>)
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	701a      	strb	r2, [r3, #0]
	payload_size = 32;
 8000ef8:	4b32      	ldr	r3, [pc, #200]	; (8000fc4 <NRF_Init+0xdc>)
 8000efa:	2220      	movs	r2, #32
 8000efc:	701a      	strb	r2, [r3, #0]
	dynamic_payloads_enabled = false;
 8000efe:	4b32      	ldr	r3, [pc, #200]	; (8000fc8 <NRF_Init+0xe0>)
 8000f00:	2200      	movs	r2, #0
 8000f02:	701a      	strb	r2, [r3, #0]
	addr_width = 5;
 8000f04:	4b31      	ldr	r3, [pc, #196]	; (8000fcc <NRF_Init+0xe4>)
 8000f06:	2205      	movs	r2, #5
 8000f08:	701a      	strb	r2, [r3, #0]
	pipe0_reading_address[0] = 0;
 8000f0a:	4b31      	ldr	r3, [pc, #196]	; (8000fd0 <NRF_Init+0xe8>)
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	701a      	strb	r2, [r3, #0]

	ce(LOW);
 8000f10:	2000      	movs	r0, #0
 8000f12:	f7ff fe99 	bl	8000c48 <ce>
	csn(HIGH);
 8000f16:	2001      	movs	r0, #1
 8000f18:	f7ff fe80 	bl	8000c1c <csn>
	HAL_Delay(5);
 8000f1c:	2005      	movs	r0, #5
 8000f1e:	f000 fe65 	bl	8001bec <HAL_Delay>

	write_register(NRF_CONFIG, 0x0C); // Reset NRF_CONFIG and enable 16-bit CRC.
 8000f22:	210c      	movs	r1, #12
 8000f24:	2000      	movs	r0, #0
 8000f26:	f7ff feff 	bl	8000d28 <write_register>
	setRetries(5, 15);
 8000f2a:	210f      	movs	r1, #15
 8000f2c:	2005      	movs	r0, #5
 8000f2e:	f000 faf9 	bl	8001524 <setRetries>
	setPALevel(RF24_PA_MAX); // Reset value is MAX
 8000f32:	2003      	movs	r0, #3
 8000f34:	f000 fa93 	bl	800145e <setPALevel>

	if(setDataRate(RF24_250KBPS)) // check for connected module and if this is a p nRF24l01 variant
 8000f38:	2002      	movs	r0, #2
 8000f3a:	f000 fab3 	bl	80014a4 <setDataRate>
 8000f3e:	4603      	mov	r3, r0
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d002      	beq.n	8000f4a <NRF_Init+0x62>
	{
		p_variant = true;
 8000f44:	4b1e      	ldr	r3, [pc, #120]	; (8000fc0 <NRF_Init+0xd8>)
 8000f46:	2201      	movs	r2, #1
 8000f48:	701a      	strb	r2, [r3, #0]
	}

	setup = read_register(RF_SETUP);
 8000f4a:	2006      	movs	r0, #6
 8000f4c:	f7ff fe8e 	bl	8000c6c <read_register>
 8000f50:	4603      	mov	r3, r0
 8000f52:	71fb      	strb	r3, [r7, #7]
	setDataRate(RF24_1MBPS); // Then set the data rate to the slowest (and most reliable) speed supported by all hardware.
 8000f54:	2000      	movs	r0, #0
 8000f56:	f000 faa5 	bl	80014a4 <setDataRate>

	// Disable dynamic payloads, to match dynamic_payloads_enabled setting - Reset value is 0
	toggle_features();
 8000f5a:	f000 f9d5 	bl	8001308 <toggle_features>
	write_register(FEATURE, 0);
 8000f5e:	2100      	movs	r1, #0
 8000f60:	201d      	movs	r0, #29
 8000f62:	f7ff fee1 	bl	8000d28 <write_register>
	write_register(DYNPD, 0);
 8000f66:	2100      	movs	r1, #0
 8000f68:	201c      	movs	r0, #28
 8000f6a:	f7ff fedd 	bl	8000d28 <write_register>
	dynamic_payloads_enabled = false;
 8000f6e:	4b16      	ldr	r3, [pc, #88]	; (8000fc8 <NRF_Init+0xe0>)
 8000f70:	2200      	movs	r2, #0
 8000f72:	701a      	strb	r2, [r3, #0]

	// Reset current status. Notice reset and flush is the last thing we do
	write_register(NRF_STATUS, (1 << RX_DR) | (1 << TX_DS) | (1 << MAX_RT));
 8000f74:	2170      	movs	r1, #112	; 0x70
 8000f76:	2007      	movs	r0, #7
 8000f78:	f7ff fed6 	bl	8000d28 <write_register>
	setChannel(76);
 8000f7c:	204c      	movs	r0, #76	; 0x4c
 8000f7e:	f7ff ff87 	bl	8000e90 <setChannel>
	flush_rx();
 8000f82:	f7ff ff4f 	bl	8000e24 <flush_rx>
	flush_tx();
 8000f86:	f7ff ff55 	bl	8000e34 <flush_tx>
	powerUp(); //Power up by default when begin() is called
 8000f8a:	f000 f8c3 	bl	8001114 <powerUp>
	write_register(NRF_CONFIG, (read_register(NRF_CONFIG)) & ~(1 << PRIM_RX));
 8000f8e:	2000      	movs	r0, #0
 8000f90:	f7ff fe6c 	bl	8000c6c <read_register>
 8000f94:	4603      	mov	r3, r0
 8000f96:	f023 0301 	bic.w	r3, r3, #1
 8000f9a:	b2db      	uxtb	r3, r3
 8000f9c:	4619      	mov	r1, r3
 8000f9e:	2000      	movs	r0, #0
 8000fa0:	f7ff fec2 	bl	8000d28 <write_register>
	return (setup != 0 && setup != 0xff);
 8000fa4:	79fb      	ldrb	r3, [r7, #7]
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d004      	beq.n	8000fb4 <NRF_Init+0xcc>
 8000faa:	79fb      	ldrb	r3, [r7, #7]
 8000fac:	2bff      	cmp	r3, #255	; 0xff
 8000fae:	d001      	beq.n	8000fb4 <NRF_Init+0xcc>
 8000fb0:	2301      	movs	r3, #1
 8000fb2:	e000      	b.n	8000fb6 <NRF_Init+0xce>
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	b2db      	uxtb	r3, r3
}
 8000fb8:	4618      	mov	r0, r3
 8000fba:	3708      	adds	r7, #8
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	bd80      	pop	{r7, pc}
 8000fc0:	20001625 	.word	0x20001625
 8000fc4:	20000543 	.word	0x20000543
 8000fc8:	20001624 	.word	0x20001624
 8000fcc:	20000549 	.word	0x20000549
 8000fd0:	20000544 	.word	0x20000544

08000fd4 <read_pipe_address>:
void read_pipe_address(uint8_t reg,uint8_t* buf,uint8_t len)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b086      	sub	sp, #24
 8000fd8:	af02      	add	r7, sp, #8
 8000fda:	4603      	mov	r3, r0
 8000fdc:	6039      	str	r1, [r7, #0]
 8000fde:	71fb      	strb	r3, [r7, #7]
 8000fe0:	4613      	mov	r3, r2
 8000fe2:	71bb      	strb	r3, [r7, #6]
	uint8_t addr = R_REGISTER | (REGISTER_MASK & reg);
 8000fe4:	79fb      	ldrb	r3, [r7, #7]
 8000fe6:	f003 031f 	and.w	r3, r3, #31
 8000fea:	b2db      	uxtb	r3, r3
 8000fec:	73fb      	strb	r3, [r7, #15]
	uint8_t dt = 0;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	73bb      	strb	r3, [r7, #14]

	csn(LOW);
 8000ff2:	2000      	movs	r0, #0
 8000ff4:	f7ff fe12 	bl	8000c1c <csn>
	HAL_SPI_TransmitReceive(&hspi1, &addr, &dt, 1, 1000);
 8000ff8:	f107 020e 	add.w	r2, r7, #14
 8000ffc:	f107 010f 	add.w	r1, r7, #15
 8001000:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001004:	9300      	str	r3, [sp, #0]
 8001006:	2301      	movs	r3, #1
 8001008:	480a      	ldr	r0, [pc, #40]	; (8001034 <read_pipe_address+0x60>)
 800100a:	f001 ff7d 	bl	8002f08 <HAL_SPI_TransmitReceive>
	HAL_SPI_TransmitReceive(&hspi1, (uint8_t*)0xff, (uint8_t*)buf, len, 1000);
 800100e:	79bb      	ldrb	r3, [r7, #6]
 8001010:	b29a      	uxth	r2, r3
 8001012:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001016:	9300      	str	r3, [sp, #0]
 8001018:	4613      	mov	r3, r2
 800101a:	683a      	ldr	r2, [r7, #0]
 800101c:	21ff      	movs	r1, #255	; 0xff
 800101e:	4805      	ldr	r0, [pc, #20]	; (8001034 <read_pipe_address+0x60>)
 8001020:	f001 ff72 	bl	8002f08 <HAL_SPI_TransmitReceive>
	csn(HIGH);
 8001024:	2001      	movs	r0, #1
 8001026:	f7ff fdf9 	bl	8000c1c <csn>
}
 800102a:	bf00      	nop
 800102c:	3710      	adds	r7, #16
 800102e:	46bd      	mov	sp, r7
 8001030:	bd80      	pop	{r7, pc}
 8001032:	bf00      	nop
 8001034:	20001534 	.word	0x20001534

08001038 <nRF24_Check>:
// Checks the presence of the nRF24L01
// return:
//   zero - transceiver is absent
//   non-zero: transceiver is present
uint8_t nRF24_Check(void) {
 8001038:	b580      	push	{r7, lr}
 800103a:	b084      	sub	sp, #16
 800103c:	af00      	add	r7, sp, #0
	char rxbuf[sizeof(nRF24_TEST_ADDR) - 1U];
	uint8_t *ptr = (uint8_t *)nRF24_TEST_ADDR;
 800103e:	4b19      	ldr	r3, [pc, #100]	; (80010a4 <nRF24_Check+0x6c>)
 8001040:	60fb      	str	r3, [r7, #12]
	uint8_t idx;
	ce(LOW);
 8001042:	2000      	movs	r0, #0
 8001044:	f7ff fe00 	bl	8000c48 <ce>
	csn(HIGH);
 8001048:	2001      	movs	r0, #1
 800104a:	f7ff fde7 	bl	8000c1c <csn>
	HAL_Delay(5);
 800104e:	2005      	movs	r0, #5
 8001050:	f000 fdcc 	bl	8001bec <HAL_Delay>
	// Write the test address to the TX_ADDR register
	write_registerMy(TX_ADDR, ptr, 5);
 8001054:	2205      	movs	r2, #5
 8001056:	68f9      	ldr	r1, [r7, #12]
 8001058:	2010      	movs	r0, #16
 800105a:	f7ff fe35 	bl	8000cc8 <write_registerMy>

	// Read it back to the buffer
	read_pipe_address(TX_ADDR,rxbuf,5);
 800105e:	1d3b      	adds	r3, r7, #4
 8001060:	2205      	movs	r2, #5
 8001062:	4619      	mov	r1, r3
 8001064:	2010      	movs	r0, #16
 8001066:	f7ff ffb5 	bl	8000fd4 <read_pipe_address>
	// Compare transmitted and received data...
	for (idx = 0U; idx < sizeof(nRF24_TEST_ADDR) - 1U; idx++) {
 800106a:	2300      	movs	r3, #0
 800106c:	72fb      	strb	r3, [r7, #11]
 800106e:	e010      	b.n	8001092 <nRF24_Check+0x5a>
		if (rxbuf[idx] != *ptr++) {
 8001070:	7afb      	ldrb	r3, [r7, #11]
 8001072:	f107 0210 	add.w	r2, r7, #16
 8001076:	4413      	add	r3, r2
 8001078:	f813 2c0c 	ldrb.w	r2, [r3, #-12]
 800107c:	68fb      	ldr	r3, [r7, #12]
 800107e:	1c59      	adds	r1, r3, #1
 8001080:	60f9      	str	r1, [r7, #12]
 8001082:	781b      	ldrb	r3, [r3, #0]
 8001084:	429a      	cmp	r2, r3
 8001086:	d001      	beq.n	800108c <nRF24_Check+0x54>
			// The transceiver is absent
			return 0U;
 8001088:	2300      	movs	r3, #0
 800108a:	e006      	b.n	800109a <nRF24_Check+0x62>
	for (idx = 0U; idx < sizeof(nRF24_TEST_ADDR) - 1U; idx++) {
 800108c:	7afb      	ldrb	r3, [r7, #11]
 800108e:	3301      	adds	r3, #1
 8001090:	72fb      	strb	r3, [r7, #11]
 8001092:	7afb      	ldrb	r3, [r7, #11]
 8001094:	2b04      	cmp	r3, #4
 8001096:	d9eb      	bls.n	8001070 <nRF24_Check+0x38>
		}
	}

	// The transceiver is present
	return !0U;
 8001098:	2301      	movs	r3, #1
}
 800109a:	4618      	mov	r0, r3
 800109c:	3710      	adds	r7, #16
 800109e:	46bd      	mov	sp, r7
 80010a0:	bd80      	pop	{r7, pc}
 80010a2:	bf00      	nop
 80010a4:	08007a04 	.word	0x08007a04

080010a8 <startListening>:

	return false;
}

void startListening(void)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	af00      	add	r7, sp, #0
	powerUp();
 80010ac:	f000 f832 	bl	8001114 <powerUp>

	write_register(NRF_CONFIG, read_register(NRF_CONFIG) | (1 << PRIM_RX));
 80010b0:	2000      	movs	r0, #0
 80010b2:	f7ff fddb 	bl	8000c6c <read_register>
 80010b6:	4603      	mov	r3, r0
 80010b8:	f043 0301 	orr.w	r3, r3, #1
 80010bc:	b2db      	uxtb	r3, r3
 80010be:	4619      	mov	r1, r3
 80010c0:	2000      	movs	r0, #0
 80010c2:	f7ff fe31 	bl	8000d28 <write_register>
	write_register(NRF_STATUS, (1 << RX_DR) | (1 << TX_DS) | (1 << MAX_RT));
 80010c6:	2170      	movs	r1, #112	; 0x70
 80010c8:	2007      	movs	r0, #7
 80010ca:	f7ff fe2d 	bl	8000d28 <write_register>
	ce(HIGH);
 80010ce:	2001      	movs	r0, #1
 80010d0:	f7ff fdba 	bl	8000c48 <ce>
	// Restore the pipe0 adddress, if exists
	if(pipe0_reading_address[0] > 0)
 80010d4:	4b0d      	ldr	r3, [pc, #52]	; (800110c <startListening+0x64>)
 80010d6:	781b      	ldrb	r3, [r3, #0]
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d007      	beq.n	80010ec <startListening+0x44>
	{
		write_registerMy(RX_ADDR_P0, pipe0_reading_address, addr_width);
 80010dc:	4b0c      	ldr	r3, [pc, #48]	; (8001110 <startListening+0x68>)
 80010de:	781b      	ldrb	r3, [r3, #0]
 80010e0:	461a      	mov	r2, r3
 80010e2:	490a      	ldr	r1, [pc, #40]	; (800110c <startListening+0x64>)
 80010e4:	200a      	movs	r0, #10
 80010e6:	f7ff fdef 	bl	8000cc8 <write_registerMy>
 80010ea:	e002      	b.n	80010f2 <startListening+0x4a>
	}
	else
	{
		closeReadingPipe(0);
 80010ec:	2000      	movs	r0, #0
 80010ee:	f000 f8eb 	bl	80012c8 <closeReadingPipe>
	}

	if(read_register(FEATURE) & (1 << EN_ACK_PAY))
 80010f2:	201d      	movs	r0, #29
 80010f4:	f7ff fdba 	bl	8000c6c <read_register>
 80010f8:	4603      	mov	r3, r0
 80010fa:	f003 0302 	and.w	r3, r3, #2
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d001      	beq.n	8001106 <startListening+0x5e>
	{
		flush_tx();
 8001102:	f7ff fe97 	bl	8000e34 <flush_tx>
	}
}
 8001106:	bf00      	nop
 8001108:	bd80      	pop	{r7, pc}
 800110a:	bf00      	nop
 800110c:	20000544 	.word	0x20000544
 8001110:	20000549 	.word	0x20000549

08001114 <powerUp>:
	write_register(NRF_CONFIG, read_register(NRF_CONFIG) & ~(1 << PWR_UP));
}

//Power up now. Radio will not power down unless instructed by MCU for config changes etc.
void powerUp(void)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b082      	sub	sp, #8
 8001118:	af00      	add	r7, sp, #0
	uint8_t cfg = read_register(NRF_CONFIG);
 800111a:	2000      	movs	r0, #0
 800111c:	f7ff fda6 	bl	8000c6c <read_register>
 8001120:	4603      	mov	r3, r0
 8001122:	71fb      	strb	r3, [r7, #7]
	// if not powered up then power up and wait for the radio to initialize
	if(!(cfg & (1 << PWR_UP)))
 8001124:	79fb      	ldrb	r3, [r7, #7]
 8001126:	f003 0302 	and.w	r3, r3, #2
 800112a:	2b00      	cmp	r3, #0
 800112c:	d10a      	bne.n	8001144 <powerUp+0x30>
	{
		write_register(NRF_CONFIG, cfg | (1 << PWR_UP));
 800112e:	79fb      	ldrb	r3, [r7, #7]
 8001130:	f043 0302 	orr.w	r3, r3, #2
 8001134:	b2db      	uxtb	r3, r3
 8001136:	4619      	mov	r1, r3
 8001138:	2000      	movs	r0, #0
 800113a:	f7ff fdf5 	bl	8000d28 <write_register>
		HAL_Delay(5);
 800113e:	2005      	movs	r0, #5
 8001140:	f000 fd54 	bl	8001bec <HAL_Delay>
	}
}
 8001144:	bf00      	nop
 8001146:	3708      	adds	r7, #8
 8001148:	46bd      	mov	sp, r7
 800114a:	bd80      	pop	{r7, pc}

0800114c <available>:
{
	return available(NULL);
}

bool available(uint8_t* pipe_num)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b084      	sub	sp, #16
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
	if(!(read_register(FIFO_STATUS) & (1 << RX_EMPTY)))
 8001154:	2017      	movs	r0, #23
 8001156:	f7ff fd89 	bl	8000c6c <read_register>
 800115a:	4603      	mov	r3, r0
 800115c:	f003 0301 	and.w	r3, r3, #1
 8001160:	2b00      	cmp	r3, #0
 8001162:	d110      	bne.n	8001186 <available+0x3a>
	{
		if(pipe_num) // If the caller wants the pipe number, include that
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	2b00      	cmp	r3, #0
 8001168:	d00b      	beq.n	8001182 <available+0x36>
		{
			uint8_t status = get_status();
 800116a:	f7ff fe89 	bl	8000e80 <get_status>
 800116e:	4603      	mov	r3, r0
 8001170:	73fb      	strb	r3, [r7, #15]
			*pipe_num = (status >> RX_P_NO) & 0x07;
 8001172:	7bfb      	ldrb	r3, [r7, #15]
 8001174:	085b      	lsrs	r3, r3, #1
 8001176:	b2db      	uxtb	r3, r3
 8001178:	f003 0307 	and.w	r3, r3, #7
 800117c:	b2da      	uxtb	r2, r3
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	701a      	strb	r2, [r3, #0]
		}

		return 1;
 8001182:	2301      	movs	r3, #1
 8001184:	e000      	b.n	8001188 <available+0x3c>
	}

	return 0;
 8001186:	2300      	movs	r3, #0
}
 8001188:	4618      	mov	r0, r3
 800118a:	3710      	adds	r7, #16
 800118c:	46bd      	mov	sp, r7
 800118e:	bd80      	pop	{r7, pc}

08001190 <read>:

void read(void* buf, uint8_t len)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b082      	sub	sp, #8
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
 8001198:	460b      	mov	r3, r1
 800119a:	70fb      	strb	r3, [r7, #3]
	read_payload(buf, len);
 800119c:	78fb      	ldrb	r3, [r7, #3]
 800119e:	4619      	mov	r1, r3
 80011a0:	6878      	ldr	r0, [r7, #4]
 80011a2:	f7ff fdf1 	bl	8000d88 <read_payload>
	write_register(NRF_STATUS, (1 << RX_DR) | (1 << MAX_RT) | (1 << TX_DS));
 80011a6:	2170      	movs	r1, #112	; 0x70
 80011a8:	2007      	movs	r0, #7
 80011aa:	f7ff fdbd 	bl	8000d28 <write_register>
}
 80011ae:	bf00      	nop
 80011b0:	3708      	adds	r7, #8
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bd80      	pop	{r7, pc}

080011b6 <whatHappened>:


uint8_t whatHappened()
{
 80011b6:	b580      	push	{r7, lr}
 80011b8:	b082      	sub	sp, #8
 80011ba:	af00      	add	r7, sp, #0
	uint8_t status = write_register(NRF_STATUS, (1 << RX_DR) | (1 << TX_DS) | (1 << MAX_RT));
 80011bc:	2170      	movs	r1, #112	; 0x70
 80011be:	2007      	movs	r0, #7
 80011c0:	f7ff fdb2 	bl	8000d28 <write_register>
 80011c4:	4603      	mov	r3, r0
 80011c6:	71fb      	strb	r3, [r7, #7]
	/*uint8_t tx_ok = status & (1 << TX_DS);
	uint8_t tx_fail = status & (1 << MAX_RT);
	uint8_t rx_ready = status & (1 << RX_DR);*/
	return status;
 80011c8:	79fb      	ldrb	r3, [r7, #7]
}
 80011ca:	4618      	mov	r0, r3
 80011cc:	3708      	adds	r7, #8
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bd80      	pop	{r7, pc}
	...

080011d4 <openWritingPipe>:

void openWritingPipe(uint64_t value)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b082      	sub	sp, #8
 80011d8:	af00      	add	r7, sp, #0
 80011da:	e9c7 0100 	strd	r0, r1, [r7]
	write_registerMy(RX_ADDR_P0, (uint8_t*)&value, addr_width);
 80011de:	4b0c      	ldr	r3, [pc, #48]	; (8001210 <openWritingPipe+0x3c>)
 80011e0:	781a      	ldrb	r2, [r3, #0]
 80011e2:	463b      	mov	r3, r7
 80011e4:	4619      	mov	r1, r3
 80011e6:	200a      	movs	r0, #10
 80011e8:	f7ff fd6e 	bl	8000cc8 <write_registerMy>
	write_registerMy(TX_ADDR, (uint8_t*)&value, addr_width);
 80011ec:	4b08      	ldr	r3, [pc, #32]	; (8001210 <openWritingPipe+0x3c>)
 80011ee:	781a      	ldrb	r2, [r3, #0]
 80011f0:	463b      	mov	r3, r7
 80011f2:	4619      	mov	r1, r3
 80011f4:	2010      	movs	r0, #16
 80011f6:	f7ff fd67 	bl	8000cc8 <write_registerMy>
	write_register(RX_PW_P0, payload_size);
 80011fa:	4b06      	ldr	r3, [pc, #24]	; (8001214 <openWritingPipe+0x40>)
 80011fc:	781b      	ldrb	r3, [r3, #0]
 80011fe:	4619      	mov	r1, r3
 8001200:	2011      	movs	r0, #17
 8001202:	f7ff fd91 	bl	8000d28 <write_register>
}
 8001206:	bf00      	nop
 8001208:	3708      	adds	r7, #8
 800120a:	46bd      	mov	sp, r7
 800120c:	bd80      	pop	{r7, pc}
 800120e:	bf00      	nop
 8001210:	20000549 	.word	0x20000549
 8001214:	20000543 	.word	0x20000543

08001218 <openReadingPipe>:

static const uint8_t child_payload_size[] = {RX_PW_P0, RX_PW_P1, RX_PW_P2, RX_PW_P3, RX_PW_P4, RX_PW_P5};


void openReadingPipe(uint8_t child, uint64_t address)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b084      	sub	sp, #16
 800121c:	af00      	add	r7, sp, #0
 800121e:	4601      	mov	r1, r0
 8001220:	e9c7 2300 	strd	r2, r3, [r7]
 8001224:	460b      	mov	r3, r1
 8001226:	73fb      	strb	r3, [r7, #15]
	if(child == 0)
 8001228:	7bfb      	ldrb	r3, [r7, #15]
 800122a:	2b00      	cmp	r3, #0
 800122c:	d107      	bne.n	800123e <openReadingPipe+0x26>
	{
		memcpy(pipe0_reading_address, &address, addr_width);
 800122e:	4b20      	ldr	r3, [pc, #128]	; (80012b0 <openReadingPipe+0x98>)
 8001230:	781b      	ldrb	r3, [r3, #0]
 8001232:	461a      	mov	r2, r3
 8001234:	463b      	mov	r3, r7
 8001236:	4619      	mov	r1, r3
 8001238:	481e      	ldr	r0, [pc, #120]	; (80012b4 <openReadingPipe+0x9c>)
 800123a:	f005 fec5 	bl	8006fc8 <memcpy>
	}

	if(child <= 6)
 800123e:	7bfb      	ldrb	r3, [r7, #15]
 8001240:	2b06      	cmp	r3, #6
 8001242:	d830      	bhi.n	80012a6 <openReadingPipe+0x8e>
	{
		// For pipes 2-5, only write the LSB
		if(child < 2)
 8001244:	7bfb      	ldrb	r3, [r7, #15]
 8001246:	2b01      	cmp	r3, #1
 8001248:	d809      	bhi.n	800125e <openReadingPipe+0x46>
		  write_registerMy(child_pipe[child], (const uint8_t*)&address, addr_width);
 800124a:	7bfb      	ldrb	r3, [r7, #15]
 800124c:	4a1a      	ldr	r2, [pc, #104]	; (80012b8 <openReadingPipe+0xa0>)
 800124e:	5cd0      	ldrb	r0, [r2, r3]
 8001250:	4b17      	ldr	r3, [pc, #92]	; (80012b0 <openReadingPipe+0x98>)
 8001252:	781a      	ldrb	r2, [r3, #0]
 8001254:	463b      	mov	r3, r7
 8001256:	4619      	mov	r1, r3
 8001258:	f7ff fd36 	bl	8000cc8 <write_registerMy>
 800125c:	e007      	b.n	800126e <openReadingPipe+0x56>
		else
		  write_registerMy(child_pipe[child], (const uint8_t*)&address, 1);
 800125e:	7bfb      	ldrb	r3, [r7, #15]
 8001260:	4a15      	ldr	r2, [pc, #84]	; (80012b8 <openReadingPipe+0xa0>)
 8001262:	5cd3      	ldrb	r3, [r2, r3]
 8001264:	4639      	mov	r1, r7
 8001266:	2201      	movs	r2, #1
 8001268:	4618      	mov	r0, r3
 800126a:	f7ff fd2d 	bl	8000cc8 <write_registerMy>

		write_register(child_payload_size[child], payload_size);
 800126e:	7bfb      	ldrb	r3, [r7, #15]
 8001270:	4a12      	ldr	r2, [pc, #72]	; (80012bc <openReadingPipe+0xa4>)
 8001272:	5cd2      	ldrb	r2, [r2, r3]
 8001274:	4b12      	ldr	r3, [pc, #72]	; (80012c0 <openReadingPipe+0xa8>)
 8001276:	781b      	ldrb	r3, [r3, #0]
 8001278:	4619      	mov	r1, r3
 800127a:	4610      	mov	r0, r2
 800127c:	f7ff fd54 	bl	8000d28 <write_register>
		write_register(EN_RXADDR, read_register(EN_RXADDR) | (1 << child_pipe_enable[child]));
 8001280:	2002      	movs	r0, #2
 8001282:	f7ff fcf3 	bl	8000c6c <read_register>
 8001286:	4603      	mov	r3, r0
 8001288:	b25a      	sxtb	r2, r3
 800128a:	7bfb      	ldrb	r3, [r7, #15]
 800128c:	490d      	ldr	r1, [pc, #52]	; (80012c4 <openReadingPipe+0xac>)
 800128e:	5ccb      	ldrb	r3, [r1, r3]
 8001290:	4619      	mov	r1, r3
 8001292:	2301      	movs	r3, #1
 8001294:	408b      	lsls	r3, r1
 8001296:	b25b      	sxtb	r3, r3
 8001298:	4313      	orrs	r3, r2
 800129a:	b25b      	sxtb	r3, r3
 800129c:	b2db      	uxtb	r3, r3
 800129e:	4619      	mov	r1, r3
 80012a0:	2002      	movs	r0, #2
 80012a2:	f7ff fd41 	bl	8000d28 <write_register>
	}
}
 80012a6:	bf00      	nop
 80012a8:	3710      	adds	r7, #16
 80012aa:	46bd      	mov	sp, r7
 80012ac:	bd80      	pop	{r7, pc}
 80012ae:	bf00      	nop
 80012b0:	20000549 	.word	0x20000549
 80012b4:	20000544 	.word	0x20000544
 80012b8:	08007a50 	.word	0x08007a50
 80012bc:	08007a58 	.word	0x08007a58
 80012c0:	20000543 	.word	0x20000543
 80012c4:	08007a48 	.word	0x08007a48

080012c8 <closeReadingPipe>:
        addr_width = 2;
    }
}

void closeReadingPipe(uint8_t pipe)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b082      	sub	sp, #8
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	4603      	mov	r3, r0
 80012d0:	71fb      	strb	r3, [r7, #7]
	write_register(EN_RXADDR, read_register(EN_RXADDR) & ~(1 << child_pipe_enable[pipe]));
 80012d2:	2002      	movs	r0, #2
 80012d4:	f7ff fcca 	bl	8000c6c <read_register>
 80012d8:	4603      	mov	r3, r0
 80012da:	b25a      	sxtb	r2, r3
 80012dc:	79fb      	ldrb	r3, [r7, #7]
 80012de:	4909      	ldr	r1, [pc, #36]	; (8001304 <closeReadingPipe+0x3c>)
 80012e0:	5ccb      	ldrb	r3, [r1, r3]
 80012e2:	4619      	mov	r1, r3
 80012e4:	2301      	movs	r3, #1
 80012e6:	408b      	lsls	r3, r1
 80012e8:	b25b      	sxtb	r3, r3
 80012ea:	43db      	mvns	r3, r3
 80012ec:	b25b      	sxtb	r3, r3
 80012ee:	4013      	ands	r3, r2
 80012f0:	b25b      	sxtb	r3, r3
 80012f2:	b2db      	uxtb	r3, r3
 80012f4:	4619      	mov	r1, r3
 80012f6:	2002      	movs	r0, #2
 80012f8:	f7ff fd16 	bl	8000d28 <write_register>
}
 80012fc:	bf00      	nop
 80012fe:	3708      	adds	r7, #8
 8001300:	46bd      	mov	sp, r7
 8001302:	bd80      	pop	{r7, pc}
 8001304:	08007a48 	.word	0x08007a48

08001308 <toggle_features>:

void toggle_features(void)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b082      	sub	sp, #8
 800130c:	af00      	add	r7, sp, #0
	uint8_t addr = ACTIVATE;
 800130e:	2350      	movs	r3, #80	; 0x50
 8001310:	71fb      	strb	r3, [r7, #7]
	csn(LOW);
 8001312:	2000      	movs	r0, #0
 8001314:	f7ff fc82 	bl	8000c1c <csn>
	HAL_SPI_Transmit(&hspi1, &addr, 1, 1000);
 8001318:	1df9      	adds	r1, r7, #7
 800131a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800131e:	2201      	movs	r2, #1
 8001320:	4808      	ldr	r0, [pc, #32]	; (8001344 <toggle_features+0x3c>)
 8001322:	f001 fbb4 	bl	8002a8e <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi1, (uint8_t*)0x73, 1, 1000);
 8001326:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800132a:	2201      	movs	r2, #1
 800132c:	2173      	movs	r1, #115	; 0x73
 800132e:	4805      	ldr	r0, [pc, #20]	; (8001344 <toggle_features+0x3c>)
 8001330:	f001 fbad 	bl	8002a8e <HAL_SPI_Transmit>
	csn(HIGH);
 8001334:	2001      	movs	r0, #1
 8001336:	f7ff fc71 	bl	8000c1c <csn>
}
 800133a:	bf00      	nop
 800133c:	3708      	adds	r7, #8
 800133e:	46bd      	mov	sp, r7
 8001340:	bd80      	pop	{r7, pc}
 8001342:	bf00      	nop
 8001344:	20001534 	.word	0x20001534

08001348 <enableDynamicPayloads>:

void enableDynamicPayloads(void)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	af00      	add	r7, sp, #0
	write_register(FEATURE, read_register(FEATURE) | (1 << EN_DPL));
 800134c:	201d      	movs	r0, #29
 800134e:	f7ff fc8d 	bl	8000c6c <read_register>
 8001352:	4603      	mov	r3, r0
 8001354:	f043 0304 	orr.w	r3, r3, #4
 8001358:	b2db      	uxtb	r3, r3
 800135a:	4619      	mov	r1, r3
 800135c:	201d      	movs	r0, #29
 800135e:	f7ff fce3 	bl	8000d28 <write_register>
	write_register(DYNPD, read_register(DYNPD) | (1 << DPL_P5) | (1 << DPL_P4) | (1 << DPL_P3) | (1 << DPL_P2) | (1 << DPL_P1) | (1 << DPL_P0));
 8001362:	201c      	movs	r0, #28
 8001364:	f7ff fc82 	bl	8000c6c <read_register>
 8001368:	4603      	mov	r3, r0
 800136a:	f043 033f 	orr.w	r3, r3, #63	; 0x3f
 800136e:	b2db      	uxtb	r3, r3
 8001370:	4619      	mov	r1, r3
 8001372:	201c      	movs	r0, #28
 8001374:	f7ff fcd8 	bl	8000d28 <write_register>
	dynamic_payloads_enabled = true;
 8001378:	4b02      	ldr	r3, [pc, #8]	; (8001384 <enableDynamicPayloads+0x3c>)
 800137a:	2201      	movs	r2, #1
 800137c:	701a      	strb	r2, [r3, #0]
}
 800137e:	bf00      	nop
 8001380:	bd80      	pop	{r7, pc}
 8001382:	bf00      	nop
 8001384:	20001624 	.word	0x20001624

08001388 <enableAckPayload>:
	write_register(DYNPD, 0);
	dynamic_payloads_enabled = false;
}

void enableAckPayload(void)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	af00      	add	r7, sp, #0
	write_register(FEATURE, read_register(FEATURE) | (1 << EN_ACK_PAY) | (1 << EN_DPL));
 800138c:	201d      	movs	r0, #29
 800138e:	f7ff fc6d 	bl	8000c6c <read_register>
 8001392:	4603      	mov	r3, r0
 8001394:	f043 0306 	orr.w	r3, r3, #6
 8001398:	b2db      	uxtb	r3, r3
 800139a:	4619      	mov	r1, r3
 800139c:	201d      	movs	r0, #29
 800139e:	f7ff fcc3 	bl	8000d28 <write_register>
	write_register(DYNPD, read_register(DYNPD) | (1 << DPL_P1) | (1 << DPL_P0));
 80013a2:	201c      	movs	r0, #28
 80013a4:	f7ff fc62 	bl	8000c6c <read_register>
 80013a8:	4603      	mov	r3, r0
 80013aa:	f043 0303 	orr.w	r3, r3, #3
 80013ae:	b2db      	uxtb	r3, r3
 80013b0:	4619      	mov	r1, r3
 80013b2:	201c      	movs	r0, #28
 80013b4:	f7ff fcb8 	bl	8000d28 <write_register>
	dynamic_payloads_enabled = true;
 80013b8:	4b02      	ldr	r3, [pc, #8]	; (80013c4 <enableAckPayload+0x3c>)
 80013ba:	2201      	movs	r2, #1
 80013bc:	701a      	strb	r2, [r3, #0]
}
 80013be:	bf00      	nop
 80013c0:	bd80      	pop	{r7, pc}
 80013c2:	bf00      	nop
 80013c4:	20001624 	.word	0x20001624

080013c8 <writeAckPayload>:
{
    write_register(FEATURE, read_register(FEATURE) | (1 << EN_DYN_ACK));
}

void writeAckPayload(uint8_t pipe, const void* buf, uint8_t len)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b084      	sub	sp, #16
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	4603      	mov	r3, r0
 80013d0:	6039      	str	r1, [r7, #0]
 80013d2:	71fb      	strb	r3, [r7, #7]
 80013d4:	4613      	mov	r3, r2
 80013d6:	71bb      	strb	r3, [r7, #6]
	const uint8_t* current = (const uint8_t*)buf;
 80013d8:	683b      	ldr	r3, [r7, #0]
 80013da:	60fb      	str	r3, [r7, #12]
	uint8_t data_len = rf24_min(len, 32);
 80013dc:	79bb      	ldrb	r3, [r7, #6]
 80013de:	2b20      	cmp	r3, #32
 80013e0:	bf28      	it	cs
 80013e2:	2320      	movcs	r3, #32
 80013e4:	72fb      	strb	r3, [r7, #11]
	uint8_t addr = W_ACK_PAYLOAD | (pipe & 0x07);
 80013e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013ea:	f003 0307 	and.w	r3, r3, #7
 80013ee:	b25b      	sxtb	r3, r3
 80013f0:	f063 0357 	orn	r3, r3, #87	; 0x57
 80013f4:	b25b      	sxtb	r3, r3
 80013f6:	b2db      	uxtb	r3, r3
 80013f8:	72bb      	strb	r3, [r7, #10]
	csn(LOW);
 80013fa:	2000      	movs	r0, #0
 80013fc:	f7ff fc0e 	bl	8000c1c <csn>
	HAL_SPI_Transmit(&hspi1, &addr, 1, 1000);
 8001400:	f107 010a 	add.w	r1, r7, #10
 8001404:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001408:	2201      	movs	r2, #1
 800140a:	4809      	ldr	r0, [pc, #36]	; (8001430 <writeAckPayload+0x68>)
 800140c:	f001 fb3f 	bl	8002a8e <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi1, (uint8_t*)current, data_len, 1000);
 8001410:	7afb      	ldrb	r3, [r7, #11]
 8001412:	b29a      	uxth	r2, r3
 8001414:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001418:	68f9      	ldr	r1, [r7, #12]
 800141a:	4805      	ldr	r0, [pc, #20]	; (8001430 <writeAckPayload+0x68>)
 800141c:	f001 fb37 	bl	8002a8e <HAL_SPI_Transmit>
	csn(HIGH);
 8001420:	2001      	movs	r0, #1
 8001422:	f7ff fbfb 	bl	8000c1c <csn>
}
 8001426:	bf00      	nop
 8001428:	3710      	adds	r7, #16
 800142a:	46bd      	mov	sp, r7
 800142c:	bd80      	pop	{r7, pc}
 800142e:	bf00      	nop
 8001430:	20001534 	.word	0x20001534

08001434 <setAutoAck>:
{
	return p_variant;
}

void setAutoAck(bool enable)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b082      	sub	sp, #8
 8001438:	af00      	add	r7, sp, #0
 800143a:	4603      	mov	r3, r0
 800143c:	71fb      	strb	r3, [r7, #7]
	if(enable)
 800143e:	79fb      	ldrb	r3, [r7, #7]
 8001440:	2b00      	cmp	r3, #0
 8001442:	d004      	beq.n	800144e <setAutoAck+0x1a>
		write_register(EN_AA, 0x3F);
 8001444:	213f      	movs	r1, #63	; 0x3f
 8001446:	2001      	movs	r0, #1
 8001448:	f7ff fc6e 	bl	8000d28 <write_register>
	else
		write_register(EN_AA, 0);
}
 800144c:	e003      	b.n	8001456 <setAutoAck+0x22>
		write_register(EN_AA, 0);
 800144e:	2100      	movs	r1, #0
 8001450:	2001      	movs	r0, #1
 8001452:	f7ff fc69 	bl	8000d28 <write_register>
}
 8001456:	bf00      	nop
 8001458:	3708      	adds	r7, #8
 800145a:	46bd      	mov	sp, r7
 800145c:	bd80      	pop	{r7, pc}

0800145e <setPALevel>:
		write_register(EN_AA, en_aa);
	}
}

void setPALevel(uint8_t level)
{
 800145e:	b580      	push	{r7, lr}
 8001460:	b084      	sub	sp, #16
 8001462:	af00      	add	r7, sp, #0
 8001464:	4603      	mov	r3, r0
 8001466:	71fb      	strb	r3, [r7, #7]
  uint8_t setup = read_register(RF_SETUP) & 0xF8;
 8001468:	2006      	movs	r0, #6
 800146a:	f7ff fbff 	bl	8000c6c <read_register>
 800146e:	4603      	mov	r3, r0
 8001470:	f023 0307 	bic.w	r3, r3, #7
 8001474:	73fb      	strb	r3, [r7, #15]

  if(level > 3) // If invalid level, go to max PA
 8001476:	79fb      	ldrb	r3, [r7, #7]
 8001478:	2b03      	cmp	r3, #3
 800147a:	d902      	bls.n	8001482 <setPALevel+0x24>
  {
	  level = (RF24_PA_MAX << 1) | (RF24_PA_LOW << 1);		// +1 to support the SI24R1 chip extra bit
 800147c:	2306      	movs	r3, #6
 800147e:	71fb      	strb	r3, [r7, #7]
 8001480:	e002      	b.n	8001488 <setPALevel+0x2a>
  }
  else
  {
	  level = (level << 1);	 		// Else set level as requested
 8001482:	79fb      	ldrb	r3, [r7, #7]
 8001484:	005b      	lsls	r3, r3, #1
 8001486:	71fb      	strb	r3, [r7, #7]
  }

  write_register(RF_SETUP, setup |= level);	// Write it to the chip
 8001488:	7bfa      	ldrb	r2, [r7, #15]
 800148a:	79fb      	ldrb	r3, [r7, #7]
 800148c:	4313      	orrs	r3, r2
 800148e:	73fb      	strb	r3, [r7, #15]
 8001490:	7bfb      	ldrb	r3, [r7, #15]
 8001492:	4619      	mov	r1, r3
 8001494:	2006      	movs	r0, #6
 8001496:	f7ff fc47 	bl	8000d28 <write_register>
}
 800149a:	bf00      	nop
 800149c:	3710      	adds	r7, #16
 800149e:	46bd      	mov	sp, r7
 80014a0:	bd80      	pop	{r7, pc}
	...

080014a4 <setDataRate>:
{
	return (read_register(RF_SETUP) & ((1 << RF24_PA_LOW) | (1 << RF24_PA_HIGH))) >> 1;
}

bool setDataRate(rf24_datarate_e speed)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b084      	sub	sp, #16
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	4603      	mov	r3, r0
 80014ac:	71fb      	strb	r3, [r7, #7]
	bool result = false;
 80014ae:	2300      	movs	r3, #0
 80014b0:	73fb      	strb	r3, [r7, #15]
	uint8_t setup = read_register(RF_SETUP);
 80014b2:	2006      	movs	r0, #6
 80014b4:	f7ff fbda 	bl	8000c6c <read_register>
 80014b8:	4603      	mov	r3, r0
 80014ba:	73bb      	strb	r3, [r7, #14]
	setup &= ~((1 << RF_DR_LOW) | (1 << RF_DR_HIGH));
 80014bc:	7bbb      	ldrb	r3, [r7, #14]
 80014be:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 80014c2:	73bb      	strb	r3, [r7, #14]
	txDelay = 85;
 80014c4:	4b16      	ldr	r3, [pc, #88]	; (8001520 <setDataRate+0x7c>)
 80014c6:	2255      	movs	r2, #85	; 0x55
 80014c8:	701a      	strb	r2, [r3, #0]

	if(speed == RF24_250KBPS)
 80014ca:	79fb      	ldrb	r3, [r7, #7]
 80014cc:	2b02      	cmp	r3, #2
 80014ce:	d107      	bne.n	80014e0 <setDataRate+0x3c>
	{
		setup |= (1 << RF_DR_LOW);
 80014d0:	7bbb      	ldrb	r3, [r7, #14]
 80014d2:	f043 0320 	orr.w	r3, r3, #32
 80014d6:	73bb      	strb	r3, [r7, #14]
		txDelay = 155;
 80014d8:	4b11      	ldr	r3, [pc, #68]	; (8001520 <setDataRate+0x7c>)
 80014da:	229b      	movs	r2, #155	; 0x9b
 80014dc:	701a      	strb	r2, [r3, #0]
 80014de:	e009      	b.n	80014f4 <setDataRate+0x50>
	}
	else
	{
		if(speed == RF24_2MBPS)
 80014e0:	79fb      	ldrb	r3, [r7, #7]
 80014e2:	2b01      	cmp	r3, #1
 80014e4:	d106      	bne.n	80014f4 <setDataRate+0x50>
		{
			setup |= (1 << RF_DR_HIGH);
 80014e6:	7bbb      	ldrb	r3, [r7, #14]
 80014e8:	f043 0308 	orr.w	r3, r3, #8
 80014ec:	73bb      	strb	r3, [r7, #14]
			txDelay = 65;
 80014ee:	4b0c      	ldr	r3, [pc, #48]	; (8001520 <setDataRate+0x7c>)
 80014f0:	2241      	movs	r2, #65	; 0x41
 80014f2:	701a      	strb	r2, [r3, #0]
		}
	}

	write_register(RF_SETUP, setup);
 80014f4:	7bbb      	ldrb	r3, [r7, #14]
 80014f6:	4619      	mov	r1, r3
 80014f8:	2006      	movs	r0, #6
 80014fa:	f7ff fc15 	bl	8000d28 <write_register>
	uint8_t ggg = read_register(RF_SETUP);
 80014fe:	2006      	movs	r0, #6
 8001500:	f7ff fbb4 	bl	8000c6c <read_register>
 8001504:	4603      	mov	r3, r0
 8001506:	737b      	strb	r3, [r7, #13]

	if(ggg == setup)
 8001508:	7b7a      	ldrb	r2, [r7, #13]
 800150a:	7bbb      	ldrb	r3, [r7, #14]
 800150c:	429a      	cmp	r2, r3
 800150e:	d101      	bne.n	8001514 <setDataRate+0x70>
	{
		result = true;
 8001510:	2301      	movs	r3, #1
 8001512:	73fb      	strb	r3, [r7, #15]
	}

	return result;
 8001514:	7bfb      	ldrb	r3, [r7, #15]
}
 8001516:	4618      	mov	r0, r3
 8001518:	3710      	adds	r7, #16
 800151a:	46bd      	mov	sp, r7
 800151c:	bd80      	pop	{r7, pc}
 800151e:	bf00      	nop
 8001520:	2000054a 	.word	0x2000054a

08001524 <setRetries>:
	uint8_t disable = read_register(NRF_CONFIG) & ~(1 << EN_CRC);
	write_register(NRF_CONFIG, disable);
}

void setRetries(uint8_t delay, uint8_t count)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b082      	sub	sp, #8
 8001528:	af00      	add	r7, sp, #0
 800152a:	4603      	mov	r3, r0
 800152c:	460a      	mov	r2, r1
 800152e:	71fb      	strb	r3, [r7, #7]
 8001530:	4613      	mov	r3, r2
 8001532:	71bb      	strb	r3, [r7, #6]
	write_register(SETUP_RETR, (delay&0xf)<<ARD | (count&0xf)<<ARC);
 8001534:	79fb      	ldrb	r3, [r7, #7]
 8001536:	011b      	lsls	r3, r3, #4
 8001538:	b25a      	sxtb	r2, r3
 800153a:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800153e:	f003 030f 	and.w	r3, r3, #15
 8001542:	b25b      	sxtb	r3, r3
 8001544:	4313      	orrs	r3, r2
 8001546:	b25b      	sxtb	r3, r3
 8001548:	b2db      	uxtb	r3, r3
 800154a:	4619      	mov	r1, r3
 800154c:	2004      	movs	r0, #4
 800154e:	f7ff fbeb 	bl	8000d28 <write_register>
}
 8001552:	bf00      	nop
 8001554:	3708      	adds	r7, #8
 8001556:	46bd      	mov	sp, r7
 8001558:	bd80      	pop	{r7, pc}
	...

0800155c <receiver_init>:

uint8_t current_channel;
uint8_t current_data_rate;
uint8_t current_power;

void receiver_init(){
 800155c:	b480      	push	{r7}
 800155e:	af00      	add	r7, sp, #0
	unixtime = 946681200;
 8001560:	4b03      	ldr	r3, [pc, #12]	; (8001570 <receiver_init+0x14>)
 8001562:	4a04      	ldr	r2, [pc, #16]	; (8001574 <receiver_init+0x18>)
 8001564:	601a      	str	r2, [r3, #0]
}
 8001566:	bf00      	nop
 8001568:	46bd      	mov	sp, r7
 800156a:	bc80      	pop	{r7}
 800156c:	4770      	bx	lr
 800156e:	bf00      	nop
 8001570:	2000162c 	.word	0x2000162c
 8001574:	386d3570 	.word	0x386d3570

08001578 <PackDataToAck>:
void PackDataToAck(struct ReceivedData *pPipeData)
{
 8001578:	b590      	push	{r4, r7, lr}
 800157a:	b083      	sub	sp, #12
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
	switch(pPipeData->data.type_of_data)
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	7e5b      	ldrb	r3, [r3, #25]
 8001584:	2b03      	cmp	r3, #3
 8001586:	d833      	bhi.n	80015f0 <PackDataToAck+0x78>
 8001588:	a201      	add	r2, pc, #4	; (adr r2, 8001590 <PackDataToAck+0x18>)
 800158a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800158e:	bf00      	nop
 8001590:	080015a1 	.word	0x080015a1
 8001594:	080015ad 	.word	0x080015ad
 8001598:	080015c9 	.word	0x080015c9
 800159c:	080015e5 	.word	0x080015e5
	{
	case data_null :
		CreateNullAck(pPipeData->pipeNo);
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	781b      	ldrb	r3, [r3, #0]
 80015a4:	4618      	mov	r0, r3
 80015a6:	f000 f883 	bl	80016b0 <CreateNullAck>
		break;
 80015aa:	e021      	b.n	80015f0 <PackDataToAck+0x78>
	case data_meteoOutDoor :
		meteoOutDoor=pPipeData->data.meteo_data;
 80015ac:	4a3d      	ldr	r2, [pc, #244]	; (80016a4 <PackDataToAck+0x12c>)
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	4614      	mov	r4, r2
 80015b2:	330c      	adds	r3, #12
 80015b4:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80015b8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
		CreateNullAck(pPipeData->pipeNo);
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	781b      	ldrb	r3, [r3, #0]
 80015c0:	4618      	mov	r0, r3
 80015c2:	f000 f875 	bl	80016b0 <CreateNullAck>
		break;
 80015c6:	e013      	b.n	80015f0 <PackDataToAck+0x78>
	case data_meteoInDoor :
		meteoOutDoor=pPipeData->data.meteo_data;
 80015c8:	4a36      	ldr	r2, [pc, #216]	; (80016a4 <PackDataToAck+0x12c>)
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	4614      	mov	r4, r2
 80015ce:	330c      	adds	r3, #12
 80015d0:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80015d4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
		CreateNullAck(pPipeData->pipeNo);
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	781b      	ldrb	r3, [r3, #0]
 80015dc:	4618      	mov	r0, r3
 80015de:	f000 f867 	bl	80016b0 <CreateNullAck>
		break;
 80015e2:	e005      	b.n	80015f0 <PackDataToAck+0x78>
	case exactly_time:
		CreateNullAck(pPipeData->pipeNo);
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	781b      	ldrb	r3, [r3, #0]
 80015e8:	4618      	mov	r0, r3
 80015ea:	f000 f861 	bl	80016b0 <CreateNullAck>
		break;
 80015ee:	bf00      	nop
	}
	switch(pPipeData->data.query)
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	7e1b      	ldrb	r3, [r3, #24]
 80015f4:	2b03      	cmp	r3, #3
 80015f6:	d851      	bhi.n	800169c <PackDataToAck+0x124>
 80015f8:	a201      	add	r2, pc, #4	; (adr r2, 8001600 <PackDataToAck+0x88>)
 80015fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015fe:	bf00      	nop
 8001600:	0800169b 	.word	0x0800169b
 8001604:	08001611 	.word	0x08001611
 8001608:	0800162b 	.word	0x0800162b
 800160c:	08001663 	.word	0x08001663
	{
	case none_q:
		break;
	case get_time:
		pipeData[pPipeData->pipeNo].ackData.ack_query = get_time;
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	781b      	ldrb	r3, [r3, #0]
 8001614:	4619      	mov	r1, r3
 8001616:	4a24      	ldr	r2, [pc, #144]	; (80016a8 <PackDataToAck+0x130>)
 8001618:	460b      	mov	r3, r1
 800161a:	005b      	lsls	r3, r3, #1
 800161c:	440b      	add	r3, r1
 800161e:	011b      	lsls	r3, r3, #4
 8001620:	4413      	add	r3, r2
 8001622:	3329      	adds	r3, #41	; 0x29
 8001624:	2201      	movs	r2, #1
 8001626:	701a      	strb	r2, [r3, #0]
		break;
 8001628:	e038      	b.n	800169c <PackDataToAck+0x124>
	case get_meteoOutDoor:
		pipeData[pPipeData->pipeNo].ackData.ack_query = get_meteoOutDoor;
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	781b      	ldrb	r3, [r3, #0]
 800162e:	4619      	mov	r1, r3
 8001630:	4a1d      	ldr	r2, [pc, #116]	; (80016a8 <PackDataToAck+0x130>)
 8001632:	460b      	mov	r3, r1
 8001634:	005b      	lsls	r3, r3, #1
 8001636:	440b      	add	r3, r1
 8001638:	011b      	lsls	r3, r3, #4
 800163a:	4413      	add	r3, r2
 800163c:	3329      	adds	r3, #41	; 0x29
 800163e:	2202      	movs	r2, #2
 8001640:	701a      	strb	r2, [r3, #0]
		pipeData[pPipeData->pipeNo].ackData.meteo_data = meteoOutDoor;
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	781b      	ldrb	r3, [r3, #0]
 8001646:	4619      	mov	r1, r3
 8001648:	4a17      	ldr	r2, [pc, #92]	; (80016a8 <PackDataToAck+0x130>)
 800164a:	460b      	mov	r3, r1
 800164c:	005b      	lsls	r3, r3, #1
 800164e:	440b      	add	r3, r1
 8001650:	011b      	lsls	r3, r3, #4
 8001652:	4413      	add	r3, r2
 8001654:	3318      	adds	r3, #24
 8001656:	4a13      	ldr	r2, [pc, #76]	; (80016a4 <PackDataToAck+0x12c>)
 8001658:	3304      	adds	r3, #4
 800165a:	ca07      	ldmia	r2, {r0, r1, r2}
 800165c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		break;
 8001660:	e01c      	b.n	800169c <PackDataToAck+0x124>
	case get_meteoInDoor:
		pipeData[pPipeData->pipeNo].ackData.ack_query = get_meteoInDoor;
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	781b      	ldrb	r3, [r3, #0]
 8001666:	4619      	mov	r1, r3
 8001668:	4a0f      	ldr	r2, [pc, #60]	; (80016a8 <PackDataToAck+0x130>)
 800166a:	460b      	mov	r3, r1
 800166c:	005b      	lsls	r3, r3, #1
 800166e:	440b      	add	r3, r1
 8001670:	011b      	lsls	r3, r3, #4
 8001672:	4413      	add	r3, r2
 8001674:	3329      	adds	r3, #41	; 0x29
 8001676:	2203      	movs	r2, #3
 8001678:	701a      	strb	r2, [r3, #0]
		pipeData[pPipeData->pipeNo].ackData.meteo_data = meteoInDoor;
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	781b      	ldrb	r3, [r3, #0]
 800167e:	4619      	mov	r1, r3
 8001680:	4a09      	ldr	r2, [pc, #36]	; (80016a8 <PackDataToAck+0x130>)
 8001682:	460b      	mov	r3, r1
 8001684:	005b      	lsls	r3, r3, #1
 8001686:	440b      	add	r3, r1
 8001688:	011b      	lsls	r3, r3, #4
 800168a:	4413      	add	r3, r2
 800168c:	3318      	adds	r3, #24
 800168e:	4a07      	ldr	r2, [pc, #28]	; (80016ac <PackDataToAck+0x134>)
 8001690:	3304      	adds	r3, #4
 8001692:	ca07      	ldmia	r2, {r0, r1, r2}
 8001694:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		break;
 8001698:	e000      	b.n	800169c <PackDataToAck+0x124>
		break;
 800169a:	bf00      	nop
	}
}
 800169c:	bf00      	nop
 800169e:	370c      	adds	r7, #12
 80016a0:	46bd      	mov	sp, r7
 80016a2:	bd90      	pop	{r4, r7, pc}
 80016a4:	20001410 	.word	0x20001410
 80016a8:	20001444 	.word	0x20001444
 80016ac:	200013a0 	.word	0x200013a0

080016b0 <CreateNullAck>:
void CreateNullAck(const uint8_t pipeNo)
{
 80016b0:	b480      	push	{r7}
 80016b2:	b083      	sub	sp, #12
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	4603      	mov	r3, r0
 80016b8:	71fb      	strb	r3, [r7, #7]
	pipeData[pipeNo].ackData.time_interval = -1; //задержка перед следующей передачей
 80016ba:	79fa      	ldrb	r2, [r7, #7]
 80016bc:	4941      	ldr	r1, [pc, #260]	; (80017c4 <CreateNullAck+0x114>)
 80016be:	4613      	mov	r3, r2
 80016c0:	005b      	lsls	r3, r3, #1
 80016c2:	4413      	add	r3, r2
 80016c4:	011b      	lsls	r3, r3, #4
 80016c6:	440b      	add	r3, r1
 80016c8:	3314      	adds	r3, #20
 80016ca:	f04f 32ff 	mov.w	r2, #4294967295
 80016ce:	601a      	str	r2, [r3, #0]
	pipeData[pipeNo].ackData.server_time=unixtime;
 80016d0:	79fa      	ldrb	r2, [r7, #7]
 80016d2:	4b3d      	ldr	r3, [pc, #244]	; (80017c8 <CreateNullAck+0x118>)
 80016d4:	6819      	ldr	r1, [r3, #0]
 80016d6:	483b      	ldr	r0, [pc, #236]	; (80017c4 <CreateNullAck+0x114>)
 80016d8:	4613      	mov	r3, r2
 80016da:	005b      	lsls	r3, r3, #1
 80016dc:	4413      	add	r3, r2
 80016de:	011b      	lsls	r3, r3, #4
 80016e0:	4403      	add	r3, r0
 80016e2:	3318      	adds	r3, #24
 80016e4:	6019      	str	r1, [r3, #0]
	pipeData[pipeNo].ackData.meteo_data.measurement_time=946681200;
 80016e6:	79fa      	ldrb	r2, [r7, #7]
 80016e8:	4936      	ldr	r1, [pc, #216]	; (80017c4 <CreateNullAck+0x114>)
 80016ea:	4613      	mov	r3, r2
 80016ec:	005b      	lsls	r3, r3, #1
 80016ee:	4413      	add	r3, r2
 80016f0:	011b      	lsls	r3, r3, #4
 80016f2:	440b      	add	r3, r1
 80016f4:	331c      	adds	r3, #28
 80016f6:	4a35      	ldr	r2, [pc, #212]	; (80017cc <CreateNullAck+0x11c>)
 80016f8:	601a      	str	r2, [r3, #0]
	pipeData[pipeNo].ackData.meteo_data.T =0;
 80016fa:	79fa      	ldrb	r2, [r7, #7]
 80016fc:	4931      	ldr	r1, [pc, #196]	; (80017c4 <CreateNullAck+0x114>)
 80016fe:	4613      	mov	r3, r2
 8001700:	005b      	lsls	r3, r3, #1
 8001702:	4413      	add	r3, r2
 8001704:	011b      	lsls	r3, r3, #4
 8001706:	440b      	add	r3, r1
 8001708:	3320      	adds	r3, #32
 800170a:	2200      	movs	r2, #0
 800170c:	801a      	strh	r2, [r3, #0]
	pipeData[pipeNo].ackData.meteo_data.P = 0;
 800170e:	79fa      	ldrb	r2, [r7, #7]
 8001710:	492c      	ldr	r1, [pc, #176]	; (80017c4 <CreateNullAck+0x114>)
 8001712:	4613      	mov	r3, r2
 8001714:	005b      	lsls	r3, r3, #1
 8001716:	4413      	add	r3, r2
 8001718:	011b      	lsls	r3, r3, #4
 800171a:	440b      	add	r3, r1
 800171c:	3322      	adds	r3, #34	; 0x22
 800171e:	2200      	movs	r2, #0
 8001720:	801a      	strh	r2, [r3, #0]
	pipeData[pipeNo].ackData.meteo_data.H = 0;
 8001722:	79fa      	ldrb	r2, [r7, #7]
 8001724:	4927      	ldr	r1, [pc, #156]	; (80017c4 <CreateNullAck+0x114>)
 8001726:	4613      	mov	r3, r2
 8001728:	005b      	lsls	r3, r3, #1
 800172a:	4413      	add	r3, r2
 800172c:	011b      	lsls	r3, r3, #4
 800172e:	440b      	add	r3, r1
 8001730:	3324      	adds	r3, #36	; 0x24
 8001732:	2200      	movs	r2, #0
 8001734:	801a      	strh	r2, [r3, #0]
	pipeData[pipeNo].ackData.meteo_data.CO2 = 0;
 8001736:	79fa      	ldrb	r2, [r7, #7]
 8001738:	4922      	ldr	r1, [pc, #136]	; (80017c4 <CreateNullAck+0x114>)
 800173a:	4613      	mov	r3, r2
 800173c:	005b      	lsls	r3, r3, #1
 800173e:	4413      	add	r3, r2
 8001740:	011b      	lsls	r3, r3, #4
 8001742:	440b      	add	r3, r1
 8001744:	3326      	adds	r3, #38	; 0x26
 8001746:	2200      	movs	r2, #0
 8001748:	801a      	strh	r2, [r3, #0]
	pipeData[pipeNo].ackData.ack_query = none_q;
 800174a:	79fa      	ldrb	r2, [r7, #7]
 800174c:	491d      	ldr	r1, [pc, #116]	; (80017c4 <CreateNullAck+0x114>)
 800174e:	4613      	mov	r3, r2
 8001750:	005b      	lsls	r3, r3, #1
 8001752:	4413      	add	r3, r2
 8001754:	011b      	lsls	r3, r3, #4
 8001756:	440b      	add	r3, r1
 8001758:	3329      	adds	r3, #41	; 0x29
 800175a:	2200      	movs	r2, #0
 800175c:	701a      	strb	r2, [r3, #0]
	pipeData[pipeNo].ackData.command=none_command;
 800175e:	79fa      	ldrb	r2, [r7, #7]
 8001760:	4918      	ldr	r1, [pc, #96]	; (80017c4 <CreateNullAck+0x114>)
 8001762:	4613      	mov	r3, r2
 8001764:	005b      	lsls	r3, r3, #1
 8001766:	4413      	add	r3, r2
 8001768:	011b      	lsls	r3, r3, #4
 800176a:	440b      	add	r3, r1
 800176c:	3328      	adds	r3, #40	; 0x28
 800176e:	2200      	movs	r2, #0
 8001770:	701a      	strb	r2, [r3, #0]
	pipeData[pipeNo].ackData.channel=current_channel;
 8001772:	79fa      	ldrb	r2, [r7, #7]
 8001774:	4b16      	ldr	r3, [pc, #88]	; (80017d0 <CreateNullAck+0x120>)
 8001776:	7818      	ldrb	r0, [r3, #0]
 8001778:	4912      	ldr	r1, [pc, #72]	; (80017c4 <CreateNullAck+0x114>)
 800177a:	4613      	mov	r3, r2
 800177c:	005b      	lsls	r3, r3, #1
 800177e:	4413      	add	r3, r2
 8001780:	011b      	lsls	r3, r3, #4
 8001782:	440b      	add	r3, r1
 8001784:	332a      	adds	r3, #42	; 0x2a
 8001786:	4602      	mov	r2, r0
 8001788:	701a      	strb	r2, [r3, #0]
	pipeData[pipeNo].ackData.data_rate=current_data_rate;
 800178a:	79fa      	ldrb	r2, [r7, #7]
 800178c:	4b11      	ldr	r3, [pc, #68]	; (80017d4 <CreateNullAck+0x124>)
 800178e:	7818      	ldrb	r0, [r3, #0]
 8001790:	490c      	ldr	r1, [pc, #48]	; (80017c4 <CreateNullAck+0x114>)
 8001792:	4613      	mov	r3, r2
 8001794:	005b      	lsls	r3, r3, #1
 8001796:	4413      	add	r3, r2
 8001798:	011b      	lsls	r3, r3, #4
 800179a:	440b      	add	r3, r1
 800179c:	332b      	adds	r3, #43	; 0x2b
 800179e:	4602      	mov	r2, r0
 80017a0:	701a      	strb	r2, [r3, #0]
	pipeData[pipeNo].ackData.power=current_power;
 80017a2:	79fa      	ldrb	r2, [r7, #7]
 80017a4:	4b0c      	ldr	r3, [pc, #48]	; (80017d8 <CreateNullAck+0x128>)
 80017a6:	7818      	ldrb	r0, [r3, #0]
 80017a8:	4906      	ldr	r1, [pc, #24]	; (80017c4 <CreateNullAck+0x114>)
 80017aa:	4613      	mov	r3, r2
 80017ac:	005b      	lsls	r3, r3, #1
 80017ae:	4413      	add	r3, r2
 80017b0:	011b      	lsls	r3, r3, #4
 80017b2:	440b      	add	r3, r1
 80017b4:	332c      	adds	r3, #44	; 0x2c
 80017b6:	4602      	mov	r2, r0
 80017b8:	701a      	strb	r2, [r3, #0]
	}
 80017ba:	bf00      	nop
 80017bc:	370c      	adds	r7, #12
 80017be:	46bd      	mov	sp, r7
 80017c0:	bc80      	pop	{r7}
 80017c2:	4770      	bx	lr
 80017c4:	20001444 	.word	0x20001444
 80017c8:	2000162c 	.word	0x2000162c
 80017cc:	386d3570 	.word	0x386d3570
 80017d0:	20001630 	.word	0x20001630
 80017d4:	20001628 	.word	0x20001628
 80017d8:	20001629 	.word	0x20001629

080017dc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b084      	sub	sp, #16
 80017e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80017e2:	4b18      	ldr	r3, [pc, #96]	; (8001844 <HAL_MspInit+0x68>)
 80017e4:	699b      	ldr	r3, [r3, #24]
 80017e6:	4a17      	ldr	r2, [pc, #92]	; (8001844 <HAL_MspInit+0x68>)
 80017e8:	f043 0301 	orr.w	r3, r3, #1
 80017ec:	6193      	str	r3, [r2, #24]
 80017ee:	4b15      	ldr	r3, [pc, #84]	; (8001844 <HAL_MspInit+0x68>)
 80017f0:	699b      	ldr	r3, [r3, #24]
 80017f2:	f003 0301 	and.w	r3, r3, #1
 80017f6:	60bb      	str	r3, [r7, #8]
 80017f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80017fa:	4b12      	ldr	r3, [pc, #72]	; (8001844 <HAL_MspInit+0x68>)
 80017fc:	69db      	ldr	r3, [r3, #28]
 80017fe:	4a11      	ldr	r2, [pc, #68]	; (8001844 <HAL_MspInit+0x68>)
 8001800:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001804:	61d3      	str	r3, [r2, #28]
 8001806:	4b0f      	ldr	r3, [pc, #60]	; (8001844 <HAL_MspInit+0x68>)
 8001808:	69db      	ldr	r3, [r3, #28]
 800180a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800180e:	607b      	str	r3, [r7, #4]
 8001810:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001812:	2200      	movs	r2, #0
 8001814:	210f      	movs	r1, #15
 8001816:	f06f 0001 	mvn.w	r0, #1
 800181a:	f000 fabe 	bl	8001d9a <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800181e:	4b0a      	ldr	r3, [pc, #40]	; (8001848 <HAL_MspInit+0x6c>)
 8001820:	685b      	ldr	r3, [r3, #4]
 8001822:	60fb      	str	r3, [r7, #12]
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800182a:	60fb      	str	r3, [r7, #12]
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001832:	60fb      	str	r3, [r7, #12]
 8001834:	4a04      	ldr	r2, [pc, #16]	; (8001848 <HAL_MspInit+0x6c>)
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800183a:	bf00      	nop
 800183c:	3710      	adds	r7, #16
 800183e:	46bd      	mov	sp, r7
 8001840:	bd80      	pop	{r7, pc}
 8001842:	bf00      	nop
 8001844:	40021000 	.word	0x40021000
 8001848:	40010000 	.word	0x40010000

0800184c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b088      	sub	sp, #32
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001854:	f107 0310 	add.w	r3, r7, #16
 8001858:	2200      	movs	r2, #0
 800185a:	601a      	str	r2, [r3, #0]
 800185c:	605a      	str	r2, [r3, #4]
 800185e:	609a      	str	r2, [r3, #8]
 8001860:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	4a1b      	ldr	r2, [pc, #108]	; (80018d4 <HAL_SPI_MspInit+0x88>)
 8001868:	4293      	cmp	r3, r2
 800186a:	d12f      	bne.n	80018cc <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800186c:	4b1a      	ldr	r3, [pc, #104]	; (80018d8 <HAL_SPI_MspInit+0x8c>)
 800186e:	699b      	ldr	r3, [r3, #24]
 8001870:	4a19      	ldr	r2, [pc, #100]	; (80018d8 <HAL_SPI_MspInit+0x8c>)
 8001872:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001876:	6193      	str	r3, [r2, #24]
 8001878:	4b17      	ldr	r3, [pc, #92]	; (80018d8 <HAL_SPI_MspInit+0x8c>)
 800187a:	699b      	ldr	r3, [r3, #24]
 800187c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001880:	60fb      	str	r3, [r7, #12]
 8001882:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001884:	4b14      	ldr	r3, [pc, #80]	; (80018d8 <HAL_SPI_MspInit+0x8c>)
 8001886:	699b      	ldr	r3, [r3, #24]
 8001888:	4a13      	ldr	r2, [pc, #76]	; (80018d8 <HAL_SPI_MspInit+0x8c>)
 800188a:	f043 0304 	orr.w	r3, r3, #4
 800188e:	6193      	str	r3, [r2, #24]
 8001890:	4b11      	ldr	r3, [pc, #68]	; (80018d8 <HAL_SPI_MspInit+0x8c>)
 8001892:	699b      	ldr	r3, [r3, #24]
 8001894:	f003 0304 	and.w	r3, r3, #4
 8001898:	60bb      	str	r3, [r7, #8]
 800189a:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 800189c:	23a0      	movs	r3, #160	; 0xa0
 800189e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018a0:	2302      	movs	r3, #2
 80018a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80018a4:	2303      	movs	r3, #3
 80018a6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018a8:	f107 0310 	add.w	r3, r7, #16
 80018ac:	4619      	mov	r1, r3
 80018ae:	480b      	ldr	r0, [pc, #44]	; (80018dc <HAL_SPI_MspInit+0x90>)
 80018b0:	f000 fa9e 	bl	8001df0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80018b4:	2340      	movs	r3, #64	; 0x40
 80018b6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018b8:	2300      	movs	r3, #0
 80018ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018bc:	2300      	movs	r3, #0
 80018be:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018c0:	f107 0310 	add.w	r3, r7, #16
 80018c4:	4619      	mov	r1, r3
 80018c6:	4805      	ldr	r0, [pc, #20]	; (80018dc <HAL_SPI_MspInit+0x90>)
 80018c8:	f000 fa92 	bl	8001df0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80018cc:	bf00      	nop
 80018ce:	3720      	adds	r7, #32
 80018d0:	46bd      	mov	sp, r7
 80018d2:	bd80      	pop	{r7, pc}
 80018d4:	40013000 	.word	0x40013000
 80018d8:	40021000 	.word	0x40021000
 80018dc:	40010800 	.word	0x40010800

080018e0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b088      	sub	sp, #32
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018e8:	f107 0310 	add.w	r3, r7, #16
 80018ec:	2200      	movs	r2, #0
 80018ee:	601a      	str	r2, [r3, #0]
 80018f0:	605a      	str	r2, [r3, #4]
 80018f2:	609a      	str	r2, [r3, #8]
 80018f4:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	4a1c      	ldr	r2, [pc, #112]	; (800196c <HAL_UART_MspInit+0x8c>)
 80018fc:	4293      	cmp	r3, r2
 80018fe:	d131      	bne.n	8001964 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001900:	4b1b      	ldr	r3, [pc, #108]	; (8001970 <HAL_UART_MspInit+0x90>)
 8001902:	699b      	ldr	r3, [r3, #24]
 8001904:	4a1a      	ldr	r2, [pc, #104]	; (8001970 <HAL_UART_MspInit+0x90>)
 8001906:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800190a:	6193      	str	r3, [r2, #24]
 800190c:	4b18      	ldr	r3, [pc, #96]	; (8001970 <HAL_UART_MspInit+0x90>)
 800190e:	699b      	ldr	r3, [r3, #24]
 8001910:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001914:	60fb      	str	r3, [r7, #12]
 8001916:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001918:	4b15      	ldr	r3, [pc, #84]	; (8001970 <HAL_UART_MspInit+0x90>)
 800191a:	699b      	ldr	r3, [r3, #24]
 800191c:	4a14      	ldr	r2, [pc, #80]	; (8001970 <HAL_UART_MspInit+0x90>)
 800191e:	f043 0304 	orr.w	r3, r3, #4
 8001922:	6193      	str	r3, [r2, #24]
 8001924:	4b12      	ldr	r3, [pc, #72]	; (8001970 <HAL_UART_MspInit+0x90>)
 8001926:	699b      	ldr	r3, [r3, #24]
 8001928:	f003 0304 	and.w	r3, r3, #4
 800192c:	60bb      	str	r3, [r7, #8]
 800192e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001930:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001934:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001936:	2302      	movs	r3, #2
 8001938:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800193a:	2303      	movs	r3, #3
 800193c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800193e:	f107 0310 	add.w	r3, r7, #16
 8001942:	4619      	mov	r1, r3
 8001944:	480b      	ldr	r0, [pc, #44]	; (8001974 <HAL_UART_MspInit+0x94>)
 8001946:	f000 fa53 	bl	8001df0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800194a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800194e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001950:	2300      	movs	r3, #0
 8001952:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001954:	2300      	movs	r3, #0
 8001956:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001958:	f107 0310 	add.w	r3, r7, #16
 800195c:	4619      	mov	r1, r3
 800195e:	4805      	ldr	r0, [pc, #20]	; (8001974 <HAL_UART_MspInit+0x94>)
 8001960:	f000 fa46 	bl	8001df0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001964:	bf00      	nop
 8001966:	3720      	adds	r7, #32
 8001968:	46bd      	mov	sp, r7
 800196a:	bd80      	pop	{r7, pc}
 800196c:	40013800 	.word	0x40013800
 8001970:	40021000 	.word	0x40021000
 8001974:	40010800 	.word	0x40010800

08001978 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	b08c      	sub	sp, #48	; 0x30
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001980:	2300      	movs	r3, #0
 8001982:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001984:	2300      	movs	r3, #0
 8001986:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM4 IRQ priority */
  HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority ,0); 
 8001988:	2200      	movs	r2, #0
 800198a:	6879      	ldr	r1, [r7, #4]
 800198c:	201e      	movs	r0, #30
 800198e:	f000 fa04 	bl	8001d9a <HAL_NVIC_SetPriority>
  
  /* Enable the TIM4 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM4_IRQn); 
 8001992:	201e      	movs	r0, #30
 8001994:	f000 fa1d 	bl	8001dd2 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 8001998:	4b1f      	ldr	r3, [pc, #124]	; (8001a18 <HAL_InitTick+0xa0>)
 800199a:	69db      	ldr	r3, [r3, #28]
 800199c:	4a1e      	ldr	r2, [pc, #120]	; (8001a18 <HAL_InitTick+0xa0>)
 800199e:	f043 0304 	orr.w	r3, r3, #4
 80019a2:	61d3      	str	r3, [r2, #28]
 80019a4:	4b1c      	ldr	r3, [pc, #112]	; (8001a18 <HAL_InitTick+0xa0>)
 80019a6:	69db      	ldr	r3, [r3, #28]
 80019a8:	f003 0304 	and.w	r3, r3, #4
 80019ac:	60fb      	str	r3, [r7, #12]
 80019ae:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80019b0:	f107 0210 	add.w	r2, r7, #16
 80019b4:	f107 0314 	add.w	r3, r7, #20
 80019b8:	4611      	mov	r1, r2
 80019ba:	4618      	mov	r0, r3
 80019bc:	f000 ffb8 	bl	8002930 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM4 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 80019c0:	f000 ff8e 	bl	80028e0 <HAL_RCC_GetPCLK1Freq>
 80019c4:	4603      	mov	r3, r0
 80019c6:	005b      	lsls	r3, r3, #1
 80019c8:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 80019ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019cc:	4a13      	ldr	r2, [pc, #76]	; (8001a1c <HAL_InitTick+0xa4>)
 80019ce:	fba2 2303 	umull	r2, r3, r2, r3
 80019d2:	0c9b      	lsrs	r3, r3, #18
 80019d4:	3b01      	subs	r3, #1
 80019d6:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 80019d8:	4b11      	ldr	r3, [pc, #68]	; (8001a20 <HAL_InitTick+0xa8>)
 80019da:	4a12      	ldr	r2, [pc, #72]	; (8001a24 <HAL_InitTick+0xac>)
 80019dc:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000 / 1000) - 1;
 80019de:	4b10      	ldr	r3, [pc, #64]	; (8001a20 <HAL_InitTick+0xa8>)
 80019e0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80019e4:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 80019e6:	4a0e      	ldr	r2, [pc, #56]	; (8001a20 <HAL_InitTick+0xa8>)
 80019e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019ea:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 80019ec:	4b0c      	ldr	r3, [pc, #48]	; (8001a20 <HAL_InitTick+0xa8>)
 80019ee:	2200      	movs	r2, #0
 80019f0:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019f2:	4b0b      	ldr	r3, [pc, #44]	; (8001a20 <HAL_InitTick+0xa8>)
 80019f4:	2200      	movs	r2, #0
 80019f6:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim4) == HAL_OK)
 80019f8:	4809      	ldr	r0, [pc, #36]	; (8001a20 <HAL_InitTick+0xa8>)
 80019fa:	f001 fd01 	bl	8003400 <HAL_TIM_Base_Init>
 80019fe:	4603      	mov	r3, r0
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d104      	bne.n	8001a0e <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim4);
 8001a04:	4806      	ldr	r0, [pc, #24]	; (8001a20 <HAL_InitTick+0xa8>)
 8001a06:	f001 fd2f 	bl	8003468 <HAL_TIM_Base_Start_IT>
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	e000      	b.n	8001a10 <HAL_InitTick+0x98>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8001a0e:	2301      	movs	r3, #1
}
 8001a10:	4618      	mov	r0, r3
 8001a12:	3730      	adds	r7, #48	; 0x30
 8001a14:	46bd      	mov	sp, r7
 8001a16:	bd80      	pop	{r7, pc}
 8001a18:	40021000 	.word	0x40021000
 8001a1c:	431bde83 	.word	0x431bde83
 8001a20:	20001634 	.word	0x20001634
 8001a24:	40000800 	.word	0x40000800

08001a28 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001a2c:	bf00      	nop
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bc80      	pop	{r7}
 8001a32:	4770      	bx	lr

08001a34 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a34:	b480      	push	{r7}
 8001a36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a38:	e7fe      	b.n	8001a38 <HardFault_Handler+0x4>

08001a3a <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a3a:	b480      	push	{r7}
 8001a3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a3e:	e7fe      	b.n	8001a3e <MemManage_Handler+0x4>

08001a40 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a40:	b480      	push	{r7}
 8001a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a44:	e7fe      	b.n	8001a44 <BusFault_Handler+0x4>

08001a46 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a46:	b480      	push	{r7}
 8001a48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a4a:	e7fe      	b.n	8001a4a <UsageFault_Handler+0x4>

08001a4c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a50:	bf00      	nop
 8001a52:	46bd      	mov	sp, r7
 8001a54:	bc80      	pop	{r7}
 8001a56:	4770      	bx	lr

08001a58 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8001a5c:	2001      	movs	r0, #1
 8001a5e:	f000 fb51 	bl	8002104 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001a62:	bf00      	nop
 8001a64:	bd80      	pop	{r7, pc}
	...

08001a68 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001a6c:	4802      	ldr	r0, [pc, #8]	; (8001a78 <TIM4_IRQHandler+0x10>)
 8001a6e:	f001 fd1e 	bl	80034ae <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001a72:	bf00      	nop
 8001a74:	bd80      	pop	{r7, pc}
 8001a76:	bf00      	nop
 8001a78:	20001634 	.word	0x20001634

08001a7c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b084      	sub	sp, #16
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001a84:	4b11      	ldr	r3, [pc, #68]	; (8001acc <_sbrk+0x50>)
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d102      	bne.n	8001a92 <_sbrk+0x16>
		heap_end = &end;
 8001a8c:	4b0f      	ldr	r3, [pc, #60]	; (8001acc <_sbrk+0x50>)
 8001a8e:	4a10      	ldr	r2, [pc, #64]	; (8001ad0 <_sbrk+0x54>)
 8001a90:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8001a92:	4b0e      	ldr	r3, [pc, #56]	; (8001acc <_sbrk+0x50>)
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001a98:	4b0c      	ldr	r3, [pc, #48]	; (8001acc <_sbrk+0x50>)
 8001a9a:	681a      	ldr	r2, [r3, #0]
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	4413      	add	r3, r2
 8001aa0:	466a      	mov	r2, sp
 8001aa2:	4293      	cmp	r3, r2
 8001aa4:	d907      	bls.n	8001ab6 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8001aa6:	f005 fa65 	bl	8006f74 <__errno>
 8001aaa:	4602      	mov	r2, r0
 8001aac:	230c      	movs	r3, #12
 8001aae:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8001ab0:	f04f 33ff 	mov.w	r3, #4294967295
 8001ab4:	e006      	b.n	8001ac4 <_sbrk+0x48>
	}

	heap_end += incr;
 8001ab6:	4b05      	ldr	r3, [pc, #20]	; (8001acc <_sbrk+0x50>)
 8001ab8:	681a      	ldr	r2, [r3, #0]
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	4413      	add	r3, r2
 8001abe:	4a03      	ldr	r2, [pc, #12]	; (8001acc <_sbrk+0x50>)
 8001ac0:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8001ac2:	68fb      	ldr	r3, [r7, #12]
}
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	3710      	adds	r7, #16
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	bd80      	pop	{r7, pc}
 8001acc:	2000054c 	.word	0x2000054c
 8001ad0:	200016c0 	.word	0x200016c0

08001ad4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001ad4:	b480      	push	{r7}
 8001ad6:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8001ad8:	4b15      	ldr	r3, [pc, #84]	; (8001b30 <SystemInit+0x5c>)
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	4a14      	ldr	r2, [pc, #80]	; (8001b30 <SystemInit+0x5c>)
 8001ade:	f043 0301 	orr.w	r3, r3, #1
 8001ae2:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8001ae4:	4b12      	ldr	r3, [pc, #72]	; (8001b30 <SystemInit+0x5c>)
 8001ae6:	685a      	ldr	r2, [r3, #4]
 8001ae8:	4911      	ldr	r1, [pc, #68]	; (8001b30 <SystemInit+0x5c>)
 8001aea:	4b12      	ldr	r3, [pc, #72]	; (8001b34 <SystemInit+0x60>)
 8001aec:	4013      	ands	r3, r2
 8001aee:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8001af0:	4b0f      	ldr	r3, [pc, #60]	; (8001b30 <SystemInit+0x5c>)
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	4a0e      	ldr	r2, [pc, #56]	; (8001b30 <SystemInit+0x5c>)
 8001af6:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8001afa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001afe:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001b00:	4b0b      	ldr	r3, [pc, #44]	; (8001b30 <SystemInit+0x5c>)
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	4a0a      	ldr	r2, [pc, #40]	; (8001b30 <SystemInit+0x5c>)
 8001b06:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b0a:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8001b0c:	4b08      	ldr	r3, [pc, #32]	; (8001b30 <SystemInit+0x5c>)
 8001b0e:	685b      	ldr	r3, [r3, #4]
 8001b10:	4a07      	ldr	r2, [pc, #28]	; (8001b30 <SystemInit+0x5c>)
 8001b12:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8001b16:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8001b18:	4b05      	ldr	r3, [pc, #20]	; (8001b30 <SystemInit+0x5c>)
 8001b1a:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8001b1e:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8001b20:	4b05      	ldr	r3, [pc, #20]	; (8001b38 <SystemInit+0x64>)
 8001b22:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001b26:	609a      	str	r2, [r3, #8]
#endif 
}
 8001b28:	bf00      	nop
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	bc80      	pop	{r7}
 8001b2e:	4770      	bx	lr
 8001b30:	40021000 	.word	0x40021000
 8001b34:	f8ff0000 	.word	0xf8ff0000
 8001b38:	e000ed00 	.word	0xe000ed00

08001b3c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001b3c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8001b3e:	e003      	b.n	8001b48 <LoopCopyDataInit>

08001b40 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001b40:	4b0b      	ldr	r3, [pc, #44]	; (8001b70 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8001b42:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001b44:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8001b46:	3104      	adds	r1, #4

08001b48 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001b48:	480a      	ldr	r0, [pc, #40]	; (8001b74 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8001b4a:	4b0b      	ldr	r3, [pc, #44]	; (8001b78 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8001b4c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8001b4e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001b50:	d3f6      	bcc.n	8001b40 <CopyDataInit>
  ldr r2, =_sbss
 8001b52:	4a0a      	ldr	r2, [pc, #40]	; (8001b7c <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8001b54:	e002      	b.n	8001b5c <LoopFillZerobss>

08001b56 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8001b56:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001b58:	f842 3b04 	str.w	r3, [r2], #4

08001b5c <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8001b5c:	4b08      	ldr	r3, [pc, #32]	; (8001b80 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8001b5e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001b60:	d3f9      	bcc.n	8001b56 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001b62:	f7ff ffb7 	bl	8001ad4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001b66:	f005 fa0b 	bl	8006f80 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001b6a:	f7fe fb39 	bl	80001e0 <main>
  bx lr
 8001b6e:	4770      	bx	lr
  ldr r3, =_sidata
 8001b70:	08007ab4 	.word	0x08007ab4
  ldr r0, =_sdata
 8001b74:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001b78:	20000074 	.word	0x20000074
  ldr r2, =_sbss
 8001b7c:	20000074 	.word	0x20000074
  ldr r3, = _ebss
 8001b80:	200016bc 	.word	0x200016bc

08001b84 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001b84:	e7fe      	b.n	8001b84 <ADC1_2_IRQHandler>
	...

08001b88 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b8c:	4b08      	ldr	r3, [pc, #32]	; (8001bb0 <HAL_Init+0x28>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	4a07      	ldr	r2, [pc, #28]	; (8001bb0 <HAL_Init+0x28>)
 8001b92:	f043 0310 	orr.w	r3, r3, #16
 8001b96:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b98:	2003      	movs	r0, #3
 8001b9a:	f000 f8f3 	bl	8001d84 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b9e:	2000      	movs	r0, #0
 8001ba0:	f7ff feea 	bl	8001978 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001ba4:	f7ff fe1a 	bl	80017dc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ba8:	2300      	movs	r3, #0
}
 8001baa:	4618      	mov	r0, r3
 8001bac:	bd80      	pop	{r7, pc}
 8001bae:	bf00      	nop
 8001bb0:	40022000 	.word	0x40022000

08001bb4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001bb8:	4b05      	ldr	r3, [pc, #20]	; (8001bd0 <HAL_IncTick+0x1c>)
 8001bba:	781b      	ldrb	r3, [r3, #0]
 8001bbc:	461a      	mov	r2, r3
 8001bbe:	4b05      	ldr	r3, [pc, #20]	; (8001bd4 <HAL_IncTick+0x20>)
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	4413      	add	r3, r2
 8001bc4:	4a03      	ldr	r2, [pc, #12]	; (8001bd4 <HAL_IncTick+0x20>)
 8001bc6:	6013      	str	r3, [r2, #0]
}
 8001bc8:	bf00      	nop
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	bc80      	pop	{r7}
 8001bce:	4770      	bx	lr
 8001bd0:	20000008 	.word	0x20000008
 8001bd4:	20001674 	.word	0x20001674

08001bd8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001bd8:	b480      	push	{r7}
 8001bda:	af00      	add	r7, sp, #0
  return uwTick;
 8001bdc:	4b02      	ldr	r3, [pc, #8]	; (8001be8 <HAL_GetTick+0x10>)
 8001bde:	681b      	ldr	r3, [r3, #0]
}
 8001be0:	4618      	mov	r0, r3
 8001be2:	46bd      	mov	sp, r7
 8001be4:	bc80      	pop	{r7}
 8001be6:	4770      	bx	lr
 8001be8:	20001674 	.word	0x20001674

08001bec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b084      	sub	sp, #16
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001bf4:	f7ff fff0 	bl	8001bd8 <HAL_GetTick>
 8001bf8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c04:	d005      	beq.n	8001c12 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001c06:	4b09      	ldr	r3, [pc, #36]	; (8001c2c <HAL_Delay+0x40>)
 8001c08:	781b      	ldrb	r3, [r3, #0]
 8001c0a:	461a      	mov	r2, r3
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	4413      	add	r3, r2
 8001c10:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001c12:	bf00      	nop
 8001c14:	f7ff ffe0 	bl	8001bd8 <HAL_GetTick>
 8001c18:	4602      	mov	r2, r0
 8001c1a:	68bb      	ldr	r3, [r7, #8]
 8001c1c:	1ad3      	subs	r3, r2, r3
 8001c1e:	68fa      	ldr	r2, [r7, #12]
 8001c20:	429a      	cmp	r2, r3
 8001c22:	d8f7      	bhi.n	8001c14 <HAL_Delay+0x28>
  {
  }
}
 8001c24:	bf00      	nop
 8001c26:	3710      	adds	r7, #16
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	bd80      	pop	{r7, pc}
 8001c2c:	20000008 	.word	0x20000008

08001c30 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c30:	b480      	push	{r7}
 8001c32:	b085      	sub	sp, #20
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	f003 0307 	and.w	r3, r3, #7
 8001c3e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c40:	4b0c      	ldr	r3, [pc, #48]	; (8001c74 <__NVIC_SetPriorityGrouping+0x44>)
 8001c42:	68db      	ldr	r3, [r3, #12]
 8001c44:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c46:	68ba      	ldr	r2, [r7, #8]
 8001c48:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c4c:	4013      	ands	r3, r2
 8001c4e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c54:	68bb      	ldr	r3, [r7, #8]
 8001c56:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c58:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001c5c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c60:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c62:	4a04      	ldr	r2, [pc, #16]	; (8001c74 <__NVIC_SetPriorityGrouping+0x44>)
 8001c64:	68bb      	ldr	r3, [r7, #8]
 8001c66:	60d3      	str	r3, [r2, #12]
}
 8001c68:	bf00      	nop
 8001c6a:	3714      	adds	r7, #20
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	bc80      	pop	{r7}
 8001c70:	4770      	bx	lr
 8001c72:	bf00      	nop
 8001c74:	e000ed00 	.word	0xe000ed00

08001c78 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c78:	b480      	push	{r7}
 8001c7a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c7c:	4b04      	ldr	r3, [pc, #16]	; (8001c90 <__NVIC_GetPriorityGrouping+0x18>)
 8001c7e:	68db      	ldr	r3, [r3, #12]
 8001c80:	0a1b      	lsrs	r3, r3, #8
 8001c82:	f003 0307 	and.w	r3, r3, #7
}
 8001c86:	4618      	mov	r0, r3
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	bc80      	pop	{r7}
 8001c8c:	4770      	bx	lr
 8001c8e:	bf00      	nop
 8001c90:	e000ed00 	.word	0xe000ed00

08001c94 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c94:	b480      	push	{r7}
 8001c96:	b083      	sub	sp, #12
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	db0b      	blt.n	8001cbe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ca6:	79fb      	ldrb	r3, [r7, #7]
 8001ca8:	f003 021f 	and.w	r2, r3, #31
 8001cac:	4906      	ldr	r1, [pc, #24]	; (8001cc8 <__NVIC_EnableIRQ+0x34>)
 8001cae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cb2:	095b      	lsrs	r3, r3, #5
 8001cb4:	2001      	movs	r0, #1
 8001cb6:	fa00 f202 	lsl.w	r2, r0, r2
 8001cba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001cbe:	bf00      	nop
 8001cc0:	370c      	adds	r7, #12
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	bc80      	pop	{r7}
 8001cc6:	4770      	bx	lr
 8001cc8:	e000e100 	.word	0xe000e100

08001ccc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ccc:	b480      	push	{r7}
 8001cce:	b083      	sub	sp, #12
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	6039      	str	r1, [r7, #0]
 8001cd6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cd8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	db0a      	blt.n	8001cf6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ce0:	683b      	ldr	r3, [r7, #0]
 8001ce2:	b2da      	uxtb	r2, r3
 8001ce4:	490c      	ldr	r1, [pc, #48]	; (8001d18 <__NVIC_SetPriority+0x4c>)
 8001ce6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cea:	0112      	lsls	r2, r2, #4
 8001cec:	b2d2      	uxtb	r2, r2
 8001cee:	440b      	add	r3, r1
 8001cf0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001cf4:	e00a      	b.n	8001d0c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cf6:	683b      	ldr	r3, [r7, #0]
 8001cf8:	b2da      	uxtb	r2, r3
 8001cfa:	4908      	ldr	r1, [pc, #32]	; (8001d1c <__NVIC_SetPriority+0x50>)
 8001cfc:	79fb      	ldrb	r3, [r7, #7]
 8001cfe:	f003 030f 	and.w	r3, r3, #15
 8001d02:	3b04      	subs	r3, #4
 8001d04:	0112      	lsls	r2, r2, #4
 8001d06:	b2d2      	uxtb	r2, r2
 8001d08:	440b      	add	r3, r1
 8001d0a:	761a      	strb	r2, [r3, #24]
}
 8001d0c:	bf00      	nop
 8001d0e:	370c      	adds	r7, #12
 8001d10:	46bd      	mov	sp, r7
 8001d12:	bc80      	pop	{r7}
 8001d14:	4770      	bx	lr
 8001d16:	bf00      	nop
 8001d18:	e000e100 	.word	0xe000e100
 8001d1c:	e000ed00 	.word	0xe000ed00

08001d20 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d20:	b480      	push	{r7}
 8001d22:	b089      	sub	sp, #36	; 0x24
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	60f8      	str	r0, [r7, #12]
 8001d28:	60b9      	str	r1, [r7, #8]
 8001d2a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	f003 0307 	and.w	r3, r3, #7
 8001d32:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d34:	69fb      	ldr	r3, [r7, #28]
 8001d36:	f1c3 0307 	rsb	r3, r3, #7
 8001d3a:	2b04      	cmp	r3, #4
 8001d3c:	bf28      	it	cs
 8001d3e:	2304      	movcs	r3, #4
 8001d40:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d42:	69fb      	ldr	r3, [r7, #28]
 8001d44:	3304      	adds	r3, #4
 8001d46:	2b06      	cmp	r3, #6
 8001d48:	d902      	bls.n	8001d50 <NVIC_EncodePriority+0x30>
 8001d4a:	69fb      	ldr	r3, [r7, #28]
 8001d4c:	3b03      	subs	r3, #3
 8001d4e:	e000      	b.n	8001d52 <NVIC_EncodePriority+0x32>
 8001d50:	2300      	movs	r3, #0
 8001d52:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d54:	f04f 32ff 	mov.w	r2, #4294967295
 8001d58:	69bb      	ldr	r3, [r7, #24]
 8001d5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d5e:	43da      	mvns	r2, r3
 8001d60:	68bb      	ldr	r3, [r7, #8]
 8001d62:	401a      	ands	r2, r3
 8001d64:	697b      	ldr	r3, [r7, #20]
 8001d66:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d68:	f04f 31ff 	mov.w	r1, #4294967295
 8001d6c:	697b      	ldr	r3, [r7, #20]
 8001d6e:	fa01 f303 	lsl.w	r3, r1, r3
 8001d72:	43d9      	mvns	r1, r3
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d78:	4313      	orrs	r3, r2
         );
}
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	3724      	adds	r7, #36	; 0x24
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	bc80      	pop	{r7}
 8001d82:	4770      	bx	lr

08001d84 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b082      	sub	sp, #8
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d8c:	6878      	ldr	r0, [r7, #4]
 8001d8e:	f7ff ff4f 	bl	8001c30 <__NVIC_SetPriorityGrouping>
}
 8001d92:	bf00      	nop
 8001d94:	3708      	adds	r7, #8
 8001d96:	46bd      	mov	sp, r7
 8001d98:	bd80      	pop	{r7, pc}

08001d9a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d9a:	b580      	push	{r7, lr}
 8001d9c:	b086      	sub	sp, #24
 8001d9e:	af00      	add	r7, sp, #0
 8001da0:	4603      	mov	r3, r0
 8001da2:	60b9      	str	r1, [r7, #8]
 8001da4:	607a      	str	r2, [r7, #4]
 8001da6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001da8:	2300      	movs	r3, #0
 8001daa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001dac:	f7ff ff64 	bl	8001c78 <__NVIC_GetPriorityGrouping>
 8001db0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001db2:	687a      	ldr	r2, [r7, #4]
 8001db4:	68b9      	ldr	r1, [r7, #8]
 8001db6:	6978      	ldr	r0, [r7, #20]
 8001db8:	f7ff ffb2 	bl	8001d20 <NVIC_EncodePriority>
 8001dbc:	4602      	mov	r2, r0
 8001dbe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001dc2:	4611      	mov	r1, r2
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	f7ff ff81 	bl	8001ccc <__NVIC_SetPriority>
}
 8001dca:	bf00      	nop
 8001dcc:	3718      	adds	r7, #24
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	bd80      	pop	{r7, pc}

08001dd2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001dd2:	b580      	push	{r7, lr}
 8001dd4:	b082      	sub	sp, #8
 8001dd6:	af00      	add	r7, sp, #0
 8001dd8:	4603      	mov	r3, r0
 8001dda:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ddc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001de0:	4618      	mov	r0, r3
 8001de2:	f7ff ff57 	bl	8001c94 <__NVIC_EnableIRQ>
}
 8001de6:	bf00      	nop
 8001de8:	3708      	adds	r7, #8
 8001dea:	46bd      	mov	sp, r7
 8001dec:	bd80      	pop	{r7, pc}
	...

08001df0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001df0:	b480      	push	{r7}
 8001df2:	b08b      	sub	sp, #44	; 0x2c
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
 8001df8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001dfe:	2300      	movs	r3, #0
 8001e00:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e02:	e127      	b.n	8002054 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001e04:	2201      	movs	r2, #1
 8001e06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e08:	fa02 f303 	lsl.w	r3, r2, r3
 8001e0c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001e0e:	683b      	ldr	r3, [r7, #0]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	69fa      	ldr	r2, [r7, #28]
 8001e14:	4013      	ands	r3, r2
 8001e16:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001e18:	69ba      	ldr	r2, [r7, #24]
 8001e1a:	69fb      	ldr	r3, [r7, #28]
 8001e1c:	429a      	cmp	r2, r3
 8001e1e:	f040 8116 	bne.w	800204e <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001e22:	683b      	ldr	r3, [r7, #0]
 8001e24:	685b      	ldr	r3, [r3, #4]
 8001e26:	2b12      	cmp	r3, #18
 8001e28:	d034      	beq.n	8001e94 <HAL_GPIO_Init+0xa4>
 8001e2a:	2b12      	cmp	r3, #18
 8001e2c:	d80d      	bhi.n	8001e4a <HAL_GPIO_Init+0x5a>
 8001e2e:	2b02      	cmp	r3, #2
 8001e30:	d02b      	beq.n	8001e8a <HAL_GPIO_Init+0x9a>
 8001e32:	2b02      	cmp	r3, #2
 8001e34:	d804      	bhi.n	8001e40 <HAL_GPIO_Init+0x50>
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d031      	beq.n	8001e9e <HAL_GPIO_Init+0xae>
 8001e3a:	2b01      	cmp	r3, #1
 8001e3c:	d01c      	beq.n	8001e78 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001e3e:	e048      	b.n	8001ed2 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001e40:	2b03      	cmp	r3, #3
 8001e42:	d043      	beq.n	8001ecc <HAL_GPIO_Init+0xdc>
 8001e44:	2b11      	cmp	r3, #17
 8001e46:	d01b      	beq.n	8001e80 <HAL_GPIO_Init+0x90>
          break;
 8001e48:	e043      	b.n	8001ed2 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001e4a:	4a89      	ldr	r2, [pc, #548]	; (8002070 <HAL_GPIO_Init+0x280>)
 8001e4c:	4293      	cmp	r3, r2
 8001e4e:	d026      	beq.n	8001e9e <HAL_GPIO_Init+0xae>
 8001e50:	4a87      	ldr	r2, [pc, #540]	; (8002070 <HAL_GPIO_Init+0x280>)
 8001e52:	4293      	cmp	r3, r2
 8001e54:	d806      	bhi.n	8001e64 <HAL_GPIO_Init+0x74>
 8001e56:	4a87      	ldr	r2, [pc, #540]	; (8002074 <HAL_GPIO_Init+0x284>)
 8001e58:	4293      	cmp	r3, r2
 8001e5a:	d020      	beq.n	8001e9e <HAL_GPIO_Init+0xae>
 8001e5c:	4a86      	ldr	r2, [pc, #536]	; (8002078 <HAL_GPIO_Init+0x288>)
 8001e5e:	4293      	cmp	r3, r2
 8001e60:	d01d      	beq.n	8001e9e <HAL_GPIO_Init+0xae>
          break;
 8001e62:	e036      	b.n	8001ed2 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001e64:	4a85      	ldr	r2, [pc, #532]	; (800207c <HAL_GPIO_Init+0x28c>)
 8001e66:	4293      	cmp	r3, r2
 8001e68:	d019      	beq.n	8001e9e <HAL_GPIO_Init+0xae>
 8001e6a:	4a85      	ldr	r2, [pc, #532]	; (8002080 <HAL_GPIO_Init+0x290>)
 8001e6c:	4293      	cmp	r3, r2
 8001e6e:	d016      	beq.n	8001e9e <HAL_GPIO_Init+0xae>
 8001e70:	4a84      	ldr	r2, [pc, #528]	; (8002084 <HAL_GPIO_Init+0x294>)
 8001e72:	4293      	cmp	r3, r2
 8001e74:	d013      	beq.n	8001e9e <HAL_GPIO_Init+0xae>
          break;
 8001e76:	e02c      	b.n	8001ed2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	68db      	ldr	r3, [r3, #12]
 8001e7c:	623b      	str	r3, [r7, #32]
          break;
 8001e7e:	e028      	b.n	8001ed2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001e80:	683b      	ldr	r3, [r7, #0]
 8001e82:	68db      	ldr	r3, [r3, #12]
 8001e84:	3304      	adds	r3, #4
 8001e86:	623b      	str	r3, [r7, #32]
          break;
 8001e88:	e023      	b.n	8001ed2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001e8a:	683b      	ldr	r3, [r7, #0]
 8001e8c:	68db      	ldr	r3, [r3, #12]
 8001e8e:	3308      	adds	r3, #8
 8001e90:	623b      	str	r3, [r7, #32]
          break;
 8001e92:	e01e      	b.n	8001ed2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001e94:	683b      	ldr	r3, [r7, #0]
 8001e96:	68db      	ldr	r3, [r3, #12]
 8001e98:	330c      	adds	r3, #12
 8001e9a:	623b      	str	r3, [r7, #32]
          break;
 8001e9c:	e019      	b.n	8001ed2 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001e9e:	683b      	ldr	r3, [r7, #0]
 8001ea0:	689b      	ldr	r3, [r3, #8]
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d102      	bne.n	8001eac <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001ea6:	2304      	movs	r3, #4
 8001ea8:	623b      	str	r3, [r7, #32]
          break;
 8001eaa:	e012      	b.n	8001ed2 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001eac:	683b      	ldr	r3, [r7, #0]
 8001eae:	689b      	ldr	r3, [r3, #8]
 8001eb0:	2b01      	cmp	r3, #1
 8001eb2:	d105      	bne.n	8001ec0 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001eb4:	2308      	movs	r3, #8
 8001eb6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	69fa      	ldr	r2, [r7, #28]
 8001ebc:	611a      	str	r2, [r3, #16]
          break;
 8001ebe:	e008      	b.n	8001ed2 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001ec0:	2308      	movs	r3, #8
 8001ec2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	69fa      	ldr	r2, [r7, #28]
 8001ec8:	615a      	str	r2, [r3, #20]
          break;
 8001eca:	e002      	b.n	8001ed2 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001ecc:	2300      	movs	r3, #0
 8001ece:	623b      	str	r3, [r7, #32]
          break;
 8001ed0:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001ed2:	69bb      	ldr	r3, [r7, #24]
 8001ed4:	2bff      	cmp	r3, #255	; 0xff
 8001ed6:	d801      	bhi.n	8001edc <HAL_GPIO_Init+0xec>
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	e001      	b.n	8001ee0 <HAL_GPIO_Init+0xf0>
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	3304      	adds	r3, #4
 8001ee0:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001ee2:	69bb      	ldr	r3, [r7, #24]
 8001ee4:	2bff      	cmp	r3, #255	; 0xff
 8001ee6:	d802      	bhi.n	8001eee <HAL_GPIO_Init+0xfe>
 8001ee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eea:	009b      	lsls	r3, r3, #2
 8001eec:	e002      	b.n	8001ef4 <HAL_GPIO_Init+0x104>
 8001eee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ef0:	3b08      	subs	r3, #8
 8001ef2:	009b      	lsls	r3, r3, #2
 8001ef4:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001ef6:	697b      	ldr	r3, [r7, #20]
 8001ef8:	681a      	ldr	r2, [r3, #0]
 8001efa:	210f      	movs	r1, #15
 8001efc:	693b      	ldr	r3, [r7, #16]
 8001efe:	fa01 f303 	lsl.w	r3, r1, r3
 8001f02:	43db      	mvns	r3, r3
 8001f04:	401a      	ands	r2, r3
 8001f06:	6a39      	ldr	r1, [r7, #32]
 8001f08:	693b      	ldr	r3, [r7, #16]
 8001f0a:	fa01 f303 	lsl.w	r3, r1, r3
 8001f0e:	431a      	orrs	r2, r3
 8001f10:	697b      	ldr	r3, [r7, #20]
 8001f12:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	685b      	ldr	r3, [r3, #4]
 8001f18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	f000 8096 	beq.w	800204e <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001f22:	4b59      	ldr	r3, [pc, #356]	; (8002088 <HAL_GPIO_Init+0x298>)
 8001f24:	699b      	ldr	r3, [r3, #24]
 8001f26:	4a58      	ldr	r2, [pc, #352]	; (8002088 <HAL_GPIO_Init+0x298>)
 8001f28:	f043 0301 	orr.w	r3, r3, #1
 8001f2c:	6193      	str	r3, [r2, #24]
 8001f2e:	4b56      	ldr	r3, [pc, #344]	; (8002088 <HAL_GPIO_Init+0x298>)
 8001f30:	699b      	ldr	r3, [r3, #24]
 8001f32:	f003 0301 	and.w	r3, r3, #1
 8001f36:	60bb      	str	r3, [r7, #8]
 8001f38:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001f3a:	4a54      	ldr	r2, [pc, #336]	; (800208c <HAL_GPIO_Init+0x29c>)
 8001f3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f3e:	089b      	lsrs	r3, r3, #2
 8001f40:	3302      	adds	r3, #2
 8001f42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f46:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001f48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f4a:	f003 0303 	and.w	r3, r3, #3
 8001f4e:	009b      	lsls	r3, r3, #2
 8001f50:	220f      	movs	r2, #15
 8001f52:	fa02 f303 	lsl.w	r3, r2, r3
 8001f56:	43db      	mvns	r3, r3
 8001f58:	68fa      	ldr	r2, [r7, #12]
 8001f5a:	4013      	ands	r3, r2
 8001f5c:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	4a4b      	ldr	r2, [pc, #300]	; (8002090 <HAL_GPIO_Init+0x2a0>)
 8001f62:	4293      	cmp	r3, r2
 8001f64:	d013      	beq.n	8001f8e <HAL_GPIO_Init+0x19e>
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	4a4a      	ldr	r2, [pc, #296]	; (8002094 <HAL_GPIO_Init+0x2a4>)
 8001f6a:	4293      	cmp	r3, r2
 8001f6c:	d00d      	beq.n	8001f8a <HAL_GPIO_Init+0x19a>
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	4a49      	ldr	r2, [pc, #292]	; (8002098 <HAL_GPIO_Init+0x2a8>)
 8001f72:	4293      	cmp	r3, r2
 8001f74:	d007      	beq.n	8001f86 <HAL_GPIO_Init+0x196>
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	4a48      	ldr	r2, [pc, #288]	; (800209c <HAL_GPIO_Init+0x2ac>)
 8001f7a:	4293      	cmp	r3, r2
 8001f7c:	d101      	bne.n	8001f82 <HAL_GPIO_Init+0x192>
 8001f7e:	2303      	movs	r3, #3
 8001f80:	e006      	b.n	8001f90 <HAL_GPIO_Init+0x1a0>
 8001f82:	2304      	movs	r3, #4
 8001f84:	e004      	b.n	8001f90 <HAL_GPIO_Init+0x1a0>
 8001f86:	2302      	movs	r3, #2
 8001f88:	e002      	b.n	8001f90 <HAL_GPIO_Init+0x1a0>
 8001f8a:	2301      	movs	r3, #1
 8001f8c:	e000      	b.n	8001f90 <HAL_GPIO_Init+0x1a0>
 8001f8e:	2300      	movs	r3, #0
 8001f90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f92:	f002 0203 	and.w	r2, r2, #3
 8001f96:	0092      	lsls	r2, r2, #2
 8001f98:	4093      	lsls	r3, r2
 8001f9a:	68fa      	ldr	r2, [r7, #12]
 8001f9c:	4313      	orrs	r3, r2
 8001f9e:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001fa0:	493a      	ldr	r1, [pc, #232]	; (800208c <HAL_GPIO_Init+0x29c>)
 8001fa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fa4:	089b      	lsrs	r3, r3, #2
 8001fa6:	3302      	adds	r3, #2
 8001fa8:	68fa      	ldr	r2, [r7, #12]
 8001faa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001fae:	683b      	ldr	r3, [r7, #0]
 8001fb0:	685b      	ldr	r3, [r3, #4]
 8001fb2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d006      	beq.n	8001fc8 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001fba:	4b39      	ldr	r3, [pc, #228]	; (80020a0 <HAL_GPIO_Init+0x2b0>)
 8001fbc:	681a      	ldr	r2, [r3, #0]
 8001fbe:	4938      	ldr	r1, [pc, #224]	; (80020a0 <HAL_GPIO_Init+0x2b0>)
 8001fc0:	69bb      	ldr	r3, [r7, #24]
 8001fc2:	4313      	orrs	r3, r2
 8001fc4:	600b      	str	r3, [r1, #0]
 8001fc6:	e006      	b.n	8001fd6 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001fc8:	4b35      	ldr	r3, [pc, #212]	; (80020a0 <HAL_GPIO_Init+0x2b0>)
 8001fca:	681a      	ldr	r2, [r3, #0]
 8001fcc:	69bb      	ldr	r3, [r7, #24]
 8001fce:	43db      	mvns	r3, r3
 8001fd0:	4933      	ldr	r1, [pc, #204]	; (80020a0 <HAL_GPIO_Init+0x2b0>)
 8001fd2:	4013      	ands	r3, r2
 8001fd4:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001fd6:	683b      	ldr	r3, [r7, #0]
 8001fd8:	685b      	ldr	r3, [r3, #4]
 8001fda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d006      	beq.n	8001ff0 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001fe2:	4b2f      	ldr	r3, [pc, #188]	; (80020a0 <HAL_GPIO_Init+0x2b0>)
 8001fe4:	685a      	ldr	r2, [r3, #4]
 8001fe6:	492e      	ldr	r1, [pc, #184]	; (80020a0 <HAL_GPIO_Init+0x2b0>)
 8001fe8:	69bb      	ldr	r3, [r7, #24]
 8001fea:	4313      	orrs	r3, r2
 8001fec:	604b      	str	r3, [r1, #4]
 8001fee:	e006      	b.n	8001ffe <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001ff0:	4b2b      	ldr	r3, [pc, #172]	; (80020a0 <HAL_GPIO_Init+0x2b0>)
 8001ff2:	685a      	ldr	r2, [r3, #4]
 8001ff4:	69bb      	ldr	r3, [r7, #24]
 8001ff6:	43db      	mvns	r3, r3
 8001ff8:	4929      	ldr	r1, [pc, #164]	; (80020a0 <HAL_GPIO_Init+0x2b0>)
 8001ffa:	4013      	ands	r3, r2
 8001ffc:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001ffe:	683b      	ldr	r3, [r7, #0]
 8002000:	685b      	ldr	r3, [r3, #4]
 8002002:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002006:	2b00      	cmp	r3, #0
 8002008:	d006      	beq.n	8002018 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800200a:	4b25      	ldr	r3, [pc, #148]	; (80020a0 <HAL_GPIO_Init+0x2b0>)
 800200c:	689a      	ldr	r2, [r3, #8]
 800200e:	4924      	ldr	r1, [pc, #144]	; (80020a0 <HAL_GPIO_Init+0x2b0>)
 8002010:	69bb      	ldr	r3, [r7, #24]
 8002012:	4313      	orrs	r3, r2
 8002014:	608b      	str	r3, [r1, #8]
 8002016:	e006      	b.n	8002026 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002018:	4b21      	ldr	r3, [pc, #132]	; (80020a0 <HAL_GPIO_Init+0x2b0>)
 800201a:	689a      	ldr	r2, [r3, #8]
 800201c:	69bb      	ldr	r3, [r7, #24]
 800201e:	43db      	mvns	r3, r3
 8002020:	491f      	ldr	r1, [pc, #124]	; (80020a0 <HAL_GPIO_Init+0x2b0>)
 8002022:	4013      	ands	r3, r2
 8002024:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002026:	683b      	ldr	r3, [r7, #0]
 8002028:	685b      	ldr	r3, [r3, #4]
 800202a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800202e:	2b00      	cmp	r3, #0
 8002030:	d006      	beq.n	8002040 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002032:	4b1b      	ldr	r3, [pc, #108]	; (80020a0 <HAL_GPIO_Init+0x2b0>)
 8002034:	68da      	ldr	r2, [r3, #12]
 8002036:	491a      	ldr	r1, [pc, #104]	; (80020a0 <HAL_GPIO_Init+0x2b0>)
 8002038:	69bb      	ldr	r3, [r7, #24]
 800203a:	4313      	orrs	r3, r2
 800203c:	60cb      	str	r3, [r1, #12]
 800203e:	e006      	b.n	800204e <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002040:	4b17      	ldr	r3, [pc, #92]	; (80020a0 <HAL_GPIO_Init+0x2b0>)
 8002042:	68da      	ldr	r2, [r3, #12]
 8002044:	69bb      	ldr	r3, [r7, #24]
 8002046:	43db      	mvns	r3, r3
 8002048:	4915      	ldr	r1, [pc, #84]	; (80020a0 <HAL_GPIO_Init+0x2b0>)
 800204a:	4013      	ands	r3, r2
 800204c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800204e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002050:	3301      	adds	r3, #1
 8002052:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002054:	683b      	ldr	r3, [r7, #0]
 8002056:	681a      	ldr	r2, [r3, #0]
 8002058:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800205a:	fa22 f303 	lsr.w	r3, r2, r3
 800205e:	2b00      	cmp	r3, #0
 8002060:	f47f aed0 	bne.w	8001e04 <HAL_GPIO_Init+0x14>
  }
}
 8002064:	bf00      	nop
 8002066:	372c      	adds	r7, #44	; 0x2c
 8002068:	46bd      	mov	sp, r7
 800206a:	bc80      	pop	{r7}
 800206c:	4770      	bx	lr
 800206e:	bf00      	nop
 8002070:	10210000 	.word	0x10210000
 8002074:	10110000 	.word	0x10110000
 8002078:	10120000 	.word	0x10120000
 800207c:	10310000 	.word	0x10310000
 8002080:	10320000 	.word	0x10320000
 8002084:	10220000 	.word	0x10220000
 8002088:	40021000 	.word	0x40021000
 800208c:	40010000 	.word	0x40010000
 8002090:	40010800 	.word	0x40010800
 8002094:	40010c00 	.word	0x40010c00
 8002098:	40011000 	.word	0x40011000
 800209c:	40011400 	.word	0x40011400
 80020a0:	40010400 	.word	0x40010400

080020a4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80020a4:	b480      	push	{r7}
 80020a6:	b083      	sub	sp, #12
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
 80020ac:	460b      	mov	r3, r1
 80020ae:	807b      	strh	r3, [r7, #2]
 80020b0:	4613      	mov	r3, r2
 80020b2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80020b4:	787b      	ldrb	r3, [r7, #1]
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d003      	beq.n	80020c2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80020ba:	887a      	ldrh	r2, [r7, #2]
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80020c0:	e003      	b.n	80020ca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80020c2:	887b      	ldrh	r3, [r7, #2]
 80020c4:	041a      	lsls	r2, r3, #16
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	611a      	str	r2, [r3, #16]
}
 80020ca:	bf00      	nop
 80020cc:	370c      	adds	r7, #12
 80020ce:	46bd      	mov	sp, r7
 80020d0:	bc80      	pop	{r7}
 80020d2:	4770      	bx	lr

080020d4 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80020d4:	b480      	push	{r7}
 80020d6:	b083      	sub	sp, #12
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
 80020dc:	460b      	mov	r3, r1
 80020de:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	68da      	ldr	r2, [r3, #12]
 80020e4:	887b      	ldrh	r3, [r7, #2]
 80020e6:	4013      	ands	r3, r2
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d003      	beq.n	80020f4 <HAL_GPIO_TogglePin+0x20>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80020ec:	887a      	ldrh	r2, [r7, #2]
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	615a      	str	r2, [r3, #20]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 80020f2:	e002      	b.n	80020fa <HAL_GPIO_TogglePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80020f4:	887a      	ldrh	r2, [r7, #2]
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	611a      	str	r2, [r3, #16]
}
 80020fa:	bf00      	nop
 80020fc:	370c      	adds	r7, #12
 80020fe:	46bd      	mov	sp, r7
 8002100:	bc80      	pop	{r7}
 8002102:	4770      	bx	lr

08002104 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b082      	sub	sp, #8
 8002108:	af00      	add	r7, sp, #0
 800210a:	4603      	mov	r3, r0
 800210c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800210e:	4b08      	ldr	r3, [pc, #32]	; (8002130 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002110:	695a      	ldr	r2, [r3, #20]
 8002112:	88fb      	ldrh	r3, [r7, #6]
 8002114:	4013      	ands	r3, r2
 8002116:	2b00      	cmp	r3, #0
 8002118:	d006      	beq.n	8002128 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800211a:	4a05      	ldr	r2, [pc, #20]	; (8002130 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800211c:	88fb      	ldrh	r3, [r7, #6]
 800211e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002120:	88fb      	ldrh	r3, [r7, #6]
 8002122:	4618      	mov	r0, r3
 8002124:	f7fe fa30 	bl	8000588 <HAL_GPIO_EXTI_Callback>
  }
}
 8002128:	bf00      	nop
 800212a:	3708      	adds	r7, #8
 800212c:	46bd      	mov	sp, r7
 800212e:	bd80      	pop	{r7, pc}
 8002130:	40010400 	.word	0x40010400

08002134 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	b086      	sub	sp, #24
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	2b00      	cmp	r3, #0
 8002140:	d101      	bne.n	8002146 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002142:	2301      	movs	r3, #1
 8002144:	e26c      	b.n	8002620 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f003 0301 	and.w	r3, r3, #1
 800214e:	2b00      	cmp	r3, #0
 8002150:	f000 8087 	beq.w	8002262 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002154:	4b92      	ldr	r3, [pc, #584]	; (80023a0 <HAL_RCC_OscConfig+0x26c>)
 8002156:	685b      	ldr	r3, [r3, #4]
 8002158:	f003 030c 	and.w	r3, r3, #12
 800215c:	2b04      	cmp	r3, #4
 800215e:	d00c      	beq.n	800217a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002160:	4b8f      	ldr	r3, [pc, #572]	; (80023a0 <HAL_RCC_OscConfig+0x26c>)
 8002162:	685b      	ldr	r3, [r3, #4]
 8002164:	f003 030c 	and.w	r3, r3, #12
 8002168:	2b08      	cmp	r3, #8
 800216a:	d112      	bne.n	8002192 <HAL_RCC_OscConfig+0x5e>
 800216c:	4b8c      	ldr	r3, [pc, #560]	; (80023a0 <HAL_RCC_OscConfig+0x26c>)
 800216e:	685b      	ldr	r3, [r3, #4]
 8002170:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002174:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002178:	d10b      	bne.n	8002192 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800217a:	4b89      	ldr	r3, [pc, #548]	; (80023a0 <HAL_RCC_OscConfig+0x26c>)
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002182:	2b00      	cmp	r3, #0
 8002184:	d06c      	beq.n	8002260 <HAL_RCC_OscConfig+0x12c>
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	685b      	ldr	r3, [r3, #4]
 800218a:	2b00      	cmp	r3, #0
 800218c:	d168      	bne.n	8002260 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800218e:	2301      	movs	r3, #1
 8002190:	e246      	b.n	8002620 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	685b      	ldr	r3, [r3, #4]
 8002196:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800219a:	d106      	bne.n	80021aa <HAL_RCC_OscConfig+0x76>
 800219c:	4b80      	ldr	r3, [pc, #512]	; (80023a0 <HAL_RCC_OscConfig+0x26c>)
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	4a7f      	ldr	r2, [pc, #508]	; (80023a0 <HAL_RCC_OscConfig+0x26c>)
 80021a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021a6:	6013      	str	r3, [r2, #0]
 80021a8:	e02e      	b.n	8002208 <HAL_RCC_OscConfig+0xd4>
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	685b      	ldr	r3, [r3, #4]
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d10c      	bne.n	80021cc <HAL_RCC_OscConfig+0x98>
 80021b2:	4b7b      	ldr	r3, [pc, #492]	; (80023a0 <HAL_RCC_OscConfig+0x26c>)
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	4a7a      	ldr	r2, [pc, #488]	; (80023a0 <HAL_RCC_OscConfig+0x26c>)
 80021b8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80021bc:	6013      	str	r3, [r2, #0]
 80021be:	4b78      	ldr	r3, [pc, #480]	; (80023a0 <HAL_RCC_OscConfig+0x26c>)
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	4a77      	ldr	r2, [pc, #476]	; (80023a0 <HAL_RCC_OscConfig+0x26c>)
 80021c4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80021c8:	6013      	str	r3, [r2, #0]
 80021ca:	e01d      	b.n	8002208 <HAL_RCC_OscConfig+0xd4>
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	685b      	ldr	r3, [r3, #4]
 80021d0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80021d4:	d10c      	bne.n	80021f0 <HAL_RCC_OscConfig+0xbc>
 80021d6:	4b72      	ldr	r3, [pc, #456]	; (80023a0 <HAL_RCC_OscConfig+0x26c>)
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	4a71      	ldr	r2, [pc, #452]	; (80023a0 <HAL_RCC_OscConfig+0x26c>)
 80021dc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80021e0:	6013      	str	r3, [r2, #0]
 80021e2:	4b6f      	ldr	r3, [pc, #444]	; (80023a0 <HAL_RCC_OscConfig+0x26c>)
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	4a6e      	ldr	r2, [pc, #440]	; (80023a0 <HAL_RCC_OscConfig+0x26c>)
 80021e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021ec:	6013      	str	r3, [r2, #0]
 80021ee:	e00b      	b.n	8002208 <HAL_RCC_OscConfig+0xd4>
 80021f0:	4b6b      	ldr	r3, [pc, #428]	; (80023a0 <HAL_RCC_OscConfig+0x26c>)
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	4a6a      	ldr	r2, [pc, #424]	; (80023a0 <HAL_RCC_OscConfig+0x26c>)
 80021f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80021fa:	6013      	str	r3, [r2, #0]
 80021fc:	4b68      	ldr	r3, [pc, #416]	; (80023a0 <HAL_RCC_OscConfig+0x26c>)
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	4a67      	ldr	r2, [pc, #412]	; (80023a0 <HAL_RCC_OscConfig+0x26c>)
 8002202:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002206:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	685b      	ldr	r3, [r3, #4]
 800220c:	2b00      	cmp	r3, #0
 800220e:	d013      	beq.n	8002238 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002210:	f7ff fce2 	bl	8001bd8 <HAL_GetTick>
 8002214:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002216:	e008      	b.n	800222a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002218:	f7ff fcde 	bl	8001bd8 <HAL_GetTick>
 800221c:	4602      	mov	r2, r0
 800221e:	693b      	ldr	r3, [r7, #16]
 8002220:	1ad3      	subs	r3, r2, r3
 8002222:	2b64      	cmp	r3, #100	; 0x64
 8002224:	d901      	bls.n	800222a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002226:	2303      	movs	r3, #3
 8002228:	e1fa      	b.n	8002620 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800222a:	4b5d      	ldr	r3, [pc, #372]	; (80023a0 <HAL_RCC_OscConfig+0x26c>)
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002232:	2b00      	cmp	r3, #0
 8002234:	d0f0      	beq.n	8002218 <HAL_RCC_OscConfig+0xe4>
 8002236:	e014      	b.n	8002262 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002238:	f7ff fcce 	bl	8001bd8 <HAL_GetTick>
 800223c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800223e:	e008      	b.n	8002252 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002240:	f7ff fcca 	bl	8001bd8 <HAL_GetTick>
 8002244:	4602      	mov	r2, r0
 8002246:	693b      	ldr	r3, [r7, #16]
 8002248:	1ad3      	subs	r3, r2, r3
 800224a:	2b64      	cmp	r3, #100	; 0x64
 800224c:	d901      	bls.n	8002252 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800224e:	2303      	movs	r3, #3
 8002250:	e1e6      	b.n	8002620 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002252:	4b53      	ldr	r3, [pc, #332]	; (80023a0 <HAL_RCC_OscConfig+0x26c>)
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800225a:	2b00      	cmp	r3, #0
 800225c:	d1f0      	bne.n	8002240 <HAL_RCC_OscConfig+0x10c>
 800225e:	e000      	b.n	8002262 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002260:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f003 0302 	and.w	r3, r3, #2
 800226a:	2b00      	cmp	r3, #0
 800226c:	d063      	beq.n	8002336 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800226e:	4b4c      	ldr	r3, [pc, #304]	; (80023a0 <HAL_RCC_OscConfig+0x26c>)
 8002270:	685b      	ldr	r3, [r3, #4]
 8002272:	f003 030c 	and.w	r3, r3, #12
 8002276:	2b00      	cmp	r3, #0
 8002278:	d00b      	beq.n	8002292 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800227a:	4b49      	ldr	r3, [pc, #292]	; (80023a0 <HAL_RCC_OscConfig+0x26c>)
 800227c:	685b      	ldr	r3, [r3, #4]
 800227e:	f003 030c 	and.w	r3, r3, #12
 8002282:	2b08      	cmp	r3, #8
 8002284:	d11c      	bne.n	80022c0 <HAL_RCC_OscConfig+0x18c>
 8002286:	4b46      	ldr	r3, [pc, #280]	; (80023a0 <HAL_RCC_OscConfig+0x26c>)
 8002288:	685b      	ldr	r3, [r3, #4]
 800228a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800228e:	2b00      	cmp	r3, #0
 8002290:	d116      	bne.n	80022c0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002292:	4b43      	ldr	r3, [pc, #268]	; (80023a0 <HAL_RCC_OscConfig+0x26c>)
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f003 0302 	and.w	r3, r3, #2
 800229a:	2b00      	cmp	r3, #0
 800229c:	d005      	beq.n	80022aa <HAL_RCC_OscConfig+0x176>
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	691b      	ldr	r3, [r3, #16]
 80022a2:	2b01      	cmp	r3, #1
 80022a4:	d001      	beq.n	80022aa <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80022a6:	2301      	movs	r3, #1
 80022a8:	e1ba      	b.n	8002620 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022aa:	4b3d      	ldr	r3, [pc, #244]	; (80023a0 <HAL_RCC_OscConfig+0x26c>)
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	695b      	ldr	r3, [r3, #20]
 80022b6:	00db      	lsls	r3, r3, #3
 80022b8:	4939      	ldr	r1, [pc, #228]	; (80023a0 <HAL_RCC_OscConfig+0x26c>)
 80022ba:	4313      	orrs	r3, r2
 80022bc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022be:	e03a      	b.n	8002336 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	691b      	ldr	r3, [r3, #16]
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d020      	beq.n	800230a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80022c8:	4b36      	ldr	r3, [pc, #216]	; (80023a4 <HAL_RCC_OscConfig+0x270>)
 80022ca:	2201      	movs	r2, #1
 80022cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022ce:	f7ff fc83 	bl	8001bd8 <HAL_GetTick>
 80022d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022d4:	e008      	b.n	80022e8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80022d6:	f7ff fc7f 	bl	8001bd8 <HAL_GetTick>
 80022da:	4602      	mov	r2, r0
 80022dc:	693b      	ldr	r3, [r7, #16]
 80022de:	1ad3      	subs	r3, r2, r3
 80022e0:	2b02      	cmp	r3, #2
 80022e2:	d901      	bls.n	80022e8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80022e4:	2303      	movs	r3, #3
 80022e6:	e19b      	b.n	8002620 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022e8:	4b2d      	ldr	r3, [pc, #180]	; (80023a0 <HAL_RCC_OscConfig+0x26c>)
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f003 0302 	and.w	r3, r3, #2
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d0f0      	beq.n	80022d6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022f4:	4b2a      	ldr	r3, [pc, #168]	; (80023a0 <HAL_RCC_OscConfig+0x26c>)
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	695b      	ldr	r3, [r3, #20]
 8002300:	00db      	lsls	r3, r3, #3
 8002302:	4927      	ldr	r1, [pc, #156]	; (80023a0 <HAL_RCC_OscConfig+0x26c>)
 8002304:	4313      	orrs	r3, r2
 8002306:	600b      	str	r3, [r1, #0]
 8002308:	e015      	b.n	8002336 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800230a:	4b26      	ldr	r3, [pc, #152]	; (80023a4 <HAL_RCC_OscConfig+0x270>)
 800230c:	2200      	movs	r2, #0
 800230e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002310:	f7ff fc62 	bl	8001bd8 <HAL_GetTick>
 8002314:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002316:	e008      	b.n	800232a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002318:	f7ff fc5e 	bl	8001bd8 <HAL_GetTick>
 800231c:	4602      	mov	r2, r0
 800231e:	693b      	ldr	r3, [r7, #16]
 8002320:	1ad3      	subs	r3, r2, r3
 8002322:	2b02      	cmp	r3, #2
 8002324:	d901      	bls.n	800232a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002326:	2303      	movs	r3, #3
 8002328:	e17a      	b.n	8002620 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800232a:	4b1d      	ldr	r3, [pc, #116]	; (80023a0 <HAL_RCC_OscConfig+0x26c>)
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f003 0302 	and.w	r3, r3, #2
 8002332:	2b00      	cmp	r3, #0
 8002334:	d1f0      	bne.n	8002318 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f003 0308 	and.w	r3, r3, #8
 800233e:	2b00      	cmp	r3, #0
 8002340:	d03a      	beq.n	80023b8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	699b      	ldr	r3, [r3, #24]
 8002346:	2b00      	cmp	r3, #0
 8002348:	d019      	beq.n	800237e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800234a:	4b17      	ldr	r3, [pc, #92]	; (80023a8 <HAL_RCC_OscConfig+0x274>)
 800234c:	2201      	movs	r2, #1
 800234e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002350:	f7ff fc42 	bl	8001bd8 <HAL_GetTick>
 8002354:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002356:	e008      	b.n	800236a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002358:	f7ff fc3e 	bl	8001bd8 <HAL_GetTick>
 800235c:	4602      	mov	r2, r0
 800235e:	693b      	ldr	r3, [r7, #16]
 8002360:	1ad3      	subs	r3, r2, r3
 8002362:	2b02      	cmp	r3, #2
 8002364:	d901      	bls.n	800236a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002366:	2303      	movs	r3, #3
 8002368:	e15a      	b.n	8002620 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800236a:	4b0d      	ldr	r3, [pc, #52]	; (80023a0 <HAL_RCC_OscConfig+0x26c>)
 800236c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800236e:	f003 0302 	and.w	r3, r3, #2
 8002372:	2b00      	cmp	r3, #0
 8002374:	d0f0      	beq.n	8002358 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002376:	2001      	movs	r0, #1
 8002378:	f000 fb0a 	bl	8002990 <RCC_Delay>
 800237c:	e01c      	b.n	80023b8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800237e:	4b0a      	ldr	r3, [pc, #40]	; (80023a8 <HAL_RCC_OscConfig+0x274>)
 8002380:	2200      	movs	r2, #0
 8002382:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002384:	f7ff fc28 	bl	8001bd8 <HAL_GetTick>
 8002388:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800238a:	e00f      	b.n	80023ac <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800238c:	f7ff fc24 	bl	8001bd8 <HAL_GetTick>
 8002390:	4602      	mov	r2, r0
 8002392:	693b      	ldr	r3, [r7, #16]
 8002394:	1ad3      	subs	r3, r2, r3
 8002396:	2b02      	cmp	r3, #2
 8002398:	d908      	bls.n	80023ac <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800239a:	2303      	movs	r3, #3
 800239c:	e140      	b.n	8002620 <HAL_RCC_OscConfig+0x4ec>
 800239e:	bf00      	nop
 80023a0:	40021000 	.word	0x40021000
 80023a4:	42420000 	.word	0x42420000
 80023a8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023ac:	4b9e      	ldr	r3, [pc, #632]	; (8002628 <HAL_RCC_OscConfig+0x4f4>)
 80023ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023b0:	f003 0302 	and.w	r3, r3, #2
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d1e9      	bne.n	800238c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f003 0304 	and.w	r3, r3, #4
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	f000 80a6 	beq.w	8002512 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80023c6:	2300      	movs	r3, #0
 80023c8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80023ca:	4b97      	ldr	r3, [pc, #604]	; (8002628 <HAL_RCC_OscConfig+0x4f4>)
 80023cc:	69db      	ldr	r3, [r3, #28]
 80023ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d10d      	bne.n	80023f2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80023d6:	4b94      	ldr	r3, [pc, #592]	; (8002628 <HAL_RCC_OscConfig+0x4f4>)
 80023d8:	69db      	ldr	r3, [r3, #28]
 80023da:	4a93      	ldr	r2, [pc, #588]	; (8002628 <HAL_RCC_OscConfig+0x4f4>)
 80023dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023e0:	61d3      	str	r3, [r2, #28]
 80023e2:	4b91      	ldr	r3, [pc, #580]	; (8002628 <HAL_RCC_OscConfig+0x4f4>)
 80023e4:	69db      	ldr	r3, [r3, #28]
 80023e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023ea:	60bb      	str	r3, [r7, #8]
 80023ec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80023ee:	2301      	movs	r3, #1
 80023f0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023f2:	4b8e      	ldr	r3, [pc, #568]	; (800262c <HAL_RCC_OscConfig+0x4f8>)
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d118      	bne.n	8002430 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80023fe:	4b8b      	ldr	r3, [pc, #556]	; (800262c <HAL_RCC_OscConfig+0x4f8>)
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	4a8a      	ldr	r2, [pc, #552]	; (800262c <HAL_RCC_OscConfig+0x4f8>)
 8002404:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002408:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800240a:	f7ff fbe5 	bl	8001bd8 <HAL_GetTick>
 800240e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002410:	e008      	b.n	8002424 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002412:	f7ff fbe1 	bl	8001bd8 <HAL_GetTick>
 8002416:	4602      	mov	r2, r0
 8002418:	693b      	ldr	r3, [r7, #16]
 800241a:	1ad3      	subs	r3, r2, r3
 800241c:	2b64      	cmp	r3, #100	; 0x64
 800241e:	d901      	bls.n	8002424 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002420:	2303      	movs	r3, #3
 8002422:	e0fd      	b.n	8002620 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002424:	4b81      	ldr	r3, [pc, #516]	; (800262c <HAL_RCC_OscConfig+0x4f8>)
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800242c:	2b00      	cmp	r3, #0
 800242e:	d0f0      	beq.n	8002412 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	68db      	ldr	r3, [r3, #12]
 8002434:	2b01      	cmp	r3, #1
 8002436:	d106      	bne.n	8002446 <HAL_RCC_OscConfig+0x312>
 8002438:	4b7b      	ldr	r3, [pc, #492]	; (8002628 <HAL_RCC_OscConfig+0x4f4>)
 800243a:	6a1b      	ldr	r3, [r3, #32]
 800243c:	4a7a      	ldr	r2, [pc, #488]	; (8002628 <HAL_RCC_OscConfig+0x4f4>)
 800243e:	f043 0301 	orr.w	r3, r3, #1
 8002442:	6213      	str	r3, [r2, #32]
 8002444:	e02d      	b.n	80024a2 <HAL_RCC_OscConfig+0x36e>
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	68db      	ldr	r3, [r3, #12]
 800244a:	2b00      	cmp	r3, #0
 800244c:	d10c      	bne.n	8002468 <HAL_RCC_OscConfig+0x334>
 800244e:	4b76      	ldr	r3, [pc, #472]	; (8002628 <HAL_RCC_OscConfig+0x4f4>)
 8002450:	6a1b      	ldr	r3, [r3, #32]
 8002452:	4a75      	ldr	r2, [pc, #468]	; (8002628 <HAL_RCC_OscConfig+0x4f4>)
 8002454:	f023 0301 	bic.w	r3, r3, #1
 8002458:	6213      	str	r3, [r2, #32]
 800245a:	4b73      	ldr	r3, [pc, #460]	; (8002628 <HAL_RCC_OscConfig+0x4f4>)
 800245c:	6a1b      	ldr	r3, [r3, #32]
 800245e:	4a72      	ldr	r2, [pc, #456]	; (8002628 <HAL_RCC_OscConfig+0x4f4>)
 8002460:	f023 0304 	bic.w	r3, r3, #4
 8002464:	6213      	str	r3, [r2, #32]
 8002466:	e01c      	b.n	80024a2 <HAL_RCC_OscConfig+0x36e>
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	68db      	ldr	r3, [r3, #12]
 800246c:	2b05      	cmp	r3, #5
 800246e:	d10c      	bne.n	800248a <HAL_RCC_OscConfig+0x356>
 8002470:	4b6d      	ldr	r3, [pc, #436]	; (8002628 <HAL_RCC_OscConfig+0x4f4>)
 8002472:	6a1b      	ldr	r3, [r3, #32]
 8002474:	4a6c      	ldr	r2, [pc, #432]	; (8002628 <HAL_RCC_OscConfig+0x4f4>)
 8002476:	f043 0304 	orr.w	r3, r3, #4
 800247a:	6213      	str	r3, [r2, #32]
 800247c:	4b6a      	ldr	r3, [pc, #424]	; (8002628 <HAL_RCC_OscConfig+0x4f4>)
 800247e:	6a1b      	ldr	r3, [r3, #32]
 8002480:	4a69      	ldr	r2, [pc, #420]	; (8002628 <HAL_RCC_OscConfig+0x4f4>)
 8002482:	f043 0301 	orr.w	r3, r3, #1
 8002486:	6213      	str	r3, [r2, #32]
 8002488:	e00b      	b.n	80024a2 <HAL_RCC_OscConfig+0x36e>
 800248a:	4b67      	ldr	r3, [pc, #412]	; (8002628 <HAL_RCC_OscConfig+0x4f4>)
 800248c:	6a1b      	ldr	r3, [r3, #32]
 800248e:	4a66      	ldr	r2, [pc, #408]	; (8002628 <HAL_RCC_OscConfig+0x4f4>)
 8002490:	f023 0301 	bic.w	r3, r3, #1
 8002494:	6213      	str	r3, [r2, #32]
 8002496:	4b64      	ldr	r3, [pc, #400]	; (8002628 <HAL_RCC_OscConfig+0x4f4>)
 8002498:	6a1b      	ldr	r3, [r3, #32]
 800249a:	4a63      	ldr	r2, [pc, #396]	; (8002628 <HAL_RCC_OscConfig+0x4f4>)
 800249c:	f023 0304 	bic.w	r3, r3, #4
 80024a0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	68db      	ldr	r3, [r3, #12]
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d015      	beq.n	80024d6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024aa:	f7ff fb95 	bl	8001bd8 <HAL_GetTick>
 80024ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024b0:	e00a      	b.n	80024c8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024b2:	f7ff fb91 	bl	8001bd8 <HAL_GetTick>
 80024b6:	4602      	mov	r2, r0
 80024b8:	693b      	ldr	r3, [r7, #16]
 80024ba:	1ad3      	subs	r3, r2, r3
 80024bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80024c0:	4293      	cmp	r3, r2
 80024c2:	d901      	bls.n	80024c8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80024c4:	2303      	movs	r3, #3
 80024c6:	e0ab      	b.n	8002620 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024c8:	4b57      	ldr	r3, [pc, #348]	; (8002628 <HAL_RCC_OscConfig+0x4f4>)
 80024ca:	6a1b      	ldr	r3, [r3, #32]
 80024cc:	f003 0302 	and.w	r3, r3, #2
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d0ee      	beq.n	80024b2 <HAL_RCC_OscConfig+0x37e>
 80024d4:	e014      	b.n	8002500 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024d6:	f7ff fb7f 	bl	8001bd8 <HAL_GetTick>
 80024da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024dc:	e00a      	b.n	80024f4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024de:	f7ff fb7b 	bl	8001bd8 <HAL_GetTick>
 80024e2:	4602      	mov	r2, r0
 80024e4:	693b      	ldr	r3, [r7, #16]
 80024e6:	1ad3      	subs	r3, r2, r3
 80024e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80024ec:	4293      	cmp	r3, r2
 80024ee:	d901      	bls.n	80024f4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80024f0:	2303      	movs	r3, #3
 80024f2:	e095      	b.n	8002620 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024f4:	4b4c      	ldr	r3, [pc, #304]	; (8002628 <HAL_RCC_OscConfig+0x4f4>)
 80024f6:	6a1b      	ldr	r3, [r3, #32]
 80024f8:	f003 0302 	and.w	r3, r3, #2
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d1ee      	bne.n	80024de <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002500:	7dfb      	ldrb	r3, [r7, #23]
 8002502:	2b01      	cmp	r3, #1
 8002504:	d105      	bne.n	8002512 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002506:	4b48      	ldr	r3, [pc, #288]	; (8002628 <HAL_RCC_OscConfig+0x4f4>)
 8002508:	69db      	ldr	r3, [r3, #28]
 800250a:	4a47      	ldr	r2, [pc, #284]	; (8002628 <HAL_RCC_OscConfig+0x4f4>)
 800250c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002510:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	69db      	ldr	r3, [r3, #28]
 8002516:	2b00      	cmp	r3, #0
 8002518:	f000 8081 	beq.w	800261e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800251c:	4b42      	ldr	r3, [pc, #264]	; (8002628 <HAL_RCC_OscConfig+0x4f4>)
 800251e:	685b      	ldr	r3, [r3, #4]
 8002520:	f003 030c 	and.w	r3, r3, #12
 8002524:	2b08      	cmp	r3, #8
 8002526:	d061      	beq.n	80025ec <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	69db      	ldr	r3, [r3, #28]
 800252c:	2b02      	cmp	r3, #2
 800252e:	d146      	bne.n	80025be <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002530:	4b3f      	ldr	r3, [pc, #252]	; (8002630 <HAL_RCC_OscConfig+0x4fc>)
 8002532:	2200      	movs	r2, #0
 8002534:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002536:	f7ff fb4f 	bl	8001bd8 <HAL_GetTick>
 800253a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800253c:	e008      	b.n	8002550 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800253e:	f7ff fb4b 	bl	8001bd8 <HAL_GetTick>
 8002542:	4602      	mov	r2, r0
 8002544:	693b      	ldr	r3, [r7, #16]
 8002546:	1ad3      	subs	r3, r2, r3
 8002548:	2b02      	cmp	r3, #2
 800254a:	d901      	bls.n	8002550 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800254c:	2303      	movs	r3, #3
 800254e:	e067      	b.n	8002620 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002550:	4b35      	ldr	r3, [pc, #212]	; (8002628 <HAL_RCC_OscConfig+0x4f4>)
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002558:	2b00      	cmp	r3, #0
 800255a:	d1f0      	bne.n	800253e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	6a1b      	ldr	r3, [r3, #32]
 8002560:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002564:	d108      	bne.n	8002578 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002566:	4b30      	ldr	r3, [pc, #192]	; (8002628 <HAL_RCC_OscConfig+0x4f4>)
 8002568:	685b      	ldr	r3, [r3, #4]
 800256a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	689b      	ldr	r3, [r3, #8]
 8002572:	492d      	ldr	r1, [pc, #180]	; (8002628 <HAL_RCC_OscConfig+0x4f4>)
 8002574:	4313      	orrs	r3, r2
 8002576:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002578:	4b2b      	ldr	r3, [pc, #172]	; (8002628 <HAL_RCC_OscConfig+0x4f4>)
 800257a:	685b      	ldr	r3, [r3, #4]
 800257c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	6a19      	ldr	r1, [r3, #32]
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002588:	430b      	orrs	r3, r1
 800258a:	4927      	ldr	r1, [pc, #156]	; (8002628 <HAL_RCC_OscConfig+0x4f4>)
 800258c:	4313      	orrs	r3, r2
 800258e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002590:	4b27      	ldr	r3, [pc, #156]	; (8002630 <HAL_RCC_OscConfig+0x4fc>)
 8002592:	2201      	movs	r2, #1
 8002594:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002596:	f7ff fb1f 	bl	8001bd8 <HAL_GetTick>
 800259a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800259c:	e008      	b.n	80025b0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800259e:	f7ff fb1b 	bl	8001bd8 <HAL_GetTick>
 80025a2:	4602      	mov	r2, r0
 80025a4:	693b      	ldr	r3, [r7, #16]
 80025a6:	1ad3      	subs	r3, r2, r3
 80025a8:	2b02      	cmp	r3, #2
 80025aa:	d901      	bls.n	80025b0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80025ac:	2303      	movs	r3, #3
 80025ae:	e037      	b.n	8002620 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80025b0:	4b1d      	ldr	r3, [pc, #116]	; (8002628 <HAL_RCC_OscConfig+0x4f4>)
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d0f0      	beq.n	800259e <HAL_RCC_OscConfig+0x46a>
 80025bc:	e02f      	b.n	800261e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025be:	4b1c      	ldr	r3, [pc, #112]	; (8002630 <HAL_RCC_OscConfig+0x4fc>)
 80025c0:	2200      	movs	r2, #0
 80025c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025c4:	f7ff fb08 	bl	8001bd8 <HAL_GetTick>
 80025c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025ca:	e008      	b.n	80025de <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025cc:	f7ff fb04 	bl	8001bd8 <HAL_GetTick>
 80025d0:	4602      	mov	r2, r0
 80025d2:	693b      	ldr	r3, [r7, #16]
 80025d4:	1ad3      	subs	r3, r2, r3
 80025d6:	2b02      	cmp	r3, #2
 80025d8:	d901      	bls.n	80025de <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80025da:	2303      	movs	r3, #3
 80025dc:	e020      	b.n	8002620 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025de:	4b12      	ldr	r3, [pc, #72]	; (8002628 <HAL_RCC_OscConfig+0x4f4>)
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d1f0      	bne.n	80025cc <HAL_RCC_OscConfig+0x498>
 80025ea:	e018      	b.n	800261e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	69db      	ldr	r3, [r3, #28]
 80025f0:	2b01      	cmp	r3, #1
 80025f2:	d101      	bne.n	80025f8 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80025f4:	2301      	movs	r3, #1
 80025f6:	e013      	b.n	8002620 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80025f8:	4b0b      	ldr	r3, [pc, #44]	; (8002628 <HAL_RCC_OscConfig+0x4f4>)
 80025fa:	685b      	ldr	r3, [r3, #4]
 80025fc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	6a1b      	ldr	r3, [r3, #32]
 8002608:	429a      	cmp	r2, r3
 800260a:	d106      	bne.n	800261a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002616:	429a      	cmp	r2, r3
 8002618:	d001      	beq.n	800261e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800261a:	2301      	movs	r3, #1
 800261c:	e000      	b.n	8002620 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800261e:	2300      	movs	r3, #0
}
 8002620:	4618      	mov	r0, r3
 8002622:	3718      	adds	r7, #24
 8002624:	46bd      	mov	sp, r7
 8002626:	bd80      	pop	{r7, pc}
 8002628:	40021000 	.word	0x40021000
 800262c:	40007000 	.word	0x40007000
 8002630:	42420060 	.word	0x42420060

08002634 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002634:	b580      	push	{r7, lr}
 8002636:	b084      	sub	sp, #16
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]
 800263c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	2b00      	cmp	r3, #0
 8002642:	d101      	bne.n	8002648 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002644:	2301      	movs	r3, #1
 8002646:	e0d0      	b.n	80027ea <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002648:	4b6a      	ldr	r3, [pc, #424]	; (80027f4 <HAL_RCC_ClockConfig+0x1c0>)
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f003 0307 	and.w	r3, r3, #7
 8002650:	683a      	ldr	r2, [r7, #0]
 8002652:	429a      	cmp	r2, r3
 8002654:	d910      	bls.n	8002678 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002656:	4b67      	ldr	r3, [pc, #412]	; (80027f4 <HAL_RCC_ClockConfig+0x1c0>)
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f023 0207 	bic.w	r2, r3, #7
 800265e:	4965      	ldr	r1, [pc, #404]	; (80027f4 <HAL_RCC_ClockConfig+0x1c0>)
 8002660:	683b      	ldr	r3, [r7, #0]
 8002662:	4313      	orrs	r3, r2
 8002664:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002666:	4b63      	ldr	r3, [pc, #396]	; (80027f4 <HAL_RCC_ClockConfig+0x1c0>)
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f003 0307 	and.w	r3, r3, #7
 800266e:	683a      	ldr	r2, [r7, #0]
 8002670:	429a      	cmp	r2, r3
 8002672:	d001      	beq.n	8002678 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002674:	2301      	movs	r3, #1
 8002676:	e0b8      	b.n	80027ea <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f003 0302 	and.w	r3, r3, #2
 8002680:	2b00      	cmp	r3, #0
 8002682:	d020      	beq.n	80026c6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f003 0304 	and.w	r3, r3, #4
 800268c:	2b00      	cmp	r3, #0
 800268e:	d005      	beq.n	800269c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002690:	4b59      	ldr	r3, [pc, #356]	; (80027f8 <HAL_RCC_ClockConfig+0x1c4>)
 8002692:	685b      	ldr	r3, [r3, #4]
 8002694:	4a58      	ldr	r2, [pc, #352]	; (80027f8 <HAL_RCC_ClockConfig+0x1c4>)
 8002696:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800269a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f003 0308 	and.w	r3, r3, #8
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d005      	beq.n	80026b4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80026a8:	4b53      	ldr	r3, [pc, #332]	; (80027f8 <HAL_RCC_ClockConfig+0x1c4>)
 80026aa:	685b      	ldr	r3, [r3, #4]
 80026ac:	4a52      	ldr	r2, [pc, #328]	; (80027f8 <HAL_RCC_ClockConfig+0x1c4>)
 80026ae:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80026b2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80026b4:	4b50      	ldr	r3, [pc, #320]	; (80027f8 <HAL_RCC_ClockConfig+0x1c4>)
 80026b6:	685b      	ldr	r3, [r3, #4]
 80026b8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	689b      	ldr	r3, [r3, #8]
 80026c0:	494d      	ldr	r1, [pc, #308]	; (80027f8 <HAL_RCC_ClockConfig+0x1c4>)
 80026c2:	4313      	orrs	r3, r2
 80026c4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f003 0301 	and.w	r3, r3, #1
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d040      	beq.n	8002754 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	685b      	ldr	r3, [r3, #4]
 80026d6:	2b01      	cmp	r3, #1
 80026d8:	d107      	bne.n	80026ea <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026da:	4b47      	ldr	r3, [pc, #284]	; (80027f8 <HAL_RCC_ClockConfig+0x1c4>)
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d115      	bne.n	8002712 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026e6:	2301      	movs	r3, #1
 80026e8:	e07f      	b.n	80027ea <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	685b      	ldr	r3, [r3, #4]
 80026ee:	2b02      	cmp	r3, #2
 80026f0:	d107      	bne.n	8002702 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026f2:	4b41      	ldr	r3, [pc, #260]	; (80027f8 <HAL_RCC_ClockConfig+0x1c4>)
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d109      	bne.n	8002712 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026fe:	2301      	movs	r3, #1
 8002700:	e073      	b.n	80027ea <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002702:	4b3d      	ldr	r3, [pc, #244]	; (80027f8 <HAL_RCC_ClockConfig+0x1c4>)
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f003 0302 	and.w	r3, r3, #2
 800270a:	2b00      	cmp	r3, #0
 800270c:	d101      	bne.n	8002712 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800270e:	2301      	movs	r3, #1
 8002710:	e06b      	b.n	80027ea <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002712:	4b39      	ldr	r3, [pc, #228]	; (80027f8 <HAL_RCC_ClockConfig+0x1c4>)
 8002714:	685b      	ldr	r3, [r3, #4]
 8002716:	f023 0203 	bic.w	r2, r3, #3
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	685b      	ldr	r3, [r3, #4]
 800271e:	4936      	ldr	r1, [pc, #216]	; (80027f8 <HAL_RCC_ClockConfig+0x1c4>)
 8002720:	4313      	orrs	r3, r2
 8002722:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002724:	f7ff fa58 	bl	8001bd8 <HAL_GetTick>
 8002728:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800272a:	e00a      	b.n	8002742 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800272c:	f7ff fa54 	bl	8001bd8 <HAL_GetTick>
 8002730:	4602      	mov	r2, r0
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	1ad3      	subs	r3, r2, r3
 8002736:	f241 3288 	movw	r2, #5000	; 0x1388
 800273a:	4293      	cmp	r3, r2
 800273c:	d901      	bls.n	8002742 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800273e:	2303      	movs	r3, #3
 8002740:	e053      	b.n	80027ea <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002742:	4b2d      	ldr	r3, [pc, #180]	; (80027f8 <HAL_RCC_ClockConfig+0x1c4>)
 8002744:	685b      	ldr	r3, [r3, #4]
 8002746:	f003 020c 	and.w	r2, r3, #12
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	685b      	ldr	r3, [r3, #4]
 800274e:	009b      	lsls	r3, r3, #2
 8002750:	429a      	cmp	r2, r3
 8002752:	d1eb      	bne.n	800272c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002754:	4b27      	ldr	r3, [pc, #156]	; (80027f4 <HAL_RCC_ClockConfig+0x1c0>)
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f003 0307 	and.w	r3, r3, #7
 800275c:	683a      	ldr	r2, [r7, #0]
 800275e:	429a      	cmp	r2, r3
 8002760:	d210      	bcs.n	8002784 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002762:	4b24      	ldr	r3, [pc, #144]	; (80027f4 <HAL_RCC_ClockConfig+0x1c0>)
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f023 0207 	bic.w	r2, r3, #7
 800276a:	4922      	ldr	r1, [pc, #136]	; (80027f4 <HAL_RCC_ClockConfig+0x1c0>)
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	4313      	orrs	r3, r2
 8002770:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002772:	4b20      	ldr	r3, [pc, #128]	; (80027f4 <HAL_RCC_ClockConfig+0x1c0>)
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f003 0307 	and.w	r3, r3, #7
 800277a:	683a      	ldr	r2, [r7, #0]
 800277c:	429a      	cmp	r2, r3
 800277e:	d001      	beq.n	8002784 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002780:	2301      	movs	r3, #1
 8002782:	e032      	b.n	80027ea <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f003 0304 	and.w	r3, r3, #4
 800278c:	2b00      	cmp	r3, #0
 800278e:	d008      	beq.n	80027a2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002790:	4b19      	ldr	r3, [pc, #100]	; (80027f8 <HAL_RCC_ClockConfig+0x1c4>)
 8002792:	685b      	ldr	r3, [r3, #4]
 8002794:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	68db      	ldr	r3, [r3, #12]
 800279c:	4916      	ldr	r1, [pc, #88]	; (80027f8 <HAL_RCC_ClockConfig+0x1c4>)
 800279e:	4313      	orrs	r3, r2
 80027a0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f003 0308 	and.w	r3, r3, #8
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d009      	beq.n	80027c2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80027ae:	4b12      	ldr	r3, [pc, #72]	; (80027f8 <HAL_RCC_ClockConfig+0x1c4>)
 80027b0:	685b      	ldr	r3, [r3, #4]
 80027b2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	691b      	ldr	r3, [r3, #16]
 80027ba:	00db      	lsls	r3, r3, #3
 80027bc:	490e      	ldr	r1, [pc, #56]	; (80027f8 <HAL_RCC_ClockConfig+0x1c4>)
 80027be:	4313      	orrs	r3, r2
 80027c0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80027c2:	f000 f821 	bl	8002808 <HAL_RCC_GetSysClockFreq>
 80027c6:	4601      	mov	r1, r0
 80027c8:	4b0b      	ldr	r3, [pc, #44]	; (80027f8 <HAL_RCC_ClockConfig+0x1c4>)
 80027ca:	685b      	ldr	r3, [r3, #4]
 80027cc:	091b      	lsrs	r3, r3, #4
 80027ce:	f003 030f 	and.w	r3, r3, #15
 80027d2:	4a0a      	ldr	r2, [pc, #40]	; (80027fc <HAL_RCC_ClockConfig+0x1c8>)
 80027d4:	5cd3      	ldrb	r3, [r2, r3]
 80027d6:	fa21 f303 	lsr.w	r3, r1, r3
 80027da:	4a09      	ldr	r2, [pc, #36]	; (8002800 <HAL_RCC_ClockConfig+0x1cc>)
 80027dc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80027de:	4b09      	ldr	r3, [pc, #36]	; (8002804 <HAL_RCC_ClockConfig+0x1d0>)
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	4618      	mov	r0, r3
 80027e4:	f7ff f8c8 	bl	8001978 <HAL_InitTick>

  return HAL_OK;
 80027e8:	2300      	movs	r3, #0
}
 80027ea:	4618      	mov	r0, r3
 80027ec:	3710      	adds	r7, #16
 80027ee:	46bd      	mov	sp, r7
 80027f0:	bd80      	pop	{r7, pc}
 80027f2:	bf00      	nop
 80027f4:	40022000 	.word	0x40022000
 80027f8:	40021000 	.word	0x40021000
 80027fc:	08007a60 	.word	0x08007a60
 8002800:	20000000 	.word	0x20000000
 8002804:	20000004 	.word	0x20000004

08002808 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002808:	b490      	push	{r4, r7}
 800280a:	b08a      	sub	sp, #40	; 0x28
 800280c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800280e:	4b2a      	ldr	r3, [pc, #168]	; (80028b8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002810:	1d3c      	adds	r4, r7, #4
 8002812:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002814:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002818:	4b28      	ldr	r3, [pc, #160]	; (80028bc <HAL_RCC_GetSysClockFreq+0xb4>)
 800281a:	881b      	ldrh	r3, [r3, #0]
 800281c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800281e:	2300      	movs	r3, #0
 8002820:	61fb      	str	r3, [r7, #28]
 8002822:	2300      	movs	r3, #0
 8002824:	61bb      	str	r3, [r7, #24]
 8002826:	2300      	movs	r3, #0
 8002828:	627b      	str	r3, [r7, #36]	; 0x24
 800282a:	2300      	movs	r3, #0
 800282c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800282e:	2300      	movs	r3, #0
 8002830:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002832:	4b23      	ldr	r3, [pc, #140]	; (80028c0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002834:	685b      	ldr	r3, [r3, #4]
 8002836:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002838:	69fb      	ldr	r3, [r7, #28]
 800283a:	f003 030c 	and.w	r3, r3, #12
 800283e:	2b04      	cmp	r3, #4
 8002840:	d002      	beq.n	8002848 <HAL_RCC_GetSysClockFreq+0x40>
 8002842:	2b08      	cmp	r3, #8
 8002844:	d003      	beq.n	800284e <HAL_RCC_GetSysClockFreq+0x46>
 8002846:	e02d      	b.n	80028a4 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002848:	4b1e      	ldr	r3, [pc, #120]	; (80028c4 <HAL_RCC_GetSysClockFreq+0xbc>)
 800284a:	623b      	str	r3, [r7, #32]
      break;
 800284c:	e02d      	b.n	80028aa <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800284e:	69fb      	ldr	r3, [r7, #28]
 8002850:	0c9b      	lsrs	r3, r3, #18
 8002852:	f003 030f 	and.w	r3, r3, #15
 8002856:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800285a:	4413      	add	r3, r2
 800285c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002860:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002862:	69fb      	ldr	r3, [r7, #28]
 8002864:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002868:	2b00      	cmp	r3, #0
 800286a:	d013      	beq.n	8002894 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800286c:	4b14      	ldr	r3, [pc, #80]	; (80028c0 <HAL_RCC_GetSysClockFreq+0xb8>)
 800286e:	685b      	ldr	r3, [r3, #4]
 8002870:	0c5b      	lsrs	r3, r3, #17
 8002872:	f003 0301 	and.w	r3, r3, #1
 8002876:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800287a:	4413      	add	r3, r2
 800287c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002880:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002882:	697b      	ldr	r3, [r7, #20]
 8002884:	4a0f      	ldr	r2, [pc, #60]	; (80028c4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002886:	fb02 f203 	mul.w	r2, r2, r3
 800288a:	69bb      	ldr	r3, [r7, #24]
 800288c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002890:	627b      	str	r3, [r7, #36]	; 0x24
 8002892:	e004      	b.n	800289e <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002894:	697b      	ldr	r3, [r7, #20]
 8002896:	4a0c      	ldr	r2, [pc, #48]	; (80028c8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002898:	fb02 f303 	mul.w	r3, r2, r3
 800289c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800289e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028a0:	623b      	str	r3, [r7, #32]
      break;
 80028a2:	e002      	b.n	80028aa <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80028a4:	4b07      	ldr	r3, [pc, #28]	; (80028c4 <HAL_RCC_GetSysClockFreq+0xbc>)
 80028a6:	623b      	str	r3, [r7, #32]
      break;
 80028a8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80028aa:	6a3b      	ldr	r3, [r7, #32]
}
 80028ac:	4618      	mov	r0, r3
 80028ae:	3728      	adds	r7, #40	; 0x28
 80028b0:	46bd      	mov	sp, r7
 80028b2:	bc90      	pop	{r4, r7}
 80028b4:	4770      	bx	lr
 80028b6:	bf00      	nop
 80028b8:	08007a0c 	.word	0x08007a0c
 80028bc:	08007a1c 	.word	0x08007a1c
 80028c0:	40021000 	.word	0x40021000
 80028c4:	007a1200 	.word	0x007a1200
 80028c8:	003d0900 	.word	0x003d0900

080028cc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80028cc:	b480      	push	{r7}
 80028ce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80028d0:	4b02      	ldr	r3, [pc, #8]	; (80028dc <HAL_RCC_GetHCLKFreq+0x10>)
 80028d2:	681b      	ldr	r3, [r3, #0]
}
 80028d4:	4618      	mov	r0, r3
 80028d6:	46bd      	mov	sp, r7
 80028d8:	bc80      	pop	{r7}
 80028da:	4770      	bx	lr
 80028dc:	20000000 	.word	0x20000000

080028e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80028e0:	b580      	push	{r7, lr}
 80028e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80028e4:	f7ff fff2 	bl	80028cc <HAL_RCC_GetHCLKFreq>
 80028e8:	4601      	mov	r1, r0
 80028ea:	4b05      	ldr	r3, [pc, #20]	; (8002900 <HAL_RCC_GetPCLK1Freq+0x20>)
 80028ec:	685b      	ldr	r3, [r3, #4]
 80028ee:	0a1b      	lsrs	r3, r3, #8
 80028f0:	f003 0307 	and.w	r3, r3, #7
 80028f4:	4a03      	ldr	r2, [pc, #12]	; (8002904 <HAL_RCC_GetPCLK1Freq+0x24>)
 80028f6:	5cd3      	ldrb	r3, [r2, r3]
 80028f8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80028fc:	4618      	mov	r0, r3
 80028fe:	bd80      	pop	{r7, pc}
 8002900:	40021000 	.word	0x40021000
 8002904:	08007a70 	.word	0x08007a70

08002908 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002908:	b580      	push	{r7, lr}
 800290a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800290c:	f7ff ffde 	bl	80028cc <HAL_RCC_GetHCLKFreq>
 8002910:	4601      	mov	r1, r0
 8002912:	4b05      	ldr	r3, [pc, #20]	; (8002928 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002914:	685b      	ldr	r3, [r3, #4]
 8002916:	0adb      	lsrs	r3, r3, #11
 8002918:	f003 0307 	and.w	r3, r3, #7
 800291c:	4a03      	ldr	r2, [pc, #12]	; (800292c <HAL_RCC_GetPCLK2Freq+0x24>)
 800291e:	5cd3      	ldrb	r3, [r2, r3]
 8002920:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002924:	4618      	mov	r0, r3
 8002926:	bd80      	pop	{r7, pc}
 8002928:	40021000 	.word	0x40021000
 800292c:	08007a70 	.word	0x08007a70

08002930 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002930:	b480      	push	{r7}
 8002932:	b083      	sub	sp, #12
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]
 8002938:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	220f      	movs	r2, #15
 800293e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002940:	4b11      	ldr	r3, [pc, #68]	; (8002988 <HAL_RCC_GetClockConfig+0x58>)
 8002942:	685b      	ldr	r3, [r3, #4]
 8002944:	f003 0203 	and.w	r2, r3, #3
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800294c:	4b0e      	ldr	r3, [pc, #56]	; (8002988 <HAL_RCC_GetClockConfig+0x58>)
 800294e:	685b      	ldr	r3, [r3, #4]
 8002950:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002958:	4b0b      	ldr	r3, [pc, #44]	; (8002988 <HAL_RCC_GetClockConfig+0x58>)
 800295a:	685b      	ldr	r3, [r3, #4]
 800295c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8002964:	4b08      	ldr	r3, [pc, #32]	; (8002988 <HAL_RCC_GetClockConfig+0x58>)
 8002966:	685b      	ldr	r3, [r3, #4]
 8002968:	08db      	lsrs	r3, r3, #3
 800296a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002972:	4b06      	ldr	r3, [pc, #24]	; (800298c <HAL_RCC_GetClockConfig+0x5c>)
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f003 0207 	and.w	r2, r3, #7
 800297a:	683b      	ldr	r3, [r7, #0]
 800297c:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 800297e:	bf00      	nop
 8002980:	370c      	adds	r7, #12
 8002982:	46bd      	mov	sp, r7
 8002984:	bc80      	pop	{r7}
 8002986:	4770      	bx	lr
 8002988:	40021000 	.word	0x40021000
 800298c:	40022000 	.word	0x40022000

08002990 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002990:	b480      	push	{r7}
 8002992:	b085      	sub	sp, #20
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002998:	4b0a      	ldr	r3, [pc, #40]	; (80029c4 <RCC_Delay+0x34>)
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	4a0a      	ldr	r2, [pc, #40]	; (80029c8 <RCC_Delay+0x38>)
 800299e:	fba2 2303 	umull	r2, r3, r2, r3
 80029a2:	0a5b      	lsrs	r3, r3, #9
 80029a4:	687a      	ldr	r2, [r7, #4]
 80029a6:	fb02 f303 	mul.w	r3, r2, r3
 80029aa:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80029ac:	bf00      	nop
  }
  while (Delay --);
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	1e5a      	subs	r2, r3, #1
 80029b2:	60fa      	str	r2, [r7, #12]
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d1f9      	bne.n	80029ac <RCC_Delay+0x1c>
}
 80029b8:	bf00      	nop
 80029ba:	3714      	adds	r7, #20
 80029bc:	46bd      	mov	sp, r7
 80029be:	bc80      	pop	{r7}
 80029c0:	4770      	bx	lr
 80029c2:	bf00      	nop
 80029c4:	20000000 	.word	0x20000000
 80029c8:	10624dd3 	.word	0x10624dd3

080029cc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	b082      	sub	sp, #8
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d101      	bne.n	80029de <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80029da:	2301      	movs	r3, #1
 80029dc:	e053      	b.n	8002a86 <HAL_SPI_Init+0xba>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	2200      	movs	r2, #0
 80029e2:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80029ea:	b2db      	uxtb	r3, r3
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d106      	bne.n	80029fe <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	2200      	movs	r2, #0
 80029f4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80029f8:	6878      	ldr	r0, [r7, #4]
 80029fa:	f7fe ff27 	bl	800184c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	2202      	movs	r2, #2
 8002a02:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	681a      	ldr	r2, [r3, #0]
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002a14:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	685a      	ldr	r2, [r3, #4]
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	689b      	ldr	r3, [r3, #8]
 8002a1e:	431a      	orrs	r2, r3
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	68db      	ldr	r3, [r3, #12]
 8002a24:	431a      	orrs	r2, r3
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	691b      	ldr	r3, [r3, #16]
 8002a2a:	431a      	orrs	r2, r3
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	695b      	ldr	r3, [r3, #20]
 8002a30:	431a      	orrs	r2, r3
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	699b      	ldr	r3, [r3, #24]
 8002a36:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002a3a:	431a      	orrs	r2, r3
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	69db      	ldr	r3, [r3, #28]
 8002a40:	431a      	orrs	r2, r3
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	6a1b      	ldr	r3, [r3, #32]
 8002a46:	ea42 0103 	orr.w	r1, r2, r3
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	430a      	orrs	r2, r1
 8002a54:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	699b      	ldr	r3, [r3, #24]
 8002a5a:	0c1a      	lsrs	r2, r3, #16
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f002 0204 	and.w	r2, r2, #4
 8002a64:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	69da      	ldr	r2, [r3, #28]
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002a74:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	2200      	movs	r2, #0
 8002a7a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	2201      	movs	r2, #1
 8002a80:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002a84:	2300      	movs	r3, #0
}
 8002a86:	4618      	mov	r0, r3
 8002a88:	3708      	adds	r7, #8
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	bd80      	pop	{r7, pc}

08002a8e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002a8e:	b580      	push	{r7, lr}
 8002a90:	b088      	sub	sp, #32
 8002a92:	af00      	add	r7, sp, #0
 8002a94:	60f8      	str	r0, [r7, #12]
 8002a96:	60b9      	str	r1, [r7, #8]
 8002a98:	603b      	str	r3, [r7, #0]
 8002a9a:	4613      	mov	r3, r2
 8002a9c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002aa8:	2b01      	cmp	r3, #1
 8002aaa:	d101      	bne.n	8002ab0 <HAL_SPI_Transmit+0x22>
 8002aac:	2302      	movs	r3, #2
 8002aae:	e11e      	b.n	8002cee <HAL_SPI_Transmit+0x260>
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	2201      	movs	r2, #1
 8002ab4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002ab8:	f7ff f88e 	bl	8001bd8 <HAL_GetTick>
 8002abc:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002abe:	88fb      	ldrh	r3, [r7, #6]
 8002ac0:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002ac8:	b2db      	uxtb	r3, r3
 8002aca:	2b01      	cmp	r3, #1
 8002acc:	d002      	beq.n	8002ad4 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002ace:	2302      	movs	r3, #2
 8002ad0:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002ad2:	e103      	b.n	8002cdc <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 8002ad4:	68bb      	ldr	r3, [r7, #8]
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d002      	beq.n	8002ae0 <HAL_SPI_Transmit+0x52>
 8002ada:	88fb      	ldrh	r3, [r7, #6]
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d102      	bne.n	8002ae6 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002ae0:	2301      	movs	r3, #1
 8002ae2:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002ae4:	e0fa      	b.n	8002cdc <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	2203      	movs	r2, #3
 8002aea:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	2200      	movs	r2, #0
 8002af2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	68ba      	ldr	r2, [r7, #8]
 8002af8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	88fa      	ldrh	r2, [r7, #6]
 8002afe:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	88fa      	ldrh	r2, [r7, #6]
 8002b04:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	2200      	movs	r2, #0
 8002b0a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	2200      	movs	r2, #0
 8002b10:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	2200      	movs	r2, #0
 8002b16:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	2200      	movs	r2, #0
 8002b22:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	689b      	ldr	r3, [r3, #8]
 8002b28:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002b2c:	d107      	bne.n	8002b3e <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	681a      	ldr	r2, [r3, #0]
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002b3c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b48:	2b40      	cmp	r3, #64	; 0x40
 8002b4a:	d007      	beq.n	8002b5c <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	681a      	ldr	r2, [r3, #0]
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002b5a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	68db      	ldr	r3, [r3, #12]
 8002b60:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002b64:	d14b      	bne.n	8002bfe <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	685b      	ldr	r3, [r3, #4]
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d002      	beq.n	8002b74 <HAL_SPI_Transmit+0xe6>
 8002b6e:	8afb      	ldrh	r3, [r7, #22]
 8002b70:	2b01      	cmp	r3, #1
 8002b72:	d13e      	bne.n	8002bf2 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b78:	881a      	ldrh	r2, [r3, #0]
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b84:	1c9a      	adds	r2, r3, #2
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002b8e:	b29b      	uxth	r3, r3
 8002b90:	3b01      	subs	r3, #1
 8002b92:	b29a      	uxth	r2, r3
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002b98:	e02b      	b.n	8002bf2 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	689b      	ldr	r3, [r3, #8]
 8002ba0:	f003 0302 	and.w	r3, r3, #2
 8002ba4:	2b02      	cmp	r3, #2
 8002ba6:	d112      	bne.n	8002bce <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bac:	881a      	ldrh	r2, [r3, #0]
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bb8:	1c9a      	adds	r2, r3, #2
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002bc2:	b29b      	uxth	r3, r3
 8002bc4:	3b01      	subs	r3, #1
 8002bc6:	b29a      	uxth	r2, r3
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	86da      	strh	r2, [r3, #54]	; 0x36
 8002bcc:	e011      	b.n	8002bf2 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002bce:	f7ff f803 	bl	8001bd8 <HAL_GetTick>
 8002bd2:	4602      	mov	r2, r0
 8002bd4:	69bb      	ldr	r3, [r7, #24]
 8002bd6:	1ad3      	subs	r3, r2, r3
 8002bd8:	683a      	ldr	r2, [r7, #0]
 8002bda:	429a      	cmp	r2, r3
 8002bdc:	d803      	bhi.n	8002be6 <HAL_SPI_Transmit+0x158>
 8002bde:	683b      	ldr	r3, [r7, #0]
 8002be0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002be4:	d102      	bne.n	8002bec <HAL_SPI_Transmit+0x15e>
 8002be6:	683b      	ldr	r3, [r7, #0]
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d102      	bne.n	8002bf2 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 8002bec:	2303      	movs	r3, #3
 8002bee:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002bf0:	e074      	b.n	8002cdc <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002bf6:	b29b      	uxth	r3, r3
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d1ce      	bne.n	8002b9a <HAL_SPI_Transmit+0x10c>
 8002bfc:	e04c      	b.n	8002c98 <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	685b      	ldr	r3, [r3, #4]
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d002      	beq.n	8002c0c <HAL_SPI_Transmit+0x17e>
 8002c06:	8afb      	ldrh	r3, [r7, #22]
 8002c08:	2b01      	cmp	r3, #1
 8002c0a:	d140      	bne.n	8002c8e <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	330c      	adds	r3, #12
 8002c16:	7812      	ldrb	r2, [r2, #0]
 8002c18:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c1e:	1c5a      	adds	r2, r3, #1
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002c28:	b29b      	uxth	r3, r3
 8002c2a:	3b01      	subs	r3, #1
 8002c2c:	b29a      	uxth	r2, r3
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002c32:	e02c      	b.n	8002c8e <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	689b      	ldr	r3, [r3, #8]
 8002c3a:	f003 0302 	and.w	r3, r3, #2
 8002c3e:	2b02      	cmp	r3, #2
 8002c40:	d113      	bne.n	8002c6a <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	330c      	adds	r3, #12
 8002c4c:	7812      	ldrb	r2, [r2, #0]
 8002c4e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c54:	1c5a      	adds	r2, r3, #1
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002c5e:	b29b      	uxth	r3, r3
 8002c60:	3b01      	subs	r3, #1
 8002c62:	b29a      	uxth	r2, r3
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	86da      	strh	r2, [r3, #54]	; 0x36
 8002c68:	e011      	b.n	8002c8e <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002c6a:	f7fe ffb5 	bl	8001bd8 <HAL_GetTick>
 8002c6e:	4602      	mov	r2, r0
 8002c70:	69bb      	ldr	r3, [r7, #24]
 8002c72:	1ad3      	subs	r3, r2, r3
 8002c74:	683a      	ldr	r2, [r7, #0]
 8002c76:	429a      	cmp	r2, r3
 8002c78:	d803      	bhi.n	8002c82 <HAL_SPI_Transmit+0x1f4>
 8002c7a:	683b      	ldr	r3, [r7, #0]
 8002c7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c80:	d102      	bne.n	8002c88 <HAL_SPI_Transmit+0x1fa>
 8002c82:	683b      	ldr	r3, [r7, #0]
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d102      	bne.n	8002c8e <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 8002c88:	2303      	movs	r3, #3
 8002c8a:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002c8c:	e026      	b.n	8002cdc <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002c92:	b29b      	uxth	r3, r3
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d1cd      	bne.n	8002c34 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002c98:	69ba      	ldr	r2, [r7, #24]
 8002c9a:	6839      	ldr	r1, [r7, #0]
 8002c9c:	68f8      	ldr	r0, [r7, #12]
 8002c9e:	f000 fb91 	bl	80033c4 <SPI_EndRxTxTransaction>
 8002ca2:	4603      	mov	r3, r0
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d002      	beq.n	8002cae <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	2220      	movs	r2, #32
 8002cac:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	689b      	ldr	r3, [r3, #8]
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d10a      	bne.n	8002ccc <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	613b      	str	r3, [r7, #16]
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	68db      	ldr	r3, [r3, #12]
 8002cc0:	613b      	str	r3, [r7, #16]
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	689b      	ldr	r3, [r3, #8]
 8002cc8:	613b      	str	r3, [r7, #16]
 8002cca:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d002      	beq.n	8002cda <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 8002cd4:	2301      	movs	r3, #1
 8002cd6:	77fb      	strb	r3, [r7, #31]
 8002cd8:	e000      	b.n	8002cdc <HAL_SPI_Transmit+0x24e>
  }

error:
 8002cda:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	2201      	movs	r2, #1
 8002ce0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002cec:	7ffb      	ldrb	r3, [r7, #31]
}
 8002cee:	4618      	mov	r0, r3
 8002cf0:	3720      	adds	r7, #32
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	bd80      	pop	{r7, pc}

08002cf6 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002cf6:	b580      	push	{r7, lr}
 8002cf8:	b088      	sub	sp, #32
 8002cfa:	af02      	add	r7, sp, #8
 8002cfc:	60f8      	str	r0, [r7, #12]
 8002cfe:	60b9      	str	r1, [r7, #8]
 8002d00:	603b      	str	r3, [r7, #0]
 8002d02:	4613      	mov	r3, r2
 8002d04:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002d06:	2300      	movs	r3, #0
 8002d08:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	685b      	ldr	r3, [r3, #4]
 8002d0e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002d12:	d112      	bne.n	8002d3a <HAL_SPI_Receive+0x44>
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	689b      	ldr	r3, [r3, #8]
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d10e      	bne.n	8002d3a <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	2204      	movs	r2, #4
 8002d20:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8002d24:	88fa      	ldrh	r2, [r7, #6]
 8002d26:	683b      	ldr	r3, [r7, #0]
 8002d28:	9300      	str	r3, [sp, #0]
 8002d2a:	4613      	mov	r3, r2
 8002d2c:	68ba      	ldr	r2, [r7, #8]
 8002d2e:	68b9      	ldr	r1, [r7, #8]
 8002d30:	68f8      	ldr	r0, [r7, #12]
 8002d32:	f000 f8e9 	bl	8002f08 <HAL_SPI_TransmitReceive>
 8002d36:	4603      	mov	r3, r0
 8002d38:	e0e2      	b.n	8002f00 <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002d40:	2b01      	cmp	r3, #1
 8002d42:	d101      	bne.n	8002d48 <HAL_SPI_Receive+0x52>
 8002d44:	2302      	movs	r3, #2
 8002d46:	e0db      	b.n	8002f00 <HAL_SPI_Receive+0x20a>
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	2201      	movs	r2, #1
 8002d4c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002d50:	f7fe ff42 	bl	8001bd8 <HAL_GetTick>
 8002d54:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002d5c:	b2db      	uxtb	r3, r3
 8002d5e:	2b01      	cmp	r3, #1
 8002d60:	d002      	beq.n	8002d68 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8002d62:	2302      	movs	r3, #2
 8002d64:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002d66:	e0c2      	b.n	8002eee <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 8002d68:	68bb      	ldr	r3, [r7, #8]
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d002      	beq.n	8002d74 <HAL_SPI_Receive+0x7e>
 8002d6e:	88fb      	ldrh	r3, [r7, #6]
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d102      	bne.n	8002d7a <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8002d74:	2301      	movs	r3, #1
 8002d76:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002d78:	e0b9      	b.n	8002eee <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	2204      	movs	r2, #4
 8002d7e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	2200      	movs	r2, #0
 8002d86:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	68ba      	ldr	r2, [r7, #8]
 8002d8c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	88fa      	ldrh	r2, [r7, #6]
 8002d92:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	88fa      	ldrh	r2, [r7, #6]
 8002d98:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	2200      	movs	r2, #0
 8002da4:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	2200      	movs	r2, #0
 8002daa:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	2200      	movs	r2, #0
 8002db0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	2200      	movs	r2, #0
 8002db6:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	689b      	ldr	r3, [r3, #8]
 8002dbc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002dc0:	d107      	bne.n	8002dd2 <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	681a      	ldr	r2, [r3, #0]
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002dd0:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ddc:	2b40      	cmp	r3, #64	; 0x40
 8002dde:	d007      	beq.n	8002df0 <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	681a      	ldr	r2, [r3, #0]
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002dee:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	68db      	ldr	r3, [r3, #12]
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d162      	bne.n	8002ebe <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8002df8:	e02e      	b.n	8002e58 <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	689b      	ldr	r3, [r3, #8]
 8002e00:	f003 0301 	and.w	r3, r3, #1
 8002e04:	2b01      	cmp	r3, #1
 8002e06:	d115      	bne.n	8002e34 <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f103 020c 	add.w	r2, r3, #12
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e14:	7812      	ldrb	r2, [r2, #0]
 8002e16:	b2d2      	uxtb	r2, r2
 8002e18:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e1e:	1c5a      	adds	r2, r3, #1
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002e28:	b29b      	uxth	r3, r3
 8002e2a:	3b01      	subs	r3, #1
 8002e2c:	b29a      	uxth	r2, r3
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002e32:	e011      	b.n	8002e58 <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002e34:	f7fe fed0 	bl	8001bd8 <HAL_GetTick>
 8002e38:	4602      	mov	r2, r0
 8002e3a:	693b      	ldr	r3, [r7, #16]
 8002e3c:	1ad3      	subs	r3, r2, r3
 8002e3e:	683a      	ldr	r2, [r7, #0]
 8002e40:	429a      	cmp	r2, r3
 8002e42:	d803      	bhi.n	8002e4c <HAL_SPI_Receive+0x156>
 8002e44:	683b      	ldr	r3, [r7, #0]
 8002e46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e4a:	d102      	bne.n	8002e52 <HAL_SPI_Receive+0x15c>
 8002e4c:	683b      	ldr	r3, [r7, #0]
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d102      	bne.n	8002e58 <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 8002e52:	2303      	movs	r3, #3
 8002e54:	75fb      	strb	r3, [r7, #23]
          goto error;
 8002e56:	e04a      	b.n	8002eee <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002e5c:	b29b      	uxth	r3, r3
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d1cb      	bne.n	8002dfa <HAL_SPI_Receive+0x104>
 8002e62:	e031      	b.n	8002ec8 <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	689b      	ldr	r3, [r3, #8]
 8002e6a:	f003 0301 	and.w	r3, r3, #1
 8002e6e:	2b01      	cmp	r3, #1
 8002e70:	d113      	bne.n	8002e9a <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	68da      	ldr	r2, [r3, #12]
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e7c:	b292      	uxth	r2, r2
 8002e7e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e84:	1c9a      	adds	r2, r3, #2
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002e8e:	b29b      	uxth	r3, r3
 8002e90:	3b01      	subs	r3, #1
 8002e92:	b29a      	uxth	r2, r3
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002e98:	e011      	b.n	8002ebe <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002e9a:	f7fe fe9d 	bl	8001bd8 <HAL_GetTick>
 8002e9e:	4602      	mov	r2, r0
 8002ea0:	693b      	ldr	r3, [r7, #16]
 8002ea2:	1ad3      	subs	r3, r2, r3
 8002ea4:	683a      	ldr	r2, [r7, #0]
 8002ea6:	429a      	cmp	r2, r3
 8002ea8:	d803      	bhi.n	8002eb2 <HAL_SPI_Receive+0x1bc>
 8002eaa:	683b      	ldr	r3, [r7, #0]
 8002eac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002eb0:	d102      	bne.n	8002eb8 <HAL_SPI_Receive+0x1c2>
 8002eb2:	683b      	ldr	r3, [r7, #0]
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d102      	bne.n	8002ebe <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 8002eb8:	2303      	movs	r3, #3
 8002eba:	75fb      	strb	r3, [r7, #23]
          goto error;
 8002ebc:	e017      	b.n	8002eee <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002ec2:	b29b      	uxth	r3, r3
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d1cd      	bne.n	8002e64 <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002ec8:	693a      	ldr	r2, [r7, #16]
 8002eca:	6839      	ldr	r1, [r7, #0]
 8002ecc:	68f8      	ldr	r0, [r7, #12]
 8002ece:	f000 fa27 	bl	8003320 <SPI_EndRxTransaction>
 8002ed2:	4603      	mov	r3, r0
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d002      	beq.n	8002ede <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	2220      	movs	r2, #32
 8002edc:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d002      	beq.n	8002eec <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 8002ee6:	2301      	movs	r3, #1
 8002ee8:	75fb      	strb	r3, [r7, #23]
 8002eea:	e000      	b.n	8002eee <HAL_SPI_Receive+0x1f8>
  }

error :
 8002eec:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	2201      	movs	r2, #1
 8002ef2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	2200      	movs	r2, #0
 8002efa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002efe:	7dfb      	ldrb	r3, [r7, #23]
}
 8002f00:	4618      	mov	r0, r3
 8002f02:	3718      	adds	r7, #24
 8002f04:	46bd      	mov	sp, r7
 8002f06:	bd80      	pop	{r7, pc}

08002f08 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	b08c      	sub	sp, #48	; 0x30
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	60f8      	str	r0, [r7, #12]
 8002f10:	60b9      	str	r1, [r7, #8]
 8002f12:	607a      	str	r2, [r7, #4]
 8002f14:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002f16:	2301      	movs	r3, #1
 8002f18:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002f1a:	2300      	movs	r3, #0
 8002f1c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002f26:	2b01      	cmp	r3, #1
 8002f28:	d101      	bne.n	8002f2e <HAL_SPI_TransmitReceive+0x26>
 8002f2a:	2302      	movs	r3, #2
 8002f2c:	e18a      	b.n	8003244 <HAL_SPI_TransmitReceive+0x33c>
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	2201      	movs	r2, #1
 8002f32:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002f36:	f7fe fe4f 	bl	8001bd8 <HAL_GetTick>
 8002f3a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002f42:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	685b      	ldr	r3, [r3, #4]
 8002f4a:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8002f4c:	887b      	ldrh	r3, [r7, #2]
 8002f4e:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002f50:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002f54:	2b01      	cmp	r3, #1
 8002f56:	d00f      	beq.n	8002f78 <HAL_SPI_TransmitReceive+0x70>
 8002f58:	69fb      	ldr	r3, [r7, #28]
 8002f5a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002f5e:	d107      	bne.n	8002f70 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	689b      	ldr	r3, [r3, #8]
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d103      	bne.n	8002f70 <HAL_SPI_TransmitReceive+0x68>
 8002f68:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002f6c:	2b04      	cmp	r3, #4
 8002f6e:	d003      	beq.n	8002f78 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8002f70:	2302      	movs	r3, #2
 8002f72:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002f76:	e15b      	b.n	8003230 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002f78:	68bb      	ldr	r3, [r7, #8]
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d005      	beq.n	8002f8a <HAL_SPI_TransmitReceive+0x82>
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d002      	beq.n	8002f8a <HAL_SPI_TransmitReceive+0x82>
 8002f84:	887b      	ldrh	r3, [r7, #2]
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d103      	bne.n	8002f92 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8002f8a:	2301      	movs	r3, #1
 8002f8c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002f90:	e14e      	b.n	8003230 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002f98:	b2db      	uxtb	r3, r3
 8002f9a:	2b04      	cmp	r3, #4
 8002f9c:	d003      	beq.n	8002fa6 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	2205      	movs	r2, #5
 8002fa2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	2200      	movs	r2, #0
 8002faa:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	687a      	ldr	r2, [r7, #4]
 8002fb0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	887a      	ldrh	r2, [r7, #2]
 8002fb6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	887a      	ldrh	r2, [r7, #2]
 8002fbc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	68ba      	ldr	r2, [r7, #8]
 8002fc2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	887a      	ldrh	r2, [r7, #2]
 8002fc8:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	887a      	ldrh	r2, [r7, #2]
 8002fce:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	2200      	movs	r2, #0
 8002fd4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	2200      	movs	r2, #0
 8002fda:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fe6:	2b40      	cmp	r3, #64	; 0x40
 8002fe8:	d007      	beq.n	8002ffa <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	681a      	ldr	r2, [r3, #0]
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002ff8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	68db      	ldr	r3, [r3, #12]
 8002ffe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003002:	d178      	bne.n	80030f6 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	685b      	ldr	r3, [r3, #4]
 8003008:	2b00      	cmp	r3, #0
 800300a:	d002      	beq.n	8003012 <HAL_SPI_TransmitReceive+0x10a>
 800300c:	8b7b      	ldrh	r3, [r7, #26]
 800300e:	2b01      	cmp	r3, #1
 8003010:	d166      	bne.n	80030e0 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003016:	881a      	ldrh	r2, [r3, #0]
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003022:	1c9a      	adds	r2, r3, #2
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800302c:	b29b      	uxth	r3, r3
 800302e:	3b01      	subs	r3, #1
 8003030:	b29a      	uxth	r2, r3
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003036:	e053      	b.n	80030e0 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	689b      	ldr	r3, [r3, #8]
 800303e:	f003 0302 	and.w	r3, r3, #2
 8003042:	2b02      	cmp	r3, #2
 8003044:	d11b      	bne.n	800307e <HAL_SPI_TransmitReceive+0x176>
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800304a:	b29b      	uxth	r3, r3
 800304c:	2b00      	cmp	r3, #0
 800304e:	d016      	beq.n	800307e <HAL_SPI_TransmitReceive+0x176>
 8003050:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003052:	2b01      	cmp	r3, #1
 8003054:	d113      	bne.n	800307e <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800305a:	881a      	ldrh	r2, [r3, #0]
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003066:	1c9a      	adds	r2, r3, #2
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003070:	b29b      	uxth	r3, r3
 8003072:	3b01      	subs	r3, #1
 8003074:	b29a      	uxth	r2, r3
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800307a:	2300      	movs	r3, #0
 800307c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	689b      	ldr	r3, [r3, #8]
 8003084:	f003 0301 	and.w	r3, r3, #1
 8003088:	2b01      	cmp	r3, #1
 800308a:	d119      	bne.n	80030c0 <HAL_SPI_TransmitReceive+0x1b8>
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003090:	b29b      	uxth	r3, r3
 8003092:	2b00      	cmp	r3, #0
 8003094:	d014      	beq.n	80030c0 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	68da      	ldr	r2, [r3, #12]
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030a0:	b292      	uxth	r2, r2
 80030a2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030a8:	1c9a      	adds	r2, r3, #2
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80030b2:	b29b      	uxth	r3, r3
 80030b4:	3b01      	subs	r3, #1
 80030b6:	b29a      	uxth	r2, r3
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80030bc:	2301      	movs	r3, #1
 80030be:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80030c0:	f7fe fd8a 	bl	8001bd8 <HAL_GetTick>
 80030c4:	4602      	mov	r2, r0
 80030c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030c8:	1ad3      	subs	r3, r2, r3
 80030ca:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80030cc:	429a      	cmp	r2, r3
 80030ce:	d807      	bhi.n	80030e0 <HAL_SPI_TransmitReceive+0x1d8>
 80030d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030d6:	d003      	beq.n	80030e0 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80030d8:	2303      	movs	r3, #3
 80030da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80030de:	e0a7      	b.n	8003230 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80030e4:	b29b      	uxth	r3, r3
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d1a6      	bne.n	8003038 <HAL_SPI_TransmitReceive+0x130>
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80030ee:	b29b      	uxth	r3, r3
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d1a1      	bne.n	8003038 <HAL_SPI_TransmitReceive+0x130>
 80030f4:	e07c      	b.n	80031f0 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	685b      	ldr	r3, [r3, #4]
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d002      	beq.n	8003104 <HAL_SPI_TransmitReceive+0x1fc>
 80030fe:	8b7b      	ldrh	r3, [r7, #26]
 8003100:	2b01      	cmp	r3, #1
 8003102:	d16b      	bne.n	80031dc <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	330c      	adds	r3, #12
 800310e:	7812      	ldrb	r2, [r2, #0]
 8003110:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003116:	1c5a      	adds	r2, r3, #1
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003120:	b29b      	uxth	r3, r3
 8003122:	3b01      	subs	r3, #1
 8003124:	b29a      	uxth	r2, r3
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800312a:	e057      	b.n	80031dc <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	689b      	ldr	r3, [r3, #8]
 8003132:	f003 0302 	and.w	r3, r3, #2
 8003136:	2b02      	cmp	r3, #2
 8003138:	d11c      	bne.n	8003174 <HAL_SPI_TransmitReceive+0x26c>
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800313e:	b29b      	uxth	r3, r3
 8003140:	2b00      	cmp	r3, #0
 8003142:	d017      	beq.n	8003174 <HAL_SPI_TransmitReceive+0x26c>
 8003144:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003146:	2b01      	cmp	r3, #1
 8003148:	d114      	bne.n	8003174 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	330c      	adds	r3, #12
 8003154:	7812      	ldrb	r2, [r2, #0]
 8003156:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800315c:	1c5a      	adds	r2, r3, #1
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003166:	b29b      	uxth	r3, r3
 8003168:	3b01      	subs	r3, #1
 800316a:	b29a      	uxth	r2, r3
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003170:	2300      	movs	r3, #0
 8003172:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	689b      	ldr	r3, [r3, #8]
 800317a:	f003 0301 	and.w	r3, r3, #1
 800317e:	2b01      	cmp	r3, #1
 8003180:	d119      	bne.n	80031b6 <HAL_SPI_TransmitReceive+0x2ae>
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003186:	b29b      	uxth	r3, r3
 8003188:	2b00      	cmp	r3, #0
 800318a:	d014      	beq.n	80031b6 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	68da      	ldr	r2, [r3, #12]
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003196:	b2d2      	uxtb	r2, r2
 8003198:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800319e:	1c5a      	adds	r2, r3, #1
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80031a8:	b29b      	uxth	r3, r3
 80031aa:	3b01      	subs	r3, #1
 80031ac:	b29a      	uxth	r2, r3
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80031b2:	2301      	movs	r3, #1
 80031b4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80031b6:	f7fe fd0f 	bl	8001bd8 <HAL_GetTick>
 80031ba:	4602      	mov	r2, r0
 80031bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031be:	1ad3      	subs	r3, r2, r3
 80031c0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80031c2:	429a      	cmp	r2, r3
 80031c4:	d803      	bhi.n	80031ce <HAL_SPI_TransmitReceive+0x2c6>
 80031c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031cc:	d102      	bne.n	80031d4 <HAL_SPI_TransmitReceive+0x2cc>
 80031ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d103      	bne.n	80031dc <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80031d4:	2303      	movs	r3, #3
 80031d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80031da:	e029      	b.n	8003230 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80031e0:	b29b      	uxth	r3, r3
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d1a2      	bne.n	800312c <HAL_SPI_TransmitReceive+0x224>
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80031ea:	b29b      	uxth	r3, r3
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d19d      	bne.n	800312c <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80031f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031f2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80031f4:	68f8      	ldr	r0, [r7, #12]
 80031f6:	f000 f8e5 	bl	80033c4 <SPI_EndRxTxTransaction>
 80031fa:	4603      	mov	r3, r0
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d006      	beq.n	800320e <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8003200:	2301      	movs	r3, #1
 8003202:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	2220      	movs	r2, #32
 800320a:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800320c:	e010      	b.n	8003230 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	689b      	ldr	r3, [r3, #8]
 8003212:	2b00      	cmp	r3, #0
 8003214:	d10b      	bne.n	800322e <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003216:	2300      	movs	r3, #0
 8003218:	617b      	str	r3, [r7, #20]
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	68db      	ldr	r3, [r3, #12]
 8003220:	617b      	str	r3, [r7, #20]
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	689b      	ldr	r3, [r3, #8]
 8003228:	617b      	str	r3, [r7, #20]
 800322a:	697b      	ldr	r3, [r7, #20]
 800322c:	e000      	b.n	8003230 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800322e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	2201      	movs	r2, #1
 8003234:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	2200      	movs	r2, #0
 800323c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003240:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8003244:	4618      	mov	r0, r3
 8003246:	3730      	adds	r7, #48	; 0x30
 8003248:	46bd      	mov	sp, r7
 800324a:	bd80      	pop	{r7, pc}

0800324c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800324c:	b580      	push	{r7, lr}
 800324e:	b084      	sub	sp, #16
 8003250:	af00      	add	r7, sp, #0
 8003252:	60f8      	str	r0, [r7, #12]
 8003254:	60b9      	str	r1, [r7, #8]
 8003256:	603b      	str	r3, [r7, #0]
 8003258:	4613      	mov	r3, r2
 800325a:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800325c:	e04c      	b.n	80032f8 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 800325e:	683b      	ldr	r3, [r7, #0]
 8003260:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003264:	d048      	beq.n	80032f8 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8003266:	f7fe fcb7 	bl	8001bd8 <HAL_GetTick>
 800326a:	4602      	mov	r2, r0
 800326c:	69bb      	ldr	r3, [r7, #24]
 800326e:	1ad3      	subs	r3, r2, r3
 8003270:	683a      	ldr	r2, [r7, #0]
 8003272:	429a      	cmp	r2, r3
 8003274:	d902      	bls.n	800327c <SPI_WaitFlagStateUntilTimeout+0x30>
 8003276:	683b      	ldr	r3, [r7, #0]
 8003278:	2b00      	cmp	r3, #0
 800327a:	d13d      	bne.n	80032f8 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	685a      	ldr	r2, [r3, #4]
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800328a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	685b      	ldr	r3, [r3, #4]
 8003290:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003294:	d111      	bne.n	80032ba <SPI_WaitFlagStateUntilTimeout+0x6e>
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	689b      	ldr	r3, [r3, #8]
 800329a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800329e:	d004      	beq.n	80032aa <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	689b      	ldr	r3, [r3, #8]
 80032a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80032a8:	d107      	bne.n	80032ba <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	681a      	ldr	r2, [r3, #0]
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80032b8:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80032c2:	d10f      	bne.n	80032e4 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	681a      	ldr	r2, [r3, #0]
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80032d2:	601a      	str	r2, [r3, #0]
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	681a      	ldr	r2, [r3, #0]
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80032e2:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	2201      	movs	r2, #1
 80032e8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	2200      	movs	r2, #0
 80032f0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80032f4:	2303      	movs	r3, #3
 80032f6:	e00f      	b.n	8003318 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	689a      	ldr	r2, [r3, #8]
 80032fe:	68bb      	ldr	r3, [r7, #8]
 8003300:	4013      	ands	r3, r2
 8003302:	68ba      	ldr	r2, [r7, #8]
 8003304:	429a      	cmp	r2, r3
 8003306:	bf0c      	ite	eq
 8003308:	2301      	moveq	r3, #1
 800330a:	2300      	movne	r3, #0
 800330c:	b2db      	uxtb	r3, r3
 800330e:	461a      	mov	r2, r3
 8003310:	79fb      	ldrb	r3, [r7, #7]
 8003312:	429a      	cmp	r2, r3
 8003314:	d1a3      	bne.n	800325e <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8003316:	2300      	movs	r3, #0
}
 8003318:	4618      	mov	r0, r3
 800331a:	3710      	adds	r7, #16
 800331c:	46bd      	mov	sp, r7
 800331e:	bd80      	pop	{r7, pc}

08003320 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003320:	b580      	push	{r7, lr}
 8003322:	b086      	sub	sp, #24
 8003324:	af02      	add	r7, sp, #8
 8003326:	60f8      	str	r0, [r7, #12]
 8003328:	60b9      	str	r1, [r7, #8]
 800332a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	685b      	ldr	r3, [r3, #4]
 8003330:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003334:	d111      	bne.n	800335a <SPI_EndRxTransaction+0x3a>
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	689b      	ldr	r3, [r3, #8]
 800333a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800333e:	d004      	beq.n	800334a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	689b      	ldr	r3, [r3, #8]
 8003344:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003348:	d107      	bne.n	800335a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	681a      	ldr	r2, [r3, #0]
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003358:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	685b      	ldr	r3, [r3, #4]
 800335e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003362:	d117      	bne.n	8003394 <SPI_EndRxTransaction+0x74>
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	689b      	ldr	r3, [r3, #8]
 8003368:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800336c:	d112      	bne.n	8003394 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	9300      	str	r3, [sp, #0]
 8003372:	68bb      	ldr	r3, [r7, #8]
 8003374:	2200      	movs	r2, #0
 8003376:	2101      	movs	r1, #1
 8003378:	68f8      	ldr	r0, [r7, #12]
 800337a:	f7ff ff67 	bl	800324c <SPI_WaitFlagStateUntilTimeout>
 800337e:	4603      	mov	r3, r0
 8003380:	2b00      	cmp	r3, #0
 8003382:	d01a      	beq.n	80033ba <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003388:	f043 0220 	orr.w	r2, r3, #32
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003390:	2303      	movs	r3, #3
 8003392:	e013      	b.n	80033bc <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	9300      	str	r3, [sp, #0]
 8003398:	68bb      	ldr	r3, [r7, #8]
 800339a:	2200      	movs	r2, #0
 800339c:	2180      	movs	r1, #128	; 0x80
 800339e:	68f8      	ldr	r0, [r7, #12]
 80033a0:	f7ff ff54 	bl	800324c <SPI_WaitFlagStateUntilTimeout>
 80033a4:	4603      	mov	r3, r0
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d007      	beq.n	80033ba <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033ae:	f043 0220 	orr.w	r2, r3, #32
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80033b6:	2303      	movs	r3, #3
 80033b8:	e000      	b.n	80033bc <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 80033ba:	2300      	movs	r3, #0
}
 80033bc:	4618      	mov	r0, r3
 80033be:	3710      	adds	r7, #16
 80033c0:	46bd      	mov	sp, r7
 80033c2:	bd80      	pop	{r7, pc}

080033c4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80033c4:	b580      	push	{r7, lr}
 80033c6:	b086      	sub	sp, #24
 80033c8:	af02      	add	r7, sp, #8
 80033ca:	60f8      	str	r0, [r7, #12]
 80033cc:	60b9      	str	r1, [r7, #8]
 80033ce:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	9300      	str	r3, [sp, #0]
 80033d4:	68bb      	ldr	r3, [r7, #8]
 80033d6:	2200      	movs	r2, #0
 80033d8:	2180      	movs	r1, #128	; 0x80
 80033da:	68f8      	ldr	r0, [r7, #12]
 80033dc:	f7ff ff36 	bl	800324c <SPI_WaitFlagStateUntilTimeout>
 80033e0:	4603      	mov	r3, r0
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d007      	beq.n	80033f6 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033ea:	f043 0220 	orr.w	r2, r3, #32
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 80033f2:	2303      	movs	r3, #3
 80033f4:	e000      	b.n	80033f8 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 80033f6:	2300      	movs	r3, #0
}
 80033f8:	4618      	mov	r0, r3
 80033fa:	3710      	adds	r7, #16
 80033fc:	46bd      	mov	sp, r7
 80033fe:	bd80      	pop	{r7, pc}

08003400 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003400:	b580      	push	{r7, lr}
 8003402:	b082      	sub	sp, #8
 8003404:	af00      	add	r7, sp, #0
 8003406:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	2b00      	cmp	r3, #0
 800340c:	d101      	bne.n	8003412 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800340e:	2301      	movs	r3, #1
 8003410:	e01d      	b.n	800344e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003418:	b2db      	uxtb	r3, r3
 800341a:	2b00      	cmp	r3, #0
 800341c:	d106      	bne.n	800342c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	2200      	movs	r2, #0
 8003422:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003426:	6878      	ldr	r0, [r7, #4]
 8003428:	f000 f815 	bl	8003456 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	2202      	movs	r2, #2
 8003430:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681a      	ldr	r2, [r3, #0]
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	3304      	adds	r3, #4
 800343c:	4619      	mov	r1, r3
 800343e:	4610      	mov	r0, r2
 8003440:	f000 f962 	bl	8003708 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	2201      	movs	r2, #1
 8003448:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800344c:	2300      	movs	r3, #0
}
 800344e:	4618      	mov	r0, r3
 8003450:	3708      	adds	r7, #8
 8003452:	46bd      	mov	sp, r7
 8003454:	bd80      	pop	{r7, pc}

08003456 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003456:	b480      	push	{r7}
 8003458:	b083      	sub	sp, #12
 800345a:	af00      	add	r7, sp, #0
 800345c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800345e:	bf00      	nop
 8003460:	370c      	adds	r7, #12
 8003462:	46bd      	mov	sp, r7
 8003464:	bc80      	pop	{r7}
 8003466:	4770      	bx	lr

08003468 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003468:	b480      	push	{r7}
 800346a:	b085      	sub	sp, #20
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	68da      	ldr	r2, [r3, #12]
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f042 0201 	orr.w	r2, r2, #1
 800347e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	689b      	ldr	r3, [r3, #8]
 8003486:	f003 0307 	and.w	r3, r3, #7
 800348a:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	2b06      	cmp	r3, #6
 8003490:	d007      	beq.n	80034a2 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	681a      	ldr	r2, [r3, #0]
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f042 0201 	orr.w	r2, r2, #1
 80034a0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80034a2:	2300      	movs	r3, #0
}
 80034a4:	4618      	mov	r0, r3
 80034a6:	3714      	adds	r7, #20
 80034a8:	46bd      	mov	sp, r7
 80034aa:	bc80      	pop	{r7}
 80034ac:	4770      	bx	lr

080034ae <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80034ae:	b580      	push	{r7, lr}
 80034b0:	b082      	sub	sp, #8
 80034b2:	af00      	add	r7, sp, #0
 80034b4:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	691b      	ldr	r3, [r3, #16]
 80034bc:	f003 0302 	and.w	r3, r3, #2
 80034c0:	2b02      	cmp	r3, #2
 80034c2:	d122      	bne.n	800350a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	68db      	ldr	r3, [r3, #12]
 80034ca:	f003 0302 	and.w	r3, r3, #2
 80034ce:	2b02      	cmp	r3, #2
 80034d0:	d11b      	bne.n	800350a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f06f 0202 	mvn.w	r2, #2
 80034da:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	2201      	movs	r2, #1
 80034e0:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	699b      	ldr	r3, [r3, #24]
 80034e8:	f003 0303 	and.w	r3, r3, #3
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d003      	beq.n	80034f8 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80034f0:	6878      	ldr	r0, [r7, #4]
 80034f2:	f000 f8ed 	bl	80036d0 <HAL_TIM_IC_CaptureCallback>
 80034f6:	e005      	b.n	8003504 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80034f8:	6878      	ldr	r0, [r7, #4]
 80034fa:	f000 f8e0 	bl	80036be <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80034fe:	6878      	ldr	r0, [r7, #4]
 8003500:	f000 f8ef 	bl	80036e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	2200      	movs	r2, #0
 8003508:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	691b      	ldr	r3, [r3, #16]
 8003510:	f003 0304 	and.w	r3, r3, #4
 8003514:	2b04      	cmp	r3, #4
 8003516:	d122      	bne.n	800355e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	68db      	ldr	r3, [r3, #12]
 800351e:	f003 0304 	and.w	r3, r3, #4
 8003522:	2b04      	cmp	r3, #4
 8003524:	d11b      	bne.n	800355e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f06f 0204 	mvn.w	r2, #4
 800352e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	2202      	movs	r2, #2
 8003534:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	699b      	ldr	r3, [r3, #24]
 800353c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003540:	2b00      	cmp	r3, #0
 8003542:	d003      	beq.n	800354c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003544:	6878      	ldr	r0, [r7, #4]
 8003546:	f000 f8c3 	bl	80036d0 <HAL_TIM_IC_CaptureCallback>
 800354a:	e005      	b.n	8003558 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800354c:	6878      	ldr	r0, [r7, #4]
 800354e:	f000 f8b6 	bl	80036be <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003552:	6878      	ldr	r0, [r7, #4]
 8003554:	f000 f8c5 	bl	80036e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	2200      	movs	r2, #0
 800355c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	691b      	ldr	r3, [r3, #16]
 8003564:	f003 0308 	and.w	r3, r3, #8
 8003568:	2b08      	cmp	r3, #8
 800356a:	d122      	bne.n	80035b2 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	68db      	ldr	r3, [r3, #12]
 8003572:	f003 0308 	and.w	r3, r3, #8
 8003576:	2b08      	cmp	r3, #8
 8003578:	d11b      	bne.n	80035b2 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f06f 0208 	mvn.w	r2, #8
 8003582:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	2204      	movs	r2, #4
 8003588:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	69db      	ldr	r3, [r3, #28]
 8003590:	f003 0303 	and.w	r3, r3, #3
 8003594:	2b00      	cmp	r3, #0
 8003596:	d003      	beq.n	80035a0 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003598:	6878      	ldr	r0, [r7, #4]
 800359a:	f000 f899 	bl	80036d0 <HAL_TIM_IC_CaptureCallback>
 800359e:	e005      	b.n	80035ac <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80035a0:	6878      	ldr	r0, [r7, #4]
 80035a2:	f000 f88c 	bl	80036be <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80035a6:	6878      	ldr	r0, [r7, #4]
 80035a8:	f000 f89b 	bl	80036e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	2200      	movs	r2, #0
 80035b0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	691b      	ldr	r3, [r3, #16]
 80035b8:	f003 0310 	and.w	r3, r3, #16
 80035bc:	2b10      	cmp	r3, #16
 80035be:	d122      	bne.n	8003606 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	68db      	ldr	r3, [r3, #12]
 80035c6:	f003 0310 	and.w	r3, r3, #16
 80035ca:	2b10      	cmp	r3, #16
 80035cc:	d11b      	bne.n	8003606 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f06f 0210 	mvn.w	r2, #16
 80035d6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	2208      	movs	r2, #8
 80035dc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	69db      	ldr	r3, [r3, #28]
 80035e4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d003      	beq.n	80035f4 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80035ec:	6878      	ldr	r0, [r7, #4]
 80035ee:	f000 f86f 	bl	80036d0 <HAL_TIM_IC_CaptureCallback>
 80035f2:	e005      	b.n	8003600 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80035f4:	6878      	ldr	r0, [r7, #4]
 80035f6:	f000 f862 	bl	80036be <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80035fa:	6878      	ldr	r0, [r7, #4]
 80035fc:	f000 f871 	bl	80036e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	2200      	movs	r2, #0
 8003604:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	691b      	ldr	r3, [r3, #16]
 800360c:	f003 0301 	and.w	r3, r3, #1
 8003610:	2b01      	cmp	r3, #1
 8003612:	d10e      	bne.n	8003632 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	68db      	ldr	r3, [r3, #12]
 800361a:	f003 0301 	and.w	r3, r3, #1
 800361e:	2b01      	cmp	r3, #1
 8003620:	d107      	bne.n	8003632 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f06f 0201 	mvn.w	r2, #1
 800362a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800362c:	6878      	ldr	r0, [r7, #4]
 800362e:	f7fd fa47 	bl	8000ac0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	691b      	ldr	r3, [r3, #16]
 8003638:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800363c:	2b80      	cmp	r3, #128	; 0x80
 800363e:	d10e      	bne.n	800365e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	68db      	ldr	r3, [r3, #12]
 8003646:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800364a:	2b80      	cmp	r3, #128	; 0x80
 800364c:	d107      	bne.n	800365e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003656:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003658:	6878      	ldr	r0, [r7, #4]
 800365a:	f000 f8c0 	bl	80037de <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	691b      	ldr	r3, [r3, #16]
 8003664:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003668:	2b40      	cmp	r3, #64	; 0x40
 800366a:	d10e      	bne.n	800368a <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	68db      	ldr	r3, [r3, #12]
 8003672:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003676:	2b40      	cmp	r3, #64	; 0x40
 8003678:	d107      	bne.n	800368a <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003682:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003684:	6878      	ldr	r0, [r7, #4]
 8003686:	f000 f835 	bl	80036f4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	691b      	ldr	r3, [r3, #16]
 8003690:	f003 0320 	and.w	r3, r3, #32
 8003694:	2b20      	cmp	r3, #32
 8003696:	d10e      	bne.n	80036b6 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	68db      	ldr	r3, [r3, #12]
 800369e:	f003 0320 	and.w	r3, r3, #32
 80036a2:	2b20      	cmp	r3, #32
 80036a4:	d107      	bne.n	80036b6 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f06f 0220 	mvn.w	r2, #32
 80036ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80036b0:	6878      	ldr	r0, [r7, #4]
 80036b2:	f000 f88b 	bl	80037cc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80036b6:	bf00      	nop
 80036b8:	3708      	adds	r7, #8
 80036ba:	46bd      	mov	sp, r7
 80036bc:	bd80      	pop	{r7, pc}

080036be <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80036be:	b480      	push	{r7}
 80036c0:	b083      	sub	sp, #12
 80036c2:	af00      	add	r7, sp, #0
 80036c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80036c6:	bf00      	nop
 80036c8:	370c      	adds	r7, #12
 80036ca:	46bd      	mov	sp, r7
 80036cc:	bc80      	pop	{r7}
 80036ce:	4770      	bx	lr

080036d0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80036d0:	b480      	push	{r7}
 80036d2:	b083      	sub	sp, #12
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80036d8:	bf00      	nop
 80036da:	370c      	adds	r7, #12
 80036dc:	46bd      	mov	sp, r7
 80036de:	bc80      	pop	{r7}
 80036e0:	4770      	bx	lr

080036e2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80036e2:	b480      	push	{r7}
 80036e4:	b083      	sub	sp, #12
 80036e6:	af00      	add	r7, sp, #0
 80036e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80036ea:	bf00      	nop
 80036ec:	370c      	adds	r7, #12
 80036ee:	46bd      	mov	sp, r7
 80036f0:	bc80      	pop	{r7}
 80036f2:	4770      	bx	lr

080036f4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80036f4:	b480      	push	{r7}
 80036f6:	b083      	sub	sp, #12
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80036fc:	bf00      	nop
 80036fe:	370c      	adds	r7, #12
 8003700:	46bd      	mov	sp, r7
 8003702:	bc80      	pop	{r7}
 8003704:	4770      	bx	lr
	...

08003708 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003708:	b480      	push	{r7}
 800370a:	b085      	sub	sp, #20
 800370c:	af00      	add	r7, sp, #0
 800370e:	6078      	str	r0, [r7, #4]
 8003710:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	4a29      	ldr	r2, [pc, #164]	; (80037c0 <TIM_Base_SetConfig+0xb8>)
 800371c:	4293      	cmp	r3, r2
 800371e:	d00b      	beq.n	8003738 <TIM_Base_SetConfig+0x30>
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003726:	d007      	beq.n	8003738 <TIM_Base_SetConfig+0x30>
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	4a26      	ldr	r2, [pc, #152]	; (80037c4 <TIM_Base_SetConfig+0xbc>)
 800372c:	4293      	cmp	r3, r2
 800372e:	d003      	beq.n	8003738 <TIM_Base_SetConfig+0x30>
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	4a25      	ldr	r2, [pc, #148]	; (80037c8 <TIM_Base_SetConfig+0xc0>)
 8003734:	4293      	cmp	r3, r2
 8003736:	d108      	bne.n	800374a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800373e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003740:	683b      	ldr	r3, [r7, #0]
 8003742:	685b      	ldr	r3, [r3, #4]
 8003744:	68fa      	ldr	r2, [r7, #12]
 8003746:	4313      	orrs	r3, r2
 8003748:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	4a1c      	ldr	r2, [pc, #112]	; (80037c0 <TIM_Base_SetConfig+0xb8>)
 800374e:	4293      	cmp	r3, r2
 8003750:	d00b      	beq.n	800376a <TIM_Base_SetConfig+0x62>
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003758:	d007      	beq.n	800376a <TIM_Base_SetConfig+0x62>
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	4a19      	ldr	r2, [pc, #100]	; (80037c4 <TIM_Base_SetConfig+0xbc>)
 800375e:	4293      	cmp	r3, r2
 8003760:	d003      	beq.n	800376a <TIM_Base_SetConfig+0x62>
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	4a18      	ldr	r2, [pc, #96]	; (80037c8 <TIM_Base_SetConfig+0xc0>)
 8003766:	4293      	cmp	r3, r2
 8003768:	d108      	bne.n	800377c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003770:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003772:	683b      	ldr	r3, [r7, #0]
 8003774:	68db      	ldr	r3, [r3, #12]
 8003776:	68fa      	ldr	r2, [r7, #12]
 8003778:	4313      	orrs	r3, r2
 800377a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003782:	683b      	ldr	r3, [r7, #0]
 8003784:	695b      	ldr	r3, [r3, #20]
 8003786:	4313      	orrs	r3, r2
 8003788:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	68fa      	ldr	r2, [r7, #12]
 800378e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003790:	683b      	ldr	r3, [r7, #0]
 8003792:	689a      	ldr	r2, [r3, #8]
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003798:	683b      	ldr	r3, [r7, #0]
 800379a:	681a      	ldr	r2, [r3, #0]
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	4a07      	ldr	r2, [pc, #28]	; (80037c0 <TIM_Base_SetConfig+0xb8>)
 80037a4:	4293      	cmp	r3, r2
 80037a6:	d103      	bne.n	80037b0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80037a8:	683b      	ldr	r3, [r7, #0]
 80037aa:	691a      	ldr	r2, [r3, #16]
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	2201      	movs	r2, #1
 80037b4:	615a      	str	r2, [r3, #20]
}
 80037b6:	bf00      	nop
 80037b8:	3714      	adds	r7, #20
 80037ba:	46bd      	mov	sp, r7
 80037bc:	bc80      	pop	{r7}
 80037be:	4770      	bx	lr
 80037c0:	40012c00 	.word	0x40012c00
 80037c4:	40000400 	.word	0x40000400
 80037c8:	40000800 	.word	0x40000800

080037cc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80037cc:	b480      	push	{r7}
 80037ce:	b083      	sub	sp, #12
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80037d4:	bf00      	nop
 80037d6:	370c      	adds	r7, #12
 80037d8:	46bd      	mov	sp, r7
 80037da:	bc80      	pop	{r7}
 80037dc:	4770      	bx	lr

080037de <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80037de:	b480      	push	{r7}
 80037e0:	b083      	sub	sp, #12
 80037e2:	af00      	add	r7, sp, #0
 80037e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80037e6:	bf00      	nop
 80037e8:	370c      	adds	r7, #12
 80037ea:	46bd      	mov	sp, r7
 80037ec:	bc80      	pop	{r7}
 80037ee:	4770      	bx	lr

080037f0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80037f0:	b580      	push	{r7, lr}
 80037f2:	b082      	sub	sp, #8
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d101      	bne.n	8003802 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80037fe:	2301      	movs	r3, #1
 8003800:	e03f      	b.n	8003882 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003808:	b2db      	uxtb	r3, r3
 800380a:	2b00      	cmp	r3, #0
 800380c:	d106      	bne.n	800381c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	2200      	movs	r2, #0
 8003812:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003816:	6878      	ldr	r0, [r7, #4]
 8003818:	f7fe f862 	bl	80018e0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	2224      	movs	r2, #36	; 0x24
 8003820:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	68da      	ldr	r2, [r3, #12]
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003832:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003834:	6878      	ldr	r0, [r7, #4]
 8003836:	f000 f90b 	bl	8003a50 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	691a      	ldr	r2, [r3, #16]
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003848:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	695a      	ldr	r2, [r3, #20]
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003858:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	68da      	ldr	r2, [r3, #12]
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003868:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	2200      	movs	r2, #0
 800386e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	2220      	movs	r2, #32
 8003874:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	2220      	movs	r2, #32
 800387c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8003880:	2300      	movs	r3, #0
}
 8003882:	4618      	mov	r0, r3
 8003884:	3708      	adds	r7, #8
 8003886:	46bd      	mov	sp, r7
 8003888:	bd80      	pop	{r7, pc}

0800388a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800388a:	b580      	push	{r7, lr}
 800388c:	b088      	sub	sp, #32
 800388e:	af02      	add	r7, sp, #8
 8003890:	60f8      	str	r0, [r7, #12]
 8003892:	60b9      	str	r1, [r7, #8]
 8003894:	603b      	str	r3, [r7, #0]
 8003896:	4613      	mov	r3, r2
 8003898:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 800389a:	2300      	movs	r3, #0
 800389c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80038a4:	b2db      	uxtb	r3, r3
 80038a6:	2b20      	cmp	r3, #32
 80038a8:	f040 8083 	bne.w	80039b2 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 80038ac:	68bb      	ldr	r3, [r7, #8]
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d002      	beq.n	80038b8 <HAL_UART_Transmit+0x2e>
 80038b2:	88fb      	ldrh	r3, [r7, #6]
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d101      	bne.n	80038bc <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 80038b8:	2301      	movs	r3, #1
 80038ba:	e07b      	b.n	80039b4 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80038c2:	2b01      	cmp	r3, #1
 80038c4:	d101      	bne.n	80038ca <HAL_UART_Transmit+0x40>
 80038c6:	2302      	movs	r3, #2
 80038c8:	e074      	b.n	80039b4 <HAL_UART_Transmit+0x12a>
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	2201      	movs	r2, #1
 80038ce:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	2200      	movs	r2, #0
 80038d6:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	2221      	movs	r2, #33	; 0x21
 80038dc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80038e0:	f7fe f97a 	bl	8001bd8 <HAL_GetTick>
 80038e4:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	88fa      	ldrh	r2, [r7, #6]
 80038ea:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	88fa      	ldrh	r2, [r7, #6]
 80038f0:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80038f2:	e042      	b.n	800397a <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80038f8:	b29b      	uxth	r3, r3
 80038fa:	3b01      	subs	r3, #1
 80038fc:	b29a      	uxth	r2, r3
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	689b      	ldr	r3, [r3, #8]
 8003906:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800390a:	d122      	bne.n	8003952 <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800390c:	683b      	ldr	r3, [r7, #0]
 800390e:	9300      	str	r3, [sp, #0]
 8003910:	697b      	ldr	r3, [r7, #20]
 8003912:	2200      	movs	r2, #0
 8003914:	2180      	movs	r1, #128	; 0x80
 8003916:	68f8      	ldr	r0, [r7, #12]
 8003918:	f000 f850 	bl	80039bc <UART_WaitOnFlagUntilTimeout>
 800391c:	4603      	mov	r3, r0
 800391e:	2b00      	cmp	r3, #0
 8003920:	d001      	beq.n	8003926 <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 8003922:	2303      	movs	r3, #3
 8003924:	e046      	b.n	80039b4 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8003926:	68bb      	ldr	r3, [r7, #8]
 8003928:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 800392a:	693b      	ldr	r3, [r7, #16]
 800392c:	881b      	ldrh	r3, [r3, #0]
 800392e:	461a      	mov	r2, r3
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003938:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	691b      	ldr	r3, [r3, #16]
 800393e:	2b00      	cmp	r3, #0
 8003940:	d103      	bne.n	800394a <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 8003942:	68bb      	ldr	r3, [r7, #8]
 8003944:	3302      	adds	r3, #2
 8003946:	60bb      	str	r3, [r7, #8]
 8003948:	e017      	b.n	800397a <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 800394a:	68bb      	ldr	r3, [r7, #8]
 800394c:	3301      	adds	r3, #1
 800394e:	60bb      	str	r3, [r7, #8]
 8003950:	e013      	b.n	800397a <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003952:	683b      	ldr	r3, [r7, #0]
 8003954:	9300      	str	r3, [sp, #0]
 8003956:	697b      	ldr	r3, [r7, #20]
 8003958:	2200      	movs	r2, #0
 800395a:	2180      	movs	r1, #128	; 0x80
 800395c:	68f8      	ldr	r0, [r7, #12]
 800395e:	f000 f82d 	bl	80039bc <UART_WaitOnFlagUntilTimeout>
 8003962:	4603      	mov	r3, r0
 8003964:	2b00      	cmp	r3, #0
 8003966:	d001      	beq.n	800396c <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 8003968:	2303      	movs	r3, #3
 800396a:	e023      	b.n	80039b4 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 800396c:	68bb      	ldr	r3, [r7, #8]
 800396e:	1c5a      	adds	r2, r3, #1
 8003970:	60ba      	str	r2, [r7, #8]
 8003972:	781a      	ldrb	r2, [r3, #0]
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800397e:	b29b      	uxth	r3, r3
 8003980:	2b00      	cmp	r3, #0
 8003982:	d1b7      	bne.n	80038f4 <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003984:	683b      	ldr	r3, [r7, #0]
 8003986:	9300      	str	r3, [sp, #0]
 8003988:	697b      	ldr	r3, [r7, #20]
 800398a:	2200      	movs	r2, #0
 800398c:	2140      	movs	r1, #64	; 0x40
 800398e:	68f8      	ldr	r0, [r7, #12]
 8003990:	f000 f814 	bl	80039bc <UART_WaitOnFlagUntilTimeout>
 8003994:	4603      	mov	r3, r0
 8003996:	2b00      	cmp	r3, #0
 8003998:	d001      	beq.n	800399e <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 800399a:	2303      	movs	r3, #3
 800399c:	e00a      	b.n	80039b4 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	2220      	movs	r2, #32
 80039a2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	2200      	movs	r2, #0
 80039aa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 80039ae:	2300      	movs	r3, #0
 80039b0:	e000      	b.n	80039b4 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 80039b2:	2302      	movs	r3, #2
  }
}
 80039b4:	4618      	mov	r0, r3
 80039b6:	3718      	adds	r7, #24
 80039b8:	46bd      	mov	sp, r7
 80039ba:	bd80      	pop	{r7, pc}

080039bc <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80039bc:	b580      	push	{r7, lr}
 80039be:	b084      	sub	sp, #16
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	60f8      	str	r0, [r7, #12]
 80039c4:	60b9      	str	r1, [r7, #8]
 80039c6:	603b      	str	r3, [r7, #0]
 80039c8:	4613      	mov	r3, r2
 80039ca:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80039cc:	e02c      	b.n	8003a28 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80039ce:	69bb      	ldr	r3, [r7, #24]
 80039d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039d4:	d028      	beq.n	8003a28 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80039d6:	69bb      	ldr	r3, [r7, #24]
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d007      	beq.n	80039ec <UART_WaitOnFlagUntilTimeout+0x30>
 80039dc:	f7fe f8fc 	bl	8001bd8 <HAL_GetTick>
 80039e0:	4602      	mov	r2, r0
 80039e2:	683b      	ldr	r3, [r7, #0]
 80039e4:	1ad3      	subs	r3, r2, r3
 80039e6:	69ba      	ldr	r2, [r7, #24]
 80039e8:	429a      	cmp	r2, r3
 80039ea:	d21d      	bcs.n	8003a28 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	68da      	ldr	r2, [r3, #12]
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80039fa:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	695a      	ldr	r2, [r3, #20]
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f022 0201 	bic.w	r2, r2, #1
 8003a0a:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	2220      	movs	r2, #32
 8003a10:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	2220      	movs	r2, #32
 8003a18:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	2200      	movs	r2, #0
 8003a20:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8003a24:	2303      	movs	r3, #3
 8003a26:	e00f      	b.n	8003a48 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	681a      	ldr	r2, [r3, #0]
 8003a2e:	68bb      	ldr	r3, [r7, #8]
 8003a30:	4013      	ands	r3, r2
 8003a32:	68ba      	ldr	r2, [r7, #8]
 8003a34:	429a      	cmp	r2, r3
 8003a36:	bf0c      	ite	eq
 8003a38:	2301      	moveq	r3, #1
 8003a3a:	2300      	movne	r3, #0
 8003a3c:	b2db      	uxtb	r3, r3
 8003a3e:	461a      	mov	r2, r3
 8003a40:	79fb      	ldrb	r3, [r7, #7]
 8003a42:	429a      	cmp	r2, r3
 8003a44:	d0c3      	beq.n	80039ce <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003a46:	2300      	movs	r3, #0
}
 8003a48:	4618      	mov	r0, r3
 8003a4a:	3710      	adds	r7, #16
 8003a4c:	46bd      	mov	sp, r7
 8003a4e:	bd80      	pop	{r7, pc}

08003a50 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003a50:	b580      	push	{r7, lr}
 8003a52:	b084      	sub	sp, #16
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	691b      	ldr	r3, [r3, #16]
 8003a5e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	68da      	ldr	r2, [r3, #12]
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	430a      	orrs	r2, r1
 8003a6c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	689a      	ldr	r2, [r3, #8]
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	691b      	ldr	r3, [r3, #16]
 8003a76:	431a      	orrs	r2, r3
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	695b      	ldr	r3, [r3, #20]
 8003a7c:	4313      	orrs	r3, r2
 8003a7e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	68db      	ldr	r3, [r3, #12]
 8003a86:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003a8a:	f023 030c 	bic.w	r3, r3, #12
 8003a8e:	687a      	ldr	r2, [r7, #4]
 8003a90:	6812      	ldr	r2, [r2, #0]
 8003a92:	68f9      	ldr	r1, [r7, #12]
 8003a94:	430b      	orrs	r3, r1
 8003a96:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	695b      	ldr	r3, [r3, #20]
 8003a9e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	699a      	ldr	r2, [r3, #24]
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	430a      	orrs	r2, r1
 8003aac:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	4a52      	ldr	r2, [pc, #328]	; (8003bfc <UART_SetConfig+0x1ac>)
 8003ab4:	4293      	cmp	r3, r2
 8003ab6:	d14e      	bne.n	8003b56 <UART_SetConfig+0x106>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003ab8:	f7fe ff26 	bl	8002908 <HAL_RCC_GetPCLK2Freq>
 8003abc:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003abe:	68ba      	ldr	r2, [r7, #8]
 8003ac0:	4613      	mov	r3, r2
 8003ac2:	009b      	lsls	r3, r3, #2
 8003ac4:	4413      	add	r3, r2
 8003ac6:	009a      	lsls	r2, r3, #2
 8003ac8:	441a      	add	r2, r3
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	685b      	ldr	r3, [r3, #4]
 8003ace:	009b      	lsls	r3, r3, #2
 8003ad0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ad4:	4a4a      	ldr	r2, [pc, #296]	; (8003c00 <UART_SetConfig+0x1b0>)
 8003ad6:	fba2 2303 	umull	r2, r3, r2, r3
 8003ada:	095b      	lsrs	r3, r3, #5
 8003adc:	0119      	lsls	r1, r3, #4
 8003ade:	68ba      	ldr	r2, [r7, #8]
 8003ae0:	4613      	mov	r3, r2
 8003ae2:	009b      	lsls	r3, r3, #2
 8003ae4:	4413      	add	r3, r2
 8003ae6:	009a      	lsls	r2, r3, #2
 8003ae8:	441a      	add	r2, r3
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	685b      	ldr	r3, [r3, #4]
 8003aee:	009b      	lsls	r3, r3, #2
 8003af0:	fbb2 f2f3 	udiv	r2, r2, r3
 8003af4:	4b42      	ldr	r3, [pc, #264]	; (8003c00 <UART_SetConfig+0x1b0>)
 8003af6:	fba3 0302 	umull	r0, r3, r3, r2
 8003afa:	095b      	lsrs	r3, r3, #5
 8003afc:	2064      	movs	r0, #100	; 0x64
 8003afe:	fb00 f303 	mul.w	r3, r0, r3
 8003b02:	1ad3      	subs	r3, r2, r3
 8003b04:	011b      	lsls	r3, r3, #4
 8003b06:	3332      	adds	r3, #50	; 0x32
 8003b08:	4a3d      	ldr	r2, [pc, #244]	; (8003c00 <UART_SetConfig+0x1b0>)
 8003b0a:	fba2 2303 	umull	r2, r3, r2, r3
 8003b0e:	095b      	lsrs	r3, r3, #5
 8003b10:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003b14:	4419      	add	r1, r3
 8003b16:	68ba      	ldr	r2, [r7, #8]
 8003b18:	4613      	mov	r3, r2
 8003b1a:	009b      	lsls	r3, r3, #2
 8003b1c:	4413      	add	r3, r2
 8003b1e:	009a      	lsls	r2, r3, #2
 8003b20:	441a      	add	r2, r3
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	685b      	ldr	r3, [r3, #4]
 8003b26:	009b      	lsls	r3, r3, #2
 8003b28:	fbb2 f2f3 	udiv	r2, r2, r3
 8003b2c:	4b34      	ldr	r3, [pc, #208]	; (8003c00 <UART_SetConfig+0x1b0>)
 8003b2e:	fba3 0302 	umull	r0, r3, r3, r2
 8003b32:	095b      	lsrs	r3, r3, #5
 8003b34:	2064      	movs	r0, #100	; 0x64
 8003b36:	fb00 f303 	mul.w	r3, r0, r3
 8003b3a:	1ad3      	subs	r3, r2, r3
 8003b3c:	011b      	lsls	r3, r3, #4
 8003b3e:	3332      	adds	r3, #50	; 0x32
 8003b40:	4a2f      	ldr	r2, [pc, #188]	; (8003c00 <UART_SetConfig+0x1b0>)
 8003b42:	fba2 2303 	umull	r2, r3, r2, r3
 8003b46:	095b      	lsrs	r3, r3, #5
 8003b48:	f003 020f 	and.w	r2, r3, #15
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	440a      	add	r2, r1
 8003b52:	609a      	str	r2, [r3, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 8003b54:	e04d      	b.n	8003bf2 <UART_SetConfig+0x1a2>
    pclk = HAL_RCC_GetPCLK1Freq();
 8003b56:	f7fe fec3 	bl	80028e0 <HAL_RCC_GetPCLK1Freq>
 8003b5a:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003b5c:	68ba      	ldr	r2, [r7, #8]
 8003b5e:	4613      	mov	r3, r2
 8003b60:	009b      	lsls	r3, r3, #2
 8003b62:	4413      	add	r3, r2
 8003b64:	009a      	lsls	r2, r3, #2
 8003b66:	441a      	add	r2, r3
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	685b      	ldr	r3, [r3, #4]
 8003b6c:	009b      	lsls	r3, r3, #2
 8003b6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b72:	4a23      	ldr	r2, [pc, #140]	; (8003c00 <UART_SetConfig+0x1b0>)
 8003b74:	fba2 2303 	umull	r2, r3, r2, r3
 8003b78:	095b      	lsrs	r3, r3, #5
 8003b7a:	0119      	lsls	r1, r3, #4
 8003b7c:	68ba      	ldr	r2, [r7, #8]
 8003b7e:	4613      	mov	r3, r2
 8003b80:	009b      	lsls	r3, r3, #2
 8003b82:	4413      	add	r3, r2
 8003b84:	009a      	lsls	r2, r3, #2
 8003b86:	441a      	add	r2, r3
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	685b      	ldr	r3, [r3, #4]
 8003b8c:	009b      	lsls	r3, r3, #2
 8003b8e:	fbb2 f2f3 	udiv	r2, r2, r3
 8003b92:	4b1b      	ldr	r3, [pc, #108]	; (8003c00 <UART_SetConfig+0x1b0>)
 8003b94:	fba3 0302 	umull	r0, r3, r3, r2
 8003b98:	095b      	lsrs	r3, r3, #5
 8003b9a:	2064      	movs	r0, #100	; 0x64
 8003b9c:	fb00 f303 	mul.w	r3, r0, r3
 8003ba0:	1ad3      	subs	r3, r2, r3
 8003ba2:	011b      	lsls	r3, r3, #4
 8003ba4:	3332      	adds	r3, #50	; 0x32
 8003ba6:	4a16      	ldr	r2, [pc, #88]	; (8003c00 <UART_SetConfig+0x1b0>)
 8003ba8:	fba2 2303 	umull	r2, r3, r2, r3
 8003bac:	095b      	lsrs	r3, r3, #5
 8003bae:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003bb2:	4419      	add	r1, r3
 8003bb4:	68ba      	ldr	r2, [r7, #8]
 8003bb6:	4613      	mov	r3, r2
 8003bb8:	009b      	lsls	r3, r3, #2
 8003bba:	4413      	add	r3, r2
 8003bbc:	009a      	lsls	r2, r3, #2
 8003bbe:	441a      	add	r2, r3
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	685b      	ldr	r3, [r3, #4]
 8003bc4:	009b      	lsls	r3, r3, #2
 8003bc6:	fbb2 f2f3 	udiv	r2, r2, r3
 8003bca:	4b0d      	ldr	r3, [pc, #52]	; (8003c00 <UART_SetConfig+0x1b0>)
 8003bcc:	fba3 0302 	umull	r0, r3, r3, r2
 8003bd0:	095b      	lsrs	r3, r3, #5
 8003bd2:	2064      	movs	r0, #100	; 0x64
 8003bd4:	fb00 f303 	mul.w	r3, r0, r3
 8003bd8:	1ad3      	subs	r3, r2, r3
 8003bda:	011b      	lsls	r3, r3, #4
 8003bdc:	3332      	adds	r3, #50	; 0x32
 8003bde:	4a08      	ldr	r2, [pc, #32]	; (8003c00 <UART_SetConfig+0x1b0>)
 8003be0:	fba2 2303 	umull	r2, r3, r2, r3
 8003be4:	095b      	lsrs	r3, r3, #5
 8003be6:	f003 020f 	and.w	r2, r3, #15
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	440a      	add	r2, r1
 8003bf0:	609a      	str	r2, [r3, #8]
}
 8003bf2:	bf00      	nop
 8003bf4:	3710      	adds	r7, #16
 8003bf6:	46bd      	mov	sp, r7
 8003bf8:	bd80      	pop	{r7, pc}
 8003bfa:	bf00      	nop
 8003bfc:	40013800 	.word	0x40013800
 8003c00:	51eb851f 	.word	0x51eb851f

08003c04 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8003c04:	b480      	push	{r7}
 8003c06:	b085      	sub	sp, #20
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	4603      	mov	r3, r0
 8003c0c:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8003c0e:	2300      	movs	r3, #0
 8003c10:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8003c12:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003c16:	2b84      	cmp	r3, #132	; 0x84
 8003c18:	d005      	beq.n	8003c26 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8003c1a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	4413      	add	r3, r2
 8003c22:	3303      	adds	r3, #3
 8003c24:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8003c26:	68fb      	ldr	r3, [r7, #12]
}
 8003c28:	4618      	mov	r0, r3
 8003c2a:	3714      	adds	r7, #20
 8003c2c:	46bd      	mov	sp, r7
 8003c2e:	bc80      	pop	{r7}
 8003c30:	4770      	bx	lr

08003c32 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8003c32:	b480      	push	{r7}
 8003c34:	b083      	sub	sp, #12
 8003c36:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003c38:	f3ef 8305 	mrs	r3, IPSR
 8003c3c:	607b      	str	r3, [r7, #4]
  return(result);
 8003c3e:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	bf14      	ite	ne
 8003c44:	2301      	movne	r3, #1
 8003c46:	2300      	moveq	r3, #0
 8003c48:	b2db      	uxtb	r3, r3
}
 8003c4a:	4618      	mov	r0, r3
 8003c4c:	370c      	adds	r7, #12
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	bc80      	pop	{r7}
 8003c52:	4770      	bx	lr

08003c54 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8003c54:	b580      	push	{r7, lr}
 8003c56:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8003c58:	f001 fbec 	bl	8005434 <vTaskStartScheduler>
  
  return osOK;
 8003c5c:	2300      	movs	r3, #0
}
 8003c5e:	4618      	mov	r0, r3
 8003c60:	bd80      	pop	{r7, pc}

08003c62 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8003c62:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003c64:	b089      	sub	sp, #36	; 0x24
 8003c66:	af04      	add	r7, sp, #16
 8003c68:	6078      	str	r0, [r7, #4]
 8003c6a:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	695b      	ldr	r3, [r3, #20]
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d020      	beq.n	8003cb6 <osThreadCreate+0x54>
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	699b      	ldr	r3, [r3, #24]
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d01c      	beq.n	8003cb6 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	685c      	ldr	r4, [r3, #4]
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681d      	ldr	r5, [r3, #0]
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	691e      	ldr	r6, [r3, #16]
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003c8e:	4618      	mov	r0, r3
 8003c90:	f7ff ffb8 	bl	8003c04 <makeFreeRtosPriority>
 8003c94:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	695b      	ldr	r3, [r3, #20]
 8003c9a:	687a      	ldr	r2, [r7, #4]
 8003c9c:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003c9e:	9202      	str	r2, [sp, #8]
 8003ca0:	9301      	str	r3, [sp, #4]
 8003ca2:	9100      	str	r1, [sp, #0]
 8003ca4:	683b      	ldr	r3, [r7, #0]
 8003ca6:	4632      	mov	r2, r6
 8003ca8:	4629      	mov	r1, r5
 8003caa:	4620      	mov	r0, r4
 8003cac:	f001 fa0e 	bl	80050cc <xTaskCreateStatic>
 8003cb0:	4603      	mov	r3, r0
 8003cb2:	60fb      	str	r3, [r7, #12]
 8003cb4:	e01c      	b.n	8003cf0 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	685c      	ldr	r4, [r3, #4]
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003cc2:	b29e      	uxth	r6, r3
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003cca:	4618      	mov	r0, r3
 8003ccc:	f7ff ff9a 	bl	8003c04 <makeFreeRtosPriority>
 8003cd0:	4602      	mov	r2, r0
 8003cd2:	f107 030c 	add.w	r3, r7, #12
 8003cd6:	9301      	str	r3, [sp, #4]
 8003cd8:	9200      	str	r2, [sp, #0]
 8003cda:	683b      	ldr	r3, [r7, #0]
 8003cdc:	4632      	mov	r2, r6
 8003cde:	4629      	mov	r1, r5
 8003ce0:	4620      	mov	r0, r4
 8003ce2:	f001 fa4c 	bl	800517e <xTaskCreate>
 8003ce6:	4603      	mov	r3, r0
 8003ce8:	2b01      	cmp	r3, #1
 8003cea:	d001      	beq.n	8003cf0 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8003cec:	2300      	movs	r3, #0
 8003cee:	e000      	b.n	8003cf2 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8003cf0:	68fb      	ldr	r3, [r7, #12]
}
 8003cf2:	4618      	mov	r0, r3
 8003cf4:	3714      	adds	r7, #20
 8003cf6:	46bd      	mov	sp, r7
 8003cf8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08003cfc <osThreadYield>:
* @brief  Pass control to next thread that is in state \b READY.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osThreadYield shall be consistent in every CMSIS-RTOS.
*/
osStatus osThreadYield (void)
{
 8003cfc:	b480      	push	{r7}
 8003cfe:	af00      	add	r7, sp, #0
  taskYIELD();
 8003d00:	4b06      	ldr	r3, [pc, #24]	; (8003d1c <osThreadYield+0x20>)
 8003d02:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003d06:	601a      	str	r2, [r3, #0]
 8003d08:	f3bf 8f4f 	dsb	sy
 8003d0c:	f3bf 8f6f 	isb	sy
  
  return osOK;
 8003d10:	2300      	movs	r3, #0
}
 8003d12:	4618      	mov	r0, r3
 8003d14:	46bd      	mov	sp, r7
 8003d16:	bc80      	pop	{r7}
 8003d18:	4770      	bx	lr
 8003d1a:	bf00      	nop
 8003d1c:	e000ed04 	.word	0xe000ed04

08003d20 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8003d20:	b580      	push	{r7, lr}
 8003d22:	b084      	sub	sp, #16
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d001      	beq.n	8003d36 <osDelay+0x16>
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	e000      	b.n	8003d38 <osDelay+0x18>
 8003d36:	2301      	movs	r3, #1
 8003d38:	4618      	mov	r0, r3
 8003d3a:	f001 fb47 	bl	80053cc <vTaskDelay>
  
  return osOK;
 8003d3e:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8003d40:	4618      	mov	r0, r3
 8003d42:	3710      	adds	r7, #16
 8003d44:	46bd      	mov	sp, r7
 8003d46:	bd80      	pop	{r7, pc}

08003d48 <osTimerCreate>:
* @param  argument      argument to the timer call back function.
* @retval  timer ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osTimerCreate shall be consistent in every CMSIS-RTOS.
*/
osTimerId osTimerCreate (const osTimerDef_t *timer_def, os_timer_type type, void *argument)
{
 8003d48:	b580      	push	{r7, lr}
 8003d4a:	b086      	sub	sp, #24
 8003d4c:	af02      	add	r7, sp, #8
 8003d4e:	60f8      	str	r0, [r7, #12]
 8003d50:	460b      	mov	r3, r1
 8003d52:	607a      	str	r2, [r7, #4]
 8003d54:	72fb      	strb	r3, [r7, #11]
#if (configUSE_TIMERS == 1)

#if( ( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) 
  if(timer_def->controlblock != NULL) {
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	685b      	ldr	r3, [r3, #4]
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d013      	beq.n	8003d86 <osTimerCreate+0x3e>
    return xTimerCreateStatic((const char *)"",
 8003d5e:	7afb      	ldrb	r3, [r7, #11]
 8003d60:	2b01      	cmp	r3, #1
 8003d62:	d101      	bne.n	8003d68 <osTimerCreate+0x20>
 8003d64:	2101      	movs	r1, #1
 8003d66:	e000      	b.n	8003d6a <osTimerCreate+0x22>
 8003d68:	2100      	movs	r1, #0
                      1, // period should be filled when starting the Timer using osTimerStart
                      (type == osTimerPeriodic) ? pdTRUE : pdFALSE,
                      (void *) argument,
                      (TaskFunction_t)timer_def->ptimer,
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	681b      	ldr	r3, [r3, #0]
                      (StaticTimer_t *)timer_def->controlblock);
 8003d6e:	68fa      	ldr	r2, [r7, #12]
 8003d70:	6852      	ldr	r2, [r2, #4]
    return xTimerCreateStatic((const char *)"",
 8003d72:	9201      	str	r2, [sp, #4]
 8003d74:	9300      	str	r3, [sp, #0]
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	460a      	mov	r2, r1
 8003d7a:	2101      	movs	r1, #1
 8003d7c:	480b      	ldr	r0, [pc, #44]	; (8003dac <osTimerCreate+0x64>)
 8003d7e:	f002 fa2c 	bl	80061da <xTimerCreateStatic>
 8003d82:	4603      	mov	r3, r0
 8003d84:	e00e      	b.n	8003da4 <osTimerCreate+0x5c>
  }
  else {
    return xTimerCreate((const char *)"",
 8003d86:	7afb      	ldrb	r3, [r7, #11]
 8003d88:	2b01      	cmp	r3, #1
 8003d8a:	d101      	bne.n	8003d90 <osTimerCreate+0x48>
 8003d8c:	2201      	movs	r2, #1
 8003d8e:	e000      	b.n	8003d92 <osTimerCreate+0x4a>
 8003d90:	2200      	movs	r2, #0
                      1, // period should be filled when starting the Timer using osTimerStart
                      (type == osTimerPeriodic) ? pdTRUE : pdFALSE,
                      (void *) argument,
                      (TaskFunction_t)timer_def->ptimer);
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	681b      	ldr	r3, [r3, #0]
    return xTimerCreate((const char *)"",
 8003d96:	9300      	str	r3, [sp, #0]
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	2101      	movs	r1, #1
 8003d9c:	4803      	ldr	r0, [pc, #12]	; (8003dac <osTimerCreate+0x64>)
 8003d9e:	f002 f9fb 	bl	8006198 <xTimerCreate>
 8003da2:	4603      	mov	r3, r0
#endif

#else 
	return NULL;
#endif
}
 8003da4:	4618      	mov	r0, r3
 8003da6:	3710      	adds	r7, #16
 8003da8:	46bd      	mov	sp, r7
 8003daa:	bd80      	pop	{r7, pc}
 8003dac:	08007a20 	.word	0x08007a20

08003db0 <osTimerStart>:
* @param  millisec      time delay value of the timer.
* @retval  status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osTimerStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osTimerStart (osTimerId timer_id, uint32_t millisec)
{
 8003db0:	b580      	push	{r7, lr}
 8003db2:	b088      	sub	sp, #32
 8003db4:	af02      	add	r7, sp, #8
 8003db6:	6078      	str	r0, [r7, #4]
 8003db8:	6039      	str	r1, [r7, #0]
  osStatus result = osOK;
 8003dba:	2300      	movs	r3, #0
 8003dbc:	617b      	str	r3, [r7, #20]
#if (configUSE_TIMERS == 1)  
  portBASE_TYPE taskWoken = pdFALSE;
 8003dbe:	2300      	movs	r3, #0
 8003dc0:	60fb      	str	r3, [r7, #12]
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8003dc2:	683b      	ldr	r3, [r7, #0]
 8003dc4:	613b      	str	r3, [r7, #16]

  if (ticks == 0)
 8003dc6:	693b      	ldr	r3, [r7, #16]
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d101      	bne.n	8003dd0 <osTimerStart+0x20>
    ticks = 1;
 8003dcc:	2301      	movs	r3, #1
 8003dce:	613b      	str	r3, [r7, #16]
    
  if (inHandlerMode()) 
 8003dd0:	f7ff ff2f 	bl	8003c32 <inHandlerMode>
 8003dd4:	4603      	mov	r3, r0
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d01b      	beq.n	8003e12 <osTimerStart+0x62>
  {
    if (xTimerChangePeriodFromISR(timer_id, ticks, &taskWoken) != pdPASS)
 8003dda:	f107 020c 	add.w	r2, r7, #12
 8003dde:	2300      	movs	r3, #0
 8003de0:	9300      	str	r3, [sp, #0]
 8003de2:	4613      	mov	r3, r2
 8003de4:	693a      	ldr	r2, [r7, #16]
 8003de6:	2109      	movs	r1, #9
 8003de8:	6878      	ldr	r0, [r7, #4]
 8003dea:	f002 fa63 	bl	80062b4 <xTimerGenericCommand>
 8003dee:	4603      	mov	r3, r0
 8003df0:	2b01      	cmp	r3, #1
 8003df2:	d002      	beq.n	8003dfa <osTimerStart+0x4a>
    {
      result = osErrorOS;
 8003df4:	23ff      	movs	r3, #255	; 0xff
 8003df6:	617b      	str	r3, [r7, #20]
 8003df8:	e018      	b.n	8003e2c <osTimerStart+0x7c>
    }
    else
    {
      portEND_SWITCHING_ISR(taskWoken);     
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d015      	beq.n	8003e2c <osTimerStart+0x7c>
 8003e00:	4b0d      	ldr	r3, [pc, #52]	; (8003e38 <osTimerStart+0x88>)
 8003e02:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003e06:	601a      	str	r2, [r3, #0]
 8003e08:	f3bf 8f4f 	dsb	sy
 8003e0c:	f3bf 8f6f 	isb	sy
 8003e10:	e00c      	b.n	8003e2c <osTimerStart+0x7c>
    }
  }
  else 
  {
    if (xTimerChangePeriod(timer_id, ticks, 0) != pdPASS)
 8003e12:	2300      	movs	r3, #0
 8003e14:	9300      	str	r3, [sp, #0]
 8003e16:	2300      	movs	r3, #0
 8003e18:	693a      	ldr	r2, [r7, #16]
 8003e1a:	2104      	movs	r1, #4
 8003e1c:	6878      	ldr	r0, [r7, #4]
 8003e1e:	f002 fa49 	bl	80062b4 <xTimerGenericCommand>
 8003e22:	4603      	mov	r3, r0
 8003e24:	2b01      	cmp	r3, #1
 8003e26:	d001      	beq.n	8003e2c <osTimerStart+0x7c>
      result = osErrorOS;
 8003e28:	23ff      	movs	r3, #255	; 0xff
 8003e2a:	617b      	str	r3, [r7, #20]
  }

#else 
  result = osErrorOS;
#endif
  return result;
 8003e2c:	697b      	ldr	r3, [r7, #20]
}
 8003e2e:	4618      	mov	r0, r3
 8003e30:	3718      	adds	r7, #24
 8003e32:	46bd      	mov	sp, r7
 8003e34:	bd80      	pop	{r7, pc}
 8003e36:	bf00      	nop
 8003e38:	e000ed04 	.word	0xe000ed04

08003e3c <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 8003e3c:	b580      	push	{r7, lr}
 8003e3e:	b082      	sub	sp, #8
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	685b      	ldr	r3, [r3, #4]
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d007      	beq.n	8003e5c <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	685b      	ldr	r3, [r3, #4]
 8003e50:	4619      	mov	r1, r3
 8003e52:	2001      	movs	r0, #1
 8003e54:	f000 fb51 	bl	80044fa <xQueueCreateMutexStatic>
 8003e58:	4603      	mov	r3, r0
 8003e5a:	e003      	b.n	8003e64 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 8003e5c:	2001      	movs	r0, #1
 8003e5e:	f000 fb34 	bl	80044ca <xQueueCreateMutex>
 8003e62:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 8003e64:	4618      	mov	r0, r3
 8003e66:	3708      	adds	r7, #8
 8003e68:	46bd      	mov	sp, r7
 8003e6a:	bd80      	pop	{r7, pc}

08003e6c <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8003e6c:	b580      	push	{r7, lr}
 8003e6e:	b086      	sub	sp, #24
 8003e70:	af02      	add	r7, sp, #8
 8003e72:	6078      	str	r0, [r7, #4]
 8003e74:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	685b      	ldr	r3, [r3, #4]
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d010      	beq.n	8003ea0 <osSemaphoreCreate+0x34>
    if (count == 1) {
 8003e7e:	683b      	ldr	r3, [r7, #0]
 8003e80:	2b01      	cmp	r3, #1
 8003e82:	d10b      	bne.n	8003e9c <osSemaphoreCreate+0x30>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	685a      	ldr	r2, [r3, #4]
 8003e88:	2303      	movs	r3, #3
 8003e8a:	9300      	str	r3, [sp, #0]
 8003e8c:	4613      	mov	r3, r2
 8003e8e:	2200      	movs	r2, #0
 8003e90:	2100      	movs	r1, #0
 8003e92:	2001      	movs	r0, #1
 8003e94:	f000 fa31 	bl	80042fa <xQueueGenericCreateStatic>
 8003e98:	4603      	mov	r3, r0
 8003e9a:	e016      	b.n	8003eca <osSemaphoreCreate+0x5e>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 8003e9c:	2300      	movs	r3, #0
 8003e9e:	e014      	b.n	8003eca <osSemaphoreCreate+0x5e>
#endif
    }
  }
  else {
    if (count == 1) {
 8003ea0:	683b      	ldr	r3, [r7, #0]
 8003ea2:	2b01      	cmp	r3, #1
 8003ea4:	d110      	bne.n	8003ec8 <osSemaphoreCreate+0x5c>
      vSemaphoreCreateBinary(sema);
 8003ea6:	2203      	movs	r2, #3
 8003ea8:	2100      	movs	r1, #0
 8003eaa:	2001      	movs	r0, #1
 8003eac:	f000 fa97 	bl	80043de <xQueueGenericCreate>
 8003eb0:	60f8      	str	r0, [r7, #12]
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d005      	beq.n	8003ec4 <osSemaphoreCreate+0x58>
 8003eb8:	2300      	movs	r3, #0
 8003eba:	2200      	movs	r2, #0
 8003ebc:	2100      	movs	r1, #0
 8003ebe:	68f8      	ldr	r0, [r7, #12]
 8003ec0:	f000 fb36 	bl	8004530 <xQueueGenericSend>
      return sema;
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	e000      	b.n	8003eca <osSemaphoreCreate+0x5e>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 8003ec8:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 8003eca:	4618      	mov	r0, r3
 8003ecc:	3710      	adds	r7, #16
 8003ece:	46bd      	mov	sp, r7
 8003ed0:	bd80      	pop	{r7, pc}
	...

08003ed4 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8003ed4:	b580      	push	{r7, lr}
 8003ed6:	b084      	sub	sp, #16
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	6078      	str	r0, [r7, #4]
 8003edc:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8003ede:	2300      	movs	r3, #0
 8003ee0:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d101      	bne.n	8003eec <osSemaphoreWait+0x18>
    return osErrorParameter;
 8003ee8:	2380      	movs	r3, #128	; 0x80
 8003eea:	e03a      	b.n	8003f62 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 8003eec:	2300      	movs	r3, #0
 8003eee:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8003ef0:	683b      	ldr	r3, [r7, #0]
 8003ef2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ef6:	d103      	bne.n	8003f00 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 8003ef8:	f04f 33ff 	mov.w	r3, #4294967295
 8003efc:	60fb      	str	r3, [r7, #12]
 8003efe:	e009      	b.n	8003f14 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 8003f00:	683b      	ldr	r3, [r7, #0]
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d006      	beq.n	8003f14 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8003f06:	683b      	ldr	r3, [r7, #0]
 8003f08:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d101      	bne.n	8003f14 <osSemaphoreWait+0x40>
      ticks = 1;
 8003f10:	2301      	movs	r3, #1
 8003f12:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8003f14:	f7ff fe8d 	bl	8003c32 <inHandlerMode>
 8003f18:	4603      	mov	r3, r0
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d017      	beq.n	8003f4e <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8003f1e:	f107 0308 	add.w	r3, r7, #8
 8003f22:	461a      	mov	r2, r3
 8003f24:	2100      	movs	r1, #0
 8003f26:	6878      	ldr	r0, [r7, #4]
 8003f28:	f000 fed0 	bl	8004ccc <xQueueReceiveFromISR>
 8003f2c:	4603      	mov	r3, r0
 8003f2e:	2b01      	cmp	r3, #1
 8003f30:	d001      	beq.n	8003f36 <osSemaphoreWait+0x62>
      return osErrorOS;
 8003f32:	23ff      	movs	r3, #255	; 0xff
 8003f34:	e015      	b.n	8003f62 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8003f36:	68bb      	ldr	r3, [r7, #8]
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d011      	beq.n	8003f60 <osSemaphoreWait+0x8c>
 8003f3c:	4b0b      	ldr	r3, [pc, #44]	; (8003f6c <osSemaphoreWait+0x98>)
 8003f3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003f42:	601a      	str	r2, [r3, #0]
 8003f44:	f3bf 8f4f 	dsb	sy
 8003f48:	f3bf 8f6f 	isb	sy
 8003f4c:	e008      	b.n	8003f60 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 8003f4e:	68f9      	ldr	r1, [r7, #12]
 8003f50:	6878      	ldr	r0, [r7, #4]
 8003f52:	f000 fdbf 	bl	8004ad4 <xQueueSemaphoreTake>
 8003f56:	4603      	mov	r3, r0
 8003f58:	2b01      	cmp	r3, #1
 8003f5a:	d001      	beq.n	8003f60 <osSemaphoreWait+0x8c>
    return osErrorOS;
 8003f5c:	23ff      	movs	r3, #255	; 0xff
 8003f5e:	e000      	b.n	8003f62 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 8003f60:	2300      	movs	r3, #0
}
 8003f62:	4618      	mov	r0, r3
 8003f64:	3710      	adds	r7, #16
 8003f66:	46bd      	mov	sp, r7
 8003f68:	bd80      	pop	{r7, pc}
 8003f6a:	bf00      	nop
 8003f6c:	e000ed04 	.word	0xe000ed04

08003f70 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8003f70:	b580      	push	{r7, lr}
 8003f72:	b084      	sub	sp, #16
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8003f78:	2300      	movs	r3, #0
 8003f7a:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8003f7c:	2300      	movs	r3, #0
 8003f7e:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 8003f80:	f7ff fe57 	bl	8003c32 <inHandlerMode>
 8003f84:	4603      	mov	r3, r0
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d016      	beq.n	8003fb8 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8003f8a:	f107 0308 	add.w	r3, r7, #8
 8003f8e:	4619      	mov	r1, r3
 8003f90:	6878      	ldr	r0, [r7, #4]
 8003f92:	f000 fc43 	bl	800481c <xQueueGiveFromISR>
 8003f96:	4603      	mov	r3, r0
 8003f98:	2b01      	cmp	r3, #1
 8003f9a:	d001      	beq.n	8003fa0 <osSemaphoreRelease+0x30>
      return osErrorOS;
 8003f9c:	23ff      	movs	r3, #255	; 0xff
 8003f9e:	e017      	b.n	8003fd0 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8003fa0:	68bb      	ldr	r3, [r7, #8]
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d013      	beq.n	8003fce <osSemaphoreRelease+0x5e>
 8003fa6:	4b0c      	ldr	r3, [pc, #48]	; (8003fd8 <osSemaphoreRelease+0x68>)
 8003fa8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003fac:	601a      	str	r2, [r3, #0]
 8003fae:	f3bf 8f4f 	dsb	sy
 8003fb2:	f3bf 8f6f 	isb	sy
 8003fb6:	e00a      	b.n	8003fce <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 8003fb8:	2300      	movs	r3, #0
 8003fba:	2200      	movs	r2, #0
 8003fbc:	2100      	movs	r1, #0
 8003fbe:	6878      	ldr	r0, [r7, #4]
 8003fc0:	f000 fab6 	bl	8004530 <xQueueGenericSend>
 8003fc4:	4603      	mov	r3, r0
 8003fc6:	2b01      	cmp	r3, #1
 8003fc8:	d001      	beq.n	8003fce <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 8003fca:	23ff      	movs	r3, #255	; 0xff
 8003fcc:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 8003fce:	68fb      	ldr	r3, [r7, #12]
}
 8003fd0:	4618      	mov	r0, r3
 8003fd2:	3710      	adds	r7, #16
 8003fd4:	46bd      	mov	sp, r7
 8003fd6:	bd80      	pop	{r7, pc}
 8003fd8:	e000ed04 	.word	0xe000ed04

08003fdc <osPoolCreate>:
* @param  pool_def      memory pool definition referenced with \ref osPool.
* @retval  memory pool ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osPoolCreate shall be consistent in every CMSIS-RTOS.
*/
osPoolId osPoolCreate (const osPoolDef_t *pool_def)
{
 8003fdc:	b580      	push	{r7, lr}
 8003fde:	b086      	sub	sp, #24
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	6078      	str	r0, [r7, #4]
#if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
  osPoolId thePool;
  int itemSize = 4 * ((pool_def->item_sz + 3) / 4);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	685b      	ldr	r3, [r3, #4]
 8003fe8:	3303      	adds	r3, #3
 8003fea:	f023 0303 	bic.w	r3, r3, #3
 8003fee:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  
  /* First have to allocate memory for the pool control block. */
 thePool = pvPortMalloc(sizeof(os_pool_cb_t));
 8003ff0:	2014      	movs	r0, #20
 8003ff2:	f002 fde7 	bl	8006bc4 <pvPortMalloc>
 8003ff6:	6178      	str	r0, [r7, #20]

  
  if (thePool) {
 8003ff8:	697b      	ldr	r3, [r7, #20]
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d046      	beq.n	800408c <osPoolCreate+0xb0>
    thePool->pool_sz = pool_def->pool_sz;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681a      	ldr	r2, [r3, #0]
 8004002:	697b      	ldr	r3, [r7, #20]
 8004004:	609a      	str	r2, [r3, #8]
    thePool->item_sz = itemSize;
 8004006:	68fa      	ldr	r2, [r7, #12]
 8004008:	697b      	ldr	r3, [r7, #20]
 800400a:	60da      	str	r2, [r3, #12]
    thePool->currentIndex = 0;
 800400c:	697b      	ldr	r3, [r7, #20]
 800400e:	2200      	movs	r2, #0
 8004010:	611a      	str	r2, [r3, #16]
    
    /* Memory for markers */
    thePool->markers = pvPortMalloc(pool_def->pool_sz);
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	4618      	mov	r0, r3
 8004018:	f002 fdd4 	bl	8006bc4 <pvPortMalloc>
 800401c:	4602      	mov	r2, r0
 800401e:	697b      	ldr	r3, [r7, #20]
 8004020:	605a      	str	r2, [r3, #4]
   
    if (thePool->markers) {
 8004022:	697b      	ldr	r3, [r7, #20]
 8004024:	685b      	ldr	r3, [r3, #4]
 8004026:	2b00      	cmp	r3, #0
 8004028:	d02b      	beq.n	8004082 <osPoolCreate+0xa6>
      /* Now allocate the pool itself. */
     thePool->pool = pvPortMalloc(pool_def->pool_sz * itemSize);
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	68fa      	ldr	r2, [r7, #12]
 8004030:	fb02 f303 	mul.w	r3, r2, r3
 8004034:	4618      	mov	r0, r3
 8004036:	f002 fdc5 	bl	8006bc4 <pvPortMalloc>
 800403a:	4602      	mov	r2, r0
 800403c:	697b      	ldr	r3, [r7, #20]
 800403e:	601a      	str	r2, [r3, #0]
      
      if (thePool->pool) {
 8004040:	697b      	ldr	r3, [r7, #20]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	2b00      	cmp	r3, #0
 8004046:	d011      	beq.n	800406c <osPoolCreate+0x90>
        for (i = 0; i < pool_def->pool_sz; i++) {
 8004048:	2300      	movs	r3, #0
 800404a:	613b      	str	r3, [r7, #16]
 800404c:	e008      	b.n	8004060 <osPoolCreate+0x84>
          thePool->markers[i] = 0;
 800404e:	697b      	ldr	r3, [r7, #20]
 8004050:	685a      	ldr	r2, [r3, #4]
 8004052:	693b      	ldr	r3, [r7, #16]
 8004054:	4413      	add	r3, r2
 8004056:	2200      	movs	r2, #0
 8004058:	701a      	strb	r2, [r3, #0]
        for (i = 0; i < pool_def->pool_sz; i++) {
 800405a:	693b      	ldr	r3, [r7, #16]
 800405c:	3301      	adds	r3, #1
 800405e:	613b      	str	r3, [r7, #16]
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	693a      	ldr	r2, [r7, #16]
 8004066:	429a      	cmp	r2, r3
 8004068:	d3f1      	bcc.n	800404e <osPoolCreate+0x72>
 800406a:	e00f      	b.n	800408c <osPoolCreate+0xb0>
        }
      }
      else {
        vPortFree(thePool->markers);
 800406c:	697b      	ldr	r3, [r7, #20]
 800406e:	685b      	ldr	r3, [r3, #4]
 8004070:	4618      	mov	r0, r3
 8004072:	f002 fe6d 	bl	8006d50 <vPortFree>
        vPortFree(thePool);
 8004076:	6978      	ldr	r0, [r7, #20]
 8004078:	f002 fe6a 	bl	8006d50 <vPortFree>
        thePool = NULL;
 800407c:	2300      	movs	r3, #0
 800407e:	617b      	str	r3, [r7, #20]
 8004080:	e004      	b.n	800408c <osPoolCreate+0xb0>
      }
    }
    else {
      vPortFree(thePool);
 8004082:	6978      	ldr	r0, [r7, #20]
 8004084:	f002 fe64 	bl	8006d50 <vPortFree>
      thePool = NULL;
 8004088:	2300      	movs	r3, #0
 800408a:	617b      	str	r3, [r7, #20]
    }
  }

  return thePool;
 800408c:	697b      	ldr	r3, [r7, #20]
 
#else
  return NULL;
#endif
}
 800408e:	4618      	mov	r0, r3
 8004090:	3718      	adds	r7, #24
 8004092:	46bd      	mov	sp, r7
 8004094:	bd80      	pop	{r7, pc}

08004096 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8004096:	b590      	push	{r4, r7, lr}
 8004098:	b085      	sub	sp, #20
 800409a:	af02      	add	r7, sp, #8
 800409c:	6078      	str	r0, [r7, #4]
 800409e:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	689b      	ldr	r3, [r3, #8]
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d012      	beq.n	80040ce <osMessageCreate+0x38>
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	68db      	ldr	r3, [r3, #12]
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d00e      	beq.n	80040ce <osMessageCreate+0x38>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	6818      	ldr	r0, [r3, #0]
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	6859      	ldr	r1, [r3, #4]
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	689a      	ldr	r2, [r3, #8]
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	68dc      	ldr	r4, [r3, #12]
 80040c0:	2300      	movs	r3, #0
 80040c2:	9300      	str	r3, [sp, #0]
 80040c4:	4623      	mov	r3, r4
 80040c6:	f000 f918 	bl	80042fa <xQueueGenericCreateStatic>
 80040ca:	4603      	mov	r3, r0
 80040cc:	e008      	b.n	80040e0 <osMessageCreate+0x4a>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	6818      	ldr	r0, [r3, #0]
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	685b      	ldr	r3, [r3, #4]
 80040d6:	2200      	movs	r2, #0
 80040d8:	4619      	mov	r1, r3
 80040da:	f000 f980 	bl	80043de <xQueueGenericCreate>
 80040de:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 80040e0:	4618      	mov	r0, r3
 80040e2:	370c      	adds	r7, #12
 80040e4:	46bd      	mov	sp, r7
 80040e6:	bd90      	pop	{r4, r7, pc}

080040e8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80040e8:	b480      	push	{r7}
 80040ea:	b083      	sub	sp, #12
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	f103 0208 	add.w	r2, r3, #8
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	f04f 32ff 	mov.w	r2, #4294967295
 8004100:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	f103 0208 	add.w	r2, r3, #8
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	f103 0208 	add.w	r2, r3, #8
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	2200      	movs	r2, #0
 800411a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800411c:	bf00      	nop
 800411e:	370c      	adds	r7, #12
 8004120:	46bd      	mov	sp, r7
 8004122:	bc80      	pop	{r7}
 8004124:	4770      	bx	lr

08004126 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004126:	b480      	push	{r7}
 8004128:	b083      	sub	sp, #12
 800412a:	af00      	add	r7, sp, #0
 800412c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	2200      	movs	r2, #0
 8004132:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004134:	bf00      	nop
 8004136:	370c      	adds	r7, #12
 8004138:	46bd      	mov	sp, r7
 800413a:	bc80      	pop	{r7}
 800413c:	4770      	bx	lr

0800413e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800413e:	b480      	push	{r7}
 8004140:	b085      	sub	sp, #20
 8004142:	af00      	add	r7, sp, #0
 8004144:	6078      	str	r0, [r7, #4]
 8004146:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	685b      	ldr	r3, [r3, #4]
 800414c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800414e:	683b      	ldr	r3, [r7, #0]
 8004150:	68fa      	ldr	r2, [r7, #12]
 8004152:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	689a      	ldr	r2, [r3, #8]
 8004158:	683b      	ldr	r3, [r7, #0]
 800415a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	689b      	ldr	r3, [r3, #8]
 8004160:	683a      	ldr	r2, [r7, #0]
 8004162:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	683a      	ldr	r2, [r7, #0]
 8004168:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800416a:	683b      	ldr	r3, [r7, #0]
 800416c:	687a      	ldr	r2, [r7, #4]
 800416e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	1c5a      	adds	r2, r3, #1
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	601a      	str	r2, [r3, #0]
}
 800417a:	bf00      	nop
 800417c:	3714      	adds	r7, #20
 800417e:	46bd      	mov	sp, r7
 8004180:	bc80      	pop	{r7}
 8004182:	4770      	bx	lr

08004184 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004184:	b480      	push	{r7}
 8004186:	b085      	sub	sp, #20
 8004188:	af00      	add	r7, sp, #0
 800418a:	6078      	str	r0, [r7, #4]
 800418c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800418e:	683b      	ldr	r3, [r7, #0]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004194:	68bb      	ldr	r3, [r7, #8]
 8004196:	f1b3 3fff 	cmp.w	r3, #4294967295
 800419a:	d103      	bne.n	80041a4 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	691b      	ldr	r3, [r3, #16]
 80041a0:	60fb      	str	r3, [r7, #12]
 80041a2:	e00c      	b.n	80041be <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	3308      	adds	r3, #8
 80041a8:	60fb      	str	r3, [r7, #12]
 80041aa:	e002      	b.n	80041b2 <vListInsert+0x2e>
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	685b      	ldr	r3, [r3, #4]
 80041b0:	60fb      	str	r3, [r7, #12]
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	685b      	ldr	r3, [r3, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	68ba      	ldr	r2, [r7, #8]
 80041ba:	429a      	cmp	r2, r3
 80041bc:	d2f6      	bcs.n	80041ac <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	685a      	ldr	r2, [r3, #4]
 80041c2:	683b      	ldr	r3, [r7, #0]
 80041c4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80041c6:	683b      	ldr	r3, [r7, #0]
 80041c8:	685b      	ldr	r3, [r3, #4]
 80041ca:	683a      	ldr	r2, [r7, #0]
 80041cc:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80041ce:	683b      	ldr	r3, [r7, #0]
 80041d0:	68fa      	ldr	r2, [r7, #12]
 80041d2:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	683a      	ldr	r2, [r7, #0]
 80041d8:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80041da:	683b      	ldr	r3, [r7, #0]
 80041dc:	687a      	ldr	r2, [r7, #4]
 80041de:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	1c5a      	adds	r2, r3, #1
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	601a      	str	r2, [r3, #0]
}
 80041ea:	bf00      	nop
 80041ec:	3714      	adds	r7, #20
 80041ee:	46bd      	mov	sp, r7
 80041f0:	bc80      	pop	{r7}
 80041f2:	4770      	bx	lr

080041f4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80041f4:	b480      	push	{r7}
 80041f6:	b085      	sub	sp, #20
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	691b      	ldr	r3, [r3, #16]
 8004200:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	685b      	ldr	r3, [r3, #4]
 8004206:	687a      	ldr	r2, [r7, #4]
 8004208:	6892      	ldr	r2, [r2, #8]
 800420a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	689b      	ldr	r3, [r3, #8]
 8004210:	687a      	ldr	r2, [r7, #4]
 8004212:	6852      	ldr	r2, [r2, #4]
 8004214:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	685b      	ldr	r3, [r3, #4]
 800421a:	687a      	ldr	r2, [r7, #4]
 800421c:	429a      	cmp	r2, r3
 800421e:	d103      	bne.n	8004228 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	689a      	ldr	r2, [r3, #8]
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	2200      	movs	r2, #0
 800422c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	1e5a      	subs	r2, r3, #1
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	681b      	ldr	r3, [r3, #0]
}
 800423c:	4618      	mov	r0, r3
 800423e:	3714      	adds	r7, #20
 8004240:	46bd      	mov	sp, r7
 8004242:	bc80      	pop	{r7}
 8004244:	4770      	bx	lr

08004246 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004246:	b580      	push	{r7, lr}
 8004248:	b084      	sub	sp, #16
 800424a:	af00      	add	r7, sp, #0
 800424c:	6078      	str	r0, [r7, #4]
 800424e:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	2b00      	cmp	r3, #0
 8004258:	d109      	bne.n	800426e <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800425a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800425e:	f383 8811 	msr	BASEPRI, r3
 8004262:	f3bf 8f6f 	isb	sy
 8004266:	f3bf 8f4f 	dsb	sy
 800426a:	60bb      	str	r3, [r7, #8]
 800426c:	e7fe      	b.n	800426c <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 800426e:	f002 fbb3 	bl	80069d8 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	681a      	ldr	r2, [r3, #0]
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800427a:	68f9      	ldr	r1, [r7, #12]
 800427c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800427e:	fb01 f303 	mul.w	r3, r1, r3
 8004282:	441a      	add	r2, r3
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	2200      	movs	r2, #0
 800428c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	681a      	ldr	r2, [r3, #0]
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	681a      	ldr	r2, [r3, #0]
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800429e:	3b01      	subs	r3, #1
 80042a0:	68f9      	ldr	r1, [r7, #12]
 80042a2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80042a4:	fb01 f303 	mul.w	r3, r1, r3
 80042a8:	441a      	add	r2, r3
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	22ff      	movs	r2, #255	; 0xff
 80042b2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	22ff      	movs	r2, #255	; 0xff
 80042ba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80042be:	683b      	ldr	r3, [r7, #0]
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d109      	bne.n	80042d8 <xQueueGenericReset+0x92>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	691b      	ldr	r3, [r3, #16]
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d00f      	beq.n	80042ec <xQueueGenericReset+0xa6>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	3310      	adds	r3, #16
 80042d0:	4618      	mov	r0, r3
 80042d2:	f001 fb25 	bl	8005920 <xTaskRemoveFromEventList>
 80042d6:	e009      	b.n	80042ec <xQueueGenericReset+0xa6>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	3310      	adds	r3, #16
 80042dc:	4618      	mov	r0, r3
 80042de:	f7ff ff03 	bl	80040e8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	3324      	adds	r3, #36	; 0x24
 80042e6:	4618      	mov	r0, r3
 80042e8:	f7ff fefe 	bl	80040e8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80042ec:	f002 fba2 	bl	8006a34 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80042f0:	2301      	movs	r3, #1
}
 80042f2:	4618      	mov	r0, r3
 80042f4:	3710      	adds	r7, #16
 80042f6:	46bd      	mov	sp, r7
 80042f8:	bd80      	pop	{r7, pc}

080042fa <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80042fa:	b580      	push	{r7, lr}
 80042fc:	b08e      	sub	sp, #56	; 0x38
 80042fe:	af02      	add	r7, sp, #8
 8004300:	60f8      	str	r0, [r7, #12]
 8004302:	60b9      	str	r1, [r7, #8]
 8004304:	607a      	str	r2, [r7, #4]
 8004306:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	2b00      	cmp	r3, #0
 800430c:	d109      	bne.n	8004322 <xQueueGenericCreateStatic+0x28>
 800430e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004312:	f383 8811 	msr	BASEPRI, r3
 8004316:	f3bf 8f6f 	isb	sy
 800431a:	f3bf 8f4f 	dsb	sy
 800431e:	62bb      	str	r3, [r7, #40]	; 0x28
 8004320:	e7fe      	b.n	8004320 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004322:	683b      	ldr	r3, [r7, #0]
 8004324:	2b00      	cmp	r3, #0
 8004326:	d109      	bne.n	800433c <xQueueGenericCreateStatic+0x42>
 8004328:	f04f 0350 	mov.w	r3, #80	; 0x50
 800432c:	f383 8811 	msr	BASEPRI, r3
 8004330:	f3bf 8f6f 	isb	sy
 8004334:	f3bf 8f4f 	dsb	sy
 8004338:	627b      	str	r3, [r7, #36]	; 0x24
 800433a:	e7fe      	b.n	800433a <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	2b00      	cmp	r3, #0
 8004340:	d002      	beq.n	8004348 <xQueueGenericCreateStatic+0x4e>
 8004342:	68bb      	ldr	r3, [r7, #8]
 8004344:	2b00      	cmp	r3, #0
 8004346:	d001      	beq.n	800434c <xQueueGenericCreateStatic+0x52>
 8004348:	2301      	movs	r3, #1
 800434a:	e000      	b.n	800434e <xQueueGenericCreateStatic+0x54>
 800434c:	2300      	movs	r3, #0
 800434e:	2b00      	cmp	r3, #0
 8004350:	d109      	bne.n	8004366 <xQueueGenericCreateStatic+0x6c>
 8004352:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004356:	f383 8811 	msr	BASEPRI, r3
 800435a:	f3bf 8f6f 	isb	sy
 800435e:	f3bf 8f4f 	dsb	sy
 8004362:	623b      	str	r3, [r7, #32]
 8004364:	e7fe      	b.n	8004364 <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	2b00      	cmp	r3, #0
 800436a:	d102      	bne.n	8004372 <xQueueGenericCreateStatic+0x78>
 800436c:	68bb      	ldr	r3, [r7, #8]
 800436e:	2b00      	cmp	r3, #0
 8004370:	d101      	bne.n	8004376 <xQueueGenericCreateStatic+0x7c>
 8004372:	2301      	movs	r3, #1
 8004374:	e000      	b.n	8004378 <xQueueGenericCreateStatic+0x7e>
 8004376:	2300      	movs	r3, #0
 8004378:	2b00      	cmp	r3, #0
 800437a:	d109      	bne.n	8004390 <xQueueGenericCreateStatic+0x96>
 800437c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004380:	f383 8811 	msr	BASEPRI, r3
 8004384:	f3bf 8f6f 	isb	sy
 8004388:	f3bf 8f4f 	dsb	sy
 800438c:	61fb      	str	r3, [r7, #28]
 800438e:	e7fe      	b.n	800438e <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004390:	2348      	movs	r3, #72	; 0x48
 8004392:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004394:	697b      	ldr	r3, [r7, #20]
 8004396:	2b48      	cmp	r3, #72	; 0x48
 8004398:	d009      	beq.n	80043ae <xQueueGenericCreateStatic+0xb4>
 800439a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800439e:	f383 8811 	msr	BASEPRI, r3
 80043a2:	f3bf 8f6f 	isb	sy
 80043a6:	f3bf 8f4f 	dsb	sy
 80043aa:	61bb      	str	r3, [r7, #24]
 80043ac:	e7fe      	b.n	80043ac <xQueueGenericCreateStatic+0xb2>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80043ae:	683b      	ldr	r3, [r7, #0]
 80043b0:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80043b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d00d      	beq.n	80043d4 <xQueueGenericCreateStatic+0xda>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80043b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043ba:	2201      	movs	r2, #1
 80043bc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80043c0:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80043c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043c6:	9300      	str	r3, [sp, #0]
 80043c8:	4613      	mov	r3, r2
 80043ca:	687a      	ldr	r2, [r7, #4]
 80043cc:	68b9      	ldr	r1, [r7, #8]
 80043ce:	68f8      	ldr	r0, [r7, #12]
 80043d0:	f000 f842 	bl	8004458 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 80043d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80043d6:	4618      	mov	r0, r3
 80043d8:	3730      	adds	r7, #48	; 0x30
 80043da:	46bd      	mov	sp, r7
 80043dc:	bd80      	pop	{r7, pc}

080043de <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80043de:	b580      	push	{r7, lr}
 80043e0:	b08a      	sub	sp, #40	; 0x28
 80043e2:	af02      	add	r7, sp, #8
 80043e4:	60f8      	str	r0, [r7, #12]
 80043e6:	60b9      	str	r1, [r7, #8]
 80043e8:	4613      	mov	r3, r2
 80043ea:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d109      	bne.n	8004406 <xQueueGenericCreate+0x28>
 80043f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043f6:	f383 8811 	msr	BASEPRI, r3
 80043fa:	f3bf 8f6f 	isb	sy
 80043fe:	f3bf 8f4f 	dsb	sy
 8004402:	613b      	str	r3, [r7, #16]
 8004404:	e7fe      	b.n	8004404 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8004406:	68bb      	ldr	r3, [r7, #8]
 8004408:	2b00      	cmp	r3, #0
 800440a:	d102      	bne.n	8004412 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800440c:	2300      	movs	r3, #0
 800440e:	61fb      	str	r3, [r7, #28]
 8004410:	e004      	b.n	800441c <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	68ba      	ldr	r2, [r7, #8]
 8004416:	fb02 f303 	mul.w	r3, r2, r3
 800441a:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800441c:	69fb      	ldr	r3, [r7, #28]
 800441e:	3348      	adds	r3, #72	; 0x48
 8004420:	4618      	mov	r0, r3
 8004422:	f002 fbcf 	bl	8006bc4 <pvPortMalloc>
 8004426:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8004428:	69bb      	ldr	r3, [r7, #24]
 800442a:	2b00      	cmp	r3, #0
 800442c:	d00f      	beq.n	800444e <xQueueGenericCreate+0x70>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 800442e:	69bb      	ldr	r3, [r7, #24]
 8004430:	3348      	adds	r3, #72	; 0x48
 8004432:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8004434:	69bb      	ldr	r3, [r7, #24]
 8004436:	2200      	movs	r2, #0
 8004438:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800443c:	79fa      	ldrb	r2, [r7, #7]
 800443e:	69bb      	ldr	r3, [r7, #24]
 8004440:	9300      	str	r3, [sp, #0]
 8004442:	4613      	mov	r3, r2
 8004444:	697a      	ldr	r2, [r7, #20]
 8004446:	68b9      	ldr	r1, [r7, #8]
 8004448:	68f8      	ldr	r0, [r7, #12]
 800444a:	f000 f805 	bl	8004458 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800444e:	69bb      	ldr	r3, [r7, #24]
	}
 8004450:	4618      	mov	r0, r3
 8004452:	3720      	adds	r7, #32
 8004454:	46bd      	mov	sp, r7
 8004456:	bd80      	pop	{r7, pc}

08004458 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004458:	b580      	push	{r7, lr}
 800445a:	b084      	sub	sp, #16
 800445c:	af00      	add	r7, sp, #0
 800445e:	60f8      	str	r0, [r7, #12]
 8004460:	60b9      	str	r1, [r7, #8]
 8004462:	607a      	str	r2, [r7, #4]
 8004464:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004466:	68bb      	ldr	r3, [r7, #8]
 8004468:	2b00      	cmp	r3, #0
 800446a:	d103      	bne.n	8004474 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800446c:	69bb      	ldr	r3, [r7, #24]
 800446e:	69ba      	ldr	r2, [r7, #24]
 8004470:	601a      	str	r2, [r3, #0]
 8004472:	e002      	b.n	800447a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004474:	69bb      	ldr	r3, [r7, #24]
 8004476:	687a      	ldr	r2, [r7, #4]
 8004478:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800447a:	69bb      	ldr	r3, [r7, #24]
 800447c:	68fa      	ldr	r2, [r7, #12]
 800447e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004480:	69bb      	ldr	r3, [r7, #24]
 8004482:	68ba      	ldr	r2, [r7, #8]
 8004484:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004486:	2101      	movs	r1, #1
 8004488:	69b8      	ldr	r0, [r7, #24]
 800448a:	f7ff fedc 	bl	8004246 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800448e:	bf00      	nop
 8004490:	3710      	adds	r7, #16
 8004492:	46bd      	mov	sp, r7
 8004494:	bd80      	pop	{r7, pc}

08004496 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8004496:	b580      	push	{r7, lr}
 8004498:	b082      	sub	sp, #8
 800449a:	af00      	add	r7, sp, #0
 800449c:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d00e      	beq.n	80044c2 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	2200      	movs	r2, #0
 80044a8:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	2200      	movs	r2, #0
 80044ae:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.uxRecursiveCallCount = 0;
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	2200      	movs	r2, #0
 80044b4:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80044b6:	2300      	movs	r3, #0
 80044b8:	2200      	movs	r2, #0
 80044ba:	2100      	movs	r1, #0
 80044bc:	6878      	ldr	r0, [r7, #4]
 80044be:	f000 f837 	bl	8004530 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 80044c2:	bf00      	nop
 80044c4:	3708      	adds	r7, #8
 80044c6:	46bd      	mov	sp, r7
 80044c8:	bd80      	pop	{r7, pc}

080044ca <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 80044ca:	b580      	push	{r7, lr}
 80044cc:	b086      	sub	sp, #24
 80044ce:	af00      	add	r7, sp, #0
 80044d0:	4603      	mov	r3, r0
 80044d2:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80044d4:	2301      	movs	r3, #1
 80044d6:	617b      	str	r3, [r7, #20]
 80044d8:	2300      	movs	r3, #0
 80044da:	613b      	str	r3, [r7, #16]

		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 80044dc:	79fb      	ldrb	r3, [r7, #7]
 80044de:	461a      	mov	r2, r3
 80044e0:	6939      	ldr	r1, [r7, #16]
 80044e2:	6978      	ldr	r0, [r7, #20]
 80044e4:	f7ff ff7b 	bl	80043de <xQueueGenericCreate>
 80044e8:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 80044ea:	68f8      	ldr	r0, [r7, #12]
 80044ec:	f7ff ffd3 	bl	8004496 <prvInitialiseMutex>

		return pxNewQueue;
 80044f0:	68fb      	ldr	r3, [r7, #12]
	}
 80044f2:	4618      	mov	r0, r3
 80044f4:	3718      	adds	r7, #24
 80044f6:	46bd      	mov	sp, r7
 80044f8:	bd80      	pop	{r7, pc}

080044fa <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 80044fa:	b580      	push	{r7, lr}
 80044fc:	b088      	sub	sp, #32
 80044fe:	af02      	add	r7, sp, #8
 8004500:	4603      	mov	r3, r0
 8004502:	6039      	str	r1, [r7, #0]
 8004504:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8004506:	2301      	movs	r3, #1
 8004508:	617b      	str	r3, [r7, #20]
 800450a:	2300      	movs	r3, #0
 800450c:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		pxNewQueue = ( Queue_t * ) xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800450e:	79fb      	ldrb	r3, [r7, #7]
 8004510:	9300      	str	r3, [sp, #0]
 8004512:	683b      	ldr	r3, [r7, #0]
 8004514:	2200      	movs	r2, #0
 8004516:	6939      	ldr	r1, [r7, #16]
 8004518:	6978      	ldr	r0, [r7, #20]
 800451a:	f7ff feee 	bl	80042fa <xQueueGenericCreateStatic>
 800451e:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 8004520:	68f8      	ldr	r0, [r7, #12]
 8004522:	f7ff ffb8 	bl	8004496 <prvInitialiseMutex>

		return pxNewQueue;
 8004526:	68fb      	ldr	r3, [r7, #12]
	}
 8004528:	4618      	mov	r0, r3
 800452a:	3718      	adds	r7, #24
 800452c:	46bd      	mov	sp, r7
 800452e:	bd80      	pop	{r7, pc}

08004530 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004530:	b580      	push	{r7, lr}
 8004532:	b08e      	sub	sp, #56	; 0x38
 8004534:	af00      	add	r7, sp, #0
 8004536:	60f8      	str	r0, [r7, #12]
 8004538:	60b9      	str	r1, [r7, #8]
 800453a:	607a      	str	r2, [r7, #4]
 800453c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800453e:	2300      	movs	r3, #0
 8004540:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004546:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004548:	2b00      	cmp	r3, #0
 800454a:	d109      	bne.n	8004560 <xQueueGenericSend+0x30>
 800454c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004550:	f383 8811 	msr	BASEPRI, r3
 8004554:	f3bf 8f6f 	isb	sy
 8004558:	f3bf 8f4f 	dsb	sy
 800455c:	62bb      	str	r3, [r7, #40]	; 0x28
 800455e:	e7fe      	b.n	800455e <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004560:	68bb      	ldr	r3, [r7, #8]
 8004562:	2b00      	cmp	r3, #0
 8004564:	d103      	bne.n	800456e <xQueueGenericSend+0x3e>
 8004566:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004568:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800456a:	2b00      	cmp	r3, #0
 800456c:	d101      	bne.n	8004572 <xQueueGenericSend+0x42>
 800456e:	2301      	movs	r3, #1
 8004570:	e000      	b.n	8004574 <xQueueGenericSend+0x44>
 8004572:	2300      	movs	r3, #0
 8004574:	2b00      	cmp	r3, #0
 8004576:	d109      	bne.n	800458c <xQueueGenericSend+0x5c>
 8004578:	f04f 0350 	mov.w	r3, #80	; 0x50
 800457c:	f383 8811 	msr	BASEPRI, r3
 8004580:	f3bf 8f6f 	isb	sy
 8004584:	f3bf 8f4f 	dsb	sy
 8004588:	627b      	str	r3, [r7, #36]	; 0x24
 800458a:	e7fe      	b.n	800458a <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800458c:	683b      	ldr	r3, [r7, #0]
 800458e:	2b02      	cmp	r3, #2
 8004590:	d103      	bne.n	800459a <xQueueGenericSend+0x6a>
 8004592:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004594:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004596:	2b01      	cmp	r3, #1
 8004598:	d101      	bne.n	800459e <xQueueGenericSend+0x6e>
 800459a:	2301      	movs	r3, #1
 800459c:	e000      	b.n	80045a0 <xQueueGenericSend+0x70>
 800459e:	2300      	movs	r3, #0
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d109      	bne.n	80045b8 <xQueueGenericSend+0x88>
 80045a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045a8:	f383 8811 	msr	BASEPRI, r3
 80045ac:	f3bf 8f6f 	isb	sy
 80045b0:	f3bf 8f4f 	dsb	sy
 80045b4:	623b      	str	r3, [r7, #32]
 80045b6:	e7fe      	b.n	80045b6 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80045b8:	f001 fb66 	bl	8005c88 <xTaskGetSchedulerState>
 80045bc:	4603      	mov	r3, r0
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d102      	bne.n	80045c8 <xQueueGenericSend+0x98>
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d101      	bne.n	80045cc <xQueueGenericSend+0x9c>
 80045c8:	2301      	movs	r3, #1
 80045ca:	e000      	b.n	80045ce <xQueueGenericSend+0x9e>
 80045cc:	2300      	movs	r3, #0
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d109      	bne.n	80045e6 <xQueueGenericSend+0xb6>
 80045d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045d6:	f383 8811 	msr	BASEPRI, r3
 80045da:	f3bf 8f6f 	isb	sy
 80045de:	f3bf 8f4f 	dsb	sy
 80045e2:	61fb      	str	r3, [r7, #28]
 80045e4:	e7fe      	b.n	80045e4 <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80045e6:	f002 f9f7 	bl	80069d8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80045ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045ec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80045ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045f2:	429a      	cmp	r2, r3
 80045f4:	d302      	bcc.n	80045fc <xQueueGenericSend+0xcc>
 80045f6:	683b      	ldr	r3, [r7, #0]
 80045f8:	2b02      	cmp	r3, #2
 80045fa:	d112      	bne.n	8004622 <xQueueGenericSend+0xf2>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80045fc:	683a      	ldr	r2, [r7, #0]
 80045fe:	68b9      	ldr	r1, [r7, #8]
 8004600:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004602:	f000 fbf7 	bl	8004df4 <prvCopyDataToQueue>
 8004606:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004608:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800460a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800460c:	2b00      	cmp	r3, #0
 800460e:	d004      	beq.n	800461a <xQueueGenericSend+0xea>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004610:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004612:	3324      	adds	r3, #36	; 0x24
 8004614:	4618      	mov	r0, r3
 8004616:	f001 f983 	bl	8005920 <xTaskRemoveFromEventList>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800461a:	f002 fa0b 	bl	8006a34 <vPortExitCritical>
				return pdPASS;
 800461e:	2301      	movs	r3, #1
 8004620:	e062      	b.n	80046e8 <xQueueGenericSend+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	2b00      	cmp	r3, #0
 8004626:	d103      	bne.n	8004630 <xQueueGenericSend+0x100>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004628:	f002 fa04 	bl	8006a34 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800462c:	2300      	movs	r3, #0
 800462e:	e05b      	b.n	80046e8 <xQueueGenericSend+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004630:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004632:	2b00      	cmp	r3, #0
 8004634:	d106      	bne.n	8004644 <xQueueGenericSend+0x114>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004636:	f107 0314 	add.w	r3, r7, #20
 800463a:	4618      	mov	r0, r3
 800463c:	f001 f9d2 	bl	80059e4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004640:	2301      	movs	r3, #1
 8004642:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004644:	f002 f9f6 	bl	8006a34 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004648:	f000 ff58 	bl	80054fc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800464c:	f002 f9c4 	bl	80069d8 <vPortEnterCritical>
 8004650:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004652:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004656:	b25b      	sxtb	r3, r3
 8004658:	f1b3 3fff 	cmp.w	r3, #4294967295
 800465c:	d103      	bne.n	8004666 <xQueueGenericSend+0x136>
 800465e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004660:	2200      	movs	r2, #0
 8004662:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004666:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004668:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800466c:	b25b      	sxtb	r3, r3
 800466e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004672:	d103      	bne.n	800467c <xQueueGenericSend+0x14c>
 8004674:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004676:	2200      	movs	r2, #0
 8004678:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800467c:	f002 f9da 	bl	8006a34 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004680:	1d3a      	adds	r2, r7, #4
 8004682:	f107 0314 	add.w	r3, r7, #20
 8004686:	4611      	mov	r1, r2
 8004688:	4618      	mov	r0, r3
 800468a:	f001 f9c1 	bl	8005a10 <xTaskCheckForTimeOut>
 800468e:	4603      	mov	r3, r0
 8004690:	2b00      	cmp	r3, #0
 8004692:	d123      	bne.n	80046dc <xQueueGenericSend+0x1ac>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004694:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004696:	f000 fca5 	bl	8004fe4 <prvIsQueueFull>
 800469a:	4603      	mov	r3, r0
 800469c:	2b00      	cmp	r3, #0
 800469e:	d017      	beq.n	80046d0 <xQueueGenericSend+0x1a0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80046a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046a2:	3310      	adds	r3, #16
 80046a4:	687a      	ldr	r2, [r7, #4]
 80046a6:	4611      	mov	r1, r2
 80046a8:	4618      	mov	r0, r3
 80046aa:	f001 f8eb 	bl	8005884 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80046ae:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80046b0:	f000 fc30 	bl	8004f14 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80046b4:	f000 ff30 	bl	8005518 <xTaskResumeAll>
 80046b8:	4603      	mov	r3, r0
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d193      	bne.n	80045e6 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 80046be:	4b0c      	ldr	r3, [pc, #48]	; (80046f0 <xQueueGenericSend+0x1c0>)
 80046c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80046c4:	601a      	str	r2, [r3, #0]
 80046c6:	f3bf 8f4f 	dsb	sy
 80046ca:	f3bf 8f6f 	isb	sy
 80046ce:	e78a      	b.n	80045e6 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80046d0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80046d2:	f000 fc1f 	bl	8004f14 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80046d6:	f000 ff1f 	bl	8005518 <xTaskResumeAll>
 80046da:	e784      	b.n	80045e6 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80046dc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80046de:	f000 fc19 	bl	8004f14 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80046e2:	f000 ff19 	bl	8005518 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80046e6:	2300      	movs	r3, #0
		}
	}
}
 80046e8:	4618      	mov	r0, r3
 80046ea:	3738      	adds	r7, #56	; 0x38
 80046ec:	46bd      	mov	sp, r7
 80046ee:	bd80      	pop	{r7, pc}
 80046f0:	e000ed04 	.word	0xe000ed04

080046f4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80046f4:	b580      	push	{r7, lr}
 80046f6:	b08e      	sub	sp, #56	; 0x38
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	60f8      	str	r0, [r7, #12]
 80046fc:	60b9      	str	r1, [r7, #8]
 80046fe:	607a      	str	r2, [r7, #4]
 8004700:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004706:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004708:	2b00      	cmp	r3, #0
 800470a:	d109      	bne.n	8004720 <xQueueGenericSendFromISR+0x2c>
 800470c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004710:	f383 8811 	msr	BASEPRI, r3
 8004714:	f3bf 8f6f 	isb	sy
 8004718:	f3bf 8f4f 	dsb	sy
 800471c:	627b      	str	r3, [r7, #36]	; 0x24
 800471e:	e7fe      	b.n	800471e <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004720:	68bb      	ldr	r3, [r7, #8]
 8004722:	2b00      	cmp	r3, #0
 8004724:	d103      	bne.n	800472e <xQueueGenericSendFromISR+0x3a>
 8004726:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004728:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800472a:	2b00      	cmp	r3, #0
 800472c:	d101      	bne.n	8004732 <xQueueGenericSendFromISR+0x3e>
 800472e:	2301      	movs	r3, #1
 8004730:	e000      	b.n	8004734 <xQueueGenericSendFromISR+0x40>
 8004732:	2300      	movs	r3, #0
 8004734:	2b00      	cmp	r3, #0
 8004736:	d109      	bne.n	800474c <xQueueGenericSendFromISR+0x58>
 8004738:	f04f 0350 	mov.w	r3, #80	; 0x50
 800473c:	f383 8811 	msr	BASEPRI, r3
 8004740:	f3bf 8f6f 	isb	sy
 8004744:	f3bf 8f4f 	dsb	sy
 8004748:	623b      	str	r3, [r7, #32]
 800474a:	e7fe      	b.n	800474a <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800474c:	683b      	ldr	r3, [r7, #0]
 800474e:	2b02      	cmp	r3, #2
 8004750:	d103      	bne.n	800475a <xQueueGenericSendFromISR+0x66>
 8004752:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004754:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004756:	2b01      	cmp	r3, #1
 8004758:	d101      	bne.n	800475e <xQueueGenericSendFromISR+0x6a>
 800475a:	2301      	movs	r3, #1
 800475c:	e000      	b.n	8004760 <xQueueGenericSendFromISR+0x6c>
 800475e:	2300      	movs	r3, #0
 8004760:	2b00      	cmp	r3, #0
 8004762:	d109      	bne.n	8004778 <xQueueGenericSendFromISR+0x84>
 8004764:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004768:	f383 8811 	msr	BASEPRI, r3
 800476c:	f3bf 8f6f 	isb	sy
 8004770:	f3bf 8f4f 	dsb	sy
 8004774:	61fb      	str	r3, [r7, #28]
 8004776:	e7fe      	b.n	8004776 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004778:	f002 f9e8 	bl	8006b4c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800477c:	f3ef 8211 	mrs	r2, BASEPRI
 8004780:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004784:	f383 8811 	msr	BASEPRI, r3
 8004788:	f3bf 8f6f 	isb	sy
 800478c:	f3bf 8f4f 	dsb	sy
 8004790:	61ba      	str	r2, [r7, #24]
 8004792:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004794:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004796:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004798:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800479a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800479c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800479e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047a0:	429a      	cmp	r2, r3
 80047a2:	d302      	bcc.n	80047aa <xQueueGenericSendFromISR+0xb6>
 80047a4:	683b      	ldr	r3, [r7, #0]
 80047a6:	2b02      	cmp	r3, #2
 80047a8:	d12c      	bne.n	8004804 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80047aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047ac:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80047b0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80047b4:	683a      	ldr	r2, [r7, #0]
 80047b6:	68b9      	ldr	r1, [r7, #8]
 80047b8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80047ba:	f000 fb1b 	bl	8004df4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80047be:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80047c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047c6:	d112      	bne.n	80047ee <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80047c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d016      	beq.n	80047fe <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80047d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047d2:	3324      	adds	r3, #36	; 0x24
 80047d4:	4618      	mov	r0, r3
 80047d6:	f001 f8a3 	bl	8005920 <xTaskRemoveFromEventList>
 80047da:	4603      	mov	r3, r0
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d00e      	beq.n	80047fe <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d00b      	beq.n	80047fe <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	2201      	movs	r2, #1
 80047ea:	601a      	str	r2, [r3, #0]
 80047ec:	e007      	b.n	80047fe <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80047ee:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80047f2:	3301      	adds	r3, #1
 80047f4:	b2db      	uxtb	r3, r3
 80047f6:	b25a      	sxtb	r2, r3
 80047f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047fa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80047fe:	2301      	movs	r3, #1
 8004800:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8004802:	e001      	b.n	8004808 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004804:	2300      	movs	r3, #0
 8004806:	637b      	str	r3, [r7, #52]	; 0x34
 8004808:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800480a:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800480c:	693b      	ldr	r3, [r7, #16]
 800480e:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004812:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8004814:	4618      	mov	r0, r3
 8004816:	3738      	adds	r7, #56	; 0x38
 8004818:	46bd      	mov	sp, r7
 800481a:	bd80      	pop	{r7, pc}

0800481c <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800481c:	b580      	push	{r7, lr}
 800481e:	b08e      	sub	sp, #56	; 0x38
 8004820:	af00      	add	r7, sp, #0
 8004822:	6078      	str	r0, [r7, #4]
 8004824:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800482a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800482c:	2b00      	cmp	r3, #0
 800482e:	d109      	bne.n	8004844 <xQueueGiveFromISR+0x28>
	__asm volatile
 8004830:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004834:	f383 8811 	msr	BASEPRI, r3
 8004838:	f3bf 8f6f 	isb	sy
 800483c:	f3bf 8f4f 	dsb	sy
 8004840:	623b      	str	r3, [r7, #32]
 8004842:	e7fe      	b.n	8004842 <xQueueGiveFromISR+0x26>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8004844:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004846:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004848:	2b00      	cmp	r3, #0
 800484a:	d009      	beq.n	8004860 <xQueueGiveFromISR+0x44>
 800484c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004850:	f383 8811 	msr	BASEPRI, r3
 8004854:	f3bf 8f6f 	isb	sy
 8004858:	f3bf 8f4f 	dsb	sy
 800485c:	61fb      	str	r3, [r7, #28]
 800485e:	e7fe      	b.n	800485e <xQueueGiveFromISR+0x42>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 8004860:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	2b00      	cmp	r3, #0
 8004866:	d103      	bne.n	8004870 <xQueueGiveFromISR+0x54>
 8004868:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800486a:	685b      	ldr	r3, [r3, #4]
 800486c:	2b00      	cmp	r3, #0
 800486e:	d101      	bne.n	8004874 <xQueueGiveFromISR+0x58>
 8004870:	2301      	movs	r3, #1
 8004872:	e000      	b.n	8004876 <xQueueGiveFromISR+0x5a>
 8004874:	2300      	movs	r3, #0
 8004876:	2b00      	cmp	r3, #0
 8004878:	d109      	bne.n	800488e <xQueueGiveFromISR+0x72>
 800487a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800487e:	f383 8811 	msr	BASEPRI, r3
 8004882:	f3bf 8f6f 	isb	sy
 8004886:	f3bf 8f4f 	dsb	sy
 800488a:	61bb      	str	r3, [r7, #24]
 800488c:	e7fe      	b.n	800488c <xQueueGiveFromISR+0x70>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800488e:	f002 f95d 	bl	8006b4c <vPortValidateInterruptPriority>
	__asm volatile
 8004892:	f3ef 8211 	mrs	r2, BASEPRI
 8004896:	f04f 0350 	mov.w	r3, #80	; 0x50
 800489a:	f383 8811 	msr	BASEPRI, r3
 800489e:	f3bf 8f6f 	isb	sy
 80048a2:	f3bf 8f4f 	dsb	sy
 80048a6:	617a      	str	r2, [r7, #20]
 80048a8:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 80048aa:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80048ac:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80048ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048b2:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80048b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048b8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80048ba:	429a      	cmp	r2, r3
 80048bc:	d22b      	bcs.n	8004916 <xQueueGiveFromISR+0xfa>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80048be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048c0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80048c4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80048c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048ca:	1c5a      	adds	r2, r3, #1
 80048cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048ce:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80048d0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80048d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048d8:	d112      	bne.n	8004900 <xQueueGiveFromISR+0xe4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80048da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d016      	beq.n	8004910 <xQueueGiveFromISR+0xf4>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80048e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048e4:	3324      	adds	r3, #36	; 0x24
 80048e6:	4618      	mov	r0, r3
 80048e8:	f001 f81a 	bl	8005920 <xTaskRemoveFromEventList>
 80048ec:	4603      	mov	r3, r0
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d00e      	beq.n	8004910 <xQueueGiveFromISR+0xf4>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80048f2:	683b      	ldr	r3, [r7, #0]
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d00b      	beq.n	8004910 <xQueueGiveFromISR+0xf4>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80048f8:	683b      	ldr	r3, [r7, #0]
 80048fa:	2201      	movs	r2, #1
 80048fc:	601a      	str	r2, [r3, #0]
 80048fe:	e007      	b.n	8004910 <xQueueGiveFromISR+0xf4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004900:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004904:	3301      	adds	r3, #1
 8004906:	b2db      	uxtb	r3, r3
 8004908:	b25a      	sxtb	r2, r3
 800490a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800490c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8004910:	2301      	movs	r3, #1
 8004912:	637b      	str	r3, [r7, #52]	; 0x34
 8004914:	e001      	b.n	800491a <xQueueGiveFromISR+0xfe>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004916:	2300      	movs	r3, #0
 8004918:	637b      	str	r3, [r7, #52]	; 0x34
 800491a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800491c:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004924:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8004926:	4618      	mov	r0, r3
 8004928:	3738      	adds	r7, #56	; 0x38
 800492a:	46bd      	mov	sp, r7
 800492c:	bd80      	pop	{r7, pc}
	...

08004930 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004930:	b580      	push	{r7, lr}
 8004932:	b08c      	sub	sp, #48	; 0x30
 8004934:	af00      	add	r7, sp, #0
 8004936:	60f8      	str	r0, [r7, #12]
 8004938:	60b9      	str	r1, [r7, #8]
 800493a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800493c:	2300      	movs	r3, #0
 800493e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004944:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004946:	2b00      	cmp	r3, #0
 8004948:	d109      	bne.n	800495e <xQueueReceive+0x2e>
	__asm volatile
 800494a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800494e:	f383 8811 	msr	BASEPRI, r3
 8004952:	f3bf 8f6f 	isb	sy
 8004956:	f3bf 8f4f 	dsb	sy
 800495a:	623b      	str	r3, [r7, #32]
 800495c:	e7fe      	b.n	800495c <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800495e:	68bb      	ldr	r3, [r7, #8]
 8004960:	2b00      	cmp	r3, #0
 8004962:	d103      	bne.n	800496c <xQueueReceive+0x3c>
 8004964:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004966:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004968:	2b00      	cmp	r3, #0
 800496a:	d101      	bne.n	8004970 <xQueueReceive+0x40>
 800496c:	2301      	movs	r3, #1
 800496e:	e000      	b.n	8004972 <xQueueReceive+0x42>
 8004970:	2300      	movs	r3, #0
 8004972:	2b00      	cmp	r3, #0
 8004974:	d109      	bne.n	800498a <xQueueReceive+0x5a>
 8004976:	f04f 0350 	mov.w	r3, #80	; 0x50
 800497a:	f383 8811 	msr	BASEPRI, r3
 800497e:	f3bf 8f6f 	isb	sy
 8004982:	f3bf 8f4f 	dsb	sy
 8004986:	61fb      	str	r3, [r7, #28]
 8004988:	e7fe      	b.n	8004988 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800498a:	f001 f97d 	bl	8005c88 <xTaskGetSchedulerState>
 800498e:	4603      	mov	r3, r0
 8004990:	2b00      	cmp	r3, #0
 8004992:	d102      	bne.n	800499a <xQueueReceive+0x6a>
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	2b00      	cmp	r3, #0
 8004998:	d101      	bne.n	800499e <xQueueReceive+0x6e>
 800499a:	2301      	movs	r3, #1
 800499c:	e000      	b.n	80049a0 <xQueueReceive+0x70>
 800499e:	2300      	movs	r3, #0
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d109      	bne.n	80049b8 <xQueueReceive+0x88>
 80049a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049a8:	f383 8811 	msr	BASEPRI, r3
 80049ac:	f3bf 8f6f 	isb	sy
 80049b0:	f3bf 8f4f 	dsb	sy
 80049b4:	61bb      	str	r3, [r7, #24]
 80049b6:	e7fe      	b.n	80049b6 <xQueueReceive+0x86>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 80049b8:	f002 f80e 	bl	80069d8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80049bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049c0:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80049c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d014      	beq.n	80049f2 <xQueueReceive+0xc2>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80049c8:	68b9      	ldr	r1, [r7, #8]
 80049ca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80049cc:	f000 fa7c 	bl	8004ec8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80049d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049d2:	1e5a      	subs	r2, r3, #1
 80049d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049d6:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80049d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049da:	691b      	ldr	r3, [r3, #16]
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d004      	beq.n	80049ea <xQueueReceive+0xba>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80049e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049e2:	3310      	adds	r3, #16
 80049e4:	4618      	mov	r0, r3
 80049e6:	f000 ff9b 	bl	8005920 <xTaskRemoveFromEventList>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80049ea:	f002 f823 	bl	8006a34 <vPortExitCritical>
				return pdPASS;
 80049ee:	2301      	movs	r3, #1
 80049f0:	e069      	b.n	8004ac6 <xQueueReceive+0x196>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d103      	bne.n	8004a00 <xQueueReceive+0xd0>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80049f8:	f002 f81c 	bl	8006a34 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80049fc:	2300      	movs	r3, #0
 80049fe:	e062      	b.n	8004ac6 <xQueueReceive+0x196>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004a00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d106      	bne.n	8004a14 <xQueueReceive+0xe4>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004a06:	f107 0310 	add.w	r3, r7, #16
 8004a0a:	4618      	mov	r0, r3
 8004a0c:	f000 ffea 	bl	80059e4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004a10:	2301      	movs	r3, #1
 8004a12:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004a14:	f002 f80e 	bl	8006a34 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004a18:	f000 fd70 	bl	80054fc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004a1c:	f001 ffdc 	bl	80069d8 <vPortEnterCritical>
 8004a20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a22:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004a26:	b25b      	sxtb	r3, r3
 8004a28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a2c:	d103      	bne.n	8004a36 <xQueueReceive+0x106>
 8004a2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a30:	2200      	movs	r2, #0
 8004a32:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004a36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a38:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004a3c:	b25b      	sxtb	r3, r3
 8004a3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a42:	d103      	bne.n	8004a4c <xQueueReceive+0x11c>
 8004a44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a46:	2200      	movs	r2, #0
 8004a48:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004a4c:	f001 fff2 	bl	8006a34 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004a50:	1d3a      	adds	r2, r7, #4
 8004a52:	f107 0310 	add.w	r3, r7, #16
 8004a56:	4611      	mov	r1, r2
 8004a58:	4618      	mov	r0, r3
 8004a5a:	f000 ffd9 	bl	8005a10 <xTaskCheckForTimeOut>
 8004a5e:	4603      	mov	r3, r0
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d123      	bne.n	8004aac <xQueueReceive+0x17c>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004a64:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004a66:	f000 faa7 	bl	8004fb8 <prvIsQueueEmpty>
 8004a6a:	4603      	mov	r3, r0
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d017      	beq.n	8004aa0 <xQueueReceive+0x170>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004a70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a72:	3324      	adds	r3, #36	; 0x24
 8004a74:	687a      	ldr	r2, [r7, #4]
 8004a76:	4611      	mov	r1, r2
 8004a78:	4618      	mov	r0, r3
 8004a7a:	f000 ff03 	bl	8005884 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004a7e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004a80:	f000 fa48 	bl	8004f14 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004a84:	f000 fd48 	bl	8005518 <xTaskResumeAll>
 8004a88:	4603      	mov	r3, r0
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d194      	bne.n	80049b8 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8004a8e:	4b10      	ldr	r3, [pc, #64]	; (8004ad0 <xQueueReceive+0x1a0>)
 8004a90:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004a94:	601a      	str	r2, [r3, #0]
 8004a96:	f3bf 8f4f 	dsb	sy
 8004a9a:	f3bf 8f6f 	isb	sy
 8004a9e:	e78b      	b.n	80049b8 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004aa0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004aa2:	f000 fa37 	bl	8004f14 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004aa6:	f000 fd37 	bl	8005518 <xTaskResumeAll>
 8004aaa:	e785      	b.n	80049b8 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004aac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004aae:	f000 fa31 	bl	8004f14 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004ab2:	f000 fd31 	bl	8005518 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004ab6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004ab8:	f000 fa7e 	bl	8004fb8 <prvIsQueueEmpty>
 8004abc:	4603      	mov	r3, r0
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	f43f af7a 	beq.w	80049b8 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004ac4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8004ac6:	4618      	mov	r0, r3
 8004ac8:	3730      	adds	r7, #48	; 0x30
 8004aca:	46bd      	mov	sp, r7
 8004acc:	bd80      	pop	{r7, pc}
 8004ace:	bf00      	nop
 8004ad0:	e000ed04 	.word	0xe000ed04

08004ad4 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8004ad4:	b580      	push	{r7, lr}
 8004ad6:	b08e      	sub	sp, #56	; 0x38
 8004ad8:	af00      	add	r7, sp, #0
 8004ada:	6078      	str	r0, [r7, #4]
 8004adc:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8004ade:	2300      	movs	r3, #0
 8004ae0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8004ae6:	2300      	movs	r3, #0
 8004ae8:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004aea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d109      	bne.n	8004b04 <xQueueSemaphoreTake+0x30>
 8004af0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004af4:	f383 8811 	msr	BASEPRI, r3
 8004af8:	f3bf 8f6f 	isb	sy
 8004afc:	f3bf 8f4f 	dsb	sy
 8004b00:	623b      	str	r3, [r7, #32]
 8004b02:	e7fe      	b.n	8004b02 <xQueueSemaphoreTake+0x2e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8004b04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d009      	beq.n	8004b20 <xQueueSemaphoreTake+0x4c>
 8004b0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b10:	f383 8811 	msr	BASEPRI, r3
 8004b14:	f3bf 8f6f 	isb	sy
 8004b18:	f3bf 8f4f 	dsb	sy
 8004b1c:	61fb      	str	r3, [r7, #28]
 8004b1e:	e7fe      	b.n	8004b1e <xQueueSemaphoreTake+0x4a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004b20:	f001 f8b2 	bl	8005c88 <xTaskGetSchedulerState>
 8004b24:	4603      	mov	r3, r0
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d102      	bne.n	8004b30 <xQueueSemaphoreTake+0x5c>
 8004b2a:	683b      	ldr	r3, [r7, #0]
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d101      	bne.n	8004b34 <xQueueSemaphoreTake+0x60>
 8004b30:	2301      	movs	r3, #1
 8004b32:	e000      	b.n	8004b36 <xQueueSemaphoreTake+0x62>
 8004b34:	2300      	movs	r3, #0
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d109      	bne.n	8004b4e <xQueueSemaphoreTake+0x7a>
 8004b3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b3e:	f383 8811 	msr	BASEPRI, r3
 8004b42:	f3bf 8f6f 	isb	sy
 8004b46:	f3bf 8f4f 	dsb	sy
 8004b4a:	61bb      	str	r3, [r7, #24]
 8004b4c:	e7fe      	b.n	8004b4c <xQueueSemaphoreTake+0x78>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8004b4e:	f001 ff43 	bl	80069d8 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8004b52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b56:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8004b58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d019      	beq.n	8004b92 <xQueueSemaphoreTake+0xbe>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8004b5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b60:	1e5a      	subs	r2, r3, #1
 8004b62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b64:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004b66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d104      	bne.n	8004b78 <xQueueSemaphoreTake+0xa4>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8004b6e:	f001 fa51 	bl	8006014 <pvTaskIncrementMutexHeldCount>
 8004b72:	4602      	mov	r2, r0
 8004b74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b76:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004b78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b7a:	691b      	ldr	r3, [r3, #16]
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d004      	beq.n	8004b8a <xQueueSemaphoreTake+0xb6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004b80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b82:	3310      	adds	r3, #16
 8004b84:	4618      	mov	r0, r3
 8004b86:	f000 fecb 	bl	8005920 <xTaskRemoveFromEventList>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004b8a:	f001 ff53 	bl	8006a34 <vPortExitCritical>
				return pdPASS;
 8004b8e:	2301      	movs	r3, #1
 8004b90:	e096      	b.n	8004cc0 <xQueueSemaphoreTake+0x1ec>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004b92:	683b      	ldr	r3, [r7, #0]
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d110      	bne.n	8004bba <xQueueSemaphoreTake+0xe6>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8004b98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d009      	beq.n	8004bb2 <xQueueSemaphoreTake+0xde>
 8004b9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ba2:	f383 8811 	msr	BASEPRI, r3
 8004ba6:	f3bf 8f6f 	isb	sy
 8004baa:	f3bf 8f4f 	dsb	sy
 8004bae:	617b      	str	r3, [r7, #20]
 8004bb0:	e7fe      	b.n	8004bb0 <xQueueSemaphoreTake+0xdc>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8004bb2:	f001 ff3f 	bl	8006a34 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004bb6:	2300      	movs	r3, #0
 8004bb8:	e082      	b.n	8004cc0 <xQueueSemaphoreTake+0x1ec>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004bba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d106      	bne.n	8004bce <xQueueSemaphoreTake+0xfa>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004bc0:	f107 030c 	add.w	r3, r7, #12
 8004bc4:	4618      	mov	r0, r3
 8004bc6:	f000 ff0d 	bl	80059e4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004bca:	2301      	movs	r3, #1
 8004bcc:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004bce:	f001 ff31 	bl	8006a34 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004bd2:	f000 fc93 	bl	80054fc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004bd6:	f001 feff 	bl	80069d8 <vPortEnterCritical>
 8004bda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bdc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004be0:	b25b      	sxtb	r3, r3
 8004be2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004be6:	d103      	bne.n	8004bf0 <xQueueSemaphoreTake+0x11c>
 8004be8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bea:	2200      	movs	r2, #0
 8004bec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004bf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bf2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004bf6:	b25b      	sxtb	r3, r3
 8004bf8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bfc:	d103      	bne.n	8004c06 <xQueueSemaphoreTake+0x132>
 8004bfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c00:	2200      	movs	r2, #0
 8004c02:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004c06:	f001 ff15 	bl	8006a34 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004c0a:	463a      	mov	r2, r7
 8004c0c:	f107 030c 	add.w	r3, r7, #12
 8004c10:	4611      	mov	r1, r2
 8004c12:	4618      	mov	r0, r3
 8004c14:	f000 fefc 	bl	8005a10 <xTaskCheckForTimeOut>
 8004c18:	4603      	mov	r3, r0
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d132      	bne.n	8004c84 <xQueueSemaphoreTake+0x1b0>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004c1e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004c20:	f000 f9ca 	bl	8004fb8 <prvIsQueueEmpty>
 8004c24:	4603      	mov	r3, r0
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d026      	beq.n	8004c78 <xQueueSemaphoreTake+0x1a4>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004c2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d109      	bne.n	8004c46 <xQueueSemaphoreTake+0x172>
					{
						taskENTER_CRITICAL();
 8004c32:	f001 fed1 	bl	80069d8 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8004c36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c38:	685b      	ldr	r3, [r3, #4]
 8004c3a:	4618      	mov	r0, r3
 8004c3c:	f001 f842 	bl	8005cc4 <xTaskPriorityInherit>
 8004c40:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8004c42:	f001 fef7 	bl	8006a34 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004c46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c48:	3324      	adds	r3, #36	; 0x24
 8004c4a:	683a      	ldr	r2, [r7, #0]
 8004c4c:	4611      	mov	r1, r2
 8004c4e:	4618      	mov	r0, r3
 8004c50:	f000 fe18 	bl	8005884 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004c54:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004c56:	f000 f95d 	bl	8004f14 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004c5a:	f000 fc5d 	bl	8005518 <xTaskResumeAll>
 8004c5e:	4603      	mov	r3, r0
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	f47f af74 	bne.w	8004b4e <xQueueSemaphoreTake+0x7a>
				{
					portYIELD_WITHIN_API();
 8004c66:	4b18      	ldr	r3, [pc, #96]	; (8004cc8 <xQueueSemaphoreTake+0x1f4>)
 8004c68:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004c6c:	601a      	str	r2, [r3, #0]
 8004c6e:	f3bf 8f4f 	dsb	sy
 8004c72:	f3bf 8f6f 	isb	sy
 8004c76:	e76a      	b.n	8004b4e <xQueueSemaphoreTake+0x7a>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8004c78:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004c7a:	f000 f94b 	bl	8004f14 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004c7e:	f000 fc4b 	bl	8005518 <xTaskResumeAll>
 8004c82:	e764      	b.n	8004b4e <xQueueSemaphoreTake+0x7a>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8004c84:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004c86:	f000 f945 	bl	8004f14 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004c8a:	f000 fc45 	bl	8005518 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004c8e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004c90:	f000 f992 	bl	8004fb8 <prvIsQueueEmpty>
 8004c94:	4603      	mov	r3, r0
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	f43f af59 	beq.w	8004b4e <xQueueSemaphoreTake+0x7a>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8004c9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d00d      	beq.n	8004cbe <xQueueSemaphoreTake+0x1ea>
					{
						taskENTER_CRITICAL();
 8004ca2:	f001 fe99 	bl	80069d8 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8004ca6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004ca8:	f000 f88d 	bl	8004dc6 <prvGetDisinheritPriorityAfterTimeout>
 8004cac:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 8004cae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cb0:	685b      	ldr	r3, [r3, #4]
 8004cb2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004cb4:	4618      	mov	r0, r3
 8004cb6:	f001 f90f 	bl	8005ed8 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8004cba:	f001 febb 	bl	8006a34 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004cbe:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8004cc0:	4618      	mov	r0, r3
 8004cc2:	3738      	adds	r7, #56	; 0x38
 8004cc4:	46bd      	mov	sp, r7
 8004cc6:	bd80      	pop	{r7, pc}
 8004cc8:	e000ed04 	.word	0xe000ed04

08004ccc <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8004ccc:	b580      	push	{r7, lr}
 8004cce:	b08e      	sub	sp, #56	; 0x38
 8004cd0:	af00      	add	r7, sp, #0
 8004cd2:	60f8      	str	r0, [r7, #12]
 8004cd4:	60b9      	str	r1, [r7, #8]
 8004cd6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004cdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d109      	bne.n	8004cf6 <xQueueReceiveFromISR+0x2a>
 8004ce2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ce6:	f383 8811 	msr	BASEPRI, r3
 8004cea:	f3bf 8f6f 	isb	sy
 8004cee:	f3bf 8f4f 	dsb	sy
 8004cf2:	623b      	str	r3, [r7, #32]
 8004cf4:	e7fe      	b.n	8004cf4 <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004cf6:	68bb      	ldr	r3, [r7, #8]
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d103      	bne.n	8004d04 <xQueueReceiveFromISR+0x38>
 8004cfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d101      	bne.n	8004d08 <xQueueReceiveFromISR+0x3c>
 8004d04:	2301      	movs	r3, #1
 8004d06:	e000      	b.n	8004d0a <xQueueReceiveFromISR+0x3e>
 8004d08:	2300      	movs	r3, #0
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d109      	bne.n	8004d22 <xQueueReceiveFromISR+0x56>
 8004d0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d12:	f383 8811 	msr	BASEPRI, r3
 8004d16:	f3bf 8f6f 	isb	sy
 8004d1a:	f3bf 8f4f 	dsb	sy
 8004d1e:	61fb      	str	r3, [r7, #28]
 8004d20:	e7fe      	b.n	8004d20 <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004d22:	f001 ff13 	bl	8006b4c <vPortValidateInterruptPriority>
	__asm volatile
 8004d26:	f3ef 8211 	mrs	r2, BASEPRI
 8004d2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d2e:	f383 8811 	msr	BASEPRI, r3
 8004d32:	f3bf 8f6f 	isb	sy
 8004d36:	f3bf 8f4f 	dsb	sy
 8004d3a:	61ba      	str	r2, [r7, #24]
 8004d3c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8004d3e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004d40:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004d42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d46:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004d48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d02f      	beq.n	8004dae <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8004d4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d50:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004d54:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004d58:	68b9      	ldr	r1, [r7, #8]
 8004d5a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004d5c:	f000 f8b4 	bl	8004ec8 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004d60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d62:	1e5a      	subs	r2, r3, #1
 8004d64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d66:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8004d68:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8004d6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d70:	d112      	bne.n	8004d98 <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004d72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d74:	691b      	ldr	r3, [r3, #16]
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d016      	beq.n	8004da8 <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004d7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d7c:	3310      	adds	r3, #16
 8004d7e:	4618      	mov	r0, r3
 8004d80:	f000 fdce 	bl	8005920 <xTaskRemoveFromEventList>
 8004d84:	4603      	mov	r3, r0
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d00e      	beq.n	8004da8 <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d00b      	beq.n	8004da8 <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	2201      	movs	r2, #1
 8004d94:	601a      	str	r2, [r3, #0]
 8004d96:	e007      	b.n	8004da8 <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8004d98:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004d9c:	3301      	adds	r3, #1
 8004d9e:	b2db      	uxtb	r3, r3
 8004da0:	b25a      	sxtb	r2, r3
 8004da2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004da4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8004da8:	2301      	movs	r3, #1
 8004daa:	637b      	str	r3, [r7, #52]	; 0x34
 8004dac:	e001      	b.n	8004db2 <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 8004dae:	2300      	movs	r3, #0
 8004db0:	637b      	str	r3, [r7, #52]	; 0x34
 8004db2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004db4:	613b      	str	r3, [r7, #16]
	__asm volatile
 8004db6:	693b      	ldr	r3, [r7, #16]
 8004db8:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004dbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8004dbe:	4618      	mov	r0, r3
 8004dc0:	3738      	adds	r7, #56	; 0x38
 8004dc2:	46bd      	mov	sp, r7
 8004dc4:	bd80      	pop	{r7, pc}

08004dc6 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8004dc6:	b480      	push	{r7}
 8004dc8:	b085      	sub	sp, #20
 8004dca:	af00      	add	r7, sp, #0
 8004dcc:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d006      	beq.n	8004de4 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	f1c3 0307 	rsb	r3, r3, #7
 8004de0:	60fb      	str	r3, [r7, #12]
 8004de2:	e001      	b.n	8004de8 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8004de4:	2300      	movs	r3, #0
 8004de6:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8004de8:	68fb      	ldr	r3, [r7, #12]
	}
 8004dea:	4618      	mov	r0, r3
 8004dec:	3714      	adds	r7, #20
 8004dee:	46bd      	mov	sp, r7
 8004df0:	bc80      	pop	{r7}
 8004df2:	4770      	bx	lr

08004df4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004df4:	b580      	push	{r7, lr}
 8004df6:	b086      	sub	sp, #24
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	60f8      	str	r0, [r7, #12]
 8004dfc:	60b9      	str	r1, [r7, #8]
 8004dfe:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004e00:	2300      	movs	r3, #0
 8004e02:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e08:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d10d      	bne.n	8004e2e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d14d      	bne.n	8004eb6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	685b      	ldr	r3, [r3, #4]
 8004e1e:	4618      	mov	r0, r3
 8004e20:	f000 ffd6 	bl	8005dd0 <xTaskPriorityDisinherit>
 8004e24:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	2200      	movs	r2, #0
 8004e2a:	605a      	str	r2, [r3, #4]
 8004e2c:	e043      	b.n	8004eb6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d119      	bne.n	8004e68 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	6898      	ldr	r0, [r3, #8]
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e3c:	461a      	mov	r2, r3
 8004e3e:	68b9      	ldr	r1, [r7, #8]
 8004e40:	f002 f8c2 	bl	8006fc8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	689a      	ldr	r2, [r3, #8]
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e4c:	441a      	add	r2, r3
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	689a      	ldr	r2, [r3, #8]
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	685b      	ldr	r3, [r3, #4]
 8004e5a:	429a      	cmp	r2, r3
 8004e5c:	d32b      	bcc.n	8004eb6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	681a      	ldr	r2, [r3, #0]
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	609a      	str	r2, [r3, #8]
 8004e66:	e026      	b.n	8004eb6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	68d8      	ldr	r0, [r3, #12]
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e70:	461a      	mov	r2, r3
 8004e72:	68b9      	ldr	r1, [r7, #8]
 8004e74:	f002 f8a8 	bl	8006fc8 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	68da      	ldr	r2, [r3, #12]
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e80:	425b      	negs	r3, r3
 8004e82:	441a      	add	r2, r3
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	68da      	ldr	r2, [r3, #12]
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	429a      	cmp	r2, r3
 8004e92:	d207      	bcs.n	8004ea4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	685a      	ldr	r2, [r3, #4]
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e9c:	425b      	negs	r3, r3
 8004e9e:	441a      	add	r2, r3
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	2b02      	cmp	r3, #2
 8004ea8:	d105      	bne.n	8004eb6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004eaa:	693b      	ldr	r3, [r7, #16]
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d002      	beq.n	8004eb6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004eb0:	693b      	ldr	r3, [r7, #16]
 8004eb2:	3b01      	subs	r3, #1
 8004eb4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004eb6:	693b      	ldr	r3, [r7, #16]
 8004eb8:	1c5a      	adds	r2, r3, #1
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8004ebe:	697b      	ldr	r3, [r7, #20]
}
 8004ec0:	4618      	mov	r0, r3
 8004ec2:	3718      	adds	r7, #24
 8004ec4:	46bd      	mov	sp, r7
 8004ec6:	bd80      	pop	{r7, pc}

08004ec8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004ec8:	b580      	push	{r7, lr}
 8004eca:	b082      	sub	sp, #8
 8004ecc:	af00      	add	r7, sp, #0
 8004ece:	6078      	str	r0, [r7, #4]
 8004ed0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d018      	beq.n	8004f0c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	68da      	ldr	r2, [r3, #12]
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ee2:	441a      	add	r2, r3
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	68da      	ldr	r2, [r3, #12]
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	685b      	ldr	r3, [r3, #4]
 8004ef0:	429a      	cmp	r2, r3
 8004ef2:	d303      	bcc.n	8004efc <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681a      	ldr	r2, [r3, #0]
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	68d9      	ldr	r1, [r3, #12]
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f04:	461a      	mov	r2, r3
 8004f06:	6838      	ldr	r0, [r7, #0]
 8004f08:	f002 f85e 	bl	8006fc8 <memcpy>
	}
}
 8004f0c:	bf00      	nop
 8004f0e:	3708      	adds	r7, #8
 8004f10:	46bd      	mov	sp, r7
 8004f12:	bd80      	pop	{r7, pc}

08004f14 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004f14:	b580      	push	{r7, lr}
 8004f16:	b084      	sub	sp, #16
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004f1c:	f001 fd5c 	bl	80069d8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004f26:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004f28:	e011      	b.n	8004f4e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d012      	beq.n	8004f58 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	3324      	adds	r3, #36	; 0x24
 8004f36:	4618      	mov	r0, r3
 8004f38:	f000 fcf2 	bl	8005920 <xTaskRemoveFromEventList>
 8004f3c:	4603      	mov	r3, r0
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d001      	beq.n	8004f46 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004f42:	f000 fdc5 	bl	8005ad0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004f46:	7bfb      	ldrb	r3, [r7, #15]
 8004f48:	3b01      	subs	r3, #1
 8004f4a:	b2db      	uxtb	r3, r3
 8004f4c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004f4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	dce9      	bgt.n	8004f2a <prvUnlockQueue+0x16>
 8004f56:	e000      	b.n	8004f5a <prvUnlockQueue+0x46>
					break;
 8004f58:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	22ff      	movs	r2, #255	; 0xff
 8004f5e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8004f62:	f001 fd67 	bl	8006a34 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004f66:	f001 fd37 	bl	80069d8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004f70:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004f72:	e011      	b.n	8004f98 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	691b      	ldr	r3, [r3, #16]
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d012      	beq.n	8004fa2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	3310      	adds	r3, #16
 8004f80:	4618      	mov	r0, r3
 8004f82:	f000 fccd 	bl	8005920 <xTaskRemoveFromEventList>
 8004f86:	4603      	mov	r3, r0
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d001      	beq.n	8004f90 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004f8c:	f000 fda0 	bl	8005ad0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004f90:	7bbb      	ldrb	r3, [r7, #14]
 8004f92:	3b01      	subs	r3, #1
 8004f94:	b2db      	uxtb	r3, r3
 8004f96:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004f98:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	dce9      	bgt.n	8004f74 <prvUnlockQueue+0x60>
 8004fa0:	e000      	b.n	8004fa4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004fa2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	22ff      	movs	r2, #255	; 0xff
 8004fa8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8004fac:	f001 fd42 	bl	8006a34 <vPortExitCritical>
}
 8004fb0:	bf00      	nop
 8004fb2:	3710      	adds	r7, #16
 8004fb4:	46bd      	mov	sp, r7
 8004fb6:	bd80      	pop	{r7, pc}

08004fb8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004fb8:	b580      	push	{r7, lr}
 8004fba:	b084      	sub	sp, #16
 8004fbc:	af00      	add	r7, sp, #0
 8004fbe:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004fc0:	f001 fd0a 	bl	80069d8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d102      	bne.n	8004fd2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004fcc:	2301      	movs	r3, #1
 8004fce:	60fb      	str	r3, [r7, #12]
 8004fd0:	e001      	b.n	8004fd6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004fd2:	2300      	movs	r3, #0
 8004fd4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004fd6:	f001 fd2d 	bl	8006a34 <vPortExitCritical>

	return xReturn;
 8004fda:	68fb      	ldr	r3, [r7, #12]
}
 8004fdc:	4618      	mov	r0, r3
 8004fde:	3710      	adds	r7, #16
 8004fe0:	46bd      	mov	sp, r7
 8004fe2:	bd80      	pop	{r7, pc}

08004fe4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004fe4:	b580      	push	{r7, lr}
 8004fe6:	b084      	sub	sp, #16
 8004fe8:	af00      	add	r7, sp, #0
 8004fea:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004fec:	f001 fcf4 	bl	80069d8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ff8:	429a      	cmp	r2, r3
 8004ffa:	d102      	bne.n	8005002 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004ffc:	2301      	movs	r3, #1
 8004ffe:	60fb      	str	r3, [r7, #12]
 8005000:	e001      	b.n	8005006 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005002:	2300      	movs	r3, #0
 8005004:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005006:	f001 fd15 	bl	8006a34 <vPortExitCritical>

	return xReturn;
 800500a:	68fb      	ldr	r3, [r7, #12]
}
 800500c:	4618      	mov	r0, r3
 800500e:	3710      	adds	r7, #16
 8005010:	46bd      	mov	sp, r7
 8005012:	bd80      	pop	{r7, pc}

08005014 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005014:	b480      	push	{r7}
 8005016:	b085      	sub	sp, #20
 8005018:	af00      	add	r7, sp, #0
 800501a:	6078      	str	r0, [r7, #4]
 800501c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800501e:	2300      	movs	r3, #0
 8005020:	60fb      	str	r3, [r7, #12]
 8005022:	e014      	b.n	800504e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005024:	4a0e      	ldr	r2, [pc, #56]	; (8005060 <vQueueAddToRegistry+0x4c>)
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800502c:	2b00      	cmp	r3, #0
 800502e:	d10b      	bne.n	8005048 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005030:	490b      	ldr	r1, [pc, #44]	; (8005060 <vQueueAddToRegistry+0x4c>)
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	683a      	ldr	r2, [r7, #0]
 8005036:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800503a:	4a09      	ldr	r2, [pc, #36]	; (8005060 <vQueueAddToRegistry+0x4c>)
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	00db      	lsls	r3, r3, #3
 8005040:	4413      	add	r3, r2
 8005042:	687a      	ldr	r2, [r7, #4]
 8005044:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8005046:	e005      	b.n	8005054 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	3301      	adds	r3, #1
 800504c:	60fb      	str	r3, [r7, #12]
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	2b07      	cmp	r3, #7
 8005052:	d9e7      	bls.n	8005024 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005054:	bf00      	nop
 8005056:	3714      	adds	r7, #20
 8005058:	46bd      	mov	sp, r7
 800505a:	bc80      	pop	{r7}
 800505c:	4770      	bx	lr
 800505e:	bf00      	nop
 8005060:	20001678 	.word	0x20001678

08005064 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005064:	b580      	push	{r7, lr}
 8005066:	b086      	sub	sp, #24
 8005068:	af00      	add	r7, sp, #0
 800506a:	60f8      	str	r0, [r7, #12]
 800506c:	60b9      	str	r1, [r7, #8]
 800506e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005074:	f001 fcb0 	bl	80069d8 <vPortEnterCritical>
 8005078:	697b      	ldr	r3, [r7, #20]
 800507a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800507e:	b25b      	sxtb	r3, r3
 8005080:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005084:	d103      	bne.n	800508e <vQueueWaitForMessageRestricted+0x2a>
 8005086:	697b      	ldr	r3, [r7, #20]
 8005088:	2200      	movs	r2, #0
 800508a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800508e:	697b      	ldr	r3, [r7, #20]
 8005090:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005094:	b25b      	sxtb	r3, r3
 8005096:	f1b3 3fff 	cmp.w	r3, #4294967295
 800509a:	d103      	bne.n	80050a4 <vQueueWaitForMessageRestricted+0x40>
 800509c:	697b      	ldr	r3, [r7, #20]
 800509e:	2200      	movs	r2, #0
 80050a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80050a4:	f001 fcc6 	bl	8006a34 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80050a8:	697b      	ldr	r3, [r7, #20]
 80050aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d106      	bne.n	80050be <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80050b0:	697b      	ldr	r3, [r7, #20]
 80050b2:	3324      	adds	r3, #36	; 0x24
 80050b4:	687a      	ldr	r2, [r7, #4]
 80050b6:	68b9      	ldr	r1, [r7, #8]
 80050b8:	4618      	mov	r0, r3
 80050ba:	f000 fc07 	bl	80058cc <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80050be:	6978      	ldr	r0, [r7, #20]
 80050c0:	f7ff ff28 	bl	8004f14 <prvUnlockQueue>
	}
 80050c4:	bf00      	nop
 80050c6:	3718      	adds	r7, #24
 80050c8:	46bd      	mov	sp, r7
 80050ca:	bd80      	pop	{r7, pc}

080050cc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80050cc:	b580      	push	{r7, lr}
 80050ce:	b08e      	sub	sp, #56	; 0x38
 80050d0:	af04      	add	r7, sp, #16
 80050d2:	60f8      	str	r0, [r7, #12]
 80050d4:	60b9      	str	r1, [r7, #8]
 80050d6:	607a      	str	r2, [r7, #4]
 80050d8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80050da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d109      	bne.n	80050f4 <xTaskCreateStatic+0x28>
	__asm volatile
 80050e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050e4:	f383 8811 	msr	BASEPRI, r3
 80050e8:	f3bf 8f6f 	isb	sy
 80050ec:	f3bf 8f4f 	dsb	sy
 80050f0:	623b      	str	r3, [r7, #32]
 80050f2:	e7fe      	b.n	80050f2 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 80050f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d109      	bne.n	800510e <xTaskCreateStatic+0x42>
 80050fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050fe:	f383 8811 	msr	BASEPRI, r3
 8005102:	f3bf 8f6f 	isb	sy
 8005106:	f3bf 8f4f 	dsb	sy
 800510a:	61fb      	str	r3, [r7, #28]
 800510c:	e7fe      	b.n	800510c <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800510e:	2354      	movs	r3, #84	; 0x54
 8005110:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005112:	693b      	ldr	r3, [r7, #16]
 8005114:	2b54      	cmp	r3, #84	; 0x54
 8005116:	d009      	beq.n	800512c <xTaskCreateStatic+0x60>
 8005118:	f04f 0350 	mov.w	r3, #80	; 0x50
 800511c:	f383 8811 	msr	BASEPRI, r3
 8005120:	f3bf 8f6f 	isb	sy
 8005124:	f3bf 8f4f 	dsb	sy
 8005128:	61bb      	str	r3, [r7, #24]
 800512a:	e7fe      	b.n	800512a <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800512c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800512e:	2b00      	cmp	r3, #0
 8005130:	d01e      	beq.n	8005170 <xTaskCreateStatic+0xa4>
 8005132:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005134:	2b00      	cmp	r3, #0
 8005136:	d01b      	beq.n	8005170 <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005138:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800513a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800513c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800513e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005140:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005144:	2202      	movs	r2, #2
 8005146:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800514a:	2300      	movs	r3, #0
 800514c:	9303      	str	r3, [sp, #12]
 800514e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005150:	9302      	str	r3, [sp, #8]
 8005152:	f107 0314 	add.w	r3, r7, #20
 8005156:	9301      	str	r3, [sp, #4]
 8005158:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800515a:	9300      	str	r3, [sp, #0]
 800515c:	683b      	ldr	r3, [r7, #0]
 800515e:	687a      	ldr	r2, [r7, #4]
 8005160:	68b9      	ldr	r1, [r7, #8]
 8005162:	68f8      	ldr	r0, [r7, #12]
 8005164:	f000 f850 	bl	8005208 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005168:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800516a:	f000 f8d3 	bl	8005314 <prvAddNewTaskToReadyList>
 800516e:	e001      	b.n	8005174 <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 8005170:	2300      	movs	r3, #0
 8005172:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005174:	697b      	ldr	r3, [r7, #20]
	}
 8005176:	4618      	mov	r0, r3
 8005178:	3728      	adds	r7, #40	; 0x28
 800517a:	46bd      	mov	sp, r7
 800517c:	bd80      	pop	{r7, pc}

0800517e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800517e:	b580      	push	{r7, lr}
 8005180:	b08c      	sub	sp, #48	; 0x30
 8005182:	af04      	add	r7, sp, #16
 8005184:	60f8      	str	r0, [r7, #12]
 8005186:	60b9      	str	r1, [r7, #8]
 8005188:	603b      	str	r3, [r7, #0]
 800518a:	4613      	mov	r3, r2
 800518c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800518e:	88fb      	ldrh	r3, [r7, #6]
 8005190:	009b      	lsls	r3, r3, #2
 8005192:	4618      	mov	r0, r3
 8005194:	f001 fd16 	bl	8006bc4 <pvPortMalloc>
 8005198:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800519a:	697b      	ldr	r3, [r7, #20]
 800519c:	2b00      	cmp	r3, #0
 800519e:	d00e      	beq.n	80051be <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80051a0:	2054      	movs	r0, #84	; 0x54
 80051a2:	f001 fd0f 	bl	8006bc4 <pvPortMalloc>
 80051a6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80051a8:	69fb      	ldr	r3, [r7, #28]
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d003      	beq.n	80051b6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80051ae:	69fb      	ldr	r3, [r7, #28]
 80051b0:	697a      	ldr	r2, [r7, #20]
 80051b2:	631a      	str	r2, [r3, #48]	; 0x30
 80051b4:	e005      	b.n	80051c2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80051b6:	6978      	ldr	r0, [r7, #20]
 80051b8:	f001 fdca 	bl	8006d50 <vPortFree>
 80051bc:	e001      	b.n	80051c2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80051be:	2300      	movs	r3, #0
 80051c0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80051c2:	69fb      	ldr	r3, [r7, #28]
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d017      	beq.n	80051f8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80051c8:	69fb      	ldr	r3, [r7, #28]
 80051ca:	2200      	movs	r2, #0
 80051cc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80051d0:	88fa      	ldrh	r2, [r7, #6]
 80051d2:	2300      	movs	r3, #0
 80051d4:	9303      	str	r3, [sp, #12]
 80051d6:	69fb      	ldr	r3, [r7, #28]
 80051d8:	9302      	str	r3, [sp, #8]
 80051da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051dc:	9301      	str	r3, [sp, #4]
 80051de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051e0:	9300      	str	r3, [sp, #0]
 80051e2:	683b      	ldr	r3, [r7, #0]
 80051e4:	68b9      	ldr	r1, [r7, #8]
 80051e6:	68f8      	ldr	r0, [r7, #12]
 80051e8:	f000 f80e 	bl	8005208 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80051ec:	69f8      	ldr	r0, [r7, #28]
 80051ee:	f000 f891 	bl	8005314 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80051f2:	2301      	movs	r3, #1
 80051f4:	61bb      	str	r3, [r7, #24]
 80051f6:	e002      	b.n	80051fe <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80051f8:	f04f 33ff 	mov.w	r3, #4294967295
 80051fc:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80051fe:	69bb      	ldr	r3, [r7, #24]
	}
 8005200:	4618      	mov	r0, r3
 8005202:	3720      	adds	r7, #32
 8005204:	46bd      	mov	sp, r7
 8005206:	bd80      	pop	{r7, pc}

08005208 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005208:	b580      	push	{r7, lr}
 800520a:	b088      	sub	sp, #32
 800520c:	af00      	add	r7, sp, #0
 800520e:	60f8      	str	r0, [r7, #12]
 8005210:	60b9      	str	r1, [r7, #8]
 8005212:	607a      	str	r2, [r7, #4]
 8005214:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005216:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005218:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	009b      	lsls	r3, r3, #2
 800521e:	461a      	mov	r2, r3
 8005220:	21a5      	movs	r1, #165	; 0xa5
 8005222:	f001 fedc 	bl	8006fde <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8005226:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005228:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005230:	3b01      	subs	r3, #1
 8005232:	009b      	lsls	r3, r3, #2
 8005234:	4413      	add	r3, r2
 8005236:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8005238:	69bb      	ldr	r3, [r7, #24]
 800523a:	f023 0307 	bic.w	r3, r3, #7
 800523e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005240:	69bb      	ldr	r3, [r7, #24]
 8005242:	f003 0307 	and.w	r3, r3, #7
 8005246:	2b00      	cmp	r3, #0
 8005248:	d009      	beq.n	800525e <prvInitialiseNewTask+0x56>
 800524a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800524e:	f383 8811 	msr	BASEPRI, r3
 8005252:	f3bf 8f6f 	isb	sy
 8005256:	f3bf 8f4f 	dsb	sy
 800525a:	617b      	str	r3, [r7, #20]
 800525c:	e7fe      	b.n	800525c <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800525e:	2300      	movs	r3, #0
 8005260:	61fb      	str	r3, [r7, #28]
 8005262:	e012      	b.n	800528a <prvInitialiseNewTask+0x82>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005264:	68ba      	ldr	r2, [r7, #8]
 8005266:	69fb      	ldr	r3, [r7, #28]
 8005268:	4413      	add	r3, r2
 800526a:	7819      	ldrb	r1, [r3, #0]
 800526c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800526e:	69fb      	ldr	r3, [r7, #28]
 8005270:	4413      	add	r3, r2
 8005272:	3334      	adds	r3, #52	; 0x34
 8005274:	460a      	mov	r2, r1
 8005276:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8005278:	68ba      	ldr	r2, [r7, #8]
 800527a:	69fb      	ldr	r3, [r7, #28]
 800527c:	4413      	add	r3, r2
 800527e:	781b      	ldrb	r3, [r3, #0]
 8005280:	2b00      	cmp	r3, #0
 8005282:	d006      	beq.n	8005292 <prvInitialiseNewTask+0x8a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005284:	69fb      	ldr	r3, [r7, #28]
 8005286:	3301      	adds	r3, #1
 8005288:	61fb      	str	r3, [r7, #28]
 800528a:	69fb      	ldr	r3, [r7, #28]
 800528c:	2b0f      	cmp	r3, #15
 800528e:	d9e9      	bls.n	8005264 <prvInitialiseNewTask+0x5c>
 8005290:	e000      	b.n	8005294 <prvInitialiseNewTask+0x8c>
		{
			break;
 8005292:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005294:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005296:	2200      	movs	r2, #0
 8005298:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800529c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800529e:	2b06      	cmp	r3, #6
 80052a0:	d901      	bls.n	80052a6 <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80052a2:	2306      	movs	r3, #6
 80052a4:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80052a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052a8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80052aa:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80052ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052ae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80052b0:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80052b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052b4:	2200      	movs	r2, #0
 80052b6:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80052b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052ba:	3304      	adds	r3, #4
 80052bc:	4618      	mov	r0, r3
 80052be:	f7fe ff32 	bl	8004126 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80052c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052c4:	3318      	adds	r3, #24
 80052c6:	4618      	mov	r0, r3
 80052c8:	f7fe ff2d 	bl	8004126 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80052cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052ce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80052d0:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80052d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052d4:	f1c3 0207 	rsb	r2, r3, #7
 80052d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052da:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80052dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052de:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80052e0:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80052e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052e4:	2200      	movs	r2, #0
 80052e6:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80052e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052ea:	2200      	movs	r2, #0
 80052ec:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80052f0:	683a      	ldr	r2, [r7, #0]
 80052f2:	68f9      	ldr	r1, [r7, #12]
 80052f4:	69b8      	ldr	r0, [r7, #24]
 80052f6:	f001 fa85 	bl	8006804 <pxPortInitialiseStack>
 80052fa:	4602      	mov	r2, r0
 80052fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052fe:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8005300:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005302:	2b00      	cmp	r3, #0
 8005304:	d002      	beq.n	800530c <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005306:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005308:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800530a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800530c:	bf00      	nop
 800530e:	3720      	adds	r7, #32
 8005310:	46bd      	mov	sp, r7
 8005312:	bd80      	pop	{r7, pc}

08005314 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005314:	b580      	push	{r7, lr}
 8005316:	b082      	sub	sp, #8
 8005318:	af00      	add	r7, sp, #0
 800531a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800531c:	f001 fb5c 	bl	80069d8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005320:	4b24      	ldr	r3, [pc, #144]	; (80053b4 <prvAddNewTaskToReadyList+0xa0>)
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	3301      	adds	r3, #1
 8005326:	4a23      	ldr	r2, [pc, #140]	; (80053b4 <prvAddNewTaskToReadyList+0xa0>)
 8005328:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800532a:	4b23      	ldr	r3, [pc, #140]	; (80053b8 <prvAddNewTaskToReadyList+0xa4>)
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	2b00      	cmp	r3, #0
 8005330:	d109      	bne.n	8005346 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005332:	4a21      	ldr	r2, [pc, #132]	; (80053b8 <prvAddNewTaskToReadyList+0xa4>)
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005338:	4b1e      	ldr	r3, [pc, #120]	; (80053b4 <prvAddNewTaskToReadyList+0xa0>)
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	2b01      	cmp	r3, #1
 800533e:	d110      	bne.n	8005362 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005340:	f000 fbe4 	bl	8005b0c <prvInitialiseTaskLists>
 8005344:	e00d      	b.n	8005362 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005346:	4b1d      	ldr	r3, [pc, #116]	; (80053bc <prvAddNewTaskToReadyList+0xa8>)
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	2b00      	cmp	r3, #0
 800534c:	d109      	bne.n	8005362 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800534e:	4b1a      	ldr	r3, [pc, #104]	; (80053b8 <prvAddNewTaskToReadyList+0xa4>)
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005358:	429a      	cmp	r2, r3
 800535a:	d802      	bhi.n	8005362 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800535c:	4a16      	ldr	r2, [pc, #88]	; (80053b8 <prvAddNewTaskToReadyList+0xa4>)
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005362:	4b17      	ldr	r3, [pc, #92]	; (80053c0 <prvAddNewTaskToReadyList+0xac>)
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	3301      	adds	r3, #1
 8005368:	4a15      	ldr	r2, [pc, #84]	; (80053c0 <prvAddNewTaskToReadyList+0xac>)
 800536a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005370:	2201      	movs	r2, #1
 8005372:	409a      	lsls	r2, r3
 8005374:	4b13      	ldr	r3, [pc, #76]	; (80053c4 <prvAddNewTaskToReadyList+0xb0>)
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	4313      	orrs	r3, r2
 800537a:	4a12      	ldr	r2, [pc, #72]	; (80053c4 <prvAddNewTaskToReadyList+0xb0>)
 800537c:	6013      	str	r3, [r2, #0]
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005382:	4613      	mov	r3, r2
 8005384:	009b      	lsls	r3, r3, #2
 8005386:	4413      	add	r3, r2
 8005388:	009b      	lsls	r3, r3, #2
 800538a:	4a0f      	ldr	r2, [pc, #60]	; (80053c8 <prvAddNewTaskToReadyList+0xb4>)
 800538c:	441a      	add	r2, r3
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	3304      	adds	r3, #4
 8005392:	4619      	mov	r1, r3
 8005394:	4610      	mov	r0, r2
 8005396:	f7fe fed2 	bl	800413e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800539a:	f001 fb4b 	bl	8006a34 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800539e:	4b07      	ldr	r3, [pc, #28]	; (80053bc <prvAddNewTaskToReadyList+0xa8>)
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d001      	beq.n	80053aa <prvAddNewTaskToReadyList+0x96>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80053a6:	4b04      	ldr	r3, [pc, #16]	; (80053b8 <prvAddNewTaskToReadyList+0xa4>)
 80053a8:	681b      	ldr	r3, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80053aa:	bf00      	nop
 80053ac:	3708      	adds	r7, #8
 80053ae:	46bd      	mov	sp, r7
 80053b0:	bd80      	pop	{r7, pc}
 80053b2:	bf00      	nop
 80053b4:	20000650 	.word	0x20000650
 80053b8:	20000550 	.word	0x20000550
 80053bc:	2000065c 	.word	0x2000065c
 80053c0:	2000066c 	.word	0x2000066c
 80053c4:	20000658 	.word	0x20000658
 80053c8:	20000554 	.word	0x20000554

080053cc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80053cc:	b580      	push	{r7, lr}
 80053ce:	b084      	sub	sp, #16
 80053d0:	af00      	add	r7, sp, #0
 80053d2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80053d4:	2300      	movs	r3, #0
 80053d6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d016      	beq.n	800540c <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80053de:	4b13      	ldr	r3, [pc, #76]	; (800542c <vTaskDelay+0x60>)
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d009      	beq.n	80053fa <vTaskDelay+0x2e>
 80053e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053ea:	f383 8811 	msr	BASEPRI, r3
 80053ee:	f3bf 8f6f 	isb	sy
 80053f2:	f3bf 8f4f 	dsb	sy
 80053f6:	60bb      	str	r3, [r7, #8]
 80053f8:	e7fe      	b.n	80053f8 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 80053fa:	f000 f87f 	bl	80054fc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80053fe:	2100      	movs	r1, #0
 8005400:	6878      	ldr	r0, [r7, #4]
 8005402:	f000 fe1b 	bl	800603c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005406:	f000 f887 	bl	8005518 <xTaskResumeAll>
 800540a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	2b00      	cmp	r3, #0
 8005410:	d107      	bne.n	8005422 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8005412:	4b07      	ldr	r3, [pc, #28]	; (8005430 <vTaskDelay+0x64>)
 8005414:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005418:	601a      	str	r2, [r3, #0]
 800541a:	f3bf 8f4f 	dsb	sy
 800541e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005422:	bf00      	nop
 8005424:	3710      	adds	r7, #16
 8005426:	46bd      	mov	sp, r7
 8005428:	bd80      	pop	{r7, pc}
 800542a:	bf00      	nop
 800542c:	20000678 	.word	0x20000678
 8005430:	e000ed04 	.word	0xe000ed04

08005434 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005434:	b580      	push	{r7, lr}
 8005436:	b08a      	sub	sp, #40	; 0x28
 8005438:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800543a:	2300      	movs	r3, #0
 800543c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800543e:	2300      	movs	r3, #0
 8005440:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005442:	463a      	mov	r2, r7
 8005444:	1d39      	adds	r1, r7, #4
 8005446:	f107 0308 	add.w	r3, r7, #8
 800544a:	4618      	mov	r0, r3
 800544c:	f7fa fe98 	bl	8000180 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005450:	6839      	ldr	r1, [r7, #0]
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	68ba      	ldr	r2, [r7, #8]
 8005456:	9202      	str	r2, [sp, #8]
 8005458:	9301      	str	r3, [sp, #4]
 800545a:	2300      	movs	r3, #0
 800545c:	9300      	str	r3, [sp, #0]
 800545e:	2300      	movs	r3, #0
 8005460:	460a      	mov	r2, r1
 8005462:	4920      	ldr	r1, [pc, #128]	; (80054e4 <vTaskStartScheduler+0xb0>)
 8005464:	4820      	ldr	r0, [pc, #128]	; (80054e8 <vTaskStartScheduler+0xb4>)
 8005466:	f7ff fe31 	bl	80050cc <xTaskCreateStatic>
 800546a:	4602      	mov	r2, r0
 800546c:	4b1f      	ldr	r3, [pc, #124]	; (80054ec <vTaskStartScheduler+0xb8>)
 800546e:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005470:	4b1e      	ldr	r3, [pc, #120]	; (80054ec <vTaskStartScheduler+0xb8>)
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	2b00      	cmp	r3, #0
 8005476:	d002      	beq.n	800547e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005478:	2301      	movs	r3, #1
 800547a:	617b      	str	r3, [r7, #20]
 800547c:	e001      	b.n	8005482 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800547e:	2300      	movs	r3, #0
 8005480:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8005482:	697b      	ldr	r3, [r7, #20]
 8005484:	2b01      	cmp	r3, #1
 8005486:	d102      	bne.n	800548e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8005488:	f000 fe3e 	bl	8006108 <xTimerCreateTimerTask>
 800548c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800548e:	697b      	ldr	r3, [r7, #20]
 8005490:	2b01      	cmp	r3, #1
 8005492:	d115      	bne.n	80054c0 <vTaskStartScheduler+0x8c>
 8005494:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005498:	f383 8811 	msr	BASEPRI, r3
 800549c:	f3bf 8f6f 	isb	sy
 80054a0:	f3bf 8f4f 	dsb	sy
 80054a4:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80054a6:	4b12      	ldr	r3, [pc, #72]	; (80054f0 <vTaskStartScheduler+0xbc>)
 80054a8:	f04f 32ff 	mov.w	r2, #4294967295
 80054ac:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80054ae:	4b11      	ldr	r3, [pc, #68]	; (80054f4 <vTaskStartScheduler+0xc0>)
 80054b0:	2201      	movs	r2, #1
 80054b2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80054b4:	4b10      	ldr	r3, [pc, #64]	; (80054f8 <vTaskStartScheduler+0xc4>)
 80054b6:	2200      	movs	r2, #0
 80054b8:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80054ba:	f001 fa1d 	bl	80068f8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80054be:	e00d      	b.n	80054dc <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80054c0:	697b      	ldr	r3, [r7, #20]
 80054c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054c6:	d109      	bne.n	80054dc <vTaskStartScheduler+0xa8>
 80054c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054cc:	f383 8811 	msr	BASEPRI, r3
 80054d0:	f3bf 8f6f 	isb	sy
 80054d4:	f3bf 8f4f 	dsb	sy
 80054d8:	60fb      	str	r3, [r7, #12]
 80054da:	e7fe      	b.n	80054da <vTaskStartScheduler+0xa6>
}
 80054dc:	bf00      	nop
 80054de:	3718      	adds	r7, #24
 80054e0:	46bd      	mov	sp, r7
 80054e2:	bd80      	pop	{r7, pc}
 80054e4:	08007a24 	.word	0x08007a24
 80054e8:	08005ae9 	.word	0x08005ae9
 80054ec:	20000674 	.word	0x20000674
 80054f0:	20000670 	.word	0x20000670
 80054f4:	2000065c 	.word	0x2000065c
 80054f8:	20000654 	.word	0x20000654

080054fc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80054fc:	b480      	push	{r7}
 80054fe:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8005500:	4b04      	ldr	r3, [pc, #16]	; (8005514 <vTaskSuspendAll+0x18>)
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	3301      	adds	r3, #1
 8005506:	4a03      	ldr	r2, [pc, #12]	; (8005514 <vTaskSuspendAll+0x18>)
 8005508:	6013      	str	r3, [r2, #0]
}
 800550a:	bf00      	nop
 800550c:	46bd      	mov	sp, r7
 800550e:	bc80      	pop	{r7}
 8005510:	4770      	bx	lr
 8005512:	bf00      	nop
 8005514:	20000678 	.word	0x20000678

08005518 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005518:	b580      	push	{r7, lr}
 800551a:	b084      	sub	sp, #16
 800551c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800551e:	2300      	movs	r3, #0
 8005520:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005522:	2300      	movs	r3, #0
 8005524:	607b      	str	r3, [r7, #4]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005526:	4b3b      	ldr	r3, [pc, #236]	; (8005614 <xTaskResumeAll+0xfc>)
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	2b00      	cmp	r3, #0
 800552c:	d109      	bne.n	8005542 <xTaskResumeAll+0x2a>
 800552e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005532:	f383 8811 	msr	BASEPRI, r3
 8005536:	f3bf 8f6f 	isb	sy
 800553a:	f3bf 8f4f 	dsb	sy
 800553e:	603b      	str	r3, [r7, #0]
 8005540:	e7fe      	b.n	8005540 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005542:	f001 fa49 	bl	80069d8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005546:	4b33      	ldr	r3, [pc, #204]	; (8005614 <xTaskResumeAll+0xfc>)
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	3b01      	subs	r3, #1
 800554c:	4a31      	ldr	r2, [pc, #196]	; (8005614 <xTaskResumeAll+0xfc>)
 800554e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005550:	4b30      	ldr	r3, [pc, #192]	; (8005614 <xTaskResumeAll+0xfc>)
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	2b00      	cmp	r3, #0
 8005556:	d155      	bne.n	8005604 <xTaskResumeAll+0xec>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005558:	4b2f      	ldr	r3, [pc, #188]	; (8005618 <xTaskResumeAll+0x100>)
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	2b00      	cmp	r3, #0
 800555e:	d051      	beq.n	8005604 <xTaskResumeAll+0xec>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005560:	e02e      	b.n	80055c0 <xTaskResumeAll+0xa8>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8005562:	4b2e      	ldr	r3, [pc, #184]	; (800561c <xTaskResumeAll+0x104>)
 8005564:	68db      	ldr	r3, [r3, #12]
 8005566:	68db      	ldr	r3, [r3, #12]
 8005568:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	3318      	adds	r3, #24
 800556e:	4618      	mov	r0, r3
 8005570:	f7fe fe40 	bl	80041f4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	3304      	adds	r3, #4
 8005578:	4618      	mov	r0, r3
 800557a:	f7fe fe3b 	bl	80041f4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005582:	2201      	movs	r2, #1
 8005584:	409a      	lsls	r2, r3
 8005586:	4b26      	ldr	r3, [pc, #152]	; (8005620 <xTaskResumeAll+0x108>)
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	4313      	orrs	r3, r2
 800558c:	4a24      	ldr	r2, [pc, #144]	; (8005620 <xTaskResumeAll+0x108>)
 800558e:	6013      	str	r3, [r2, #0]
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005594:	4613      	mov	r3, r2
 8005596:	009b      	lsls	r3, r3, #2
 8005598:	4413      	add	r3, r2
 800559a:	009b      	lsls	r3, r3, #2
 800559c:	4a21      	ldr	r2, [pc, #132]	; (8005624 <xTaskResumeAll+0x10c>)
 800559e:	441a      	add	r2, r3
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	3304      	adds	r3, #4
 80055a4:	4619      	mov	r1, r3
 80055a6:	4610      	mov	r0, r2
 80055a8:	f7fe fdc9 	bl	800413e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80055b0:	4b1d      	ldr	r3, [pc, #116]	; (8005628 <xTaskResumeAll+0x110>)
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055b6:	429a      	cmp	r2, r3
 80055b8:	d302      	bcc.n	80055c0 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 80055ba:	4b1c      	ldr	r3, [pc, #112]	; (800562c <xTaskResumeAll+0x114>)
 80055bc:	2201      	movs	r2, #1
 80055be:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80055c0:	4b16      	ldr	r3, [pc, #88]	; (800561c <xTaskResumeAll+0x104>)
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d1cc      	bne.n	8005562 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d001      	beq.n	80055d2 <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80055ce:	f000 fb37 	bl	8005c40 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80055d2:	4b17      	ldr	r3, [pc, #92]	; (8005630 <xTaskResumeAll+0x118>)
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	60bb      	str	r3, [r7, #8]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80055d8:	68bb      	ldr	r3, [r7, #8]
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d010      	beq.n	8005600 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80055de:	f000 f837 	bl	8005650 <xTaskIncrementTick>
 80055e2:	4603      	mov	r3, r0
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d002      	beq.n	80055ee <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 80055e8:	4b10      	ldr	r3, [pc, #64]	; (800562c <xTaskResumeAll+0x114>)
 80055ea:	2201      	movs	r2, #1
 80055ec:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80055ee:	68bb      	ldr	r3, [r7, #8]
 80055f0:	3b01      	subs	r3, #1
 80055f2:	60bb      	str	r3, [r7, #8]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80055f4:	68bb      	ldr	r3, [r7, #8]
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d1f1      	bne.n	80055de <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 80055fa:	4b0d      	ldr	r3, [pc, #52]	; (8005630 <xTaskResumeAll+0x118>)
 80055fc:	2200      	movs	r2, #0
 80055fe:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005600:	4b0a      	ldr	r3, [pc, #40]	; (800562c <xTaskResumeAll+0x114>)
 8005602:	681b      	ldr	r3, [r3, #0]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005604:	f001 fa16 	bl	8006a34 <vPortExitCritical>

	return xAlreadyYielded;
 8005608:	687b      	ldr	r3, [r7, #4]
}
 800560a:	4618      	mov	r0, r3
 800560c:	3710      	adds	r7, #16
 800560e:	46bd      	mov	sp, r7
 8005610:	bd80      	pop	{r7, pc}
 8005612:	bf00      	nop
 8005614:	20000678 	.word	0x20000678
 8005618:	20000650 	.word	0x20000650
 800561c:	20000610 	.word	0x20000610
 8005620:	20000658 	.word	0x20000658
 8005624:	20000554 	.word	0x20000554
 8005628:	20000550 	.word	0x20000550
 800562c:	20000664 	.word	0x20000664
 8005630:	20000660 	.word	0x20000660

08005634 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005634:	b480      	push	{r7}
 8005636:	b083      	sub	sp, #12
 8005638:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800563a:	4b04      	ldr	r3, [pc, #16]	; (800564c <xTaskGetTickCount+0x18>)
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005640:	687b      	ldr	r3, [r7, #4]
}
 8005642:	4618      	mov	r0, r3
 8005644:	370c      	adds	r7, #12
 8005646:	46bd      	mov	sp, r7
 8005648:	bc80      	pop	{r7}
 800564a:	4770      	bx	lr
 800564c:	20000654 	.word	0x20000654

08005650 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005650:	b580      	push	{r7, lr}
 8005652:	b086      	sub	sp, #24
 8005654:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005656:	2300      	movs	r3, #0
 8005658:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800565a:	4b41      	ldr	r3, [pc, #260]	; (8005760 <xTaskIncrementTick+0x110>)
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	2b00      	cmp	r3, #0
 8005660:	d173      	bne.n	800574a <xTaskIncrementTick+0xfa>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005662:	4b40      	ldr	r3, [pc, #256]	; (8005764 <xTaskIncrementTick+0x114>)
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	3301      	adds	r3, #1
 8005668:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800566a:	4a3e      	ldr	r2, [pc, #248]	; (8005764 <xTaskIncrementTick+0x114>)
 800566c:	693b      	ldr	r3, [r7, #16]
 800566e:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005670:	693b      	ldr	r3, [r7, #16]
 8005672:	2b00      	cmp	r3, #0
 8005674:	d11f      	bne.n	80056b6 <xTaskIncrementTick+0x66>
		{
			taskSWITCH_DELAYED_LISTS();
 8005676:	4b3c      	ldr	r3, [pc, #240]	; (8005768 <xTaskIncrementTick+0x118>)
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	2b00      	cmp	r3, #0
 800567e:	d009      	beq.n	8005694 <xTaskIncrementTick+0x44>
 8005680:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005684:	f383 8811 	msr	BASEPRI, r3
 8005688:	f3bf 8f6f 	isb	sy
 800568c:	f3bf 8f4f 	dsb	sy
 8005690:	603b      	str	r3, [r7, #0]
 8005692:	e7fe      	b.n	8005692 <xTaskIncrementTick+0x42>
 8005694:	4b34      	ldr	r3, [pc, #208]	; (8005768 <xTaskIncrementTick+0x118>)
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	60fb      	str	r3, [r7, #12]
 800569a:	4b34      	ldr	r3, [pc, #208]	; (800576c <xTaskIncrementTick+0x11c>)
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	4a32      	ldr	r2, [pc, #200]	; (8005768 <xTaskIncrementTick+0x118>)
 80056a0:	6013      	str	r3, [r2, #0]
 80056a2:	4a32      	ldr	r2, [pc, #200]	; (800576c <xTaskIncrementTick+0x11c>)
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	6013      	str	r3, [r2, #0]
 80056a8:	4b31      	ldr	r3, [pc, #196]	; (8005770 <xTaskIncrementTick+0x120>)
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	3301      	adds	r3, #1
 80056ae:	4a30      	ldr	r2, [pc, #192]	; (8005770 <xTaskIncrementTick+0x120>)
 80056b0:	6013      	str	r3, [r2, #0]
 80056b2:	f000 fac5 	bl	8005c40 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80056b6:	4b2f      	ldr	r3, [pc, #188]	; (8005774 <xTaskIncrementTick+0x124>)
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	693a      	ldr	r2, [r7, #16]
 80056bc:	429a      	cmp	r2, r3
 80056be:	d349      	bcc.n	8005754 <xTaskIncrementTick+0x104>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80056c0:	4b29      	ldr	r3, [pc, #164]	; (8005768 <xTaskIncrementTick+0x118>)
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d101      	bne.n	80056ce <xTaskIncrementTick+0x7e>
 80056ca:	2301      	movs	r3, #1
 80056cc:	e000      	b.n	80056d0 <xTaskIncrementTick+0x80>
 80056ce:	2300      	movs	r3, #0
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d004      	beq.n	80056de <xTaskIncrementTick+0x8e>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80056d4:	4b27      	ldr	r3, [pc, #156]	; (8005774 <xTaskIncrementTick+0x124>)
 80056d6:	f04f 32ff 	mov.w	r2, #4294967295
 80056da:	601a      	str	r2, [r3, #0]
					break;
 80056dc:	e03a      	b.n	8005754 <xTaskIncrementTick+0x104>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80056de:	4b22      	ldr	r3, [pc, #136]	; (8005768 <xTaskIncrementTick+0x118>)
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	68db      	ldr	r3, [r3, #12]
 80056e4:	68db      	ldr	r3, [r3, #12]
 80056e6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80056e8:	68bb      	ldr	r3, [r7, #8]
 80056ea:	685b      	ldr	r3, [r3, #4]
 80056ec:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80056ee:	693a      	ldr	r2, [r7, #16]
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	429a      	cmp	r2, r3
 80056f4:	d203      	bcs.n	80056fe <xTaskIncrementTick+0xae>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80056f6:	4a1f      	ldr	r2, [pc, #124]	; (8005774 <xTaskIncrementTick+0x124>)
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	6013      	str	r3, [r2, #0]
						break;
 80056fc:	e02a      	b.n	8005754 <xTaskIncrementTick+0x104>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80056fe:	68bb      	ldr	r3, [r7, #8]
 8005700:	3304      	adds	r3, #4
 8005702:	4618      	mov	r0, r3
 8005704:	f7fe fd76 	bl	80041f4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005708:	68bb      	ldr	r3, [r7, #8]
 800570a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800570c:	2b00      	cmp	r3, #0
 800570e:	d004      	beq.n	800571a <xTaskIncrementTick+0xca>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005710:	68bb      	ldr	r3, [r7, #8]
 8005712:	3318      	adds	r3, #24
 8005714:	4618      	mov	r0, r3
 8005716:	f7fe fd6d 	bl	80041f4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800571a:	68bb      	ldr	r3, [r7, #8]
 800571c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800571e:	2201      	movs	r2, #1
 8005720:	409a      	lsls	r2, r3
 8005722:	4b15      	ldr	r3, [pc, #84]	; (8005778 <xTaskIncrementTick+0x128>)
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	4313      	orrs	r3, r2
 8005728:	4a13      	ldr	r2, [pc, #76]	; (8005778 <xTaskIncrementTick+0x128>)
 800572a:	6013      	str	r3, [r2, #0]
 800572c:	68bb      	ldr	r3, [r7, #8]
 800572e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005730:	4613      	mov	r3, r2
 8005732:	009b      	lsls	r3, r3, #2
 8005734:	4413      	add	r3, r2
 8005736:	009b      	lsls	r3, r3, #2
 8005738:	4a10      	ldr	r2, [pc, #64]	; (800577c <xTaskIncrementTick+0x12c>)
 800573a:	441a      	add	r2, r3
 800573c:	68bb      	ldr	r3, [r7, #8]
 800573e:	3304      	adds	r3, #4
 8005740:	4619      	mov	r1, r3
 8005742:	4610      	mov	r0, r2
 8005744:	f7fe fcfb 	bl	800413e <vListInsertEnd>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005748:	e7ba      	b.n	80056c0 <xTaskIncrementTick+0x70>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800574a:	4b0d      	ldr	r3, [pc, #52]	; (8005780 <xTaskIncrementTick+0x130>)
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	3301      	adds	r3, #1
 8005750:	4a0b      	ldr	r2, [pc, #44]	; (8005780 <xTaskIncrementTick+0x130>)
 8005752:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8005754:	697b      	ldr	r3, [r7, #20]
}
 8005756:	4618      	mov	r0, r3
 8005758:	3718      	adds	r7, #24
 800575a:	46bd      	mov	sp, r7
 800575c:	bd80      	pop	{r7, pc}
 800575e:	bf00      	nop
 8005760:	20000678 	.word	0x20000678
 8005764:	20000654 	.word	0x20000654
 8005768:	20000608 	.word	0x20000608
 800576c:	2000060c 	.word	0x2000060c
 8005770:	20000668 	.word	0x20000668
 8005774:	20000670 	.word	0x20000670
 8005778:	20000658 	.word	0x20000658
 800577c:	20000554 	.word	0x20000554
 8005780:	20000660 	.word	0x20000660

08005784 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005784:	b580      	push	{r7, lr}
 8005786:	b088      	sub	sp, #32
 8005788:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800578a:	4b39      	ldr	r3, [pc, #228]	; (8005870 <vTaskSwitchContext+0xec>)
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	2b00      	cmp	r3, #0
 8005790:	d003      	beq.n	800579a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005792:	4b38      	ldr	r3, [pc, #224]	; (8005874 <vTaskSwitchContext+0xf0>)
 8005794:	2201      	movs	r2, #1
 8005796:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005798:	e065      	b.n	8005866 <vTaskSwitchContext+0xe2>
		xYieldPending = pdFALSE;
 800579a:	4b36      	ldr	r3, [pc, #216]	; (8005874 <vTaskSwitchContext+0xf0>)
 800579c:	2200      	movs	r2, #0
 800579e:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 80057a0:	4b35      	ldr	r3, [pc, #212]	; (8005878 <vTaskSwitchContext+0xf4>)
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057a6:	61fb      	str	r3, [r7, #28]
 80057a8:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 80057ac:	61bb      	str	r3, [r7, #24]
 80057ae:	69fb      	ldr	r3, [r7, #28]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	69ba      	ldr	r2, [r7, #24]
 80057b4:	429a      	cmp	r2, r3
 80057b6:	d111      	bne.n	80057dc <vTaskSwitchContext+0x58>
 80057b8:	69fb      	ldr	r3, [r7, #28]
 80057ba:	3304      	adds	r3, #4
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	69ba      	ldr	r2, [r7, #24]
 80057c0:	429a      	cmp	r2, r3
 80057c2:	d10b      	bne.n	80057dc <vTaskSwitchContext+0x58>
 80057c4:	69fb      	ldr	r3, [r7, #28]
 80057c6:	3308      	adds	r3, #8
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	69ba      	ldr	r2, [r7, #24]
 80057cc:	429a      	cmp	r2, r3
 80057ce:	d105      	bne.n	80057dc <vTaskSwitchContext+0x58>
 80057d0:	69fb      	ldr	r3, [r7, #28]
 80057d2:	330c      	adds	r3, #12
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	69ba      	ldr	r2, [r7, #24]
 80057d8:	429a      	cmp	r2, r3
 80057da:	d008      	beq.n	80057ee <vTaskSwitchContext+0x6a>
 80057dc:	4b26      	ldr	r3, [pc, #152]	; (8005878 <vTaskSwitchContext+0xf4>)
 80057de:	681a      	ldr	r2, [r3, #0]
 80057e0:	4b25      	ldr	r3, [pc, #148]	; (8005878 <vTaskSwitchContext+0xf4>)
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	3334      	adds	r3, #52	; 0x34
 80057e6:	4619      	mov	r1, r3
 80057e8:	4610      	mov	r0, r2
 80057ea:	f7fa fcb9 	bl	8000160 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80057ee:	4b23      	ldr	r3, [pc, #140]	; (800587c <vTaskSwitchContext+0xf8>)
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	fab3 f383 	clz	r3, r3
 80057fa:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80057fc:	7afb      	ldrb	r3, [r7, #11]
 80057fe:	f1c3 031f 	rsb	r3, r3, #31
 8005802:	617b      	str	r3, [r7, #20]
 8005804:	491e      	ldr	r1, [pc, #120]	; (8005880 <vTaskSwitchContext+0xfc>)
 8005806:	697a      	ldr	r2, [r7, #20]
 8005808:	4613      	mov	r3, r2
 800580a:	009b      	lsls	r3, r3, #2
 800580c:	4413      	add	r3, r2
 800580e:	009b      	lsls	r3, r3, #2
 8005810:	440b      	add	r3, r1
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	2b00      	cmp	r3, #0
 8005816:	d109      	bne.n	800582c <vTaskSwitchContext+0xa8>
	__asm volatile
 8005818:	f04f 0350 	mov.w	r3, #80	; 0x50
 800581c:	f383 8811 	msr	BASEPRI, r3
 8005820:	f3bf 8f6f 	isb	sy
 8005824:	f3bf 8f4f 	dsb	sy
 8005828:	607b      	str	r3, [r7, #4]
 800582a:	e7fe      	b.n	800582a <vTaskSwitchContext+0xa6>
 800582c:	697a      	ldr	r2, [r7, #20]
 800582e:	4613      	mov	r3, r2
 8005830:	009b      	lsls	r3, r3, #2
 8005832:	4413      	add	r3, r2
 8005834:	009b      	lsls	r3, r3, #2
 8005836:	4a12      	ldr	r2, [pc, #72]	; (8005880 <vTaskSwitchContext+0xfc>)
 8005838:	4413      	add	r3, r2
 800583a:	613b      	str	r3, [r7, #16]
 800583c:	693b      	ldr	r3, [r7, #16]
 800583e:	685b      	ldr	r3, [r3, #4]
 8005840:	685a      	ldr	r2, [r3, #4]
 8005842:	693b      	ldr	r3, [r7, #16]
 8005844:	605a      	str	r2, [r3, #4]
 8005846:	693b      	ldr	r3, [r7, #16]
 8005848:	685a      	ldr	r2, [r3, #4]
 800584a:	693b      	ldr	r3, [r7, #16]
 800584c:	3308      	adds	r3, #8
 800584e:	429a      	cmp	r2, r3
 8005850:	d104      	bne.n	800585c <vTaskSwitchContext+0xd8>
 8005852:	693b      	ldr	r3, [r7, #16]
 8005854:	685b      	ldr	r3, [r3, #4]
 8005856:	685a      	ldr	r2, [r3, #4]
 8005858:	693b      	ldr	r3, [r7, #16]
 800585a:	605a      	str	r2, [r3, #4]
 800585c:	693b      	ldr	r3, [r7, #16]
 800585e:	685b      	ldr	r3, [r3, #4]
 8005860:	68db      	ldr	r3, [r3, #12]
 8005862:	4a05      	ldr	r2, [pc, #20]	; (8005878 <vTaskSwitchContext+0xf4>)
 8005864:	6013      	str	r3, [r2, #0]
}
 8005866:	bf00      	nop
 8005868:	3720      	adds	r7, #32
 800586a:	46bd      	mov	sp, r7
 800586c:	bd80      	pop	{r7, pc}
 800586e:	bf00      	nop
 8005870:	20000678 	.word	0x20000678
 8005874:	20000664 	.word	0x20000664
 8005878:	20000550 	.word	0x20000550
 800587c:	20000658 	.word	0x20000658
 8005880:	20000554 	.word	0x20000554

08005884 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005884:	b580      	push	{r7, lr}
 8005886:	b084      	sub	sp, #16
 8005888:	af00      	add	r7, sp, #0
 800588a:	6078      	str	r0, [r7, #4]
 800588c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	2b00      	cmp	r3, #0
 8005892:	d109      	bne.n	80058a8 <vTaskPlaceOnEventList+0x24>
 8005894:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005898:	f383 8811 	msr	BASEPRI, r3
 800589c:	f3bf 8f6f 	isb	sy
 80058a0:	f3bf 8f4f 	dsb	sy
 80058a4:	60fb      	str	r3, [r7, #12]
 80058a6:	e7fe      	b.n	80058a6 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80058a8:	4b07      	ldr	r3, [pc, #28]	; (80058c8 <vTaskPlaceOnEventList+0x44>)
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	3318      	adds	r3, #24
 80058ae:	4619      	mov	r1, r3
 80058b0:	6878      	ldr	r0, [r7, #4]
 80058b2:	f7fe fc67 	bl	8004184 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80058b6:	2101      	movs	r1, #1
 80058b8:	6838      	ldr	r0, [r7, #0]
 80058ba:	f000 fbbf 	bl	800603c <prvAddCurrentTaskToDelayedList>
}
 80058be:	bf00      	nop
 80058c0:	3710      	adds	r7, #16
 80058c2:	46bd      	mov	sp, r7
 80058c4:	bd80      	pop	{r7, pc}
 80058c6:	bf00      	nop
 80058c8:	20000550 	.word	0x20000550

080058cc <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80058cc:	b580      	push	{r7, lr}
 80058ce:	b086      	sub	sp, #24
 80058d0:	af00      	add	r7, sp, #0
 80058d2:	60f8      	str	r0, [r7, #12]
 80058d4:	60b9      	str	r1, [r7, #8]
 80058d6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d109      	bne.n	80058f2 <vTaskPlaceOnEventListRestricted+0x26>
 80058de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058e2:	f383 8811 	msr	BASEPRI, r3
 80058e6:	f3bf 8f6f 	isb	sy
 80058ea:	f3bf 8f4f 	dsb	sy
 80058ee:	617b      	str	r3, [r7, #20]
 80058f0:	e7fe      	b.n	80058f0 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80058f2:	4b0a      	ldr	r3, [pc, #40]	; (800591c <vTaskPlaceOnEventListRestricted+0x50>)
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	3318      	adds	r3, #24
 80058f8:	4619      	mov	r1, r3
 80058fa:	68f8      	ldr	r0, [r7, #12]
 80058fc:	f7fe fc1f 	bl	800413e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	2b00      	cmp	r3, #0
 8005904:	d002      	beq.n	800590c <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 8005906:	f04f 33ff 	mov.w	r3, #4294967295
 800590a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800590c:	6879      	ldr	r1, [r7, #4]
 800590e:	68b8      	ldr	r0, [r7, #8]
 8005910:	f000 fb94 	bl	800603c <prvAddCurrentTaskToDelayedList>
	}
 8005914:	bf00      	nop
 8005916:	3718      	adds	r7, #24
 8005918:	46bd      	mov	sp, r7
 800591a:	bd80      	pop	{r7, pc}
 800591c:	20000550 	.word	0x20000550

08005920 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005920:	b580      	push	{r7, lr}
 8005922:	b086      	sub	sp, #24
 8005924:	af00      	add	r7, sp, #0
 8005926:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	68db      	ldr	r3, [r3, #12]
 800592c:	68db      	ldr	r3, [r3, #12]
 800592e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005930:	693b      	ldr	r3, [r7, #16]
 8005932:	2b00      	cmp	r3, #0
 8005934:	d109      	bne.n	800594a <xTaskRemoveFromEventList+0x2a>
 8005936:	f04f 0350 	mov.w	r3, #80	; 0x50
 800593a:	f383 8811 	msr	BASEPRI, r3
 800593e:	f3bf 8f6f 	isb	sy
 8005942:	f3bf 8f4f 	dsb	sy
 8005946:	60fb      	str	r3, [r7, #12]
 8005948:	e7fe      	b.n	8005948 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800594a:	693b      	ldr	r3, [r7, #16]
 800594c:	3318      	adds	r3, #24
 800594e:	4618      	mov	r0, r3
 8005950:	f7fe fc50 	bl	80041f4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005954:	4b1d      	ldr	r3, [pc, #116]	; (80059cc <xTaskRemoveFromEventList+0xac>)
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	2b00      	cmp	r3, #0
 800595a:	d11c      	bne.n	8005996 <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800595c:	693b      	ldr	r3, [r7, #16]
 800595e:	3304      	adds	r3, #4
 8005960:	4618      	mov	r0, r3
 8005962:	f7fe fc47 	bl	80041f4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005966:	693b      	ldr	r3, [r7, #16]
 8005968:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800596a:	2201      	movs	r2, #1
 800596c:	409a      	lsls	r2, r3
 800596e:	4b18      	ldr	r3, [pc, #96]	; (80059d0 <xTaskRemoveFromEventList+0xb0>)
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	4313      	orrs	r3, r2
 8005974:	4a16      	ldr	r2, [pc, #88]	; (80059d0 <xTaskRemoveFromEventList+0xb0>)
 8005976:	6013      	str	r3, [r2, #0]
 8005978:	693b      	ldr	r3, [r7, #16]
 800597a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800597c:	4613      	mov	r3, r2
 800597e:	009b      	lsls	r3, r3, #2
 8005980:	4413      	add	r3, r2
 8005982:	009b      	lsls	r3, r3, #2
 8005984:	4a13      	ldr	r2, [pc, #76]	; (80059d4 <xTaskRemoveFromEventList+0xb4>)
 8005986:	441a      	add	r2, r3
 8005988:	693b      	ldr	r3, [r7, #16]
 800598a:	3304      	adds	r3, #4
 800598c:	4619      	mov	r1, r3
 800598e:	4610      	mov	r0, r2
 8005990:	f7fe fbd5 	bl	800413e <vListInsertEnd>
 8005994:	e005      	b.n	80059a2 <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005996:	693b      	ldr	r3, [r7, #16]
 8005998:	3318      	adds	r3, #24
 800599a:	4619      	mov	r1, r3
 800599c:	480e      	ldr	r0, [pc, #56]	; (80059d8 <xTaskRemoveFromEventList+0xb8>)
 800599e:	f7fe fbce 	bl	800413e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80059a2:	693b      	ldr	r3, [r7, #16]
 80059a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059a6:	4b0d      	ldr	r3, [pc, #52]	; (80059dc <xTaskRemoveFromEventList+0xbc>)
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059ac:	429a      	cmp	r2, r3
 80059ae:	d905      	bls.n	80059bc <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80059b0:	2301      	movs	r3, #1
 80059b2:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80059b4:	4b0a      	ldr	r3, [pc, #40]	; (80059e0 <xTaskRemoveFromEventList+0xc0>)
 80059b6:	2201      	movs	r2, #1
 80059b8:	601a      	str	r2, [r3, #0]
 80059ba:	e001      	b.n	80059c0 <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 80059bc:	2300      	movs	r3, #0
 80059be:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 80059c0:	697b      	ldr	r3, [r7, #20]
}
 80059c2:	4618      	mov	r0, r3
 80059c4:	3718      	adds	r7, #24
 80059c6:	46bd      	mov	sp, r7
 80059c8:	bd80      	pop	{r7, pc}
 80059ca:	bf00      	nop
 80059cc:	20000678 	.word	0x20000678
 80059d0:	20000658 	.word	0x20000658
 80059d4:	20000554 	.word	0x20000554
 80059d8:	20000610 	.word	0x20000610
 80059dc:	20000550 	.word	0x20000550
 80059e0:	20000664 	.word	0x20000664

080059e4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80059e4:	b480      	push	{r7}
 80059e6:	b083      	sub	sp, #12
 80059e8:	af00      	add	r7, sp, #0
 80059ea:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80059ec:	4b06      	ldr	r3, [pc, #24]	; (8005a08 <vTaskInternalSetTimeOutState+0x24>)
 80059ee:	681a      	ldr	r2, [r3, #0]
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80059f4:	4b05      	ldr	r3, [pc, #20]	; (8005a0c <vTaskInternalSetTimeOutState+0x28>)
 80059f6:	681a      	ldr	r2, [r3, #0]
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	605a      	str	r2, [r3, #4]
}
 80059fc:	bf00      	nop
 80059fe:	370c      	adds	r7, #12
 8005a00:	46bd      	mov	sp, r7
 8005a02:	bc80      	pop	{r7}
 8005a04:	4770      	bx	lr
 8005a06:	bf00      	nop
 8005a08:	20000668 	.word	0x20000668
 8005a0c:	20000654 	.word	0x20000654

08005a10 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005a10:	b580      	push	{r7, lr}
 8005a12:	b088      	sub	sp, #32
 8005a14:	af00      	add	r7, sp, #0
 8005a16:	6078      	str	r0, [r7, #4]
 8005a18:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d109      	bne.n	8005a34 <xTaskCheckForTimeOut+0x24>
 8005a20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a24:	f383 8811 	msr	BASEPRI, r3
 8005a28:	f3bf 8f6f 	isb	sy
 8005a2c:	f3bf 8f4f 	dsb	sy
 8005a30:	613b      	str	r3, [r7, #16]
 8005a32:	e7fe      	b.n	8005a32 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8005a34:	683b      	ldr	r3, [r7, #0]
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d109      	bne.n	8005a4e <xTaskCheckForTimeOut+0x3e>
 8005a3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a3e:	f383 8811 	msr	BASEPRI, r3
 8005a42:	f3bf 8f6f 	isb	sy
 8005a46:	f3bf 8f4f 	dsb	sy
 8005a4a:	60fb      	str	r3, [r7, #12]
 8005a4c:	e7fe      	b.n	8005a4c <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8005a4e:	f000 ffc3 	bl	80069d8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005a52:	4b1d      	ldr	r3, [pc, #116]	; (8005ac8 <xTaskCheckForTimeOut+0xb8>)
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	685b      	ldr	r3, [r3, #4]
 8005a5c:	69ba      	ldr	r2, [r7, #24]
 8005a5e:	1ad3      	subs	r3, r2, r3
 8005a60:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005a62:	683b      	ldr	r3, [r7, #0]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a6a:	d102      	bne.n	8005a72 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005a6c:	2300      	movs	r3, #0
 8005a6e:	61fb      	str	r3, [r7, #28]
 8005a70:	e023      	b.n	8005aba <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681a      	ldr	r2, [r3, #0]
 8005a76:	4b15      	ldr	r3, [pc, #84]	; (8005acc <xTaskCheckForTimeOut+0xbc>)
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	429a      	cmp	r2, r3
 8005a7c:	d007      	beq.n	8005a8e <xTaskCheckForTimeOut+0x7e>
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	685b      	ldr	r3, [r3, #4]
 8005a82:	69ba      	ldr	r2, [r7, #24]
 8005a84:	429a      	cmp	r2, r3
 8005a86:	d302      	bcc.n	8005a8e <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005a88:	2301      	movs	r3, #1
 8005a8a:	61fb      	str	r3, [r7, #28]
 8005a8c:	e015      	b.n	8005aba <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005a8e:	683b      	ldr	r3, [r7, #0]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	697a      	ldr	r2, [r7, #20]
 8005a94:	429a      	cmp	r2, r3
 8005a96:	d20b      	bcs.n	8005ab0 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005a98:	683b      	ldr	r3, [r7, #0]
 8005a9a:	681a      	ldr	r2, [r3, #0]
 8005a9c:	697b      	ldr	r3, [r7, #20]
 8005a9e:	1ad2      	subs	r2, r2, r3
 8005aa0:	683b      	ldr	r3, [r7, #0]
 8005aa2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005aa4:	6878      	ldr	r0, [r7, #4]
 8005aa6:	f7ff ff9d 	bl	80059e4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005aaa:	2300      	movs	r3, #0
 8005aac:	61fb      	str	r3, [r7, #28]
 8005aae:	e004      	b.n	8005aba <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8005ab0:	683b      	ldr	r3, [r7, #0]
 8005ab2:	2200      	movs	r2, #0
 8005ab4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005ab6:	2301      	movs	r3, #1
 8005ab8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005aba:	f000 ffbb 	bl	8006a34 <vPortExitCritical>

	return xReturn;
 8005abe:	69fb      	ldr	r3, [r7, #28]
}
 8005ac0:	4618      	mov	r0, r3
 8005ac2:	3720      	adds	r7, #32
 8005ac4:	46bd      	mov	sp, r7
 8005ac6:	bd80      	pop	{r7, pc}
 8005ac8:	20000654 	.word	0x20000654
 8005acc:	20000668 	.word	0x20000668

08005ad0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005ad0:	b480      	push	{r7}
 8005ad2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005ad4:	4b03      	ldr	r3, [pc, #12]	; (8005ae4 <vTaskMissedYield+0x14>)
 8005ad6:	2201      	movs	r2, #1
 8005ad8:	601a      	str	r2, [r3, #0]
}
 8005ada:	bf00      	nop
 8005adc:	46bd      	mov	sp, r7
 8005ade:	bc80      	pop	{r7}
 8005ae0:	4770      	bx	lr
 8005ae2:	bf00      	nop
 8005ae4:	20000664 	.word	0x20000664

08005ae8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005ae8:	b580      	push	{r7, lr}
 8005aea:	b082      	sub	sp, #8
 8005aec:	af00      	add	r7, sp, #0
 8005aee:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005af0:	f000 f84c 	bl	8005b8c <prvCheckTasksWaitingTermination>
		{
			/* If we are not using preemption we keep forcing a task switch to
			see if any other task has become available.  If we are using
			preemption we don't need to do this as any task becoming available
			will automatically get the processor anyway. */
			taskYIELD();
 8005af4:	4b04      	ldr	r3, [pc, #16]	; (8005b08 <prvIdleTask+0x20>)
 8005af6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005afa:	601a      	str	r2, [r3, #0]
 8005afc:	f3bf 8f4f 	dsb	sy
 8005b00:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005b04:	e7f4      	b.n	8005af0 <prvIdleTask+0x8>
 8005b06:	bf00      	nop
 8005b08:	e000ed04 	.word	0xe000ed04

08005b0c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005b0c:	b580      	push	{r7, lr}
 8005b0e:	b082      	sub	sp, #8
 8005b10:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005b12:	2300      	movs	r3, #0
 8005b14:	607b      	str	r3, [r7, #4]
 8005b16:	e00c      	b.n	8005b32 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005b18:	687a      	ldr	r2, [r7, #4]
 8005b1a:	4613      	mov	r3, r2
 8005b1c:	009b      	lsls	r3, r3, #2
 8005b1e:	4413      	add	r3, r2
 8005b20:	009b      	lsls	r3, r3, #2
 8005b22:	4a12      	ldr	r2, [pc, #72]	; (8005b6c <prvInitialiseTaskLists+0x60>)
 8005b24:	4413      	add	r3, r2
 8005b26:	4618      	mov	r0, r3
 8005b28:	f7fe fade 	bl	80040e8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	3301      	adds	r3, #1
 8005b30:	607b      	str	r3, [r7, #4]
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	2b06      	cmp	r3, #6
 8005b36:	d9ef      	bls.n	8005b18 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005b38:	480d      	ldr	r0, [pc, #52]	; (8005b70 <prvInitialiseTaskLists+0x64>)
 8005b3a:	f7fe fad5 	bl	80040e8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005b3e:	480d      	ldr	r0, [pc, #52]	; (8005b74 <prvInitialiseTaskLists+0x68>)
 8005b40:	f7fe fad2 	bl	80040e8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005b44:	480c      	ldr	r0, [pc, #48]	; (8005b78 <prvInitialiseTaskLists+0x6c>)
 8005b46:	f7fe facf 	bl	80040e8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005b4a:	480c      	ldr	r0, [pc, #48]	; (8005b7c <prvInitialiseTaskLists+0x70>)
 8005b4c:	f7fe facc 	bl	80040e8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005b50:	480b      	ldr	r0, [pc, #44]	; (8005b80 <prvInitialiseTaskLists+0x74>)
 8005b52:	f7fe fac9 	bl	80040e8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005b56:	4b0b      	ldr	r3, [pc, #44]	; (8005b84 <prvInitialiseTaskLists+0x78>)
 8005b58:	4a05      	ldr	r2, [pc, #20]	; (8005b70 <prvInitialiseTaskLists+0x64>)
 8005b5a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005b5c:	4b0a      	ldr	r3, [pc, #40]	; (8005b88 <prvInitialiseTaskLists+0x7c>)
 8005b5e:	4a05      	ldr	r2, [pc, #20]	; (8005b74 <prvInitialiseTaskLists+0x68>)
 8005b60:	601a      	str	r2, [r3, #0]
}
 8005b62:	bf00      	nop
 8005b64:	3708      	adds	r7, #8
 8005b66:	46bd      	mov	sp, r7
 8005b68:	bd80      	pop	{r7, pc}
 8005b6a:	bf00      	nop
 8005b6c:	20000554 	.word	0x20000554
 8005b70:	200005e0 	.word	0x200005e0
 8005b74:	200005f4 	.word	0x200005f4
 8005b78:	20000610 	.word	0x20000610
 8005b7c:	20000624 	.word	0x20000624
 8005b80:	2000063c 	.word	0x2000063c
 8005b84:	20000608 	.word	0x20000608
 8005b88:	2000060c 	.word	0x2000060c

08005b8c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005b8c:	b580      	push	{r7, lr}
 8005b8e:	b082      	sub	sp, #8
 8005b90:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005b92:	e019      	b.n	8005bc8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005b94:	f000 ff20 	bl	80069d8 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8005b98:	4b0f      	ldr	r3, [pc, #60]	; (8005bd8 <prvCheckTasksWaitingTermination+0x4c>)
 8005b9a:	68db      	ldr	r3, [r3, #12]
 8005b9c:	68db      	ldr	r3, [r3, #12]
 8005b9e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	3304      	adds	r3, #4
 8005ba4:	4618      	mov	r0, r3
 8005ba6:	f7fe fb25 	bl	80041f4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005baa:	4b0c      	ldr	r3, [pc, #48]	; (8005bdc <prvCheckTasksWaitingTermination+0x50>)
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	3b01      	subs	r3, #1
 8005bb0:	4a0a      	ldr	r2, [pc, #40]	; (8005bdc <prvCheckTasksWaitingTermination+0x50>)
 8005bb2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005bb4:	4b0a      	ldr	r3, [pc, #40]	; (8005be0 <prvCheckTasksWaitingTermination+0x54>)
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	3b01      	subs	r3, #1
 8005bba:	4a09      	ldr	r2, [pc, #36]	; (8005be0 <prvCheckTasksWaitingTermination+0x54>)
 8005bbc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005bbe:	f000 ff39 	bl	8006a34 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005bc2:	6878      	ldr	r0, [r7, #4]
 8005bc4:	f000 f80e 	bl	8005be4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005bc8:	4b05      	ldr	r3, [pc, #20]	; (8005be0 <prvCheckTasksWaitingTermination+0x54>)
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d1e1      	bne.n	8005b94 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005bd0:	bf00      	nop
 8005bd2:	3708      	adds	r7, #8
 8005bd4:	46bd      	mov	sp, r7
 8005bd6:	bd80      	pop	{r7, pc}
 8005bd8:	20000624 	.word	0x20000624
 8005bdc:	20000650 	.word	0x20000650
 8005be0:	20000638 	.word	0x20000638

08005be4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005be4:	b580      	push	{r7, lr}
 8005be6:	b084      	sub	sp, #16
 8005be8:	af00      	add	r7, sp, #0
 8005bea:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d108      	bne.n	8005c08 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bfa:	4618      	mov	r0, r3
 8005bfc:	f001 f8a8 	bl	8006d50 <vPortFree>
				vPortFree( pxTCB );
 8005c00:	6878      	ldr	r0, [r7, #4]
 8005c02:	f001 f8a5 	bl	8006d50 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005c06:	e017      	b.n	8005c38 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005c0e:	2b01      	cmp	r3, #1
 8005c10:	d103      	bne.n	8005c1a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8005c12:	6878      	ldr	r0, [r7, #4]
 8005c14:	f001 f89c 	bl	8006d50 <vPortFree>
	}
 8005c18:	e00e      	b.n	8005c38 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005c20:	2b02      	cmp	r3, #2
 8005c22:	d009      	beq.n	8005c38 <prvDeleteTCB+0x54>
 8005c24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c28:	f383 8811 	msr	BASEPRI, r3
 8005c2c:	f3bf 8f6f 	isb	sy
 8005c30:	f3bf 8f4f 	dsb	sy
 8005c34:	60fb      	str	r3, [r7, #12]
 8005c36:	e7fe      	b.n	8005c36 <prvDeleteTCB+0x52>
	}
 8005c38:	bf00      	nop
 8005c3a:	3710      	adds	r7, #16
 8005c3c:	46bd      	mov	sp, r7
 8005c3e:	bd80      	pop	{r7, pc}

08005c40 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005c40:	b480      	push	{r7}
 8005c42:	b083      	sub	sp, #12
 8005c44:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005c46:	4b0e      	ldr	r3, [pc, #56]	; (8005c80 <prvResetNextTaskUnblockTime+0x40>)
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d101      	bne.n	8005c54 <prvResetNextTaskUnblockTime+0x14>
 8005c50:	2301      	movs	r3, #1
 8005c52:	e000      	b.n	8005c56 <prvResetNextTaskUnblockTime+0x16>
 8005c54:	2300      	movs	r3, #0
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d004      	beq.n	8005c64 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005c5a:	4b0a      	ldr	r3, [pc, #40]	; (8005c84 <prvResetNextTaskUnblockTime+0x44>)
 8005c5c:	f04f 32ff 	mov.w	r2, #4294967295
 8005c60:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005c62:	e008      	b.n	8005c76 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8005c64:	4b06      	ldr	r3, [pc, #24]	; (8005c80 <prvResetNextTaskUnblockTime+0x40>)
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	68db      	ldr	r3, [r3, #12]
 8005c6a:	68db      	ldr	r3, [r3, #12]
 8005c6c:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	685b      	ldr	r3, [r3, #4]
 8005c72:	4a04      	ldr	r2, [pc, #16]	; (8005c84 <prvResetNextTaskUnblockTime+0x44>)
 8005c74:	6013      	str	r3, [r2, #0]
}
 8005c76:	bf00      	nop
 8005c78:	370c      	adds	r7, #12
 8005c7a:	46bd      	mov	sp, r7
 8005c7c:	bc80      	pop	{r7}
 8005c7e:	4770      	bx	lr
 8005c80:	20000608 	.word	0x20000608
 8005c84:	20000670 	.word	0x20000670

08005c88 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005c88:	b480      	push	{r7}
 8005c8a:	b083      	sub	sp, #12
 8005c8c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005c8e:	4b0b      	ldr	r3, [pc, #44]	; (8005cbc <xTaskGetSchedulerState+0x34>)
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d102      	bne.n	8005c9c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005c96:	2301      	movs	r3, #1
 8005c98:	607b      	str	r3, [r7, #4]
 8005c9a:	e008      	b.n	8005cae <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005c9c:	4b08      	ldr	r3, [pc, #32]	; (8005cc0 <xTaskGetSchedulerState+0x38>)
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d102      	bne.n	8005caa <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005ca4:	2302      	movs	r3, #2
 8005ca6:	607b      	str	r3, [r7, #4]
 8005ca8:	e001      	b.n	8005cae <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005caa:	2300      	movs	r3, #0
 8005cac:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005cae:	687b      	ldr	r3, [r7, #4]
	}
 8005cb0:	4618      	mov	r0, r3
 8005cb2:	370c      	adds	r7, #12
 8005cb4:	46bd      	mov	sp, r7
 8005cb6:	bc80      	pop	{r7}
 8005cb8:	4770      	bx	lr
 8005cba:	bf00      	nop
 8005cbc:	2000065c 	.word	0x2000065c
 8005cc0:	20000678 	.word	0x20000678

08005cc4 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8005cc4:	b580      	push	{r7, lr}
 8005cc6:	b084      	sub	sp, #16
 8005cc8:	af00      	add	r7, sp, #0
 8005cca:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8005cd0:	2300      	movs	r3, #0
 8005cd2:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d06e      	beq.n	8005db8 <xTaskPriorityInherit+0xf4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8005cda:	68bb      	ldr	r3, [r7, #8]
 8005cdc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005cde:	4b39      	ldr	r3, [pc, #228]	; (8005dc4 <xTaskPriorityInherit+0x100>)
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ce4:	429a      	cmp	r2, r3
 8005ce6:	d25e      	bcs.n	8005da6 <xTaskPriorityInherit+0xe2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005ce8:	68bb      	ldr	r3, [r7, #8]
 8005cea:	699b      	ldr	r3, [r3, #24]
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	db06      	blt.n	8005cfe <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005cf0:	4b34      	ldr	r3, [pc, #208]	; (8005dc4 <xTaskPriorityInherit+0x100>)
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cf6:	f1c3 0207 	rsb	r2, r3, #7
 8005cfa:	68bb      	ldr	r3, [r7, #8]
 8005cfc:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8005cfe:	68bb      	ldr	r3, [r7, #8]
 8005d00:	6959      	ldr	r1, [r3, #20]
 8005d02:	68bb      	ldr	r3, [r7, #8]
 8005d04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d06:	4613      	mov	r3, r2
 8005d08:	009b      	lsls	r3, r3, #2
 8005d0a:	4413      	add	r3, r2
 8005d0c:	009b      	lsls	r3, r3, #2
 8005d0e:	4a2e      	ldr	r2, [pc, #184]	; (8005dc8 <xTaskPriorityInherit+0x104>)
 8005d10:	4413      	add	r3, r2
 8005d12:	4299      	cmp	r1, r3
 8005d14:	d101      	bne.n	8005d1a <xTaskPriorityInherit+0x56>
 8005d16:	2301      	movs	r3, #1
 8005d18:	e000      	b.n	8005d1c <xTaskPriorityInherit+0x58>
 8005d1a:	2300      	movs	r3, #0
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d03a      	beq.n	8005d96 <xTaskPriorityInherit+0xd2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005d20:	68bb      	ldr	r3, [r7, #8]
 8005d22:	3304      	adds	r3, #4
 8005d24:	4618      	mov	r0, r3
 8005d26:	f7fe fa65 	bl	80041f4 <uxListRemove>
 8005d2a:	4603      	mov	r3, r0
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d115      	bne.n	8005d5c <xTaskPriorityInherit+0x98>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 8005d30:	68bb      	ldr	r3, [r7, #8]
 8005d32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d34:	4924      	ldr	r1, [pc, #144]	; (8005dc8 <xTaskPriorityInherit+0x104>)
 8005d36:	4613      	mov	r3, r2
 8005d38:	009b      	lsls	r3, r3, #2
 8005d3a:	4413      	add	r3, r2
 8005d3c:	009b      	lsls	r3, r3, #2
 8005d3e:	440b      	add	r3, r1
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d10a      	bne.n	8005d5c <xTaskPriorityInherit+0x98>
 8005d46:	68bb      	ldr	r3, [r7, #8]
 8005d48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d4a:	2201      	movs	r2, #1
 8005d4c:	fa02 f303 	lsl.w	r3, r2, r3
 8005d50:	43da      	mvns	r2, r3
 8005d52:	4b1e      	ldr	r3, [pc, #120]	; (8005dcc <xTaskPriorityInherit+0x108>)
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	4013      	ands	r3, r2
 8005d58:	4a1c      	ldr	r2, [pc, #112]	; (8005dcc <xTaskPriorityInherit+0x108>)
 8005d5a:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005d5c:	4b19      	ldr	r3, [pc, #100]	; (8005dc4 <xTaskPriorityInherit+0x100>)
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d62:	68bb      	ldr	r3, [r7, #8]
 8005d64:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8005d66:	68bb      	ldr	r3, [r7, #8]
 8005d68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d6a:	2201      	movs	r2, #1
 8005d6c:	409a      	lsls	r2, r3
 8005d6e:	4b17      	ldr	r3, [pc, #92]	; (8005dcc <xTaskPriorityInherit+0x108>)
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	4313      	orrs	r3, r2
 8005d74:	4a15      	ldr	r2, [pc, #84]	; (8005dcc <xTaskPriorityInherit+0x108>)
 8005d76:	6013      	str	r3, [r2, #0]
 8005d78:	68bb      	ldr	r3, [r7, #8]
 8005d7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d7c:	4613      	mov	r3, r2
 8005d7e:	009b      	lsls	r3, r3, #2
 8005d80:	4413      	add	r3, r2
 8005d82:	009b      	lsls	r3, r3, #2
 8005d84:	4a10      	ldr	r2, [pc, #64]	; (8005dc8 <xTaskPriorityInherit+0x104>)
 8005d86:	441a      	add	r2, r3
 8005d88:	68bb      	ldr	r3, [r7, #8]
 8005d8a:	3304      	adds	r3, #4
 8005d8c:	4619      	mov	r1, r3
 8005d8e:	4610      	mov	r0, r2
 8005d90:	f7fe f9d5 	bl	800413e <vListInsertEnd>
 8005d94:	e004      	b.n	8005da0 <xTaskPriorityInherit+0xdc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005d96:	4b0b      	ldr	r3, [pc, #44]	; (8005dc4 <xTaskPriorityInherit+0x100>)
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d9c:	68bb      	ldr	r3, [r7, #8]
 8005d9e:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8005da0:	2301      	movs	r3, #1
 8005da2:	60fb      	str	r3, [r7, #12]
 8005da4:	e008      	b.n	8005db8 <xTaskPriorityInherit+0xf4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8005da6:	68bb      	ldr	r3, [r7, #8]
 8005da8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005daa:	4b06      	ldr	r3, [pc, #24]	; (8005dc4 <xTaskPriorityInherit+0x100>)
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005db0:	429a      	cmp	r2, r3
 8005db2:	d201      	bcs.n	8005db8 <xTaskPriorityInherit+0xf4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8005db4:	2301      	movs	r3, #1
 8005db6:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005db8:	68fb      	ldr	r3, [r7, #12]
	}
 8005dba:	4618      	mov	r0, r3
 8005dbc:	3710      	adds	r7, #16
 8005dbe:	46bd      	mov	sp, r7
 8005dc0:	bd80      	pop	{r7, pc}
 8005dc2:	bf00      	nop
 8005dc4:	20000550 	.word	0x20000550
 8005dc8:	20000554 	.word	0x20000554
 8005dcc:	20000658 	.word	0x20000658

08005dd0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005dd0:	b580      	push	{r7, lr}
 8005dd2:	b086      	sub	sp, #24
 8005dd4:	af00      	add	r7, sp, #0
 8005dd6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005ddc:	2300      	movs	r3, #0
 8005dde:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d06c      	beq.n	8005ec0 <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005de6:	4b39      	ldr	r3, [pc, #228]	; (8005ecc <xTaskPriorityDisinherit+0xfc>)
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	693a      	ldr	r2, [r7, #16]
 8005dec:	429a      	cmp	r2, r3
 8005dee:	d009      	beq.n	8005e04 <xTaskPriorityDisinherit+0x34>
 8005df0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005df4:	f383 8811 	msr	BASEPRI, r3
 8005df8:	f3bf 8f6f 	isb	sy
 8005dfc:	f3bf 8f4f 	dsb	sy
 8005e00:	60fb      	str	r3, [r7, #12]
 8005e02:	e7fe      	b.n	8005e02 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8005e04:	693b      	ldr	r3, [r7, #16]
 8005e06:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d109      	bne.n	8005e20 <xTaskPriorityDisinherit+0x50>
 8005e0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e10:	f383 8811 	msr	BASEPRI, r3
 8005e14:	f3bf 8f6f 	isb	sy
 8005e18:	f3bf 8f4f 	dsb	sy
 8005e1c:	60bb      	str	r3, [r7, #8]
 8005e1e:	e7fe      	b.n	8005e1e <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8005e20:	693b      	ldr	r3, [r7, #16]
 8005e22:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005e24:	1e5a      	subs	r2, r3, #1
 8005e26:	693b      	ldr	r3, [r7, #16]
 8005e28:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005e2a:	693b      	ldr	r3, [r7, #16]
 8005e2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e2e:	693b      	ldr	r3, [r7, #16]
 8005e30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e32:	429a      	cmp	r2, r3
 8005e34:	d044      	beq.n	8005ec0 <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005e36:	693b      	ldr	r3, [r7, #16]
 8005e38:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d140      	bne.n	8005ec0 <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005e3e:	693b      	ldr	r3, [r7, #16]
 8005e40:	3304      	adds	r3, #4
 8005e42:	4618      	mov	r0, r3
 8005e44:	f7fe f9d6 	bl	80041f4 <uxListRemove>
 8005e48:	4603      	mov	r3, r0
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d115      	bne.n	8005e7a <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8005e4e:	693b      	ldr	r3, [r7, #16]
 8005e50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e52:	491f      	ldr	r1, [pc, #124]	; (8005ed0 <xTaskPriorityDisinherit+0x100>)
 8005e54:	4613      	mov	r3, r2
 8005e56:	009b      	lsls	r3, r3, #2
 8005e58:	4413      	add	r3, r2
 8005e5a:	009b      	lsls	r3, r3, #2
 8005e5c:	440b      	add	r3, r1
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d10a      	bne.n	8005e7a <xTaskPriorityDisinherit+0xaa>
 8005e64:	693b      	ldr	r3, [r7, #16]
 8005e66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e68:	2201      	movs	r2, #1
 8005e6a:	fa02 f303 	lsl.w	r3, r2, r3
 8005e6e:	43da      	mvns	r2, r3
 8005e70:	4b18      	ldr	r3, [pc, #96]	; (8005ed4 <xTaskPriorityDisinherit+0x104>)
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	4013      	ands	r3, r2
 8005e76:	4a17      	ldr	r2, [pc, #92]	; (8005ed4 <xTaskPriorityDisinherit+0x104>)
 8005e78:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005e7a:	693b      	ldr	r3, [r7, #16]
 8005e7c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005e7e:	693b      	ldr	r3, [r7, #16]
 8005e80:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005e82:	693b      	ldr	r3, [r7, #16]
 8005e84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e86:	f1c3 0207 	rsb	r2, r3, #7
 8005e8a:	693b      	ldr	r3, [r7, #16]
 8005e8c:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005e8e:	693b      	ldr	r3, [r7, #16]
 8005e90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e92:	2201      	movs	r2, #1
 8005e94:	409a      	lsls	r2, r3
 8005e96:	4b0f      	ldr	r3, [pc, #60]	; (8005ed4 <xTaskPriorityDisinherit+0x104>)
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	4313      	orrs	r3, r2
 8005e9c:	4a0d      	ldr	r2, [pc, #52]	; (8005ed4 <xTaskPriorityDisinherit+0x104>)
 8005e9e:	6013      	str	r3, [r2, #0]
 8005ea0:	693b      	ldr	r3, [r7, #16]
 8005ea2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ea4:	4613      	mov	r3, r2
 8005ea6:	009b      	lsls	r3, r3, #2
 8005ea8:	4413      	add	r3, r2
 8005eaa:	009b      	lsls	r3, r3, #2
 8005eac:	4a08      	ldr	r2, [pc, #32]	; (8005ed0 <xTaskPriorityDisinherit+0x100>)
 8005eae:	441a      	add	r2, r3
 8005eb0:	693b      	ldr	r3, [r7, #16]
 8005eb2:	3304      	adds	r3, #4
 8005eb4:	4619      	mov	r1, r3
 8005eb6:	4610      	mov	r0, r2
 8005eb8:	f7fe f941 	bl	800413e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005ebc:	2301      	movs	r3, #1
 8005ebe:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005ec0:	697b      	ldr	r3, [r7, #20]
	}
 8005ec2:	4618      	mov	r0, r3
 8005ec4:	3718      	adds	r7, #24
 8005ec6:	46bd      	mov	sp, r7
 8005ec8:	bd80      	pop	{r7, pc}
 8005eca:	bf00      	nop
 8005ecc:	20000550 	.word	0x20000550
 8005ed0:	20000554 	.word	0x20000554
 8005ed4:	20000658 	.word	0x20000658

08005ed8 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8005ed8:	b580      	push	{r7, lr}
 8005eda:	b088      	sub	sp, #32
 8005edc:	af00      	add	r7, sp, #0
 8005ede:	6078      	str	r0, [r7, #4]
 8005ee0:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8005ee6:	2301      	movs	r3, #1
 8005ee8:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	f000 8086 	beq.w	8005ffe <vTaskPriorityDisinheritAfterTimeout+0x126>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8005ef2:	69bb      	ldr	r3, [r7, #24]
 8005ef4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d109      	bne.n	8005f0e <vTaskPriorityDisinheritAfterTimeout+0x36>
 8005efa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005efe:	f383 8811 	msr	BASEPRI, r3
 8005f02:	f3bf 8f6f 	isb	sy
 8005f06:	f3bf 8f4f 	dsb	sy
 8005f0a:	60fb      	str	r3, [r7, #12]
 8005f0c:	e7fe      	b.n	8005f0c <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8005f0e:	69bb      	ldr	r3, [r7, #24]
 8005f10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f12:	683a      	ldr	r2, [r7, #0]
 8005f14:	429a      	cmp	r2, r3
 8005f16:	d902      	bls.n	8005f1e <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8005f18:	683b      	ldr	r3, [r7, #0]
 8005f1a:	61fb      	str	r3, [r7, #28]
 8005f1c:	e002      	b.n	8005f24 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8005f1e:	69bb      	ldr	r3, [r7, #24]
 8005f20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f22:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8005f24:	69bb      	ldr	r3, [r7, #24]
 8005f26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f28:	69fa      	ldr	r2, [r7, #28]
 8005f2a:	429a      	cmp	r2, r3
 8005f2c:	d067      	beq.n	8005ffe <vTaskPriorityDisinheritAfterTimeout+0x126>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8005f2e:	69bb      	ldr	r3, [r7, #24]
 8005f30:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005f32:	697a      	ldr	r2, [r7, #20]
 8005f34:	429a      	cmp	r2, r3
 8005f36:	d162      	bne.n	8005ffe <vTaskPriorityDisinheritAfterTimeout+0x126>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8005f38:	4b33      	ldr	r3, [pc, #204]	; (8006008 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	69ba      	ldr	r2, [r7, #24]
 8005f3e:	429a      	cmp	r2, r3
 8005f40:	d109      	bne.n	8005f56 <vTaskPriorityDisinheritAfterTimeout+0x7e>
 8005f42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f46:	f383 8811 	msr	BASEPRI, r3
 8005f4a:	f3bf 8f6f 	isb	sy
 8005f4e:	f3bf 8f4f 	dsb	sy
 8005f52:	60bb      	str	r3, [r7, #8]
 8005f54:	e7fe      	b.n	8005f54 <vTaskPriorityDisinheritAfterTimeout+0x7c>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8005f56:	69bb      	ldr	r3, [r7, #24]
 8005f58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f5a:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8005f5c:	69bb      	ldr	r3, [r7, #24]
 8005f5e:	69fa      	ldr	r2, [r7, #28]
 8005f60:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005f62:	69bb      	ldr	r3, [r7, #24]
 8005f64:	699b      	ldr	r3, [r3, #24]
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	db04      	blt.n	8005f74 <vTaskPriorityDisinheritAfterTimeout+0x9c>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005f6a:	69fb      	ldr	r3, [r7, #28]
 8005f6c:	f1c3 0207 	rsb	r2, r3, #7
 8005f70:	69bb      	ldr	r3, [r7, #24]
 8005f72:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8005f74:	69bb      	ldr	r3, [r7, #24]
 8005f76:	6959      	ldr	r1, [r3, #20]
 8005f78:	693a      	ldr	r2, [r7, #16]
 8005f7a:	4613      	mov	r3, r2
 8005f7c:	009b      	lsls	r3, r3, #2
 8005f7e:	4413      	add	r3, r2
 8005f80:	009b      	lsls	r3, r3, #2
 8005f82:	4a22      	ldr	r2, [pc, #136]	; (800600c <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8005f84:	4413      	add	r3, r2
 8005f86:	4299      	cmp	r1, r3
 8005f88:	d101      	bne.n	8005f8e <vTaskPriorityDisinheritAfterTimeout+0xb6>
 8005f8a:	2301      	movs	r3, #1
 8005f8c:	e000      	b.n	8005f90 <vTaskPriorityDisinheritAfterTimeout+0xb8>
 8005f8e:	2300      	movs	r3, #0
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d034      	beq.n	8005ffe <vTaskPriorityDisinheritAfterTimeout+0x126>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005f94:	69bb      	ldr	r3, [r7, #24]
 8005f96:	3304      	adds	r3, #4
 8005f98:	4618      	mov	r0, r3
 8005f9a:	f7fe f92b 	bl	80041f4 <uxListRemove>
 8005f9e:	4603      	mov	r3, r0
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d115      	bne.n	8005fd0 <vTaskPriorityDisinheritAfterTimeout+0xf8>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8005fa4:	69bb      	ldr	r3, [r7, #24]
 8005fa6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005fa8:	4918      	ldr	r1, [pc, #96]	; (800600c <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8005faa:	4613      	mov	r3, r2
 8005fac:	009b      	lsls	r3, r3, #2
 8005fae:	4413      	add	r3, r2
 8005fb0:	009b      	lsls	r3, r3, #2
 8005fb2:	440b      	add	r3, r1
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d10a      	bne.n	8005fd0 <vTaskPriorityDisinheritAfterTimeout+0xf8>
 8005fba:	69bb      	ldr	r3, [r7, #24]
 8005fbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fbe:	2201      	movs	r2, #1
 8005fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8005fc4:	43da      	mvns	r2, r3
 8005fc6:	4b12      	ldr	r3, [pc, #72]	; (8006010 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	4013      	ands	r3, r2
 8005fcc:	4a10      	ldr	r2, [pc, #64]	; (8006010 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8005fce:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8005fd0:	69bb      	ldr	r3, [r7, #24]
 8005fd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fd4:	2201      	movs	r2, #1
 8005fd6:	409a      	lsls	r2, r3
 8005fd8:	4b0d      	ldr	r3, [pc, #52]	; (8006010 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	4313      	orrs	r3, r2
 8005fde:	4a0c      	ldr	r2, [pc, #48]	; (8006010 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8005fe0:	6013      	str	r3, [r2, #0]
 8005fe2:	69bb      	ldr	r3, [r7, #24]
 8005fe4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005fe6:	4613      	mov	r3, r2
 8005fe8:	009b      	lsls	r3, r3, #2
 8005fea:	4413      	add	r3, r2
 8005fec:	009b      	lsls	r3, r3, #2
 8005fee:	4a07      	ldr	r2, [pc, #28]	; (800600c <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8005ff0:	441a      	add	r2, r3
 8005ff2:	69bb      	ldr	r3, [r7, #24]
 8005ff4:	3304      	adds	r3, #4
 8005ff6:	4619      	mov	r1, r3
 8005ff8:	4610      	mov	r0, r2
 8005ffa:	f7fe f8a0 	bl	800413e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005ffe:	bf00      	nop
 8006000:	3720      	adds	r7, #32
 8006002:	46bd      	mov	sp, r7
 8006004:	bd80      	pop	{r7, pc}
 8006006:	bf00      	nop
 8006008:	20000550 	.word	0x20000550
 800600c:	20000554 	.word	0x20000554
 8006010:	20000658 	.word	0x20000658

08006014 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 8006014:	b480      	push	{r7}
 8006016:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8006018:	4b07      	ldr	r3, [pc, #28]	; (8006038 <pvTaskIncrementMutexHeldCount+0x24>)
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	2b00      	cmp	r3, #0
 800601e:	d004      	beq.n	800602a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8006020:	4b05      	ldr	r3, [pc, #20]	; (8006038 <pvTaskIncrementMutexHeldCount+0x24>)
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006026:	3201      	adds	r2, #1
 8006028:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800602a:	4b03      	ldr	r3, [pc, #12]	; (8006038 <pvTaskIncrementMutexHeldCount+0x24>)
 800602c:	681b      	ldr	r3, [r3, #0]
	}
 800602e:	4618      	mov	r0, r3
 8006030:	46bd      	mov	sp, r7
 8006032:	bc80      	pop	{r7}
 8006034:	4770      	bx	lr
 8006036:	bf00      	nop
 8006038:	20000550 	.word	0x20000550

0800603c <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800603c:	b580      	push	{r7, lr}
 800603e:	b084      	sub	sp, #16
 8006040:	af00      	add	r7, sp, #0
 8006042:	6078      	str	r0, [r7, #4]
 8006044:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006046:	4b29      	ldr	r3, [pc, #164]	; (80060ec <prvAddCurrentTaskToDelayedList+0xb0>)
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800604c:	4b28      	ldr	r3, [pc, #160]	; (80060f0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	3304      	adds	r3, #4
 8006052:	4618      	mov	r0, r3
 8006054:	f7fe f8ce 	bl	80041f4 <uxListRemove>
 8006058:	4603      	mov	r3, r0
 800605a:	2b00      	cmp	r3, #0
 800605c:	d10b      	bne.n	8006076 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 800605e:	4b24      	ldr	r3, [pc, #144]	; (80060f0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006064:	2201      	movs	r2, #1
 8006066:	fa02 f303 	lsl.w	r3, r2, r3
 800606a:	43da      	mvns	r2, r3
 800606c:	4b21      	ldr	r3, [pc, #132]	; (80060f4 <prvAddCurrentTaskToDelayedList+0xb8>)
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	4013      	ands	r3, r2
 8006072:	4a20      	ldr	r2, [pc, #128]	; (80060f4 <prvAddCurrentTaskToDelayedList+0xb8>)
 8006074:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	f1b3 3fff 	cmp.w	r3, #4294967295
 800607c:	d10a      	bne.n	8006094 <prvAddCurrentTaskToDelayedList+0x58>
 800607e:	683b      	ldr	r3, [r7, #0]
 8006080:	2b00      	cmp	r3, #0
 8006082:	d007      	beq.n	8006094 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006084:	4b1a      	ldr	r3, [pc, #104]	; (80060f0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	3304      	adds	r3, #4
 800608a:	4619      	mov	r1, r3
 800608c:	481a      	ldr	r0, [pc, #104]	; (80060f8 <prvAddCurrentTaskToDelayedList+0xbc>)
 800608e:	f7fe f856 	bl	800413e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006092:	e026      	b.n	80060e2 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006094:	68fa      	ldr	r2, [r7, #12]
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	4413      	add	r3, r2
 800609a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800609c:	4b14      	ldr	r3, [pc, #80]	; (80060f0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	68ba      	ldr	r2, [r7, #8]
 80060a2:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80060a4:	68ba      	ldr	r2, [r7, #8]
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	429a      	cmp	r2, r3
 80060aa:	d209      	bcs.n	80060c0 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80060ac:	4b13      	ldr	r3, [pc, #76]	; (80060fc <prvAddCurrentTaskToDelayedList+0xc0>)
 80060ae:	681a      	ldr	r2, [r3, #0]
 80060b0:	4b0f      	ldr	r3, [pc, #60]	; (80060f0 <prvAddCurrentTaskToDelayedList+0xb4>)
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	3304      	adds	r3, #4
 80060b6:	4619      	mov	r1, r3
 80060b8:	4610      	mov	r0, r2
 80060ba:	f7fe f863 	bl	8004184 <vListInsert>
}
 80060be:	e010      	b.n	80060e2 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80060c0:	4b0f      	ldr	r3, [pc, #60]	; (8006100 <prvAddCurrentTaskToDelayedList+0xc4>)
 80060c2:	681a      	ldr	r2, [r3, #0]
 80060c4:	4b0a      	ldr	r3, [pc, #40]	; (80060f0 <prvAddCurrentTaskToDelayedList+0xb4>)
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	3304      	adds	r3, #4
 80060ca:	4619      	mov	r1, r3
 80060cc:	4610      	mov	r0, r2
 80060ce:	f7fe f859 	bl	8004184 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80060d2:	4b0c      	ldr	r3, [pc, #48]	; (8006104 <prvAddCurrentTaskToDelayedList+0xc8>)
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	68ba      	ldr	r2, [r7, #8]
 80060d8:	429a      	cmp	r2, r3
 80060da:	d202      	bcs.n	80060e2 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80060dc:	4a09      	ldr	r2, [pc, #36]	; (8006104 <prvAddCurrentTaskToDelayedList+0xc8>)
 80060de:	68bb      	ldr	r3, [r7, #8]
 80060e0:	6013      	str	r3, [r2, #0]
}
 80060e2:	bf00      	nop
 80060e4:	3710      	adds	r7, #16
 80060e6:	46bd      	mov	sp, r7
 80060e8:	bd80      	pop	{r7, pc}
 80060ea:	bf00      	nop
 80060ec:	20000654 	.word	0x20000654
 80060f0:	20000550 	.word	0x20000550
 80060f4:	20000658 	.word	0x20000658
 80060f8:	2000063c 	.word	0x2000063c
 80060fc:	2000060c 	.word	0x2000060c
 8006100:	20000608 	.word	0x20000608
 8006104:	20000670 	.word	0x20000670

08006108 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8006108:	b580      	push	{r7, lr}
 800610a:	b08a      	sub	sp, #40	; 0x28
 800610c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800610e:	2300      	movs	r3, #0
 8006110:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8006112:	f000 fb37 	bl	8006784 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8006116:	4b1c      	ldr	r3, [pc, #112]	; (8006188 <xTimerCreateTimerTask+0x80>)
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	2b00      	cmp	r3, #0
 800611c:	d021      	beq.n	8006162 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800611e:	2300      	movs	r3, #0
 8006120:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8006122:	2300      	movs	r3, #0
 8006124:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8006126:	1d3a      	adds	r2, r7, #4
 8006128:	f107 0108 	add.w	r1, r7, #8
 800612c:	f107 030c 	add.w	r3, r7, #12
 8006130:	4618      	mov	r0, r3
 8006132:	f7fa f83d 	bl	80001b0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8006136:	6879      	ldr	r1, [r7, #4]
 8006138:	68bb      	ldr	r3, [r7, #8]
 800613a:	68fa      	ldr	r2, [r7, #12]
 800613c:	9202      	str	r2, [sp, #8]
 800613e:	9301      	str	r3, [sp, #4]
 8006140:	2302      	movs	r3, #2
 8006142:	9300      	str	r3, [sp, #0]
 8006144:	2300      	movs	r3, #0
 8006146:	460a      	mov	r2, r1
 8006148:	4910      	ldr	r1, [pc, #64]	; (800618c <xTimerCreateTimerTask+0x84>)
 800614a:	4811      	ldr	r0, [pc, #68]	; (8006190 <xTimerCreateTimerTask+0x88>)
 800614c:	f7fe ffbe 	bl	80050cc <xTaskCreateStatic>
 8006150:	4602      	mov	r2, r0
 8006152:	4b10      	ldr	r3, [pc, #64]	; (8006194 <xTimerCreateTimerTask+0x8c>)
 8006154:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8006156:	4b0f      	ldr	r3, [pc, #60]	; (8006194 <xTimerCreateTimerTask+0x8c>)
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	2b00      	cmp	r3, #0
 800615c:	d001      	beq.n	8006162 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800615e:	2301      	movs	r3, #1
 8006160:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8006162:	697b      	ldr	r3, [r7, #20]
 8006164:	2b00      	cmp	r3, #0
 8006166:	d109      	bne.n	800617c <xTimerCreateTimerTask+0x74>
 8006168:	f04f 0350 	mov.w	r3, #80	; 0x50
 800616c:	f383 8811 	msr	BASEPRI, r3
 8006170:	f3bf 8f6f 	isb	sy
 8006174:	f3bf 8f4f 	dsb	sy
 8006178:	613b      	str	r3, [r7, #16]
 800617a:	e7fe      	b.n	800617a <xTimerCreateTimerTask+0x72>
	return xReturn;
 800617c:	697b      	ldr	r3, [r7, #20]
}
 800617e:	4618      	mov	r0, r3
 8006180:	3718      	adds	r7, #24
 8006182:	46bd      	mov	sp, r7
 8006184:	bd80      	pop	{r7, pc}
 8006186:	bf00      	nop
 8006188:	200006ac 	.word	0x200006ac
 800618c:	08007a2c 	.word	0x08007a2c
 8006190:	080063cd 	.word	0x080063cd
 8006194:	200006b0 	.word	0x200006b0

08006198 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 8006198:	b580      	push	{r7, lr}
 800619a:	b088      	sub	sp, #32
 800619c:	af02      	add	r7, sp, #8
 800619e:	60f8      	str	r0, [r7, #12]
 80061a0:	60b9      	str	r1, [r7, #8]
 80061a2:	607a      	str	r2, [r7, #4]
 80061a4:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) );
 80061a6:	202c      	movs	r0, #44	; 0x2c
 80061a8:	f000 fd0c 	bl	8006bc4 <pvPortMalloc>
 80061ac:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 80061ae:	697b      	ldr	r3, [r7, #20]
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d00d      	beq.n	80061d0 <xTimerCreate+0x38>
		{
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 80061b4:	697b      	ldr	r3, [r7, #20]
 80061b6:	9301      	str	r3, [sp, #4]
 80061b8:	6a3b      	ldr	r3, [r7, #32]
 80061ba:	9300      	str	r3, [sp, #0]
 80061bc:	683b      	ldr	r3, [r7, #0]
 80061be:	687a      	ldr	r2, [r7, #4]
 80061c0:	68b9      	ldr	r1, [r7, #8]
 80061c2:	68f8      	ldr	r0, [r7, #12]
 80061c4:	f000 f844 	bl	8006250 <prvInitialiseNewTimer>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Timers can be created statically or dynamically, so note this
				timer was created dynamically in case the timer is later
				deleted. */
				pxNewTimer->ucStaticallyAllocated = pdFALSE;
 80061c8:	697b      	ldr	r3, [r7, #20]
 80061ca:	2200      	movs	r2, #0
 80061cc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */
		}

		return pxNewTimer;
 80061d0:	697b      	ldr	r3, [r7, #20]
	}
 80061d2:	4618      	mov	r0, r3
 80061d4:	3718      	adds	r7, #24
 80061d6:	46bd      	mov	sp, r7
 80061d8:	bd80      	pop	{r7, pc}

080061da <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 80061da:	b580      	push	{r7, lr}
 80061dc:	b08a      	sub	sp, #40	; 0x28
 80061de:	af02      	add	r7, sp, #8
 80061e0:	60f8      	str	r0, [r7, #12]
 80061e2:	60b9      	str	r1, [r7, #8]
 80061e4:	607a      	str	r2, [r7, #4]
 80061e6:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 80061e8:	232c      	movs	r3, #44	; 0x2c
 80061ea:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 80061ec:	693b      	ldr	r3, [r7, #16]
 80061ee:	2b2c      	cmp	r3, #44	; 0x2c
 80061f0:	d009      	beq.n	8006206 <xTimerCreateStatic+0x2c>
 80061f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061f6:	f383 8811 	msr	BASEPRI, r3
 80061fa:	f3bf 8f6f 	isb	sy
 80061fe:	f3bf 8f4f 	dsb	sy
 8006202:	61bb      	str	r3, [r7, #24]
 8006204:	e7fe      	b.n	8006204 <xTimerCreateStatic+0x2a>
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 8006206:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006208:	2b00      	cmp	r3, #0
 800620a:	d109      	bne.n	8006220 <xTimerCreateStatic+0x46>
 800620c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006210:	f383 8811 	msr	BASEPRI, r3
 8006214:	f3bf 8f6f 	isb	sy
 8006218:	f3bf 8f4f 	dsb	sy
 800621c:	617b      	str	r3, [r7, #20]
 800621e:	e7fe      	b.n	800621e <xTimerCreateStatic+0x44>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006220:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006222:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 8006224:	69fb      	ldr	r3, [r7, #28]
 8006226:	2b00      	cmp	r3, #0
 8006228:	d00d      	beq.n	8006246 <xTimerCreateStatic+0x6c>
		{
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800622a:	69fb      	ldr	r3, [r7, #28]
 800622c:	9301      	str	r3, [sp, #4]
 800622e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006230:	9300      	str	r3, [sp, #0]
 8006232:	683b      	ldr	r3, [r7, #0]
 8006234:	687a      	ldr	r2, [r7, #4]
 8006236:	68b9      	ldr	r1, [r7, #8]
 8006238:	68f8      	ldr	r0, [r7, #12]
 800623a:	f000 f809 	bl	8006250 <prvInitialiseNewTimer>

			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Timers can be created statically or dynamically so note this
				timer was created statically in case it is later deleted. */
				pxNewTimer->ucStaticallyAllocated = pdTRUE;
 800623e:	69fb      	ldr	r3, [r7, #28]
 8006240:	2201      	movs	r2, #1
 8006242:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
		}

		return pxNewTimer;
 8006246:	69fb      	ldr	r3, [r7, #28]
	}
 8006248:	4618      	mov	r0, r3
 800624a:	3720      	adds	r7, #32
 800624c:	46bd      	mov	sp, r7
 800624e:	bd80      	pop	{r7, pc}

08006250 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 8006250:	b580      	push	{r7, lr}
 8006252:	b086      	sub	sp, #24
 8006254:	af00      	add	r7, sp, #0
 8006256:	60f8      	str	r0, [r7, #12]
 8006258:	60b9      	str	r1, [r7, #8]
 800625a:	607a      	str	r2, [r7, #4]
 800625c:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 800625e:	68bb      	ldr	r3, [r7, #8]
 8006260:	2b00      	cmp	r3, #0
 8006262:	d109      	bne.n	8006278 <prvInitialiseNewTimer+0x28>
 8006264:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006268:	f383 8811 	msr	BASEPRI, r3
 800626c:	f3bf 8f6f 	isb	sy
 8006270:	f3bf 8f4f 	dsb	sy
 8006274:	617b      	str	r3, [r7, #20]
 8006276:	e7fe      	b.n	8006276 <prvInitialiseNewTimer+0x26>

	if( pxNewTimer != NULL )
 8006278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800627a:	2b00      	cmp	r3, #0
 800627c:	d015      	beq.n	80062aa <prvInitialiseNewTimer+0x5a>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 800627e:	f000 fa81 	bl	8006784 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 8006282:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006284:	68fa      	ldr	r2, [r7, #12]
 8006286:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8006288:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800628a:	68ba      	ldr	r2, [r7, #8]
 800628c:	619a      	str	r2, [r3, #24]
		pxNewTimer->uxAutoReload = uxAutoReload;
 800628e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006290:	687a      	ldr	r2, [r7, #4]
 8006292:	61da      	str	r2, [r3, #28]
		pxNewTimer->pvTimerID = pvTimerID;
 8006294:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006296:	683a      	ldr	r2, [r7, #0]
 8006298:	621a      	str	r2, [r3, #32]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800629a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800629c:	6a3a      	ldr	r2, [r7, #32]
 800629e:	625a      	str	r2, [r3, #36]	; 0x24
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 80062a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062a2:	3304      	adds	r3, #4
 80062a4:	4618      	mov	r0, r3
 80062a6:	f7fd ff3e 	bl	8004126 <vListInitialiseItem>
		traceTIMER_CREATE( pxNewTimer );
	}
}
 80062aa:	bf00      	nop
 80062ac:	3718      	adds	r7, #24
 80062ae:	46bd      	mov	sp, r7
 80062b0:	bd80      	pop	{r7, pc}
	...

080062b4 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80062b4:	b580      	push	{r7, lr}
 80062b6:	b08a      	sub	sp, #40	; 0x28
 80062b8:	af00      	add	r7, sp, #0
 80062ba:	60f8      	str	r0, [r7, #12]
 80062bc:	60b9      	str	r1, [r7, #8]
 80062be:	607a      	str	r2, [r7, #4]
 80062c0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80062c2:	2300      	movs	r3, #0
 80062c4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d109      	bne.n	80062e0 <xTimerGenericCommand+0x2c>
 80062cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062d0:	f383 8811 	msr	BASEPRI, r3
 80062d4:	f3bf 8f6f 	isb	sy
 80062d8:	f3bf 8f4f 	dsb	sy
 80062dc:	623b      	str	r3, [r7, #32]
 80062de:	e7fe      	b.n	80062de <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80062e0:	4b19      	ldr	r3, [pc, #100]	; (8006348 <xTimerGenericCommand+0x94>)
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d02a      	beq.n	800633e <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80062e8:	68bb      	ldr	r3, [r7, #8]
 80062ea:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80062f4:	68bb      	ldr	r3, [r7, #8]
 80062f6:	2b05      	cmp	r3, #5
 80062f8:	dc18      	bgt.n	800632c <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80062fa:	f7ff fcc5 	bl	8005c88 <xTaskGetSchedulerState>
 80062fe:	4603      	mov	r3, r0
 8006300:	2b02      	cmp	r3, #2
 8006302:	d109      	bne.n	8006318 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006304:	4b10      	ldr	r3, [pc, #64]	; (8006348 <xTimerGenericCommand+0x94>)
 8006306:	6818      	ldr	r0, [r3, #0]
 8006308:	f107 0114 	add.w	r1, r7, #20
 800630c:	2300      	movs	r3, #0
 800630e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006310:	f7fe f90e 	bl	8004530 <xQueueGenericSend>
 8006314:	6278      	str	r0, [r7, #36]	; 0x24
 8006316:	e012      	b.n	800633e <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006318:	4b0b      	ldr	r3, [pc, #44]	; (8006348 <xTimerGenericCommand+0x94>)
 800631a:	6818      	ldr	r0, [r3, #0]
 800631c:	f107 0114 	add.w	r1, r7, #20
 8006320:	2300      	movs	r3, #0
 8006322:	2200      	movs	r2, #0
 8006324:	f7fe f904 	bl	8004530 <xQueueGenericSend>
 8006328:	6278      	str	r0, [r7, #36]	; 0x24
 800632a:	e008      	b.n	800633e <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800632c:	4b06      	ldr	r3, [pc, #24]	; (8006348 <xTimerGenericCommand+0x94>)
 800632e:	6818      	ldr	r0, [r3, #0]
 8006330:	f107 0114 	add.w	r1, r7, #20
 8006334:	2300      	movs	r3, #0
 8006336:	683a      	ldr	r2, [r7, #0]
 8006338:	f7fe f9dc 	bl	80046f4 <xQueueGenericSendFromISR>
 800633c:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800633e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006340:	4618      	mov	r0, r3
 8006342:	3728      	adds	r7, #40	; 0x28
 8006344:	46bd      	mov	sp, r7
 8006346:	bd80      	pop	{r7, pc}
 8006348:	200006ac 	.word	0x200006ac

0800634c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800634c:	b580      	push	{r7, lr}
 800634e:	b088      	sub	sp, #32
 8006350:	af02      	add	r7, sp, #8
 8006352:	6078      	str	r0, [r7, #4]
 8006354:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006356:	4b1c      	ldr	r3, [pc, #112]	; (80063c8 <prvProcessExpiredTimer+0x7c>)
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	68db      	ldr	r3, [r3, #12]
 800635c:	68db      	ldr	r3, [r3, #12]
 800635e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006360:	697b      	ldr	r3, [r7, #20]
 8006362:	3304      	adds	r3, #4
 8006364:	4618      	mov	r0, r3
 8006366:	f7fd ff45 	bl	80041f4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800636a:	697b      	ldr	r3, [r7, #20]
 800636c:	69db      	ldr	r3, [r3, #28]
 800636e:	2b01      	cmp	r3, #1
 8006370:	d121      	bne.n	80063b6 <prvProcessExpiredTimer+0x6a>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006372:	697b      	ldr	r3, [r7, #20]
 8006374:	699a      	ldr	r2, [r3, #24]
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	18d1      	adds	r1, r2, r3
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	683a      	ldr	r2, [r7, #0]
 800637e:	6978      	ldr	r0, [r7, #20]
 8006380:	f000 f8c8 	bl	8006514 <prvInsertTimerInActiveList>
 8006384:	4603      	mov	r3, r0
 8006386:	2b00      	cmp	r3, #0
 8006388:	d015      	beq.n	80063b6 <prvProcessExpiredTimer+0x6a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800638a:	2300      	movs	r3, #0
 800638c:	9300      	str	r3, [sp, #0]
 800638e:	2300      	movs	r3, #0
 8006390:	687a      	ldr	r2, [r7, #4]
 8006392:	2100      	movs	r1, #0
 8006394:	6978      	ldr	r0, [r7, #20]
 8006396:	f7ff ff8d 	bl	80062b4 <xTimerGenericCommand>
 800639a:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800639c:	693b      	ldr	r3, [r7, #16]
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d109      	bne.n	80063b6 <prvProcessExpiredTimer+0x6a>
 80063a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063a6:	f383 8811 	msr	BASEPRI, r3
 80063aa:	f3bf 8f6f 	isb	sy
 80063ae:	f3bf 8f4f 	dsb	sy
 80063b2:	60fb      	str	r3, [r7, #12]
 80063b4:	e7fe      	b.n	80063b4 <prvProcessExpiredTimer+0x68>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80063b6:	697b      	ldr	r3, [r7, #20]
 80063b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063ba:	6978      	ldr	r0, [r7, #20]
 80063bc:	4798      	blx	r3
}
 80063be:	bf00      	nop
 80063c0:	3718      	adds	r7, #24
 80063c2:	46bd      	mov	sp, r7
 80063c4:	bd80      	pop	{r7, pc}
 80063c6:	bf00      	nop
 80063c8:	200006a4 	.word	0x200006a4

080063cc <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 80063cc:	b580      	push	{r7, lr}
 80063ce:	b084      	sub	sp, #16
 80063d0:	af00      	add	r7, sp, #0
 80063d2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80063d4:	f107 0308 	add.w	r3, r7, #8
 80063d8:	4618      	mov	r0, r3
 80063da:	f000 f857 	bl	800648c <prvGetNextExpireTime>
 80063de:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80063e0:	68bb      	ldr	r3, [r7, #8]
 80063e2:	4619      	mov	r1, r3
 80063e4:	68f8      	ldr	r0, [r7, #12]
 80063e6:	f000 f803 	bl	80063f0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80063ea:	f000 f8d5 	bl	8006598 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80063ee:	e7f1      	b.n	80063d4 <prvTimerTask+0x8>

080063f0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80063f0:	b580      	push	{r7, lr}
 80063f2:	b084      	sub	sp, #16
 80063f4:	af00      	add	r7, sp, #0
 80063f6:	6078      	str	r0, [r7, #4]
 80063f8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80063fa:	f7ff f87f 	bl	80054fc <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80063fe:	f107 0308 	add.w	r3, r7, #8
 8006402:	4618      	mov	r0, r3
 8006404:	f000 f866 	bl	80064d4 <prvSampleTimeNow>
 8006408:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800640a:	68bb      	ldr	r3, [r7, #8]
 800640c:	2b00      	cmp	r3, #0
 800640e:	d130      	bne.n	8006472 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006410:	683b      	ldr	r3, [r7, #0]
 8006412:	2b00      	cmp	r3, #0
 8006414:	d10a      	bne.n	800642c <prvProcessTimerOrBlockTask+0x3c>
 8006416:	687a      	ldr	r2, [r7, #4]
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	429a      	cmp	r2, r3
 800641c:	d806      	bhi.n	800642c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800641e:	f7ff f87b 	bl	8005518 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006422:	68f9      	ldr	r1, [r7, #12]
 8006424:	6878      	ldr	r0, [r7, #4]
 8006426:	f7ff ff91 	bl	800634c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800642a:	e024      	b.n	8006476 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800642c:	683b      	ldr	r3, [r7, #0]
 800642e:	2b00      	cmp	r3, #0
 8006430:	d008      	beq.n	8006444 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006432:	4b13      	ldr	r3, [pc, #76]	; (8006480 <prvProcessTimerOrBlockTask+0x90>)
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	2b00      	cmp	r3, #0
 800643a:	bf0c      	ite	eq
 800643c:	2301      	moveq	r3, #1
 800643e:	2300      	movne	r3, #0
 8006440:	b2db      	uxtb	r3, r3
 8006442:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006444:	4b0f      	ldr	r3, [pc, #60]	; (8006484 <prvProcessTimerOrBlockTask+0x94>)
 8006446:	6818      	ldr	r0, [r3, #0]
 8006448:	687a      	ldr	r2, [r7, #4]
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	1ad3      	subs	r3, r2, r3
 800644e:	683a      	ldr	r2, [r7, #0]
 8006450:	4619      	mov	r1, r3
 8006452:	f7fe fe07 	bl	8005064 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8006456:	f7ff f85f 	bl	8005518 <xTaskResumeAll>
 800645a:	4603      	mov	r3, r0
 800645c:	2b00      	cmp	r3, #0
 800645e:	d10a      	bne.n	8006476 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006460:	4b09      	ldr	r3, [pc, #36]	; (8006488 <prvProcessTimerOrBlockTask+0x98>)
 8006462:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006466:	601a      	str	r2, [r3, #0]
 8006468:	f3bf 8f4f 	dsb	sy
 800646c:	f3bf 8f6f 	isb	sy
}
 8006470:	e001      	b.n	8006476 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8006472:	f7ff f851 	bl	8005518 <xTaskResumeAll>
}
 8006476:	bf00      	nop
 8006478:	3710      	adds	r7, #16
 800647a:	46bd      	mov	sp, r7
 800647c:	bd80      	pop	{r7, pc}
 800647e:	bf00      	nop
 8006480:	200006a8 	.word	0x200006a8
 8006484:	200006ac 	.word	0x200006ac
 8006488:	e000ed04 	.word	0xe000ed04

0800648c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800648c:	b480      	push	{r7}
 800648e:	b085      	sub	sp, #20
 8006490:	af00      	add	r7, sp, #0
 8006492:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006494:	4b0e      	ldr	r3, [pc, #56]	; (80064d0 <prvGetNextExpireTime+0x44>)
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	2b00      	cmp	r3, #0
 800649c:	bf0c      	ite	eq
 800649e:	2301      	moveq	r3, #1
 80064a0:	2300      	movne	r3, #0
 80064a2:	b2db      	uxtb	r3, r3
 80064a4:	461a      	mov	r2, r3
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d105      	bne.n	80064be <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80064b2:	4b07      	ldr	r3, [pc, #28]	; (80064d0 <prvGetNextExpireTime+0x44>)
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	68db      	ldr	r3, [r3, #12]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	60fb      	str	r3, [r7, #12]
 80064bc:	e001      	b.n	80064c2 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80064be:	2300      	movs	r3, #0
 80064c0:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80064c2:	68fb      	ldr	r3, [r7, #12]
}
 80064c4:	4618      	mov	r0, r3
 80064c6:	3714      	adds	r7, #20
 80064c8:	46bd      	mov	sp, r7
 80064ca:	bc80      	pop	{r7}
 80064cc:	4770      	bx	lr
 80064ce:	bf00      	nop
 80064d0:	200006a4 	.word	0x200006a4

080064d4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80064d4:	b580      	push	{r7, lr}
 80064d6:	b084      	sub	sp, #16
 80064d8:	af00      	add	r7, sp, #0
 80064da:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80064dc:	f7ff f8aa 	bl	8005634 <xTaskGetTickCount>
 80064e0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80064e2:	4b0b      	ldr	r3, [pc, #44]	; (8006510 <prvSampleTimeNow+0x3c>)
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	68fa      	ldr	r2, [r7, #12]
 80064e8:	429a      	cmp	r2, r3
 80064ea:	d205      	bcs.n	80064f8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80064ec:	f000 f8ea 	bl	80066c4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	2201      	movs	r2, #1
 80064f4:	601a      	str	r2, [r3, #0]
 80064f6:	e002      	b.n	80064fe <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	2200      	movs	r2, #0
 80064fc:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80064fe:	4a04      	ldr	r2, [pc, #16]	; (8006510 <prvSampleTimeNow+0x3c>)
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8006504:	68fb      	ldr	r3, [r7, #12]
}
 8006506:	4618      	mov	r0, r3
 8006508:	3710      	adds	r7, #16
 800650a:	46bd      	mov	sp, r7
 800650c:	bd80      	pop	{r7, pc}
 800650e:	bf00      	nop
 8006510:	200006b4 	.word	0x200006b4

08006514 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006514:	b580      	push	{r7, lr}
 8006516:	b086      	sub	sp, #24
 8006518:	af00      	add	r7, sp, #0
 800651a:	60f8      	str	r0, [r7, #12]
 800651c:	60b9      	str	r1, [r7, #8]
 800651e:	607a      	str	r2, [r7, #4]
 8006520:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8006522:	2300      	movs	r3, #0
 8006524:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	68ba      	ldr	r2, [r7, #8]
 800652a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	68fa      	ldr	r2, [r7, #12]
 8006530:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8006532:	68ba      	ldr	r2, [r7, #8]
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	429a      	cmp	r2, r3
 8006538:	d812      	bhi.n	8006560 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800653a:	687a      	ldr	r2, [r7, #4]
 800653c:	683b      	ldr	r3, [r7, #0]
 800653e:	1ad2      	subs	r2, r2, r3
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	699b      	ldr	r3, [r3, #24]
 8006544:	429a      	cmp	r2, r3
 8006546:	d302      	bcc.n	800654e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8006548:	2301      	movs	r3, #1
 800654a:	617b      	str	r3, [r7, #20]
 800654c:	e01b      	b.n	8006586 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800654e:	4b10      	ldr	r3, [pc, #64]	; (8006590 <prvInsertTimerInActiveList+0x7c>)
 8006550:	681a      	ldr	r2, [r3, #0]
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	3304      	adds	r3, #4
 8006556:	4619      	mov	r1, r3
 8006558:	4610      	mov	r0, r2
 800655a:	f7fd fe13 	bl	8004184 <vListInsert>
 800655e:	e012      	b.n	8006586 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006560:	687a      	ldr	r2, [r7, #4]
 8006562:	683b      	ldr	r3, [r7, #0]
 8006564:	429a      	cmp	r2, r3
 8006566:	d206      	bcs.n	8006576 <prvInsertTimerInActiveList+0x62>
 8006568:	68ba      	ldr	r2, [r7, #8]
 800656a:	683b      	ldr	r3, [r7, #0]
 800656c:	429a      	cmp	r2, r3
 800656e:	d302      	bcc.n	8006576 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8006570:	2301      	movs	r3, #1
 8006572:	617b      	str	r3, [r7, #20]
 8006574:	e007      	b.n	8006586 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006576:	4b07      	ldr	r3, [pc, #28]	; (8006594 <prvInsertTimerInActiveList+0x80>)
 8006578:	681a      	ldr	r2, [r3, #0]
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	3304      	adds	r3, #4
 800657e:	4619      	mov	r1, r3
 8006580:	4610      	mov	r0, r2
 8006582:	f7fd fdff 	bl	8004184 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8006586:	697b      	ldr	r3, [r7, #20]
}
 8006588:	4618      	mov	r0, r3
 800658a:	3718      	adds	r7, #24
 800658c:	46bd      	mov	sp, r7
 800658e:	bd80      	pop	{r7, pc}
 8006590:	200006a8 	.word	0x200006a8
 8006594:	200006a4 	.word	0x200006a4

08006598 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8006598:	b580      	push	{r7, lr}
 800659a:	b08c      	sub	sp, #48	; 0x30
 800659c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800659e:	e07f      	b.n	80066a0 <prvProcessReceivedCommands+0x108>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80065a0:	68bb      	ldr	r3, [r7, #8]
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	db7b      	blt.n	800669e <prvProcessReceivedCommands+0x106>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80065a6:	693b      	ldr	r3, [r7, #16]
 80065a8:	627b      	str	r3, [r7, #36]	; 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80065aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065ac:	695b      	ldr	r3, [r3, #20]
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d004      	beq.n	80065bc <prvProcessReceivedCommands+0x24>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80065b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065b4:	3304      	adds	r3, #4
 80065b6:	4618      	mov	r0, r3
 80065b8:	f7fd fe1c 	bl	80041f4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80065bc:	1d3b      	adds	r3, r7, #4
 80065be:	4618      	mov	r0, r3
 80065c0:	f7ff ff88 	bl	80064d4 <prvSampleTimeNow>
 80065c4:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 80065c6:	68bb      	ldr	r3, [r7, #8]
 80065c8:	2b09      	cmp	r3, #9
 80065ca:	d869      	bhi.n	80066a0 <prvProcessReceivedCommands+0x108>
 80065cc:	a201      	add	r2, pc, #4	; (adr r2, 80065d4 <prvProcessReceivedCommands+0x3c>)
 80065ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065d2:	bf00      	nop
 80065d4:	080065fd 	.word	0x080065fd
 80065d8:	080065fd 	.word	0x080065fd
 80065dc:	080065fd 	.word	0x080065fd
 80065e0:	080066a1 	.word	0x080066a1
 80065e4:	08006657 	.word	0x08006657
 80065e8:	0800668d 	.word	0x0800668d
 80065ec:	080065fd 	.word	0x080065fd
 80065f0:	080065fd 	.word	0x080065fd
 80065f4:	080066a1 	.word	0x080066a1
 80065f8:	08006657 	.word	0x08006657
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80065fc:	68fa      	ldr	r2, [r7, #12]
 80065fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006600:	699b      	ldr	r3, [r3, #24]
 8006602:	18d1      	adds	r1, r2, r3
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	6a3a      	ldr	r2, [r7, #32]
 8006608:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800660a:	f7ff ff83 	bl	8006514 <prvInsertTimerInActiveList>
 800660e:	4603      	mov	r3, r0
 8006610:	2b00      	cmp	r3, #0
 8006612:	d045      	beq.n	80066a0 <prvProcessReceivedCommands+0x108>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006616:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006618:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800661a:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800661c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800661e:	69db      	ldr	r3, [r3, #28]
 8006620:	2b01      	cmp	r3, #1
 8006622:	d13d      	bne.n	80066a0 <prvProcessReceivedCommands+0x108>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006624:	68fa      	ldr	r2, [r7, #12]
 8006626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006628:	699b      	ldr	r3, [r3, #24]
 800662a:	441a      	add	r2, r3
 800662c:	2300      	movs	r3, #0
 800662e:	9300      	str	r3, [sp, #0]
 8006630:	2300      	movs	r3, #0
 8006632:	2100      	movs	r1, #0
 8006634:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006636:	f7ff fe3d 	bl	80062b4 <xTimerGenericCommand>
 800663a:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 800663c:	69fb      	ldr	r3, [r7, #28]
 800663e:	2b00      	cmp	r3, #0
 8006640:	d12e      	bne.n	80066a0 <prvProcessReceivedCommands+0x108>
 8006642:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006646:	f383 8811 	msr	BASEPRI, r3
 800664a:	f3bf 8f6f 	isb	sy
 800664e:	f3bf 8f4f 	dsb	sy
 8006652:	61bb      	str	r3, [r7, #24]
 8006654:	e7fe      	b.n	8006654 <prvProcessReceivedCommands+0xbc>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006656:	68fa      	ldr	r2, [r7, #12]
 8006658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800665a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800665c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800665e:	699b      	ldr	r3, [r3, #24]
 8006660:	2b00      	cmp	r3, #0
 8006662:	d109      	bne.n	8006678 <prvProcessReceivedCommands+0xe0>
 8006664:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006668:	f383 8811 	msr	BASEPRI, r3
 800666c:	f3bf 8f6f 	isb	sy
 8006670:	f3bf 8f4f 	dsb	sy
 8006674:	617b      	str	r3, [r7, #20]
 8006676:	e7fe      	b.n	8006676 <prvProcessReceivedCommands+0xde>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800667a:	699a      	ldr	r2, [r3, #24]
 800667c:	6a3b      	ldr	r3, [r7, #32]
 800667e:	18d1      	adds	r1, r2, r3
 8006680:	6a3b      	ldr	r3, [r7, #32]
 8006682:	6a3a      	ldr	r2, [r7, #32]
 8006684:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006686:	f7ff ff45 	bl	8006514 <prvInsertTimerInActiveList>
					break;
 800668a:	e009      	b.n	80066a0 <prvProcessReceivedCommands+0x108>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800668c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800668e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006692:	2b00      	cmp	r3, #0
 8006694:	d104      	bne.n	80066a0 <prvProcessReceivedCommands+0x108>
						{
							vPortFree( pxTimer );
 8006696:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006698:	f000 fb5a 	bl	8006d50 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800669c:	e000      	b.n	80066a0 <prvProcessReceivedCommands+0x108>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800669e:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80066a0:	4b07      	ldr	r3, [pc, #28]	; (80066c0 <prvProcessReceivedCommands+0x128>)
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	f107 0108 	add.w	r1, r7, #8
 80066a8:	2200      	movs	r2, #0
 80066aa:	4618      	mov	r0, r3
 80066ac:	f7fe f940 	bl	8004930 <xQueueReceive>
 80066b0:	4603      	mov	r3, r0
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	f47f af74 	bne.w	80065a0 <prvProcessReceivedCommands+0x8>
	}
}
 80066b8:	bf00      	nop
 80066ba:	3728      	adds	r7, #40	; 0x28
 80066bc:	46bd      	mov	sp, r7
 80066be:	bd80      	pop	{r7, pc}
 80066c0:	200006ac 	.word	0x200006ac

080066c4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80066c4:	b580      	push	{r7, lr}
 80066c6:	b088      	sub	sp, #32
 80066c8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80066ca:	e044      	b.n	8006756 <prvSwitchTimerLists+0x92>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80066cc:	4b2b      	ldr	r3, [pc, #172]	; (800677c <prvSwitchTimerLists+0xb8>)
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	68db      	ldr	r3, [r3, #12]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80066d6:	4b29      	ldr	r3, [pc, #164]	; (800677c <prvSwitchTimerLists+0xb8>)
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	68db      	ldr	r3, [r3, #12]
 80066dc:	68db      	ldr	r3, [r3, #12]
 80066de:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	3304      	adds	r3, #4
 80066e4:	4618      	mov	r0, r3
 80066e6:	f7fd fd85 	bl	80041f4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066ee:	68f8      	ldr	r0, [r7, #12]
 80066f0:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	69db      	ldr	r3, [r3, #28]
 80066f6:	2b01      	cmp	r3, #1
 80066f8:	d12d      	bne.n	8006756 <prvSwitchTimerLists+0x92>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	699b      	ldr	r3, [r3, #24]
 80066fe:	693a      	ldr	r2, [r7, #16]
 8006700:	4413      	add	r3, r2
 8006702:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8006704:	68ba      	ldr	r2, [r7, #8]
 8006706:	693b      	ldr	r3, [r7, #16]
 8006708:	429a      	cmp	r2, r3
 800670a:	d90e      	bls.n	800672a <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	68ba      	ldr	r2, [r7, #8]
 8006710:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	68fa      	ldr	r2, [r7, #12]
 8006716:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006718:	4b18      	ldr	r3, [pc, #96]	; (800677c <prvSwitchTimerLists+0xb8>)
 800671a:	681a      	ldr	r2, [r3, #0]
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	3304      	adds	r3, #4
 8006720:	4619      	mov	r1, r3
 8006722:	4610      	mov	r0, r2
 8006724:	f7fd fd2e 	bl	8004184 <vListInsert>
 8006728:	e015      	b.n	8006756 <prvSwitchTimerLists+0x92>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800672a:	2300      	movs	r3, #0
 800672c:	9300      	str	r3, [sp, #0]
 800672e:	2300      	movs	r3, #0
 8006730:	693a      	ldr	r2, [r7, #16]
 8006732:	2100      	movs	r1, #0
 8006734:	68f8      	ldr	r0, [r7, #12]
 8006736:	f7ff fdbd 	bl	80062b4 <xTimerGenericCommand>
 800673a:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	2b00      	cmp	r3, #0
 8006740:	d109      	bne.n	8006756 <prvSwitchTimerLists+0x92>
 8006742:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006746:	f383 8811 	msr	BASEPRI, r3
 800674a:	f3bf 8f6f 	isb	sy
 800674e:	f3bf 8f4f 	dsb	sy
 8006752:	603b      	str	r3, [r7, #0]
 8006754:	e7fe      	b.n	8006754 <prvSwitchTimerLists+0x90>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006756:	4b09      	ldr	r3, [pc, #36]	; (800677c <prvSwitchTimerLists+0xb8>)
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	2b00      	cmp	r3, #0
 800675e:	d1b5      	bne.n	80066cc <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8006760:	4b06      	ldr	r3, [pc, #24]	; (800677c <prvSwitchTimerLists+0xb8>)
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8006766:	4b06      	ldr	r3, [pc, #24]	; (8006780 <prvSwitchTimerLists+0xbc>)
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	4a04      	ldr	r2, [pc, #16]	; (800677c <prvSwitchTimerLists+0xb8>)
 800676c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800676e:	4a04      	ldr	r2, [pc, #16]	; (8006780 <prvSwitchTimerLists+0xbc>)
 8006770:	697b      	ldr	r3, [r7, #20]
 8006772:	6013      	str	r3, [r2, #0]
}
 8006774:	bf00      	nop
 8006776:	3718      	adds	r7, #24
 8006778:	46bd      	mov	sp, r7
 800677a:	bd80      	pop	{r7, pc}
 800677c:	200006a4 	.word	0x200006a4
 8006780:	200006a8 	.word	0x200006a8

08006784 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006784:	b580      	push	{r7, lr}
 8006786:	b082      	sub	sp, #8
 8006788:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800678a:	f000 f925 	bl	80069d8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800678e:	4b15      	ldr	r3, [pc, #84]	; (80067e4 <prvCheckForValidListAndQueue+0x60>)
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	2b00      	cmp	r3, #0
 8006794:	d120      	bne.n	80067d8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8006796:	4814      	ldr	r0, [pc, #80]	; (80067e8 <prvCheckForValidListAndQueue+0x64>)
 8006798:	f7fd fca6 	bl	80040e8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800679c:	4813      	ldr	r0, [pc, #76]	; (80067ec <prvCheckForValidListAndQueue+0x68>)
 800679e:	f7fd fca3 	bl	80040e8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80067a2:	4b13      	ldr	r3, [pc, #76]	; (80067f0 <prvCheckForValidListAndQueue+0x6c>)
 80067a4:	4a10      	ldr	r2, [pc, #64]	; (80067e8 <prvCheckForValidListAndQueue+0x64>)
 80067a6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80067a8:	4b12      	ldr	r3, [pc, #72]	; (80067f4 <prvCheckForValidListAndQueue+0x70>)
 80067aa:	4a10      	ldr	r2, [pc, #64]	; (80067ec <prvCheckForValidListAndQueue+0x68>)
 80067ac:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80067ae:	2300      	movs	r3, #0
 80067b0:	9300      	str	r3, [sp, #0]
 80067b2:	4b11      	ldr	r3, [pc, #68]	; (80067f8 <prvCheckForValidListAndQueue+0x74>)
 80067b4:	4a11      	ldr	r2, [pc, #68]	; (80067fc <prvCheckForValidListAndQueue+0x78>)
 80067b6:	210c      	movs	r1, #12
 80067b8:	200a      	movs	r0, #10
 80067ba:	f7fd fd9e 	bl	80042fa <xQueueGenericCreateStatic>
 80067be:	4602      	mov	r2, r0
 80067c0:	4b08      	ldr	r3, [pc, #32]	; (80067e4 <prvCheckForValidListAndQueue+0x60>)
 80067c2:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80067c4:	4b07      	ldr	r3, [pc, #28]	; (80067e4 <prvCheckForValidListAndQueue+0x60>)
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d005      	beq.n	80067d8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80067cc:	4b05      	ldr	r3, [pc, #20]	; (80067e4 <prvCheckForValidListAndQueue+0x60>)
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	490b      	ldr	r1, [pc, #44]	; (8006800 <prvCheckForValidListAndQueue+0x7c>)
 80067d2:	4618      	mov	r0, r3
 80067d4:	f7fe fc1e 	bl	8005014 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80067d8:	f000 f92c 	bl	8006a34 <vPortExitCritical>
}
 80067dc:	bf00      	nop
 80067de:	46bd      	mov	sp, r7
 80067e0:	bd80      	pop	{r7, pc}
 80067e2:	bf00      	nop
 80067e4:	200006ac 	.word	0x200006ac
 80067e8:	2000067c 	.word	0x2000067c
 80067ec:	20000690 	.word	0x20000690
 80067f0:	200006a4 	.word	0x200006a4
 80067f4:	200006a8 	.word	0x200006a8
 80067f8:	20000730 	.word	0x20000730
 80067fc:	200006b8 	.word	0x200006b8
 8006800:	08007a34 	.word	0x08007a34

08006804 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006804:	b480      	push	{r7}
 8006806:	b085      	sub	sp, #20
 8006808:	af00      	add	r7, sp, #0
 800680a:	60f8      	str	r0, [r7, #12]
 800680c:	60b9      	str	r1, [r7, #8]
 800680e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	3b04      	subs	r3, #4
 8006814:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800681c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	3b04      	subs	r3, #4
 8006822:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006824:	68bb      	ldr	r3, [r7, #8]
 8006826:	f023 0201 	bic.w	r2, r3, #1
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	3b04      	subs	r3, #4
 8006832:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006834:	4a08      	ldr	r2, [pc, #32]	; (8006858 <pxPortInitialiseStack+0x54>)
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	3b14      	subs	r3, #20
 800683e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006840:	687a      	ldr	r2, [r7, #4]
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	3b20      	subs	r3, #32
 800684a:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800684c:	68fb      	ldr	r3, [r7, #12]
}
 800684e:	4618      	mov	r0, r3
 8006850:	3714      	adds	r7, #20
 8006852:	46bd      	mov	sp, r7
 8006854:	bc80      	pop	{r7}
 8006856:	4770      	bx	lr
 8006858:	0800685d 	.word	0x0800685d

0800685c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800685c:	b480      	push	{r7}
 800685e:	b085      	sub	sp, #20
 8006860:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8006862:	2300      	movs	r3, #0
 8006864:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006866:	4b10      	ldr	r3, [pc, #64]	; (80068a8 <prvTaskExitError+0x4c>)
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800686e:	d009      	beq.n	8006884 <prvTaskExitError+0x28>
 8006870:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006874:	f383 8811 	msr	BASEPRI, r3
 8006878:	f3bf 8f6f 	isb	sy
 800687c:	f3bf 8f4f 	dsb	sy
 8006880:	60fb      	str	r3, [r7, #12]
 8006882:	e7fe      	b.n	8006882 <prvTaskExitError+0x26>
 8006884:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006888:	f383 8811 	msr	BASEPRI, r3
 800688c:	f3bf 8f6f 	isb	sy
 8006890:	f3bf 8f4f 	dsb	sy
 8006894:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006896:	bf00      	nop
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	2b00      	cmp	r3, #0
 800689c:	d0fc      	beq.n	8006898 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800689e:	bf00      	nop
 80068a0:	3714      	adds	r7, #20
 80068a2:	46bd      	mov	sp, r7
 80068a4:	bc80      	pop	{r7}
 80068a6:	4770      	bx	lr
 80068a8:	2000000c 	.word	0x2000000c
 80068ac:	00000000 	.word	0x00000000

080068b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80068b0:	4b07      	ldr	r3, [pc, #28]	; (80068d0 <pxCurrentTCBConst2>)
 80068b2:	6819      	ldr	r1, [r3, #0]
 80068b4:	6808      	ldr	r0, [r1, #0]
 80068b6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80068ba:	f380 8809 	msr	PSP, r0
 80068be:	f3bf 8f6f 	isb	sy
 80068c2:	f04f 0000 	mov.w	r0, #0
 80068c6:	f380 8811 	msr	BASEPRI, r0
 80068ca:	f04e 0e0d 	orr.w	lr, lr, #13
 80068ce:	4770      	bx	lr

080068d0 <pxCurrentTCBConst2>:
 80068d0:	20000550 	.word	0x20000550
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80068d4:	bf00      	nop
 80068d6:	bf00      	nop

080068d8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 80068d8:	4806      	ldr	r0, [pc, #24]	; (80068f4 <prvPortStartFirstTask+0x1c>)
 80068da:	6800      	ldr	r0, [r0, #0]
 80068dc:	6800      	ldr	r0, [r0, #0]
 80068de:	f380 8808 	msr	MSP, r0
 80068e2:	b662      	cpsie	i
 80068e4:	b661      	cpsie	f
 80068e6:	f3bf 8f4f 	dsb	sy
 80068ea:	f3bf 8f6f 	isb	sy
 80068ee:	df00      	svc	0
 80068f0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80068f2:	bf00      	nop
 80068f4:	e000ed08 	.word	0xe000ed08

080068f8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80068f8:	b580      	push	{r7, lr}
 80068fa:	b084      	sub	sp, #16
 80068fc:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80068fe:	4b31      	ldr	r3, [pc, #196]	; (80069c4 <xPortStartScheduler+0xcc>)
 8006900:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	781b      	ldrb	r3, [r3, #0]
 8006906:	b2db      	uxtb	r3, r3
 8006908:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	22ff      	movs	r2, #255	; 0xff
 800690e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	781b      	ldrb	r3, [r3, #0]
 8006914:	b2db      	uxtb	r3, r3
 8006916:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006918:	78fb      	ldrb	r3, [r7, #3]
 800691a:	b2db      	uxtb	r3, r3
 800691c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006920:	b2da      	uxtb	r2, r3
 8006922:	4b29      	ldr	r3, [pc, #164]	; (80069c8 <xPortStartScheduler+0xd0>)
 8006924:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006926:	4b29      	ldr	r3, [pc, #164]	; (80069cc <xPortStartScheduler+0xd4>)
 8006928:	2207      	movs	r2, #7
 800692a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800692c:	e009      	b.n	8006942 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800692e:	4b27      	ldr	r3, [pc, #156]	; (80069cc <xPortStartScheduler+0xd4>)
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	3b01      	subs	r3, #1
 8006934:	4a25      	ldr	r2, [pc, #148]	; (80069cc <xPortStartScheduler+0xd4>)
 8006936:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006938:	78fb      	ldrb	r3, [r7, #3]
 800693a:	b2db      	uxtb	r3, r3
 800693c:	005b      	lsls	r3, r3, #1
 800693e:	b2db      	uxtb	r3, r3
 8006940:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006942:	78fb      	ldrb	r3, [r7, #3]
 8006944:	b2db      	uxtb	r3, r3
 8006946:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800694a:	2b80      	cmp	r3, #128	; 0x80
 800694c:	d0ef      	beq.n	800692e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800694e:	4b1f      	ldr	r3, [pc, #124]	; (80069cc <xPortStartScheduler+0xd4>)
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	f1c3 0307 	rsb	r3, r3, #7
 8006956:	2b04      	cmp	r3, #4
 8006958:	d009      	beq.n	800696e <xPortStartScheduler+0x76>
 800695a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800695e:	f383 8811 	msr	BASEPRI, r3
 8006962:	f3bf 8f6f 	isb	sy
 8006966:	f3bf 8f4f 	dsb	sy
 800696a:	60bb      	str	r3, [r7, #8]
 800696c:	e7fe      	b.n	800696c <xPortStartScheduler+0x74>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800696e:	4b17      	ldr	r3, [pc, #92]	; (80069cc <xPortStartScheduler+0xd4>)
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	021b      	lsls	r3, r3, #8
 8006974:	4a15      	ldr	r2, [pc, #84]	; (80069cc <xPortStartScheduler+0xd4>)
 8006976:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006978:	4b14      	ldr	r3, [pc, #80]	; (80069cc <xPortStartScheduler+0xd4>)
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006980:	4a12      	ldr	r2, [pc, #72]	; (80069cc <xPortStartScheduler+0xd4>)
 8006982:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	b2da      	uxtb	r2, r3
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800698c:	4b10      	ldr	r3, [pc, #64]	; (80069d0 <xPortStartScheduler+0xd8>)
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	4a0f      	ldr	r2, [pc, #60]	; (80069d0 <xPortStartScheduler+0xd8>)
 8006992:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006996:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006998:	4b0d      	ldr	r3, [pc, #52]	; (80069d0 <xPortStartScheduler+0xd8>)
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	4a0c      	ldr	r2, [pc, #48]	; (80069d0 <xPortStartScheduler+0xd8>)
 800699e:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80069a2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80069a4:	f000 f8b0 	bl	8006b08 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80069a8:	4b0a      	ldr	r3, [pc, #40]	; (80069d4 <xPortStartScheduler+0xdc>)
 80069aa:	2200      	movs	r2, #0
 80069ac:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80069ae:	f7ff ff93 	bl	80068d8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80069b2:	f7fe fee7 	bl	8005784 <vTaskSwitchContext>
	prvTaskExitError();
 80069b6:	f7ff ff51 	bl	800685c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80069ba:	2300      	movs	r3, #0
}
 80069bc:	4618      	mov	r0, r3
 80069be:	3710      	adds	r7, #16
 80069c0:	46bd      	mov	sp, r7
 80069c2:	bd80      	pop	{r7, pc}
 80069c4:	e000e400 	.word	0xe000e400
 80069c8:	20000778 	.word	0x20000778
 80069cc:	2000077c 	.word	0x2000077c
 80069d0:	e000ed20 	.word	0xe000ed20
 80069d4:	2000000c 	.word	0x2000000c

080069d8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80069d8:	b480      	push	{r7}
 80069da:	b083      	sub	sp, #12
 80069dc:	af00      	add	r7, sp, #0
 80069de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069e2:	f383 8811 	msr	BASEPRI, r3
 80069e6:	f3bf 8f6f 	isb	sy
 80069ea:	f3bf 8f4f 	dsb	sy
 80069ee:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80069f0:	4b0e      	ldr	r3, [pc, #56]	; (8006a2c <vPortEnterCritical+0x54>)
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	3301      	adds	r3, #1
 80069f6:	4a0d      	ldr	r2, [pc, #52]	; (8006a2c <vPortEnterCritical+0x54>)
 80069f8:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80069fa:	4b0c      	ldr	r3, [pc, #48]	; (8006a2c <vPortEnterCritical+0x54>)
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	2b01      	cmp	r3, #1
 8006a00:	d10e      	bne.n	8006a20 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006a02:	4b0b      	ldr	r3, [pc, #44]	; (8006a30 <vPortEnterCritical+0x58>)
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	b2db      	uxtb	r3, r3
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d009      	beq.n	8006a20 <vPortEnterCritical+0x48>
 8006a0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a10:	f383 8811 	msr	BASEPRI, r3
 8006a14:	f3bf 8f6f 	isb	sy
 8006a18:	f3bf 8f4f 	dsb	sy
 8006a1c:	603b      	str	r3, [r7, #0]
 8006a1e:	e7fe      	b.n	8006a1e <vPortEnterCritical+0x46>
	}
}
 8006a20:	bf00      	nop
 8006a22:	370c      	adds	r7, #12
 8006a24:	46bd      	mov	sp, r7
 8006a26:	bc80      	pop	{r7}
 8006a28:	4770      	bx	lr
 8006a2a:	bf00      	nop
 8006a2c:	2000000c 	.word	0x2000000c
 8006a30:	e000ed04 	.word	0xe000ed04

08006a34 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006a34:	b480      	push	{r7}
 8006a36:	b083      	sub	sp, #12
 8006a38:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006a3a:	4b10      	ldr	r3, [pc, #64]	; (8006a7c <vPortExitCritical+0x48>)
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d109      	bne.n	8006a56 <vPortExitCritical+0x22>
 8006a42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a46:	f383 8811 	msr	BASEPRI, r3
 8006a4a:	f3bf 8f6f 	isb	sy
 8006a4e:	f3bf 8f4f 	dsb	sy
 8006a52:	607b      	str	r3, [r7, #4]
 8006a54:	e7fe      	b.n	8006a54 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8006a56:	4b09      	ldr	r3, [pc, #36]	; (8006a7c <vPortExitCritical+0x48>)
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	3b01      	subs	r3, #1
 8006a5c:	4a07      	ldr	r2, [pc, #28]	; (8006a7c <vPortExitCritical+0x48>)
 8006a5e:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006a60:	4b06      	ldr	r3, [pc, #24]	; (8006a7c <vPortExitCritical+0x48>)
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d104      	bne.n	8006a72 <vPortExitCritical+0x3e>
 8006a68:	2300      	movs	r3, #0
 8006a6a:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006a6c:	683b      	ldr	r3, [r7, #0]
 8006a6e:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8006a72:	bf00      	nop
 8006a74:	370c      	adds	r7, #12
 8006a76:	46bd      	mov	sp, r7
 8006a78:	bc80      	pop	{r7}
 8006a7a:	4770      	bx	lr
 8006a7c:	2000000c 	.word	0x2000000c

08006a80 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006a80:	f3ef 8009 	mrs	r0, PSP
 8006a84:	f3bf 8f6f 	isb	sy
 8006a88:	4b0d      	ldr	r3, [pc, #52]	; (8006ac0 <pxCurrentTCBConst>)
 8006a8a:	681a      	ldr	r2, [r3, #0]
 8006a8c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8006a90:	6010      	str	r0, [r2, #0]
 8006a92:	e92d 4008 	stmdb	sp!, {r3, lr}
 8006a96:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006a9a:	f380 8811 	msr	BASEPRI, r0
 8006a9e:	f7fe fe71 	bl	8005784 <vTaskSwitchContext>
 8006aa2:	f04f 0000 	mov.w	r0, #0
 8006aa6:	f380 8811 	msr	BASEPRI, r0
 8006aaa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8006aae:	6819      	ldr	r1, [r3, #0]
 8006ab0:	6808      	ldr	r0, [r1, #0]
 8006ab2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8006ab6:	f380 8809 	msr	PSP, r0
 8006aba:	f3bf 8f6f 	isb	sy
 8006abe:	4770      	bx	lr

08006ac0 <pxCurrentTCBConst>:
 8006ac0:	20000550 	.word	0x20000550
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006ac4:	bf00      	nop
 8006ac6:	bf00      	nop

08006ac8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006ac8:	b580      	push	{r7, lr}
 8006aca:	b082      	sub	sp, #8
 8006acc:	af00      	add	r7, sp, #0
	__asm volatile
 8006ace:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ad2:	f383 8811 	msr	BASEPRI, r3
 8006ad6:	f3bf 8f6f 	isb	sy
 8006ada:	f3bf 8f4f 	dsb	sy
 8006ade:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006ae0:	f7fe fdb6 	bl	8005650 <xTaskIncrementTick>
 8006ae4:	4603      	mov	r3, r0
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d003      	beq.n	8006af2 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006aea:	4b06      	ldr	r3, [pc, #24]	; (8006b04 <SysTick_Handler+0x3c>)
 8006aec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006af0:	601a      	str	r2, [r3, #0]
 8006af2:	2300      	movs	r3, #0
 8006af4:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006af6:	683b      	ldr	r3, [r7, #0]
 8006af8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8006afc:	bf00      	nop
 8006afe:	3708      	adds	r7, #8
 8006b00:	46bd      	mov	sp, r7
 8006b02:	bd80      	pop	{r7, pc}
 8006b04:	e000ed04 	.word	0xe000ed04

08006b08 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006b08:	b480      	push	{r7}
 8006b0a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006b0c:	4b0a      	ldr	r3, [pc, #40]	; (8006b38 <vPortSetupTimerInterrupt+0x30>)
 8006b0e:	2200      	movs	r2, #0
 8006b10:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006b12:	4b0a      	ldr	r3, [pc, #40]	; (8006b3c <vPortSetupTimerInterrupt+0x34>)
 8006b14:	2200      	movs	r2, #0
 8006b16:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006b18:	4b09      	ldr	r3, [pc, #36]	; (8006b40 <vPortSetupTimerInterrupt+0x38>)
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	4a09      	ldr	r2, [pc, #36]	; (8006b44 <vPortSetupTimerInterrupt+0x3c>)
 8006b1e:	fba2 2303 	umull	r2, r3, r2, r3
 8006b22:	099b      	lsrs	r3, r3, #6
 8006b24:	4a08      	ldr	r2, [pc, #32]	; (8006b48 <vPortSetupTimerInterrupt+0x40>)
 8006b26:	3b01      	subs	r3, #1
 8006b28:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006b2a:	4b03      	ldr	r3, [pc, #12]	; (8006b38 <vPortSetupTimerInterrupt+0x30>)
 8006b2c:	2207      	movs	r2, #7
 8006b2e:	601a      	str	r2, [r3, #0]
}
 8006b30:	bf00      	nop
 8006b32:	46bd      	mov	sp, r7
 8006b34:	bc80      	pop	{r7}
 8006b36:	4770      	bx	lr
 8006b38:	e000e010 	.word	0xe000e010
 8006b3c:	e000e018 	.word	0xe000e018
 8006b40:	20000000 	.word	0x20000000
 8006b44:	10624dd3 	.word	0x10624dd3
 8006b48:	e000e014 	.word	0xe000e014

08006b4c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006b4c:	b480      	push	{r7}
 8006b4e:	b085      	sub	sp, #20
 8006b50:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8006b52:	f3ef 8305 	mrs	r3, IPSR
 8006b56:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	2b0f      	cmp	r3, #15
 8006b5c:	d913      	bls.n	8006b86 <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8006b5e:	4a15      	ldr	r2, [pc, #84]	; (8006bb4 <vPortValidateInterruptPriority+0x68>)
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	4413      	add	r3, r2
 8006b64:	781b      	ldrb	r3, [r3, #0]
 8006b66:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006b68:	4b13      	ldr	r3, [pc, #76]	; (8006bb8 <vPortValidateInterruptPriority+0x6c>)
 8006b6a:	781b      	ldrb	r3, [r3, #0]
 8006b6c:	7afa      	ldrb	r2, [r7, #11]
 8006b6e:	429a      	cmp	r2, r3
 8006b70:	d209      	bcs.n	8006b86 <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 8006b72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b76:	f383 8811 	msr	BASEPRI, r3
 8006b7a:	f3bf 8f6f 	isb	sy
 8006b7e:	f3bf 8f4f 	dsb	sy
 8006b82:	607b      	str	r3, [r7, #4]
 8006b84:	e7fe      	b.n	8006b84 <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006b86:	4b0d      	ldr	r3, [pc, #52]	; (8006bbc <vPortValidateInterruptPriority+0x70>)
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006b8e:	4b0c      	ldr	r3, [pc, #48]	; (8006bc0 <vPortValidateInterruptPriority+0x74>)
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	429a      	cmp	r2, r3
 8006b94:	d909      	bls.n	8006baa <vPortValidateInterruptPriority+0x5e>
 8006b96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b9a:	f383 8811 	msr	BASEPRI, r3
 8006b9e:	f3bf 8f6f 	isb	sy
 8006ba2:	f3bf 8f4f 	dsb	sy
 8006ba6:	603b      	str	r3, [r7, #0]
 8006ba8:	e7fe      	b.n	8006ba8 <vPortValidateInterruptPriority+0x5c>
	}
 8006baa:	bf00      	nop
 8006bac:	3714      	adds	r7, #20
 8006bae:	46bd      	mov	sp, r7
 8006bb0:	bc80      	pop	{r7}
 8006bb2:	4770      	bx	lr
 8006bb4:	e000e3f0 	.word	0xe000e3f0
 8006bb8:	20000778 	.word	0x20000778
 8006bbc:	e000ed0c 	.word	0xe000ed0c
 8006bc0:	2000077c 	.word	0x2000077c

08006bc4 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006bc4:	b580      	push	{r7, lr}
 8006bc6:	b08a      	sub	sp, #40	; 0x28
 8006bc8:	af00      	add	r7, sp, #0
 8006bca:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006bcc:	2300      	movs	r3, #0
 8006bce:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006bd0:	f7fe fc94 	bl	80054fc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006bd4:	4b59      	ldr	r3, [pc, #356]	; (8006d3c <pvPortMalloc+0x178>)
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d101      	bne.n	8006be0 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006bdc:	f000 f910 	bl	8006e00 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006be0:	4b57      	ldr	r3, [pc, #348]	; (8006d40 <pvPortMalloc+0x17c>)
 8006be2:	681a      	ldr	r2, [r3, #0]
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	4013      	ands	r3, r2
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	f040 808c 	bne.w	8006d06 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d01c      	beq.n	8006c2e <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8006bf4:	2208      	movs	r2, #8
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	4413      	add	r3, r2
 8006bfa:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	f003 0307 	and.w	r3, r3, #7
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d013      	beq.n	8006c2e <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	f023 0307 	bic.w	r3, r3, #7
 8006c0c:	3308      	adds	r3, #8
 8006c0e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	f003 0307 	and.w	r3, r3, #7
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d009      	beq.n	8006c2e <pvPortMalloc+0x6a>
 8006c1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c1e:	f383 8811 	msr	BASEPRI, r3
 8006c22:	f3bf 8f6f 	isb	sy
 8006c26:	f3bf 8f4f 	dsb	sy
 8006c2a:	617b      	str	r3, [r7, #20]
 8006c2c:	e7fe      	b.n	8006c2c <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d068      	beq.n	8006d06 <pvPortMalloc+0x142>
 8006c34:	4b43      	ldr	r3, [pc, #268]	; (8006d44 <pvPortMalloc+0x180>)
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	687a      	ldr	r2, [r7, #4]
 8006c3a:	429a      	cmp	r2, r3
 8006c3c:	d863      	bhi.n	8006d06 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006c3e:	4b42      	ldr	r3, [pc, #264]	; (8006d48 <pvPortMalloc+0x184>)
 8006c40:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006c42:	4b41      	ldr	r3, [pc, #260]	; (8006d48 <pvPortMalloc+0x184>)
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006c48:	e004      	b.n	8006c54 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8006c4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c4c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006c4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006c54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c56:	685b      	ldr	r3, [r3, #4]
 8006c58:	687a      	ldr	r2, [r7, #4]
 8006c5a:	429a      	cmp	r2, r3
 8006c5c:	d903      	bls.n	8006c66 <pvPortMalloc+0xa2>
 8006c5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d1f1      	bne.n	8006c4a <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006c66:	4b35      	ldr	r3, [pc, #212]	; (8006d3c <pvPortMalloc+0x178>)
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006c6c:	429a      	cmp	r2, r3
 8006c6e:	d04a      	beq.n	8006d06 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006c70:	6a3b      	ldr	r3, [r7, #32]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	2208      	movs	r2, #8
 8006c76:	4413      	add	r3, r2
 8006c78:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006c7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c7c:	681a      	ldr	r2, [r3, #0]
 8006c7e:	6a3b      	ldr	r3, [r7, #32]
 8006c80:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006c82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c84:	685a      	ldr	r2, [r3, #4]
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	1ad2      	subs	r2, r2, r3
 8006c8a:	2308      	movs	r3, #8
 8006c8c:	005b      	lsls	r3, r3, #1
 8006c8e:	429a      	cmp	r2, r3
 8006c90:	d91e      	bls.n	8006cd0 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006c92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	4413      	add	r3, r2
 8006c98:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006c9a:	69bb      	ldr	r3, [r7, #24]
 8006c9c:	f003 0307 	and.w	r3, r3, #7
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d009      	beq.n	8006cb8 <pvPortMalloc+0xf4>
 8006ca4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ca8:	f383 8811 	msr	BASEPRI, r3
 8006cac:	f3bf 8f6f 	isb	sy
 8006cb0:	f3bf 8f4f 	dsb	sy
 8006cb4:	613b      	str	r3, [r7, #16]
 8006cb6:	e7fe      	b.n	8006cb6 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006cb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cba:	685a      	ldr	r2, [r3, #4]
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	1ad2      	subs	r2, r2, r3
 8006cc0:	69bb      	ldr	r3, [r7, #24]
 8006cc2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006cc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cc6:	687a      	ldr	r2, [r7, #4]
 8006cc8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006cca:	69b8      	ldr	r0, [r7, #24]
 8006ccc:	f000 f8fa 	bl	8006ec4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006cd0:	4b1c      	ldr	r3, [pc, #112]	; (8006d44 <pvPortMalloc+0x180>)
 8006cd2:	681a      	ldr	r2, [r3, #0]
 8006cd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cd6:	685b      	ldr	r3, [r3, #4]
 8006cd8:	1ad3      	subs	r3, r2, r3
 8006cda:	4a1a      	ldr	r2, [pc, #104]	; (8006d44 <pvPortMalloc+0x180>)
 8006cdc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006cde:	4b19      	ldr	r3, [pc, #100]	; (8006d44 <pvPortMalloc+0x180>)
 8006ce0:	681a      	ldr	r2, [r3, #0]
 8006ce2:	4b1a      	ldr	r3, [pc, #104]	; (8006d4c <pvPortMalloc+0x188>)
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	429a      	cmp	r2, r3
 8006ce8:	d203      	bcs.n	8006cf2 <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006cea:	4b16      	ldr	r3, [pc, #88]	; (8006d44 <pvPortMalloc+0x180>)
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	4a17      	ldr	r2, [pc, #92]	; (8006d4c <pvPortMalloc+0x188>)
 8006cf0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006cf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cf4:	685a      	ldr	r2, [r3, #4]
 8006cf6:	4b12      	ldr	r3, [pc, #72]	; (8006d40 <pvPortMalloc+0x17c>)
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	431a      	orrs	r2, r3
 8006cfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cfe:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006d00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d02:	2200      	movs	r2, #0
 8006d04:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006d06:	f7fe fc07 	bl	8005518 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 8006d0a:	69fb      	ldr	r3, [r7, #28]
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d101      	bne.n	8006d14 <pvPortMalloc+0x150>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 8006d10:	f7f9 fa30 	bl	8000174 <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006d14:	69fb      	ldr	r3, [r7, #28]
 8006d16:	f003 0307 	and.w	r3, r3, #7
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d009      	beq.n	8006d32 <pvPortMalloc+0x16e>
 8006d1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d22:	f383 8811 	msr	BASEPRI, r3
 8006d26:	f3bf 8f6f 	isb	sy
 8006d2a:	f3bf 8f4f 	dsb	sy
 8006d2e:	60fb      	str	r3, [r7, #12]
 8006d30:	e7fe      	b.n	8006d30 <pvPortMalloc+0x16c>
	return pvReturn;
 8006d32:	69fb      	ldr	r3, [r7, #28]
}
 8006d34:	4618      	mov	r0, r3
 8006d36:	3728      	adds	r7, #40	; 0x28
 8006d38:	46bd      	mov	sp, r7
 8006d3a:	bd80      	pop	{r7, pc}
 8006d3c:	20001388 	.word	0x20001388
 8006d40:	20001394 	.word	0x20001394
 8006d44:	2000138c 	.word	0x2000138c
 8006d48:	20001380 	.word	0x20001380
 8006d4c:	20001390 	.word	0x20001390

08006d50 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006d50:	b580      	push	{r7, lr}
 8006d52:	b086      	sub	sp, #24
 8006d54:	af00      	add	r7, sp, #0
 8006d56:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d046      	beq.n	8006df0 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006d62:	2308      	movs	r3, #8
 8006d64:	425b      	negs	r3, r3
 8006d66:	697a      	ldr	r2, [r7, #20]
 8006d68:	4413      	add	r3, r2
 8006d6a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006d6c:	697b      	ldr	r3, [r7, #20]
 8006d6e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006d70:	693b      	ldr	r3, [r7, #16]
 8006d72:	685a      	ldr	r2, [r3, #4]
 8006d74:	4b20      	ldr	r3, [pc, #128]	; (8006df8 <vPortFree+0xa8>)
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	4013      	ands	r3, r2
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d109      	bne.n	8006d92 <vPortFree+0x42>
 8006d7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d82:	f383 8811 	msr	BASEPRI, r3
 8006d86:	f3bf 8f6f 	isb	sy
 8006d8a:	f3bf 8f4f 	dsb	sy
 8006d8e:	60fb      	str	r3, [r7, #12]
 8006d90:	e7fe      	b.n	8006d90 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006d92:	693b      	ldr	r3, [r7, #16]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d009      	beq.n	8006dae <vPortFree+0x5e>
 8006d9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d9e:	f383 8811 	msr	BASEPRI, r3
 8006da2:	f3bf 8f6f 	isb	sy
 8006da6:	f3bf 8f4f 	dsb	sy
 8006daa:	60bb      	str	r3, [r7, #8]
 8006dac:	e7fe      	b.n	8006dac <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006dae:	693b      	ldr	r3, [r7, #16]
 8006db0:	685a      	ldr	r2, [r3, #4]
 8006db2:	4b11      	ldr	r3, [pc, #68]	; (8006df8 <vPortFree+0xa8>)
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	4013      	ands	r3, r2
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d019      	beq.n	8006df0 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006dbc:	693b      	ldr	r3, [r7, #16]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d115      	bne.n	8006df0 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006dc4:	693b      	ldr	r3, [r7, #16]
 8006dc6:	685a      	ldr	r2, [r3, #4]
 8006dc8:	4b0b      	ldr	r3, [pc, #44]	; (8006df8 <vPortFree+0xa8>)
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	43db      	mvns	r3, r3
 8006dce:	401a      	ands	r2, r3
 8006dd0:	693b      	ldr	r3, [r7, #16]
 8006dd2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006dd4:	f7fe fb92 	bl	80054fc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006dd8:	693b      	ldr	r3, [r7, #16]
 8006dda:	685a      	ldr	r2, [r3, #4]
 8006ddc:	4b07      	ldr	r3, [pc, #28]	; (8006dfc <vPortFree+0xac>)
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	4413      	add	r3, r2
 8006de2:	4a06      	ldr	r2, [pc, #24]	; (8006dfc <vPortFree+0xac>)
 8006de4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006de6:	6938      	ldr	r0, [r7, #16]
 8006de8:	f000 f86c 	bl	8006ec4 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8006dec:	f7fe fb94 	bl	8005518 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006df0:	bf00      	nop
 8006df2:	3718      	adds	r7, #24
 8006df4:	46bd      	mov	sp, r7
 8006df6:	bd80      	pop	{r7, pc}
 8006df8:	20001394 	.word	0x20001394
 8006dfc:	2000138c 	.word	0x2000138c

08006e00 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006e00:	b480      	push	{r7}
 8006e02:	b085      	sub	sp, #20
 8006e04:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006e06:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8006e0a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006e0c:	4b27      	ldr	r3, [pc, #156]	; (8006eac <prvHeapInit+0xac>)
 8006e0e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	f003 0307 	and.w	r3, r3, #7
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d00c      	beq.n	8006e34 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	3307      	adds	r3, #7
 8006e1e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	f023 0307 	bic.w	r3, r3, #7
 8006e26:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006e28:	68ba      	ldr	r2, [r7, #8]
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	1ad3      	subs	r3, r2, r3
 8006e2e:	4a1f      	ldr	r2, [pc, #124]	; (8006eac <prvHeapInit+0xac>)
 8006e30:	4413      	add	r3, r2
 8006e32:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006e38:	4a1d      	ldr	r2, [pc, #116]	; (8006eb0 <prvHeapInit+0xb0>)
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006e3e:	4b1c      	ldr	r3, [pc, #112]	; (8006eb0 <prvHeapInit+0xb0>)
 8006e40:	2200      	movs	r2, #0
 8006e42:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	68ba      	ldr	r2, [r7, #8]
 8006e48:	4413      	add	r3, r2
 8006e4a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006e4c:	2208      	movs	r2, #8
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	1a9b      	subs	r3, r3, r2
 8006e52:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	f023 0307 	bic.w	r3, r3, #7
 8006e5a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	4a15      	ldr	r2, [pc, #84]	; (8006eb4 <prvHeapInit+0xb4>)
 8006e60:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006e62:	4b14      	ldr	r3, [pc, #80]	; (8006eb4 <prvHeapInit+0xb4>)
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	2200      	movs	r2, #0
 8006e68:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006e6a:	4b12      	ldr	r3, [pc, #72]	; (8006eb4 <prvHeapInit+0xb4>)
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	2200      	movs	r2, #0
 8006e70:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006e76:	683b      	ldr	r3, [r7, #0]
 8006e78:	68fa      	ldr	r2, [r7, #12]
 8006e7a:	1ad2      	subs	r2, r2, r3
 8006e7c:	683b      	ldr	r3, [r7, #0]
 8006e7e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006e80:	4b0c      	ldr	r3, [pc, #48]	; (8006eb4 <prvHeapInit+0xb4>)
 8006e82:	681a      	ldr	r2, [r3, #0]
 8006e84:	683b      	ldr	r3, [r7, #0]
 8006e86:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006e88:	683b      	ldr	r3, [r7, #0]
 8006e8a:	685b      	ldr	r3, [r3, #4]
 8006e8c:	4a0a      	ldr	r2, [pc, #40]	; (8006eb8 <prvHeapInit+0xb8>)
 8006e8e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006e90:	683b      	ldr	r3, [r7, #0]
 8006e92:	685b      	ldr	r3, [r3, #4]
 8006e94:	4a09      	ldr	r2, [pc, #36]	; (8006ebc <prvHeapInit+0xbc>)
 8006e96:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006e98:	4b09      	ldr	r3, [pc, #36]	; (8006ec0 <prvHeapInit+0xc0>)
 8006e9a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006e9e:	601a      	str	r2, [r3, #0]
}
 8006ea0:	bf00      	nop
 8006ea2:	3714      	adds	r7, #20
 8006ea4:	46bd      	mov	sp, r7
 8006ea6:	bc80      	pop	{r7}
 8006ea8:	4770      	bx	lr
 8006eaa:	bf00      	nop
 8006eac:	20000780 	.word	0x20000780
 8006eb0:	20001380 	.word	0x20001380
 8006eb4:	20001388 	.word	0x20001388
 8006eb8:	20001390 	.word	0x20001390
 8006ebc:	2000138c 	.word	0x2000138c
 8006ec0:	20001394 	.word	0x20001394

08006ec4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006ec4:	b480      	push	{r7}
 8006ec6:	b085      	sub	sp, #20
 8006ec8:	af00      	add	r7, sp, #0
 8006eca:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006ecc:	4b27      	ldr	r3, [pc, #156]	; (8006f6c <prvInsertBlockIntoFreeList+0xa8>)
 8006ece:	60fb      	str	r3, [r7, #12]
 8006ed0:	e002      	b.n	8006ed8 <prvInsertBlockIntoFreeList+0x14>
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	60fb      	str	r3, [r7, #12]
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	687a      	ldr	r2, [r7, #4]
 8006ede:	429a      	cmp	r2, r3
 8006ee0:	d8f7      	bhi.n	8006ed2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	685b      	ldr	r3, [r3, #4]
 8006eea:	68ba      	ldr	r2, [r7, #8]
 8006eec:	4413      	add	r3, r2
 8006eee:	687a      	ldr	r2, [r7, #4]
 8006ef0:	429a      	cmp	r2, r3
 8006ef2:	d108      	bne.n	8006f06 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	685a      	ldr	r2, [r3, #4]
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	685b      	ldr	r3, [r3, #4]
 8006efc:	441a      	add	r2, r3
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	685b      	ldr	r3, [r3, #4]
 8006f0e:	68ba      	ldr	r2, [r7, #8]
 8006f10:	441a      	add	r2, r3
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	429a      	cmp	r2, r3
 8006f18:	d118      	bne.n	8006f4c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	681a      	ldr	r2, [r3, #0]
 8006f1e:	4b14      	ldr	r3, [pc, #80]	; (8006f70 <prvInsertBlockIntoFreeList+0xac>)
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	429a      	cmp	r2, r3
 8006f24:	d00d      	beq.n	8006f42 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	685a      	ldr	r2, [r3, #4]
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	685b      	ldr	r3, [r3, #4]
 8006f30:	441a      	add	r2, r3
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	681a      	ldr	r2, [r3, #0]
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	601a      	str	r2, [r3, #0]
 8006f40:	e008      	b.n	8006f54 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006f42:	4b0b      	ldr	r3, [pc, #44]	; (8006f70 <prvInsertBlockIntoFreeList+0xac>)
 8006f44:	681a      	ldr	r2, [r3, #0]
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	601a      	str	r2, [r3, #0]
 8006f4a:	e003      	b.n	8006f54 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	681a      	ldr	r2, [r3, #0]
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006f54:	68fa      	ldr	r2, [r7, #12]
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	429a      	cmp	r2, r3
 8006f5a:	d002      	beq.n	8006f62 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	687a      	ldr	r2, [r7, #4]
 8006f60:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006f62:	bf00      	nop
 8006f64:	3714      	adds	r7, #20
 8006f66:	46bd      	mov	sp, r7
 8006f68:	bc80      	pop	{r7}
 8006f6a:	4770      	bx	lr
 8006f6c:	20001380 	.word	0x20001380
 8006f70:	20001388 	.word	0x20001388

08006f74 <__errno>:
 8006f74:	4b01      	ldr	r3, [pc, #4]	; (8006f7c <__errno+0x8>)
 8006f76:	6818      	ldr	r0, [r3, #0]
 8006f78:	4770      	bx	lr
 8006f7a:	bf00      	nop
 8006f7c:	20000010 	.word	0x20000010

08006f80 <__libc_init_array>:
 8006f80:	b570      	push	{r4, r5, r6, lr}
 8006f82:	2500      	movs	r5, #0
 8006f84:	4e0c      	ldr	r6, [pc, #48]	; (8006fb8 <__libc_init_array+0x38>)
 8006f86:	4c0d      	ldr	r4, [pc, #52]	; (8006fbc <__libc_init_array+0x3c>)
 8006f88:	1ba4      	subs	r4, r4, r6
 8006f8a:	10a4      	asrs	r4, r4, #2
 8006f8c:	42a5      	cmp	r5, r4
 8006f8e:	d109      	bne.n	8006fa4 <__libc_init_array+0x24>
 8006f90:	f000 fc6a 	bl	8007868 <_init>
 8006f94:	2500      	movs	r5, #0
 8006f96:	4e0a      	ldr	r6, [pc, #40]	; (8006fc0 <__libc_init_array+0x40>)
 8006f98:	4c0a      	ldr	r4, [pc, #40]	; (8006fc4 <__libc_init_array+0x44>)
 8006f9a:	1ba4      	subs	r4, r4, r6
 8006f9c:	10a4      	asrs	r4, r4, #2
 8006f9e:	42a5      	cmp	r5, r4
 8006fa0:	d105      	bne.n	8006fae <__libc_init_array+0x2e>
 8006fa2:	bd70      	pop	{r4, r5, r6, pc}
 8006fa4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006fa8:	4798      	blx	r3
 8006faa:	3501      	adds	r5, #1
 8006fac:	e7ee      	b.n	8006f8c <__libc_init_array+0xc>
 8006fae:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006fb2:	4798      	blx	r3
 8006fb4:	3501      	adds	r5, #1
 8006fb6:	e7f2      	b.n	8006f9e <__libc_init_array+0x1e>
 8006fb8:	08007aac 	.word	0x08007aac
 8006fbc:	08007aac 	.word	0x08007aac
 8006fc0:	08007aac 	.word	0x08007aac
 8006fc4:	08007ab0 	.word	0x08007ab0

08006fc8 <memcpy>:
 8006fc8:	b510      	push	{r4, lr}
 8006fca:	1e43      	subs	r3, r0, #1
 8006fcc:	440a      	add	r2, r1
 8006fce:	4291      	cmp	r1, r2
 8006fd0:	d100      	bne.n	8006fd4 <memcpy+0xc>
 8006fd2:	bd10      	pop	{r4, pc}
 8006fd4:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006fd8:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006fdc:	e7f7      	b.n	8006fce <memcpy+0x6>

08006fde <memset>:
 8006fde:	4603      	mov	r3, r0
 8006fe0:	4402      	add	r2, r0
 8006fe2:	4293      	cmp	r3, r2
 8006fe4:	d100      	bne.n	8006fe8 <memset+0xa>
 8006fe6:	4770      	bx	lr
 8006fe8:	f803 1b01 	strb.w	r1, [r3], #1
 8006fec:	e7f9      	b.n	8006fe2 <memset+0x4>
	...

08006ff0 <sniprintf>:
 8006ff0:	b40c      	push	{r2, r3}
 8006ff2:	b530      	push	{r4, r5, lr}
 8006ff4:	4b17      	ldr	r3, [pc, #92]	; (8007054 <sniprintf+0x64>)
 8006ff6:	1e0c      	subs	r4, r1, #0
 8006ff8:	b09d      	sub	sp, #116	; 0x74
 8006ffa:	681d      	ldr	r5, [r3, #0]
 8006ffc:	da08      	bge.n	8007010 <sniprintf+0x20>
 8006ffe:	238b      	movs	r3, #139	; 0x8b
 8007000:	f04f 30ff 	mov.w	r0, #4294967295
 8007004:	602b      	str	r3, [r5, #0]
 8007006:	b01d      	add	sp, #116	; 0x74
 8007008:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800700c:	b002      	add	sp, #8
 800700e:	4770      	bx	lr
 8007010:	f44f 7302 	mov.w	r3, #520	; 0x208
 8007014:	f8ad 3014 	strh.w	r3, [sp, #20]
 8007018:	bf0c      	ite	eq
 800701a:	4623      	moveq	r3, r4
 800701c:	f104 33ff 	addne.w	r3, r4, #4294967295
 8007020:	9304      	str	r3, [sp, #16]
 8007022:	9307      	str	r3, [sp, #28]
 8007024:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007028:	9002      	str	r0, [sp, #8]
 800702a:	9006      	str	r0, [sp, #24]
 800702c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8007030:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8007032:	ab21      	add	r3, sp, #132	; 0x84
 8007034:	a902      	add	r1, sp, #8
 8007036:	4628      	mov	r0, r5
 8007038:	9301      	str	r3, [sp, #4]
 800703a:	f000 f887 	bl	800714c <_svfiprintf_r>
 800703e:	1c43      	adds	r3, r0, #1
 8007040:	bfbc      	itt	lt
 8007042:	238b      	movlt	r3, #139	; 0x8b
 8007044:	602b      	strlt	r3, [r5, #0]
 8007046:	2c00      	cmp	r4, #0
 8007048:	d0dd      	beq.n	8007006 <sniprintf+0x16>
 800704a:	2200      	movs	r2, #0
 800704c:	9b02      	ldr	r3, [sp, #8]
 800704e:	701a      	strb	r2, [r3, #0]
 8007050:	e7d9      	b.n	8007006 <sniprintf+0x16>
 8007052:	bf00      	nop
 8007054:	20000010 	.word	0x20000010

08007058 <siprintf>:
 8007058:	b40e      	push	{r1, r2, r3}
 800705a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800705e:	b500      	push	{lr}
 8007060:	b09c      	sub	sp, #112	; 0x70
 8007062:	ab1d      	add	r3, sp, #116	; 0x74
 8007064:	9002      	str	r0, [sp, #8]
 8007066:	9006      	str	r0, [sp, #24]
 8007068:	9107      	str	r1, [sp, #28]
 800706a:	9104      	str	r1, [sp, #16]
 800706c:	4808      	ldr	r0, [pc, #32]	; (8007090 <siprintf+0x38>)
 800706e:	4909      	ldr	r1, [pc, #36]	; (8007094 <siprintf+0x3c>)
 8007070:	f853 2b04 	ldr.w	r2, [r3], #4
 8007074:	9105      	str	r1, [sp, #20]
 8007076:	6800      	ldr	r0, [r0, #0]
 8007078:	a902      	add	r1, sp, #8
 800707a:	9301      	str	r3, [sp, #4]
 800707c:	f000 f866 	bl	800714c <_svfiprintf_r>
 8007080:	2200      	movs	r2, #0
 8007082:	9b02      	ldr	r3, [sp, #8]
 8007084:	701a      	strb	r2, [r3, #0]
 8007086:	b01c      	add	sp, #112	; 0x70
 8007088:	f85d eb04 	ldr.w	lr, [sp], #4
 800708c:	b003      	add	sp, #12
 800708e:	4770      	bx	lr
 8007090:	20000010 	.word	0x20000010
 8007094:	ffff0208 	.word	0xffff0208

08007098 <__ssputs_r>:
 8007098:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800709c:	688e      	ldr	r6, [r1, #8]
 800709e:	4682      	mov	sl, r0
 80070a0:	429e      	cmp	r6, r3
 80070a2:	460c      	mov	r4, r1
 80070a4:	4690      	mov	r8, r2
 80070a6:	4699      	mov	r9, r3
 80070a8:	d837      	bhi.n	800711a <__ssputs_r+0x82>
 80070aa:	898a      	ldrh	r2, [r1, #12]
 80070ac:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80070b0:	d031      	beq.n	8007116 <__ssputs_r+0x7e>
 80070b2:	2302      	movs	r3, #2
 80070b4:	6825      	ldr	r5, [r4, #0]
 80070b6:	6909      	ldr	r1, [r1, #16]
 80070b8:	1a6f      	subs	r7, r5, r1
 80070ba:	6965      	ldr	r5, [r4, #20]
 80070bc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80070c0:	fb95 f5f3 	sdiv	r5, r5, r3
 80070c4:	f109 0301 	add.w	r3, r9, #1
 80070c8:	443b      	add	r3, r7
 80070ca:	429d      	cmp	r5, r3
 80070cc:	bf38      	it	cc
 80070ce:	461d      	movcc	r5, r3
 80070d0:	0553      	lsls	r3, r2, #21
 80070d2:	d530      	bpl.n	8007136 <__ssputs_r+0x9e>
 80070d4:	4629      	mov	r1, r5
 80070d6:	f000 fb2d 	bl	8007734 <_malloc_r>
 80070da:	4606      	mov	r6, r0
 80070dc:	b950      	cbnz	r0, 80070f4 <__ssputs_r+0x5c>
 80070de:	230c      	movs	r3, #12
 80070e0:	f04f 30ff 	mov.w	r0, #4294967295
 80070e4:	f8ca 3000 	str.w	r3, [sl]
 80070e8:	89a3      	ldrh	r3, [r4, #12]
 80070ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80070ee:	81a3      	strh	r3, [r4, #12]
 80070f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80070f4:	463a      	mov	r2, r7
 80070f6:	6921      	ldr	r1, [r4, #16]
 80070f8:	f7ff ff66 	bl	8006fc8 <memcpy>
 80070fc:	89a3      	ldrh	r3, [r4, #12]
 80070fe:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007102:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007106:	81a3      	strh	r3, [r4, #12]
 8007108:	6126      	str	r6, [r4, #16]
 800710a:	443e      	add	r6, r7
 800710c:	6026      	str	r6, [r4, #0]
 800710e:	464e      	mov	r6, r9
 8007110:	6165      	str	r5, [r4, #20]
 8007112:	1bed      	subs	r5, r5, r7
 8007114:	60a5      	str	r5, [r4, #8]
 8007116:	454e      	cmp	r6, r9
 8007118:	d900      	bls.n	800711c <__ssputs_r+0x84>
 800711a:	464e      	mov	r6, r9
 800711c:	4632      	mov	r2, r6
 800711e:	4641      	mov	r1, r8
 8007120:	6820      	ldr	r0, [r4, #0]
 8007122:	f000 faa1 	bl	8007668 <memmove>
 8007126:	68a3      	ldr	r3, [r4, #8]
 8007128:	2000      	movs	r0, #0
 800712a:	1b9b      	subs	r3, r3, r6
 800712c:	60a3      	str	r3, [r4, #8]
 800712e:	6823      	ldr	r3, [r4, #0]
 8007130:	441e      	add	r6, r3
 8007132:	6026      	str	r6, [r4, #0]
 8007134:	e7dc      	b.n	80070f0 <__ssputs_r+0x58>
 8007136:	462a      	mov	r2, r5
 8007138:	f000 fb56 	bl	80077e8 <_realloc_r>
 800713c:	4606      	mov	r6, r0
 800713e:	2800      	cmp	r0, #0
 8007140:	d1e2      	bne.n	8007108 <__ssputs_r+0x70>
 8007142:	6921      	ldr	r1, [r4, #16]
 8007144:	4650      	mov	r0, sl
 8007146:	f000 faa9 	bl	800769c <_free_r>
 800714a:	e7c8      	b.n	80070de <__ssputs_r+0x46>

0800714c <_svfiprintf_r>:
 800714c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007150:	461d      	mov	r5, r3
 8007152:	898b      	ldrh	r3, [r1, #12]
 8007154:	b09d      	sub	sp, #116	; 0x74
 8007156:	061f      	lsls	r7, r3, #24
 8007158:	4680      	mov	r8, r0
 800715a:	460c      	mov	r4, r1
 800715c:	4616      	mov	r6, r2
 800715e:	d50f      	bpl.n	8007180 <_svfiprintf_r+0x34>
 8007160:	690b      	ldr	r3, [r1, #16]
 8007162:	b96b      	cbnz	r3, 8007180 <_svfiprintf_r+0x34>
 8007164:	2140      	movs	r1, #64	; 0x40
 8007166:	f000 fae5 	bl	8007734 <_malloc_r>
 800716a:	6020      	str	r0, [r4, #0]
 800716c:	6120      	str	r0, [r4, #16]
 800716e:	b928      	cbnz	r0, 800717c <_svfiprintf_r+0x30>
 8007170:	230c      	movs	r3, #12
 8007172:	f8c8 3000 	str.w	r3, [r8]
 8007176:	f04f 30ff 	mov.w	r0, #4294967295
 800717a:	e0c8      	b.n	800730e <_svfiprintf_r+0x1c2>
 800717c:	2340      	movs	r3, #64	; 0x40
 800717e:	6163      	str	r3, [r4, #20]
 8007180:	2300      	movs	r3, #0
 8007182:	9309      	str	r3, [sp, #36]	; 0x24
 8007184:	2320      	movs	r3, #32
 8007186:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800718a:	2330      	movs	r3, #48	; 0x30
 800718c:	f04f 0b01 	mov.w	fp, #1
 8007190:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007194:	9503      	str	r5, [sp, #12]
 8007196:	4637      	mov	r7, r6
 8007198:	463d      	mov	r5, r7
 800719a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800719e:	b10b      	cbz	r3, 80071a4 <_svfiprintf_r+0x58>
 80071a0:	2b25      	cmp	r3, #37	; 0x25
 80071a2:	d13e      	bne.n	8007222 <_svfiprintf_r+0xd6>
 80071a4:	ebb7 0a06 	subs.w	sl, r7, r6
 80071a8:	d00b      	beq.n	80071c2 <_svfiprintf_r+0x76>
 80071aa:	4653      	mov	r3, sl
 80071ac:	4632      	mov	r2, r6
 80071ae:	4621      	mov	r1, r4
 80071b0:	4640      	mov	r0, r8
 80071b2:	f7ff ff71 	bl	8007098 <__ssputs_r>
 80071b6:	3001      	adds	r0, #1
 80071b8:	f000 80a4 	beq.w	8007304 <_svfiprintf_r+0x1b8>
 80071bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80071be:	4453      	add	r3, sl
 80071c0:	9309      	str	r3, [sp, #36]	; 0x24
 80071c2:	783b      	ldrb	r3, [r7, #0]
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	f000 809d 	beq.w	8007304 <_svfiprintf_r+0x1b8>
 80071ca:	2300      	movs	r3, #0
 80071cc:	f04f 32ff 	mov.w	r2, #4294967295
 80071d0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80071d4:	9304      	str	r3, [sp, #16]
 80071d6:	9307      	str	r3, [sp, #28]
 80071d8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80071dc:	931a      	str	r3, [sp, #104]	; 0x68
 80071de:	462f      	mov	r7, r5
 80071e0:	2205      	movs	r2, #5
 80071e2:	f817 1b01 	ldrb.w	r1, [r7], #1
 80071e6:	4850      	ldr	r0, [pc, #320]	; (8007328 <_svfiprintf_r+0x1dc>)
 80071e8:	f000 fa30 	bl	800764c <memchr>
 80071ec:	9b04      	ldr	r3, [sp, #16]
 80071ee:	b9d0      	cbnz	r0, 8007226 <_svfiprintf_r+0xda>
 80071f0:	06d9      	lsls	r1, r3, #27
 80071f2:	bf44      	itt	mi
 80071f4:	2220      	movmi	r2, #32
 80071f6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80071fa:	071a      	lsls	r2, r3, #28
 80071fc:	bf44      	itt	mi
 80071fe:	222b      	movmi	r2, #43	; 0x2b
 8007200:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007204:	782a      	ldrb	r2, [r5, #0]
 8007206:	2a2a      	cmp	r2, #42	; 0x2a
 8007208:	d015      	beq.n	8007236 <_svfiprintf_r+0xea>
 800720a:	462f      	mov	r7, r5
 800720c:	2000      	movs	r0, #0
 800720e:	250a      	movs	r5, #10
 8007210:	9a07      	ldr	r2, [sp, #28]
 8007212:	4639      	mov	r1, r7
 8007214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007218:	3b30      	subs	r3, #48	; 0x30
 800721a:	2b09      	cmp	r3, #9
 800721c:	d94d      	bls.n	80072ba <_svfiprintf_r+0x16e>
 800721e:	b1b8      	cbz	r0, 8007250 <_svfiprintf_r+0x104>
 8007220:	e00f      	b.n	8007242 <_svfiprintf_r+0xf6>
 8007222:	462f      	mov	r7, r5
 8007224:	e7b8      	b.n	8007198 <_svfiprintf_r+0x4c>
 8007226:	4a40      	ldr	r2, [pc, #256]	; (8007328 <_svfiprintf_r+0x1dc>)
 8007228:	463d      	mov	r5, r7
 800722a:	1a80      	subs	r0, r0, r2
 800722c:	fa0b f000 	lsl.w	r0, fp, r0
 8007230:	4318      	orrs	r0, r3
 8007232:	9004      	str	r0, [sp, #16]
 8007234:	e7d3      	b.n	80071de <_svfiprintf_r+0x92>
 8007236:	9a03      	ldr	r2, [sp, #12]
 8007238:	1d11      	adds	r1, r2, #4
 800723a:	6812      	ldr	r2, [r2, #0]
 800723c:	9103      	str	r1, [sp, #12]
 800723e:	2a00      	cmp	r2, #0
 8007240:	db01      	blt.n	8007246 <_svfiprintf_r+0xfa>
 8007242:	9207      	str	r2, [sp, #28]
 8007244:	e004      	b.n	8007250 <_svfiprintf_r+0x104>
 8007246:	4252      	negs	r2, r2
 8007248:	f043 0302 	orr.w	r3, r3, #2
 800724c:	9207      	str	r2, [sp, #28]
 800724e:	9304      	str	r3, [sp, #16]
 8007250:	783b      	ldrb	r3, [r7, #0]
 8007252:	2b2e      	cmp	r3, #46	; 0x2e
 8007254:	d10c      	bne.n	8007270 <_svfiprintf_r+0x124>
 8007256:	787b      	ldrb	r3, [r7, #1]
 8007258:	2b2a      	cmp	r3, #42	; 0x2a
 800725a:	d133      	bne.n	80072c4 <_svfiprintf_r+0x178>
 800725c:	9b03      	ldr	r3, [sp, #12]
 800725e:	3702      	adds	r7, #2
 8007260:	1d1a      	adds	r2, r3, #4
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	9203      	str	r2, [sp, #12]
 8007266:	2b00      	cmp	r3, #0
 8007268:	bfb8      	it	lt
 800726a:	f04f 33ff 	movlt.w	r3, #4294967295
 800726e:	9305      	str	r3, [sp, #20]
 8007270:	4d2e      	ldr	r5, [pc, #184]	; (800732c <_svfiprintf_r+0x1e0>)
 8007272:	2203      	movs	r2, #3
 8007274:	7839      	ldrb	r1, [r7, #0]
 8007276:	4628      	mov	r0, r5
 8007278:	f000 f9e8 	bl	800764c <memchr>
 800727c:	b138      	cbz	r0, 800728e <_svfiprintf_r+0x142>
 800727e:	2340      	movs	r3, #64	; 0x40
 8007280:	1b40      	subs	r0, r0, r5
 8007282:	fa03 f000 	lsl.w	r0, r3, r0
 8007286:	9b04      	ldr	r3, [sp, #16]
 8007288:	3701      	adds	r7, #1
 800728a:	4303      	orrs	r3, r0
 800728c:	9304      	str	r3, [sp, #16]
 800728e:	7839      	ldrb	r1, [r7, #0]
 8007290:	2206      	movs	r2, #6
 8007292:	4827      	ldr	r0, [pc, #156]	; (8007330 <_svfiprintf_r+0x1e4>)
 8007294:	1c7e      	adds	r6, r7, #1
 8007296:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800729a:	f000 f9d7 	bl	800764c <memchr>
 800729e:	2800      	cmp	r0, #0
 80072a0:	d038      	beq.n	8007314 <_svfiprintf_r+0x1c8>
 80072a2:	4b24      	ldr	r3, [pc, #144]	; (8007334 <_svfiprintf_r+0x1e8>)
 80072a4:	bb13      	cbnz	r3, 80072ec <_svfiprintf_r+0x1a0>
 80072a6:	9b03      	ldr	r3, [sp, #12]
 80072a8:	3307      	adds	r3, #7
 80072aa:	f023 0307 	bic.w	r3, r3, #7
 80072ae:	3308      	adds	r3, #8
 80072b0:	9303      	str	r3, [sp, #12]
 80072b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80072b4:	444b      	add	r3, r9
 80072b6:	9309      	str	r3, [sp, #36]	; 0x24
 80072b8:	e76d      	b.n	8007196 <_svfiprintf_r+0x4a>
 80072ba:	fb05 3202 	mla	r2, r5, r2, r3
 80072be:	2001      	movs	r0, #1
 80072c0:	460f      	mov	r7, r1
 80072c2:	e7a6      	b.n	8007212 <_svfiprintf_r+0xc6>
 80072c4:	2300      	movs	r3, #0
 80072c6:	250a      	movs	r5, #10
 80072c8:	4619      	mov	r1, r3
 80072ca:	3701      	adds	r7, #1
 80072cc:	9305      	str	r3, [sp, #20]
 80072ce:	4638      	mov	r0, r7
 80072d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80072d4:	3a30      	subs	r2, #48	; 0x30
 80072d6:	2a09      	cmp	r2, #9
 80072d8:	d903      	bls.n	80072e2 <_svfiprintf_r+0x196>
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d0c8      	beq.n	8007270 <_svfiprintf_r+0x124>
 80072de:	9105      	str	r1, [sp, #20]
 80072e0:	e7c6      	b.n	8007270 <_svfiprintf_r+0x124>
 80072e2:	fb05 2101 	mla	r1, r5, r1, r2
 80072e6:	2301      	movs	r3, #1
 80072e8:	4607      	mov	r7, r0
 80072ea:	e7f0      	b.n	80072ce <_svfiprintf_r+0x182>
 80072ec:	ab03      	add	r3, sp, #12
 80072ee:	9300      	str	r3, [sp, #0]
 80072f0:	4622      	mov	r2, r4
 80072f2:	4b11      	ldr	r3, [pc, #68]	; (8007338 <_svfiprintf_r+0x1ec>)
 80072f4:	a904      	add	r1, sp, #16
 80072f6:	4640      	mov	r0, r8
 80072f8:	f3af 8000 	nop.w
 80072fc:	f1b0 3fff 	cmp.w	r0, #4294967295
 8007300:	4681      	mov	r9, r0
 8007302:	d1d6      	bne.n	80072b2 <_svfiprintf_r+0x166>
 8007304:	89a3      	ldrh	r3, [r4, #12]
 8007306:	065b      	lsls	r3, r3, #25
 8007308:	f53f af35 	bmi.w	8007176 <_svfiprintf_r+0x2a>
 800730c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800730e:	b01d      	add	sp, #116	; 0x74
 8007310:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007314:	ab03      	add	r3, sp, #12
 8007316:	9300      	str	r3, [sp, #0]
 8007318:	4622      	mov	r2, r4
 800731a:	4b07      	ldr	r3, [pc, #28]	; (8007338 <_svfiprintf_r+0x1ec>)
 800731c:	a904      	add	r1, sp, #16
 800731e:	4640      	mov	r0, r8
 8007320:	f000 f882 	bl	8007428 <_printf_i>
 8007324:	e7ea      	b.n	80072fc <_svfiprintf_r+0x1b0>
 8007326:	bf00      	nop
 8007328:	08007a78 	.word	0x08007a78
 800732c:	08007a7e 	.word	0x08007a7e
 8007330:	08007a82 	.word	0x08007a82
 8007334:	00000000 	.word	0x00000000
 8007338:	08007099 	.word	0x08007099

0800733c <_printf_common>:
 800733c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007340:	4691      	mov	r9, r2
 8007342:	461f      	mov	r7, r3
 8007344:	688a      	ldr	r2, [r1, #8]
 8007346:	690b      	ldr	r3, [r1, #16]
 8007348:	4606      	mov	r6, r0
 800734a:	4293      	cmp	r3, r2
 800734c:	bfb8      	it	lt
 800734e:	4613      	movlt	r3, r2
 8007350:	f8c9 3000 	str.w	r3, [r9]
 8007354:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007358:	460c      	mov	r4, r1
 800735a:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800735e:	b112      	cbz	r2, 8007366 <_printf_common+0x2a>
 8007360:	3301      	adds	r3, #1
 8007362:	f8c9 3000 	str.w	r3, [r9]
 8007366:	6823      	ldr	r3, [r4, #0]
 8007368:	0699      	lsls	r1, r3, #26
 800736a:	bf42      	ittt	mi
 800736c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8007370:	3302      	addmi	r3, #2
 8007372:	f8c9 3000 	strmi.w	r3, [r9]
 8007376:	6825      	ldr	r5, [r4, #0]
 8007378:	f015 0506 	ands.w	r5, r5, #6
 800737c:	d107      	bne.n	800738e <_printf_common+0x52>
 800737e:	f104 0a19 	add.w	sl, r4, #25
 8007382:	68e3      	ldr	r3, [r4, #12]
 8007384:	f8d9 2000 	ldr.w	r2, [r9]
 8007388:	1a9b      	subs	r3, r3, r2
 800738a:	42ab      	cmp	r3, r5
 800738c:	dc29      	bgt.n	80073e2 <_printf_common+0xa6>
 800738e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8007392:	6822      	ldr	r2, [r4, #0]
 8007394:	3300      	adds	r3, #0
 8007396:	bf18      	it	ne
 8007398:	2301      	movne	r3, #1
 800739a:	0692      	lsls	r2, r2, #26
 800739c:	d42e      	bmi.n	80073fc <_printf_common+0xc0>
 800739e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80073a2:	4639      	mov	r1, r7
 80073a4:	4630      	mov	r0, r6
 80073a6:	47c0      	blx	r8
 80073a8:	3001      	adds	r0, #1
 80073aa:	d021      	beq.n	80073f0 <_printf_common+0xb4>
 80073ac:	6823      	ldr	r3, [r4, #0]
 80073ae:	68e5      	ldr	r5, [r4, #12]
 80073b0:	f003 0306 	and.w	r3, r3, #6
 80073b4:	2b04      	cmp	r3, #4
 80073b6:	bf18      	it	ne
 80073b8:	2500      	movne	r5, #0
 80073ba:	f8d9 2000 	ldr.w	r2, [r9]
 80073be:	f04f 0900 	mov.w	r9, #0
 80073c2:	bf08      	it	eq
 80073c4:	1aad      	subeq	r5, r5, r2
 80073c6:	68a3      	ldr	r3, [r4, #8]
 80073c8:	6922      	ldr	r2, [r4, #16]
 80073ca:	bf08      	it	eq
 80073cc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80073d0:	4293      	cmp	r3, r2
 80073d2:	bfc4      	itt	gt
 80073d4:	1a9b      	subgt	r3, r3, r2
 80073d6:	18ed      	addgt	r5, r5, r3
 80073d8:	341a      	adds	r4, #26
 80073da:	454d      	cmp	r5, r9
 80073dc:	d11a      	bne.n	8007414 <_printf_common+0xd8>
 80073de:	2000      	movs	r0, #0
 80073e0:	e008      	b.n	80073f4 <_printf_common+0xb8>
 80073e2:	2301      	movs	r3, #1
 80073e4:	4652      	mov	r2, sl
 80073e6:	4639      	mov	r1, r7
 80073e8:	4630      	mov	r0, r6
 80073ea:	47c0      	blx	r8
 80073ec:	3001      	adds	r0, #1
 80073ee:	d103      	bne.n	80073f8 <_printf_common+0xbc>
 80073f0:	f04f 30ff 	mov.w	r0, #4294967295
 80073f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80073f8:	3501      	adds	r5, #1
 80073fa:	e7c2      	b.n	8007382 <_printf_common+0x46>
 80073fc:	2030      	movs	r0, #48	; 0x30
 80073fe:	18e1      	adds	r1, r4, r3
 8007400:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007404:	1c5a      	adds	r2, r3, #1
 8007406:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800740a:	4422      	add	r2, r4
 800740c:	3302      	adds	r3, #2
 800740e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007412:	e7c4      	b.n	800739e <_printf_common+0x62>
 8007414:	2301      	movs	r3, #1
 8007416:	4622      	mov	r2, r4
 8007418:	4639      	mov	r1, r7
 800741a:	4630      	mov	r0, r6
 800741c:	47c0      	blx	r8
 800741e:	3001      	adds	r0, #1
 8007420:	d0e6      	beq.n	80073f0 <_printf_common+0xb4>
 8007422:	f109 0901 	add.w	r9, r9, #1
 8007426:	e7d8      	b.n	80073da <_printf_common+0x9e>

08007428 <_printf_i>:
 8007428:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800742c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8007430:	460c      	mov	r4, r1
 8007432:	7e09      	ldrb	r1, [r1, #24]
 8007434:	b085      	sub	sp, #20
 8007436:	296e      	cmp	r1, #110	; 0x6e
 8007438:	4617      	mov	r7, r2
 800743a:	4606      	mov	r6, r0
 800743c:	4698      	mov	r8, r3
 800743e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007440:	f000 80b3 	beq.w	80075aa <_printf_i+0x182>
 8007444:	d822      	bhi.n	800748c <_printf_i+0x64>
 8007446:	2963      	cmp	r1, #99	; 0x63
 8007448:	d036      	beq.n	80074b8 <_printf_i+0x90>
 800744a:	d80a      	bhi.n	8007462 <_printf_i+0x3a>
 800744c:	2900      	cmp	r1, #0
 800744e:	f000 80b9 	beq.w	80075c4 <_printf_i+0x19c>
 8007452:	2958      	cmp	r1, #88	; 0x58
 8007454:	f000 8083 	beq.w	800755e <_printf_i+0x136>
 8007458:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800745c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8007460:	e032      	b.n	80074c8 <_printf_i+0xa0>
 8007462:	2964      	cmp	r1, #100	; 0x64
 8007464:	d001      	beq.n	800746a <_printf_i+0x42>
 8007466:	2969      	cmp	r1, #105	; 0x69
 8007468:	d1f6      	bne.n	8007458 <_printf_i+0x30>
 800746a:	6820      	ldr	r0, [r4, #0]
 800746c:	6813      	ldr	r3, [r2, #0]
 800746e:	0605      	lsls	r5, r0, #24
 8007470:	f103 0104 	add.w	r1, r3, #4
 8007474:	d52a      	bpl.n	80074cc <_printf_i+0xa4>
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	6011      	str	r1, [r2, #0]
 800747a:	2b00      	cmp	r3, #0
 800747c:	da03      	bge.n	8007486 <_printf_i+0x5e>
 800747e:	222d      	movs	r2, #45	; 0x2d
 8007480:	425b      	negs	r3, r3
 8007482:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8007486:	486f      	ldr	r0, [pc, #444]	; (8007644 <_printf_i+0x21c>)
 8007488:	220a      	movs	r2, #10
 800748a:	e039      	b.n	8007500 <_printf_i+0xd8>
 800748c:	2973      	cmp	r1, #115	; 0x73
 800748e:	f000 809d 	beq.w	80075cc <_printf_i+0x1a4>
 8007492:	d808      	bhi.n	80074a6 <_printf_i+0x7e>
 8007494:	296f      	cmp	r1, #111	; 0x6f
 8007496:	d020      	beq.n	80074da <_printf_i+0xb2>
 8007498:	2970      	cmp	r1, #112	; 0x70
 800749a:	d1dd      	bne.n	8007458 <_printf_i+0x30>
 800749c:	6823      	ldr	r3, [r4, #0]
 800749e:	f043 0320 	orr.w	r3, r3, #32
 80074a2:	6023      	str	r3, [r4, #0]
 80074a4:	e003      	b.n	80074ae <_printf_i+0x86>
 80074a6:	2975      	cmp	r1, #117	; 0x75
 80074a8:	d017      	beq.n	80074da <_printf_i+0xb2>
 80074aa:	2978      	cmp	r1, #120	; 0x78
 80074ac:	d1d4      	bne.n	8007458 <_printf_i+0x30>
 80074ae:	2378      	movs	r3, #120	; 0x78
 80074b0:	4865      	ldr	r0, [pc, #404]	; (8007648 <_printf_i+0x220>)
 80074b2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80074b6:	e055      	b.n	8007564 <_printf_i+0x13c>
 80074b8:	6813      	ldr	r3, [r2, #0]
 80074ba:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80074be:	1d19      	adds	r1, r3, #4
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	6011      	str	r1, [r2, #0]
 80074c4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80074c8:	2301      	movs	r3, #1
 80074ca:	e08c      	b.n	80075e6 <_printf_i+0x1be>
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	f010 0f40 	tst.w	r0, #64	; 0x40
 80074d2:	6011      	str	r1, [r2, #0]
 80074d4:	bf18      	it	ne
 80074d6:	b21b      	sxthne	r3, r3
 80074d8:	e7cf      	b.n	800747a <_printf_i+0x52>
 80074da:	6813      	ldr	r3, [r2, #0]
 80074dc:	6825      	ldr	r5, [r4, #0]
 80074de:	1d18      	adds	r0, r3, #4
 80074e0:	6010      	str	r0, [r2, #0]
 80074e2:	0628      	lsls	r0, r5, #24
 80074e4:	d501      	bpl.n	80074ea <_printf_i+0xc2>
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	e002      	b.n	80074f0 <_printf_i+0xc8>
 80074ea:	0668      	lsls	r0, r5, #25
 80074ec:	d5fb      	bpl.n	80074e6 <_printf_i+0xbe>
 80074ee:	881b      	ldrh	r3, [r3, #0]
 80074f0:	296f      	cmp	r1, #111	; 0x6f
 80074f2:	bf14      	ite	ne
 80074f4:	220a      	movne	r2, #10
 80074f6:	2208      	moveq	r2, #8
 80074f8:	4852      	ldr	r0, [pc, #328]	; (8007644 <_printf_i+0x21c>)
 80074fa:	2100      	movs	r1, #0
 80074fc:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007500:	6865      	ldr	r5, [r4, #4]
 8007502:	2d00      	cmp	r5, #0
 8007504:	60a5      	str	r5, [r4, #8]
 8007506:	f2c0 8095 	blt.w	8007634 <_printf_i+0x20c>
 800750a:	6821      	ldr	r1, [r4, #0]
 800750c:	f021 0104 	bic.w	r1, r1, #4
 8007510:	6021      	str	r1, [r4, #0]
 8007512:	2b00      	cmp	r3, #0
 8007514:	d13d      	bne.n	8007592 <_printf_i+0x16a>
 8007516:	2d00      	cmp	r5, #0
 8007518:	f040 808e 	bne.w	8007638 <_printf_i+0x210>
 800751c:	4665      	mov	r5, ip
 800751e:	2a08      	cmp	r2, #8
 8007520:	d10b      	bne.n	800753a <_printf_i+0x112>
 8007522:	6823      	ldr	r3, [r4, #0]
 8007524:	07db      	lsls	r3, r3, #31
 8007526:	d508      	bpl.n	800753a <_printf_i+0x112>
 8007528:	6923      	ldr	r3, [r4, #16]
 800752a:	6862      	ldr	r2, [r4, #4]
 800752c:	429a      	cmp	r2, r3
 800752e:	bfde      	ittt	le
 8007530:	2330      	movle	r3, #48	; 0x30
 8007532:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007536:	f105 35ff 	addle.w	r5, r5, #4294967295
 800753a:	ebac 0305 	sub.w	r3, ip, r5
 800753e:	6123      	str	r3, [r4, #16]
 8007540:	f8cd 8000 	str.w	r8, [sp]
 8007544:	463b      	mov	r3, r7
 8007546:	aa03      	add	r2, sp, #12
 8007548:	4621      	mov	r1, r4
 800754a:	4630      	mov	r0, r6
 800754c:	f7ff fef6 	bl	800733c <_printf_common>
 8007550:	3001      	adds	r0, #1
 8007552:	d14d      	bne.n	80075f0 <_printf_i+0x1c8>
 8007554:	f04f 30ff 	mov.w	r0, #4294967295
 8007558:	b005      	add	sp, #20
 800755a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800755e:	4839      	ldr	r0, [pc, #228]	; (8007644 <_printf_i+0x21c>)
 8007560:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8007564:	6813      	ldr	r3, [r2, #0]
 8007566:	6821      	ldr	r1, [r4, #0]
 8007568:	1d1d      	adds	r5, r3, #4
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	6015      	str	r5, [r2, #0]
 800756e:	060a      	lsls	r2, r1, #24
 8007570:	d50b      	bpl.n	800758a <_printf_i+0x162>
 8007572:	07ca      	lsls	r2, r1, #31
 8007574:	bf44      	itt	mi
 8007576:	f041 0120 	orrmi.w	r1, r1, #32
 800757a:	6021      	strmi	r1, [r4, #0]
 800757c:	b91b      	cbnz	r3, 8007586 <_printf_i+0x15e>
 800757e:	6822      	ldr	r2, [r4, #0]
 8007580:	f022 0220 	bic.w	r2, r2, #32
 8007584:	6022      	str	r2, [r4, #0]
 8007586:	2210      	movs	r2, #16
 8007588:	e7b7      	b.n	80074fa <_printf_i+0xd2>
 800758a:	064d      	lsls	r5, r1, #25
 800758c:	bf48      	it	mi
 800758e:	b29b      	uxthmi	r3, r3
 8007590:	e7ef      	b.n	8007572 <_printf_i+0x14a>
 8007592:	4665      	mov	r5, ip
 8007594:	fbb3 f1f2 	udiv	r1, r3, r2
 8007598:	fb02 3311 	mls	r3, r2, r1, r3
 800759c:	5cc3      	ldrb	r3, [r0, r3]
 800759e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80075a2:	460b      	mov	r3, r1
 80075a4:	2900      	cmp	r1, #0
 80075a6:	d1f5      	bne.n	8007594 <_printf_i+0x16c>
 80075a8:	e7b9      	b.n	800751e <_printf_i+0xf6>
 80075aa:	6813      	ldr	r3, [r2, #0]
 80075ac:	6825      	ldr	r5, [r4, #0]
 80075ae:	1d18      	adds	r0, r3, #4
 80075b0:	6961      	ldr	r1, [r4, #20]
 80075b2:	6010      	str	r0, [r2, #0]
 80075b4:	0628      	lsls	r0, r5, #24
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	d501      	bpl.n	80075be <_printf_i+0x196>
 80075ba:	6019      	str	r1, [r3, #0]
 80075bc:	e002      	b.n	80075c4 <_printf_i+0x19c>
 80075be:	066a      	lsls	r2, r5, #25
 80075c0:	d5fb      	bpl.n	80075ba <_printf_i+0x192>
 80075c2:	8019      	strh	r1, [r3, #0]
 80075c4:	2300      	movs	r3, #0
 80075c6:	4665      	mov	r5, ip
 80075c8:	6123      	str	r3, [r4, #16]
 80075ca:	e7b9      	b.n	8007540 <_printf_i+0x118>
 80075cc:	6813      	ldr	r3, [r2, #0]
 80075ce:	1d19      	adds	r1, r3, #4
 80075d0:	6011      	str	r1, [r2, #0]
 80075d2:	681d      	ldr	r5, [r3, #0]
 80075d4:	6862      	ldr	r2, [r4, #4]
 80075d6:	2100      	movs	r1, #0
 80075d8:	4628      	mov	r0, r5
 80075da:	f000 f837 	bl	800764c <memchr>
 80075de:	b108      	cbz	r0, 80075e4 <_printf_i+0x1bc>
 80075e0:	1b40      	subs	r0, r0, r5
 80075e2:	6060      	str	r0, [r4, #4]
 80075e4:	6863      	ldr	r3, [r4, #4]
 80075e6:	6123      	str	r3, [r4, #16]
 80075e8:	2300      	movs	r3, #0
 80075ea:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80075ee:	e7a7      	b.n	8007540 <_printf_i+0x118>
 80075f0:	6923      	ldr	r3, [r4, #16]
 80075f2:	462a      	mov	r2, r5
 80075f4:	4639      	mov	r1, r7
 80075f6:	4630      	mov	r0, r6
 80075f8:	47c0      	blx	r8
 80075fa:	3001      	adds	r0, #1
 80075fc:	d0aa      	beq.n	8007554 <_printf_i+0x12c>
 80075fe:	6823      	ldr	r3, [r4, #0]
 8007600:	079b      	lsls	r3, r3, #30
 8007602:	d413      	bmi.n	800762c <_printf_i+0x204>
 8007604:	68e0      	ldr	r0, [r4, #12]
 8007606:	9b03      	ldr	r3, [sp, #12]
 8007608:	4298      	cmp	r0, r3
 800760a:	bfb8      	it	lt
 800760c:	4618      	movlt	r0, r3
 800760e:	e7a3      	b.n	8007558 <_printf_i+0x130>
 8007610:	2301      	movs	r3, #1
 8007612:	464a      	mov	r2, r9
 8007614:	4639      	mov	r1, r7
 8007616:	4630      	mov	r0, r6
 8007618:	47c0      	blx	r8
 800761a:	3001      	adds	r0, #1
 800761c:	d09a      	beq.n	8007554 <_printf_i+0x12c>
 800761e:	3501      	adds	r5, #1
 8007620:	68e3      	ldr	r3, [r4, #12]
 8007622:	9a03      	ldr	r2, [sp, #12]
 8007624:	1a9b      	subs	r3, r3, r2
 8007626:	42ab      	cmp	r3, r5
 8007628:	dcf2      	bgt.n	8007610 <_printf_i+0x1e8>
 800762a:	e7eb      	b.n	8007604 <_printf_i+0x1dc>
 800762c:	2500      	movs	r5, #0
 800762e:	f104 0919 	add.w	r9, r4, #25
 8007632:	e7f5      	b.n	8007620 <_printf_i+0x1f8>
 8007634:	2b00      	cmp	r3, #0
 8007636:	d1ac      	bne.n	8007592 <_printf_i+0x16a>
 8007638:	7803      	ldrb	r3, [r0, #0]
 800763a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800763e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007642:	e76c      	b.n	800751e <_printf_i+0xf6>
 8007644:	08007a89 	.word	0x08007a89
 8007648:	08007a9a 	.word	0x08007a9a

0800764c <memchr>:
 800764c:	b510      	push	{r4, lr}
 800764e:	b2c9      	uxtb	r1, r1
 8007650:	4402      	add	r2, r0
 8007652:	4290      	cmp	r0, r2
 8007654:	4603      	mov	r3, r0
 8007656:	d101      	bne.n	800765c <memchr+0x10>
 8007658:	2300      	movs	r3, #0
 800765a:	e003      	b.n	8007664 <memchr+0x18>
 800765c:	781c      	ldrb	r4, [r3, #0]
 800765e:	3001      	adds	r0, #1
 8007660:	428c      	cmp	r4, r1
 8007662:	d1f6      	bne.n	8007652 <memchr+0x6>
 8007664:	4618      	mov	r0, r3
 8007666:	bd10      	pop	{r4, pc}

08007668 <memmove>:
 8007668:	4288      	cmp	r0, r1
 800766a:	b510      	push	{r4, lr}
 800766c:	eb01 0302 	add.w	r3, r1, r2
 8007670:	d807      	bhi.n	8007682 <memmove+0x1a>
 8007672:	1e42      	subs	r2, r0, #1
 8007674:	4299      	cmp	r1, r3
 8007676:	d00a      	beq.n	800768e <memmove+0x26>
 8007678:	f811 4b01 	ldrb.w	r4, [r1], #1
 800767c:	f802 4f01 	strb.w	r4, [r2, #1]!
 8007680:	e7f8      	b.n	8007674 <memmove+0xc>
 8007682:	4283      	cmp	r3, r0
 8007684:	d9f5      	bls.n	8007672 <memmove+0xa>
 8007686:	1881      	adds	r1, r0, r2
 8007688:	1ad2      	subs	r2, r2, r3
 800768a:	42d3      	cmn	r3, r2
 800768c:	d100      	bne.n	8007690 <memmove+0x28>
 800768e:	bd10      	pop	{r4, pc}
 8007690:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007694:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8007698:	e7f7      	b.n	800768a <memmove+0x22>
	...

0800769c <_free_r>:
 800769c:	b538      	push	{r3, r4, r5, lr}
 800769e:	4605      	mov	r5, r0
 80076a0:	2900      	cmp	r1, #0
 80076a2:	d043      	beq.n	800772c <_free_r+0x90>
 80076a4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80076a8:	1f0c      	subs	r4, r1, #4
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	bfb8      	it	lt
 80076ae:	18e4      	addlt	r4, r4, r3
 80076b0:	f000 f8d0 	bl	8007854 <__malloc_lock>
 80076b4:	4a1e      	ldr	r2, [pc, #120]	; (8007730 <_free_r+0x94>)
 80076b6:	6813      	ldr	r3, [r2, #0]
 80076b8:	4610      	mov	r0, r2
 80076ba:	b933      	cbnz	r3, 80076ca <_free_r+0x2e>
 80076bc:	6063      	str	r3, [r4, #4]
 80076be:	6014      	str	r4, [r2, #0]
 80076c0:	4628      	mov	r0, r5
 80076c2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80076c6:	f000 b8c6 	b.w	8007856 <__malloc_unlock>
 80076ca:	42a3      	cmp	r3, r4
 80076cc:	d90b      	bls.n	80076e6 <_free_r+0x4a>
 80076ce:	6821      	ldr	r1, [r4, #0]
 80076d0:	1862      	adds	r2, r4, r1
 80076d2:	4293      	cmp	r3, r2
 80076d4:	bf01      	itttt	eq
 80076d6:	681a      	ldreq	r2, [r3, #0]
 80076d8:	685b      	ldreq	r3, [r3, #4]
 80076da:	1852      	addeq	r2, r2, r1
 80076dc:	6022      	streq	r2, [r4, #0]
 80076de:	6063      	str	r3, [r4, #4]
 80076e0:	6004      	str	r4, [r0, #0]
 80076e2:	e7ed      	b.n	80076c0 <_free_r+0x24>
 80076e4:	4613      	mov	r3, r2
 80076e6:	685a      	ldr	r2, [r3, #4]
 80076e8:	b10a      	cbz	r2, 80076ee <_free_r+0x52>
 80076ea:	42a2      	cmp	r2, r4
 80076ec:	d9fa      	bls.n	80076e4 <_free_r+0x48>
 80076ee:	6819      	ldr	r1, [r3, #0]
 80076f0:	1858      	adds	r0, r3, r1
 80076f2:	42a0      	cmp	r0, r4
 80076f4:	d10b      	bne.n	800770e <_free_r+0x72>
 80076f6:	6820      	ldr	r0, [r4, #0]
 80076f8:	4401      	add	r1, r0
 80076fa:	1858      	adds	r0, r3, r1
 80076fc:	4282      	cmp	r2, r0
 80076fe:	6019      	str	r1, [r3, #0]
 8007700:	d1de      	bne.n	80076c0 <_free_r+0x24>
 8007702:	6810      	ldr	r0, [r2, #0]
 8007704:	6852      	ldr	r2, [r2, #4]
 8007706:	4401      	add	r1, r0
 8007708:	6019      	str	r1, [r3, #0]
 800770a:	605a      	str	r2, [r3, #4]
 800770c:	e7d8      	b.n	80076c0 <_free_r+0x24>
 800770e:	d902      	bls.n	8007716 <_free_r+0x7a>
 8007710:	230c      	movs	r3, #12
 8007712:	602b      	str	r3, [r5, #0]
 8007714:	e7d4      	b.n	80076c0 <_free_r+0x24>
 8007716:	6820      	ldr	r0, [r4, #0]
 8007718:	1821      	adds	r1, r4, r0
 800771a:	428a      	cmp	r2, r1
 800771c:	bf01      	itttt	eq
 800771e:	6811      	ldreq	r1, [r2, #0]
 8007720:	6852      	ldreq	r2, [r2, #4]
 8007722:	1809      	addeq	r1, r1, r0
 8007724:	6021      	streq	r1, [r4, #0]
 8007726:	6062      	str	r2, [r4, #4]
 8007728:	605c      	str	r4, [r3, #4]
 800772a:	e7c9      	b.n	80076c0 <_free_r+0x24>
 800772c:	bd38      	pop	{r3, r4, r5, pc}
 800772e:	bf00      	nop
 8007730:	20001398 	.word	0x20001398

08007734 <_malloc_r>:
 8007734:	b570      	push	{r4, r5, r6, lr}
 8007736:	1ccd      	adds	r5, r1, #3
 8007738:	f025 0503 	bic.w	r5, r5, #3
 800773c:	3508      	adds	r5, #8
 800773e:	2d0c      	cmp	r5, #12
 8007740:	bf38      	it	cc
 8007742:	250c      	movcc	r5, #12
 8007744:	2d00      	cmp	r5, #0
 8007746:	4606      	mov	r6, r0
 8007748:	db01      	blt.n	800774e <_malloc_r+0x1a>
 800774a:	42a9      	cmp	r1, r5
 800774c:	d903      	bls.n	8007756 <_malloc_r+0x22>
 800774e:	230c      	movs	r3, #12
 8007750:	6033      	str	r3, [r6, #0]
 8007752:	2000      	movs	r0, #0
 8007754:	bd70      	pop	{r4, r5, r6, pc}
 8007756:	f000 f87d 	bl	8007854 <__malloc_lock>
 800775a:	4a21      	ldr	r2, [pc, #132]	; (80077e0 <_malloc_r+0xac>)
 800775c:	6814      	ldr	r4, [r2, #0]
 800775e:	4621      	mov	r1, r4
 8007760:	b991      	cbnz	r1, 8007788 <_malloc_r+0x54>
 8007762:	4c20      	ldr	r4, [pc, #128]	; (80077e4 <_malloc_r+0xb0>)
 8007764:	6823      	ldr	r3, [r4, #0]
 8007766:	b91b      	cbnz	r3, 8007770 <_malloc_r+0x3c>
 8007768:	4630      	mov	r0, r6
 800776a:	f000 f863 	bl	8007834 <_sbrk_r>
 800776e:	6020      	str	r0, [r4, #0]
 8007770:	4629      	mov	r1, r5
 8007772:	4630      	mov	r0, r6
 8007774:	f000 f85e 	bl	8007834 <_sbrk_r>
 8007778:	1c43      	adds	r3, r0, #1
 800777a:	d124      	bne.n	80077c6 <_malloc_r+0x92>
 800777c:	230c      	movs	r3, #12
 800777e:	4630      	mov	r0, r6
 8007780:	6033      	str	r3, [r6, #0]
 8007782:	f000 f868 	bl	8007856 <__malloc_unlock>
 8007786:	e7e4      	b.n	8007752 <_malloc_r+0x1e>
 8007788:	680b      	ldr	r3, [r1, #0]
 800778a:	1b5b      	subs	r3, r3, r5
 800778c:	d418      	bmi.n	80077c0 <_malloc_r+0x8c>
 800778e:	2b0b      	cmp	r3, #11
 8007790:	d90f      	bls.n	80077b2 <_malloc_r+0x7e>
 8007792:	600b      	str	r3, [r1, #0]
 8007794:	18cc      	adds	r4, r1, r3
 8007796:	50cd      	str	r5, [r1, r3]
 8007798:	4630      	mov	r0, r6
 800779a:	f000 f85c 	bl	8007856 <__malloc_unlock>
 800779e:	f104 000b 	add.w	r0, r4, #11
 80077a2:	1d23      	adds	r3, r4, #4
 80077a4:	f020 0007 	bic.w	r0, r0, #7
 80077a8:	1ac3      	subs	r3, r0, r3
 80077aa:	d0d3      	beq.n	8007754 <_malloc_r+0x20>
 80077ac:	425a      	negs	r2, r3
 80077ae:	50e2      	str	r2, [r4, r3]
 80077b0:	e7d0      	b.n	8007754 <_malloc_r+0x20>
 80077b2:	684b      	ldr	r3, [r1, #4]
 80077b4:	428c      	cmp	r4, r1
 80077b6:	bf16      	itet	ne
 80077b8:	6063      	strne	r3, [r4, #4]
 80077ba:	6013      	streq	r3, [r2, #0]
 80077bc:	460c      	movne	r4, r1
 80077be:	e7eb      	b.n	8007798 <_malloc_r+0x64>
 80077c0:	460c      	mov	r4, r1
 80077c2:	6849      	ldr	r1, [r1, #4]
 80077c4:	e7cc      	b.n	8007760 <_malloc_r+0x2c>
 80077c6:	1cc4      	adds	r4, r0, #3
 80077c8:	f024 0403 	bic.w	r4, r4, #3
 80077cc:	42a0      	cmp	r0, r4
 80077ce:	d005      	beq.n	80077dc <_malloc_r+0xa8>
 80077d0:	1a21      	subs	r1, r4, r0
 80077d2:	4630      	mov	r0, r6
 80077d4:	f000 f82e 	bl	8007834 <_sbrk_r>
 80077d8:	3001      	adds	r0, #1
 80077da:	d0cf      	beq.n	800777c <_malloc_r+0x48>
 80077dc:	6025      	str	r5, [r4, #0]
 80077de:	e7db      	b.n	8007798 <_malloc_r+0x64>
 80077e0:	20001398 	.word	0x20001398
 80077e4:	2000139c 	.word	0x2000139c

080077e8 <_realloc_r>:
 80077e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80077ea:	4607      	mov	r7, r0
 80077ec:	4614      	mov	r4, r2
 80077ee:	460e      	mov	r6, r1
 80077f0:	b921      	cbnz	r1, 80077fc <_realloc_r+0x14>
 80077f2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80077f6:	4611      	mov	r1, r2
 80077f8:	f7ff bf9c 	b.w	8007734 <_malloc_r>
 80077fc:	b922      	cbnz	r2, 8007808 <_realloc_r+0x20>
 80077fe:	f7ff ff4d 	bl	800769c <_free_r>
 8007802:	4625      	mov	r5, r4
 8007804:	4628      	mov	r0, r5
 8007806:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007808:	f000 f826 	bl	8007858 <_malloc_usable_size_r>
 800780c:	42a0      	cmp	r0, r4
 800780e:	d20f      	bcs.n	8007830 <_realloc_r+0x48>
 8007810:	4621      	mov	r1, r4
 8007812:	4638      	mov	r0, r7
 8007814:	f7ff ff8e 	bl	8007734 <_malloc_r>
 8007818:	4605      	mov	r5, r0
 800781a:	2800      	cmp	r0, #0
 800781c:	d0f2      	beq.n	8007804 <_realloc_r+0x1c>
 800781e:	4631      	mov	r1, r6
 8007820:	4622      	mov	r2, r4
 8007822:	f7ff fbd1 	bl	8006fc8 <memcpy>
 8007826:	4631      	mov	r1, r6
 8007828:	4638      	mov	r0, r7
 800782a:	f7ff ff37 	bl	800769c <_free_r>
 800782e:	e7e9      	b.n	8007804 <_realloc_r+0x1c>
 8007830:	4635      	mov	r5, r6
 8007832:	e7e7      	b.n	8007804 <_realloc_r+0x1c>

08007834 <_sbrk_r>:
 8007834:	b538      	push	{r3, r4, r5, lr}
 8007836:	2300      	movs	r3, #0
 8007838:	4c05      	ldr	r4, [pc, #20]	; (8007850 <_sbrk_r+0x1c>)
 800783a:	4605      	mov	r5, r0
 800783c:	4608      	mov	r0, r1
 800783e:	6023      	str	r3, [r4, #0]
 8007840:	f7fa f91c 	bl	8001a7c <_sbrk>
 8007844:	1c43      	adds	r3, r0, #1
 8007846:	d102      	bne.n	800784e <_sbrk_r+0x1a>
 8007848:	6823      	ldr	r3, [r4, #0]
 800784a:	b103      	cbz	r3, 800784e <_sbrk_r+0x1a>
 800784c:	602b      	str	r3, [r5, #0]
 800784e:	bd38      	pop	{r3, r4, r5, pc}
 8007850:	200016b8 	.word	0x200016b8

08007854 <__malloc_lock>:
 8007854:	4770      	bx	lr

08007856 <__malloc_unlock>:
 8007856:	4770      	bx	lr

08007858 <_malloc_usable_size_r>:
 8007858:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800785c:	1f18      	subs	r0, r3, #4
 800785e:	2b00      	cmp	r3, #0
 8007860:	bfbc      	itt	lt
 8007862:	580b      	ldrlt	r3, [r1, r0]
 8007864:	18c0      	addlt	r0, r0, r3
 8007866:	4770      	bx	lr

08007868 <_init>:
 8007868:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800786a:	bf00      	nop
 800786c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800786e:	bc08      	pop	{r3}
 8007870:	469e      	mov	lr, r3
 8007872:	4770      	bx	lr

08007874 <_fini>:
 8007874:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007876:	bf00      	nop
 8007878:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800787a:	bc08      	pop	{r3}
 800787c:	469e      	mov	lr, r3
 800787e:	4770      	bx	lr
