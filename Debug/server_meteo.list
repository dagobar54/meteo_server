
server_meteo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007600  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001fc  08007710  08007710  00017710  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800790c  0800790c  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  0800790c  0800790c  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800790c  0800790c  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800790c  0800790c  0001790c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007910  08007910  00017910  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08007914  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001618  20000074  08007988  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000168c  08007988  0002168c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001990b  00000000  00000000  0002009d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000037fa  00000000  00000000  000399a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000015d0  00000000  00000000  0003d1a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001438  00000000  00000000  0003e778  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00017a8e  00000000  00000000  0003fbb0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000ff9d  00000000  00000000  0005763e  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0007e022  00000000  00000000  000675db  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000e55fd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005d9c  00000000  00000000  000e5678  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000074 	.word	0x20000074
 800012c:	00000000 	.word	0x00000000
 8000130:	080076f8 	.word	0x080076f8

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000078 	.word	0x20000078
 800014c:	080076f8 	.word	0x080076f8

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <vApplicationStackOverflowHook>:
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);
void vApplicationMallocFailedHook(void);

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 8000160:	b480      	push	{r7}
 8000162:	b083      	sub	sp, #12
 8000164:	af00      	add	r7, sp, #0
 8000166:	6078      	str	r0, [r7, #4]
 8000168:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 800016a:	bf00      	nop
 800016c:	370c      	adds	r7, #12
 800016e:	46bd      	mov	sp, r7
 8000170:	bc80      	pop	{r7}
 8000172:	4770      	bx	lr

08000174 <vApplicationMallocFailedHook>:
/* USER CODE END 4 */

/* USER CODE BEGIN 5 */
__weak void vApplicationMallocFailedHook(void)
{
 8000174:	b480      	push	{r7}
 8000176:	af00      	add	r7, sp, #0
   demo application. If heap_1.c or heap_2.c are used, then the size of the
   heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
   FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
   to query the size of free heap space that remains (although it does not
   provide information on how the remaining heap might be fragmented). */
}
 8000178:	bf00      	nop
 800017a:	46bd      	mov	sp, r7
 800017c:	bc80      	pop	{r7}
 800017e:	4770      	bx	lr

08000180 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000180:	b480      	push	{r7}
 8000182:	b085      	sub	sp, #20
 8000184:	af00      	add	r7, sp, #0
 8000186:	60f8      	str	r0, [r7, #12]
 8000188:	60b9      	str	r1, [r7, #8]
 800018a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800018c:	68fb      	ldr	r3, [r7, #12]
 800018e:	4a06      	ldr	r2, [pc, #24]	; (80001a8 <vApplicationGetIdleTaskMemory+0x28>)
 8000190:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000192:	68bb      	ldr	r3, [r7, #8]
 8000194:	4a05      	ldr	r2, [pc, #20]	; (80001ac <vApplicationGetIdleTaskMemory+0x2c>)
 8000196:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000198:	687b      	ldr	r3, [r7, #4]
 800019a:	2240      	movs	r2, #64	; 0x40
 800019c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}                   
 800019e:	bf00      	nop
 80001a0:	3714      	adds	r7, #20
 80001a2:	46bd      	mov	sp, r7
 80001a4:	bc80      	pop	{r7}
 80001a6:	4770      	bx	lr
 80001a8:	20000090 	.word	0x20000090
 80001ac:	200000e4 	.word	0x200000e4

080001b0 <vApplicationGetTimerTaskMemory>:
/* USER CODE BEGIN GET_TIMER_TASK_MEMORY */
static StaticTask_t xTimerTaskTCBBuffer;
static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];
  
void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize )  
{
 80001b0:	b480      	push	{r7}
 80001b2:	b085      	sub	sp, #20
 80001b4:	af00      	add	r7, sp, #0
 80001b6:	60f8      	str	r0, [r7, #12]
 80001b8:	60b9      	str	r1, [r7, #8]
 80001ba:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 80001bc:	68fb      	ldr	r3, [r7, #12]
 80001be:	4a06      	ldr	r2, [pc, #24]	; (80001d8 <vApplicationGetTimerTaskMemory+0x28>)
 80001c0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
 80001c2:	68bb      	ldr	r3, [r7, #8]
 80001c4:	4a05      	ldr	r2, [pc, #20]	; (80001dc <vApplicationGetTimerTaskMemory+0x2c>)
 80001c6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 80001c8:	687b      	ldr	r3, [r7, #4]
 80001ca:	2280      	movs	r2, #128	; 0x80
 80001cc:	601a      	str	r2, [r3, #0]
  /* place for user code */
}                   
 80001ce:	bf00      	nop
 80001d0:	3714      	adds	r7, #20
 80001d2:	46bd      	mov	sp, r7
 80001d4:	bc80      	pop	{r7}
 80001d6:	4770      	bx	lr
 80001d8:	200001e4 	.word	0x200001e4
 80001dc:	20000238 	.word	0x20000238

080001e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001e0:	b5b0      	push	{r4, r5, r7, lr}
 80001e2:	b0a2      	sub	sp, #136	; 0x88
 80001e4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001e6:	f001 fbb1 	bl	800194c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001ea:	f000 f89f 	bl	800032c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001ee:	f000 f943 	bl	8000478 <MX_GPIO_Init>
  MX_SPI1_Init();
 80001f2:	f000 f8e1 	bl	80003b8 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 80001f6:	f000 f915 	bl	8000424 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  DWT_Init(); // счётчик для микросекундных пауз
 80001fa:	f000 fc67 	bl	8000acc <DWT_Init>
  pipe_pool_id = osPoolCreate(osPool(pipe_pool));
 80001fe:	483d      	ldr	r0, [pc, #244]	; (80002f4 <main+0x114>)
 8000200:	f003 fd04 	bl	8003c0c <osPoolCreate>
 8000204:	4602      	mov	r2, r0
 8000206:	4b3c      	ldr	r3, [pc, #240]	; (80002f8 <main+0x118>)
 8000208:	601a      	str	r2, [r3, #0]
  //MX_USB_DEVICE_Init();
  /* USER CODE END 2 */

  /* Create the mutex(es) */
  /* definition and creation of unixtimeMutex */
  osMutexDef(unixtimeMutex);
 800020a:	2300      	movs	r3, #0
 800020c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8000210:	2300      	movs	r3, #0
 8000212:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  unixtimeMutexHandle = osMutexCreate(osMutex(unixtimeMutex));
 8000216:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800021a:	4618      	mov	r0, r3
 800021c:	f003 fcde 	bl	8003bdc <osMutexCreate>
 8000220:	4602      	mov	r2, r0
 8000222:	4b36      	ldr	r3, [pc, #216]	; (80002fc <main+0x11c>)
 8000224:	601a      	str	r2, [r3, #0]
  /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* Create the timer(s) */
  /* definition and creation of osUnixTimer */
  osTimerDef(osUnixTimer, CallbackUnixTimer);
 8000226:	4b36      	ldr	r3, [pc, #216]	; (8000300 <main+0x120>)
 8000228:	67bb      	str	r3, [r7, #120]	; 0x78
 800022a:	2300      	movs	r3, #0
 800022c:	67fb      	str	r3, [r7, #124]	; 0x7c
  osUnixTimerHandle = osTimerCreate(osTimer(osUnixTimer), osTimerPeriodic, NULL);
 800022e:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8000232:	2200      	movs	r2, #0
 8000234:	2101      	movs	r1, #1
 8000236:	4618      	mov	r0, r3
 8000238:	f003 fc56 	bl	8003ae8 <osTimerCreate>
 800023c:	4602      	mov	r2, r0
 800023e:	4b31      	ldr	r3, [pc, #196]	; (8000304 <main+0x124>)
 8000240:	601a      	str	r2, [r3, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* definition and creation of msgUnixTimer */
  osMessageQDef(msgUnixTimer, 16, uint32_t);
 8000242:	4b31      	ldr	r3, [pc, #196]	; (8000308 <main+0x128>)
 8000244:	f107 0468 	add.w	r4, r7, #104	; 0x68
 8000248:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800024a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  msgUnixTimerHandle = osMessageCreate(osMessageQ(msgUnixTimer), NULL);
 800024e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8000252:	2100      	movs	r1, #0
 8000254:	4618      	mov	r0, r3
 8000256:	f003 fdd8 	bl	8003e0a <osMessageCreate>
 800025a:	4602      	mov	r2, r0
 800025c:	4b2b      	ldr	r3, [pc, #172]	; (800030c <main+0x12c>)
 800025e:	601a      	str	r2, [r3, #0]

  /* definition and creation of msgPipeAlloc */
  osMessageQDef(msgPipeAlloc, 16, uint32_t);
 8000260:	4b29      	ldr	r3, [pc, #164]	; (8000308 <main+0x128>)
 8000262:	f107 0458 	add.w	r4, r7, #88	; 0x58
 8000266:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000268:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  msgPipeAllocHandle = osMessageCreate(osMessageQ(msgPipeAlloc), NULL);
 800026c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000270:	2100      	movs	r1, #0
 8000272:	4618      	mov	r0, r3
 8000274:	f003 fdc9 	bl	8003e0a <osMessageCreate>
 8000278:	4602      	mov	r2, r0
 800027a:	4b25      	ldr	r3, [pc, #148]	; (8000310 <main+0x130>)
 800027c:	601a      	str	r2, [r3, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 64);
 800027e:	4b25      	ldr	r3, [pc, #148]	; (8000314 <main+0x134>)
 8000280:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8000284:	461d      	mov	r5, r3
 8000286:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000288:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800028a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800028e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000292:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000296:	2100      	movs	r1, #0
 8000298:	4618      	mov	r0, r3
 800029a:	f003 fbc4 	bl	8003a26 <osThreadCreate>
 800029e:	4602      	mov	r2, r0
 80002a0:	4b1d      	ldr	r3, [pc, #116]	; (8000318 <main+0x138>)
 80002a2:	601a      	str	r2, [r3, #0]

  /* definition and creation of myRadio */
  osThreadDef(myRadio, StartRadio, osPriorityNormal, 0, 128);
 80002a4:	4b1d      	ldr	r3, [pc, #116]	; (800031c <main+0x13c>)
 80002a6:	f107 0420 	add.w	r4, r7, #32
 80002aa:	461d      	mov	r5, r3
 80002ac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80002ae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80002b0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80002b4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myRadioHandle = osThreadCreate(osThread(myRadio), NULL);
 80002b8:	f107 0320 	add.w	r3, r7, #32
 80002bc:	2100      	movs	r1, #0
 80002be:	4618      	mov	r0, r3
 80002c0:	f003 fbb1 	bl	8003a26 <osThreadCreate>
 80002c4:	4602      	mov	r2, r0
 80002c6:	4b16      	ldr	r3, [pc, #88]	; (8000320 <main+0x140>)
 80002c8:	601a      	str	r2, [r3, #0]

  /* definition and creation of unixTimeCounter */
  osThreadDef(unixTimeCounter, StartUnixTimeCounter, osPriorityNormal, 0, 128);
 80002ca:	4b16      	ldr	r3, [pc, #88]	; (8000324 <main+0x144>)
 80002cc:	1d3c      	adds	r4, r7, #4
 80002ce:	461d      	mov	r5, r3
 80002d0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80002d2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80002d4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80002d8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  unixTimeCounterHandle = osThreadCreate(osThread(unixTimeCounter), NULL);
 80002dc:	1d3b      	adds	r3, r7, #4
 80002de:	2100      	movs	r1, #0
 80002e0:	4618      	mov	r0, r3
 80002e2:	f003 fba0 	bl	8003a26 <osThreadCreate>
 80002e6:	4602      	mov	r2, r0
 80002e8:	4b0f      	ldr	r3, [pc, #60]	; (8000328 <main+0x148>)
 80002ea:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80002ec:	f003 fb94 	bl	8003a18 <osKernelStart>
 
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80002f0:	e7fe      	b.n	80002f0 <main+0x110>
 80002f2:	bf00      	nop
 80002f4:	0800789c 	.word	0x0800789c
 80002f8:	200013b4 	.word	0x200013b4
 80002fc:	20001438 	.word	0x20001438
 8000300:	08000995 	.word	0x08000995
 8000304:	200013c0 	.word	0x200013c0
 8000308:	08007710 	.word	0x08007710
 800030c:	20001580 	.word	0x20001580
 8000310:	2000143c 	.word	0x2000143c
 8000314:	0800772c 	.word	0x0800772c
 8000318:	200013a8 	.word	0x200013a8
 800031c:	08007750 	.word	0x08007750
 8000320:	20001410 	.word	0x20001410
 8000324:	0800777c 	.word	0x0800777c
 8000328:	2000151c 	.word	0x2000151c

0800032c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800032c:	b580      	push	{r7, lr}
 800032e:	b090      	sub	sp, #64	; 0x40
 8000330:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000332:	f107 0318 	add.w	r3, r7, #24
 8000336:	2228      	movs	r2, #40	; 0x28
 8000338:	2100      	movs	r1, #0
 800033a:	4618      	mov	r0, r3
 800033c:	f006 fd97 	bl	8006e6e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000340:	1d3b      	adds	r3, r7, #4
 8000342:	2200      	movs	r2, #0
 8000344:	601a      	str	r2, [r3, #0]
 8000346:	605a      	str	r2, [r3, #4]
 8000348:	609a      	str	r2, [r3, #8]
 800034a:	60da      	str	r2, [r3, #12]
 800034c:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800034e:	2301      	movs	r3, #1
 8000350:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000352:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000356:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000358:	2300      	movs	r3, #0
 800035a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800035c:	2301      	movs	r3, #1
 800035e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000360:	2302      	movs	r3, #2
 8000362:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000364:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000368:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800036a:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800036e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000370:	f107 0318 	add.w	r3, r7, #24
 8000374:	4618      	mov	r0, r3
 8000376:	f001 fdbf 	bl	8001ef8 <HAL_RCC_OscConfig>
 800037a:	4603      	mov	r3, r0
 800037c:	2b00      	cmp	r3, #0
 800037e:	d001      	beq.n	8000384 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000380:	f000 fb40 	bl	8000a04 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000384:	230f      	movs	r3, #15
 8000386:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000388:	2302      	movs	r3, #2
 800038a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800038c:	2300      	movs	r3, #0
 800038e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000390:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000394:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000396:	2300      	movs	r3, #0
 8000398:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800039a:	1d3b      	adds	r3, r7, #4
 800039c:	2102      	movs	r1, #2
 800039e:	4618      	mov	r0, r3
 80003a0:	f002 f82a 	bl	80023f8 <HAL_RCC_ClockConfig>
 80003a4:	4603      	mov	r3, r0
 80003a6:	2b00      	cmp	r3, #0
 80003a8:	d001      	beq.n	80003ae <SystemClock_Config+0x82>
  {
    Error_Handler();
 80003aa:	f000 fb2b 	bl	8000a04 <Error_Handler>
  }
}
 80003ae:	bf00      	nop
 80003b0:	3740      	adds	r7, #64	; 0x40
 80003b2:	46bd      	mov	sp, r7
 80003b4:	bd80      	pop	{r7, pc}
	...

080003b8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80003b8:	b580      	push	{r7, lr}
 80003ba:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80003bc:	4b17      	ldr	r3, [pc, #92]	; (800041c <MX_SPI1_Init+0x64>)
 80003be:	4a18      	ldr	r2, [pc, #96]	; (8000420 <MX_SPI1_Init+0x68>)
 80003c0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80003c2:	4b16      	ldr	r3, [pc, #88]	; (800041c <MX_SPI1_Init+0x64>)
 80003c4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80003c8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80003ca:	4b14      	ldr	r3, [pc, #80]	; (800041c <MX_SPI1_Init+0x64>)
 80003cc:	2200      	movs	r2, #0
 80003ce:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80003d0:	4b12      	ldr	r3, [pc, #72]	; (800041c <MX_SPI1_Init+0x64>)
 80003d2:	2200      	movs	r2, #0
 80003d4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80003d6:	4b11      	ldr	r3, [pc, #68]	; (800041c <MX_SPI1_Init+0x64>)
 80003d8:	2200      	movs	r2, #0
 80003da:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80003dc:	4b0f      	ldr	r3, [pc, #60]	; (800041c <MX_SPI1_Init+0x64>)
 80003de:	2200      	movs	r2, #0
 80003e0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80003e2:	4b0e      	ldr	r3, [pc, #56]	; (800041c <MX_SPI1_Init+0x64>)
 80003e4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80003e8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80003ea:	4b0c      	ldr	r3, [pc, #48]	; (800041c <MX_SPI1_Init+0x64>)
 80003ec:	2218      	movs	r2, #24
 80003ee:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80003f0:	4b0a      	ldr	r3, [pc, #40]	; (800041c <MX_SPI1_Init+0x64>)
 80003f2:	2200      	movs	r2, #0
 80003f4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80003f6:	4b09      	ldr	r3, [pc, #36]	; (800041c <MX_SPI1_Init+0x64>)
 80003f8:	2200      	movs	r2, #0
 80003fa:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80003fc:	4b07      	ldr	r3, [pc, #28]	; (800041c <MX_SPI1_Init+0x64>)
 80003fe:	2200      	movs	r2, #0
 8000400:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000402:	4b06      	ldr	r3, [pc, #24]	; (800041c <MX_SPI1_Init+0x64>)
 8000404:	220a      	movs	r2, #10
 8000406:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000408:	4804      	ldr	r0, [pc, #16]	; (800041c <MX_SPI1_Init+0x64>)
 800040a:	f002 f9c1 	bl	8002790 <HAL_SPI_Init>
 800040e:	4603      	mov	r3, r0
 8000410:	2b00      	cmp	r3, #0
 8000412:	d001      	beq.n	8000418 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000414:	f000 faf6 	bl	8000a04 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000418:	bf00      	nop
 800041a:	bd80      	pop	{r7, pc}
 800041c:	20001520 	.word	0x20001520
 8000420:	40013000 	.word	0x40013000

08000424 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000424:	b580      	push	{r7, lr}
 8000426:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000428:	4b11      	ldr	r3, [pc, #68]	; (8000470 <MX_USART1_UART_Init+0x4c>)
 800042a:	4a12      	ldr	r2, [pc, #72]	; (8000474 <MX_USART1_UART_Init+0x50>)
 800042c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800042e:	4b10      	ldr	r3, [pc, #64]	; (8000470 <MX_USART1_UART_Init+0x4c>)
 8000430:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000434:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000436:	4b0e      	ldr	r3, [pc, #56]	; (8000470 <MX_USART1_UART_Init+0x4c>)
 8000438:	2200      	movs	r2, #0
 800043a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800043c:	4b0c      	ldr	r3, [pc, #48]	; (8000470 <MX_USART1_UART_Init+0x4c>)
 800043e:	2200      	movs	r2, #0
 8000440:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000442:	4b0b      	ldr	r3, [pc, #44]	; (8000470 <MX_USART1_UART_Init+0x4c>)
 8000444:	2200      	movs	r2, #0
 8000446:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000448:	4b09      	ldr	r3, [pc, #36]	; (8000470 <MX_USART1_UART_Init+0x4c>)
 800044a:	220c      	movs	r2, #12
 800044c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800044e:	4b08      	ldr	r3, [pc, #32]	; (8000470 <MX_USART1_UART_Init+0x4c>)
 8000450:	2200      	movs	r2, #0
 8000452:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000454:	4b06      	ldr	r3, [pc, #24]	; (8000470 <MX_USART1_UART_Init+0x4c>)
 8000456:	2200      	movs	r2, #0
 8000458:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800045a:	4805      	ldr	r0, [pc, #20]	; (8000470 <MX_USART1_UART_Init+0x4c>)
 800045c:	f003 f8aa 	bl	80035b4 <HAL_UART_Init>
 8000460:	4603      	mov	r3, r0
 8000462:	2b00      	cmp	r3, #0
 8000464:	d001      	beq.n	800046a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000466:	f000 facd 	bl	8000a04 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800046a:	bf00      	nop
 800046c:	bd80      	pop	{r7, pc}
 800046e:	bf00      	nop
 8000470:	200013d0 	.word	0x200013d0
 8000474:	40013800 	.word	0x40013800

08000478 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000478:	b580      	push	{r7, lr}
 800047a:	b088      	sub	sp, #32
 800047c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800047e:	f107 0310 	add.w	r3, r7, #16
 8000482:	2200      	movs	r2, #0
 8000484:	601a      	str	r2, [r3, #0]
 8000486:	605a      	str	r2, [r3, #4]
 8000488:	609a      	str	r2, [r3, #8]
 800048a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800048c:	4b38      	ldr	r3, [pc, #224]	; (8000570 <MX_GPIO_Init+0xf8>)
 800048e:	699b      	ldr	r3, [r3, #24]
 8000490:	4a37      	ldr	r2, [pc, #220]	; (8000570 <MX_GPIO_Init+0xf8>)
 8000492:	f043 0310 	orr.w	r3, r3, #16
 8000496:	6193      	str	r3, [r2, #24]
 8000498:	4b35      	ldr	r3, [pc, #212]	; (8000570 <MX_GPIO_Init+0xf8>)
 800049a:	699b      	ldr	r3, [r3, #24]
 800049c:	f003 0310 	and.w	r3, r3, #16
 80004a0:	60fb      	str	r3, [r7, #12]
 80004a2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80004a4:	4b32      	ldr	r3, [pc, #200]	; (8000570 <MX_GPIO_Init+0xf8>)
 80004a6:	699b      	ldr	r3, [r3, #24]
 80004a8:	4a31      	ldr	r2, [pc, #196]	; (8000570 <MX_GPIO_Init+0xf8>)
 80004aa:	f043 0320 	orr.w	r3, r3, #32
 80004ae:	6193      	str	r3, [r2, #24]
 80004b0:	4b2f      	ldr	r3, [pc, #188]	; (8000570 <MX_GPIO_Init+0xf8>)
 80004b2:	699b      	ldr	r3, [r3, #24]
 80004b4:	f003 0320 	and.w	r3, r3, #32
 80004b8:	60bb      	str	r3, [r7, #8]
 80004ba:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004bc:	4b2c      	ldr	r3, [pc, #176]	; (8000570 <MX_GPIO_Init+0xf8>)
 80004be:	699b      	ldr	r3, [r3, #24]
 80004c0:	4a2b      	ldr	r2, [pc, #172]	; (8000570 <MX_GPIO_Init+0xf8>)
 80004c2:	f043 0304 	orr.w	r3, r3, #4
 80004c6:	6193      	str	r3, [r2, #24]
 80004c8:	4b29      	ldr	r3, [pc, #164]	; (8000570 <MX_GPIO_Init+0xf8>)
 80004ca:	699b      	ldr	r3, [r3, #24]
 80004cc:	f003 0304 	and.w	r3, r3, #4
 80004d0:	607b      	str	r3, [r7, #4]
 80004d2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80004d4:	4b26      	ldr	r3, [pc, #152]	; (8000570 <MX_GPIO_Init+0xf8>)
 80004d6:	699b      	ldr	r3, [r3, #24]
 80004d8:	4a25      	ldr	r2, [pc, #148]	; (8000570 <MX_GPIO_Init+0xf8>)
 80004da:	f043 0308 	orr.w	r3, r3, #8
 80004de:	6193      	str	r3, [r2, #24]
 80004e0:	4b23      	ldr	r3, [pc, #140]	; (8000570 <MX_GPIO_Init+0xf8>)
 80004e2:	699b      	ldr	r3, [r3, #24]
 80004e4:	f003 0308 	and.w	r3, r3, #8
 80004e8:	603b      	str	r3, [r7, #0]
 80004ea:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(IND_GPIO_Port, IND_Pin, GPIO_PIN_RESET);
 80004ec:	2200      	movs	r2, #0
 80004ee:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80004f2:	4820      	ldr	r0, [pc, #128]	; (8000574 <MX_GPIO_Init+0xfc>)
 80004f4:	f001 fcb8 	bl	8001e68 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, CSN_Pin|CE_Pin, GPIO_PIN_RESET);
 80004f8:	2200      	movs	r2, #0
 80004fa:	f44f 7140 	mov.w	r1, #768	; 0x300
 80004fe:	481e      	ldr	r0, [pc, #120]	; (8000578 <MX_GPIO_Init+0x100>)
 8000500:	f001 fcb2 	bl	8001e68 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : IND_Pin */
  GPIO_InitStruct.Pin = IND_Pin;
 8000504:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000508:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800050a:	2301      	movs	r3, #1
 800050c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800050e:	2300      	movs	r3, #0
 8000510:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000512:	2302      	movs	r3, #2
 8000514:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(IND_GPIO_Port, &GPIO_InitStruct);
 8000516:	f107 0310 	add.w	r3, r7, #16
 800051a:	4619      	mov	r1, r3
 800051c:	4815      	ldr	r0, [pc, #84]	; (8000574 <MX_GPIO_Init+0xfc>)
 800051e:	f001 fb49 	bl	8001bb4 <HAL_GPIO_Init>

  /*Configure GPIO pin : RF24_IRQ_Pin */
  GPIO_InitStruct.Pin = RF24_IRQ_Pin;
 8000522:	2301      	movs	r3, #1
 8000524:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000526:	4b15      	ldr	r3, [pc, #84]	; (800057c <MX_GPIO_Init+0x104>)
 8000528:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800052a:	2301      	movs	r3, #1
 800052c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(RF24_IRQ_GPIO_Port, &GPIO_InitStruct);
 800052e:	f107 0310 	add.w	r3, r7, #16
 8000532:	4619      	mov	r1, r3
 8000534:	4810      	ldr	r0, [pc, #64]	; (8000578 <MX_GPIO_Init+0x100>)
 8000536:	f001 fb3d 	bl	8001bb4 <HAL_GPIO_Init>

  /*Configure GPIO pins : CSN_Pin CE_Pin */
  GPIO_InitStruct.Pin = CSN_Pin|CE_Pin;
 800053a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800053e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000540:	2301      	movs	r3, #1
 8000542:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000544:	2300      	movs	r3, #0
 8000546:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000548:	2302      	movs	r3, #2
 800054a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800054c:	f107 0310 	add.w	r3, r7, #16
 8000550:	4619      	mov	r1, r3
 8000552:	4809      	ldr	r0, [pc, #36]	; (8000578 <MX_GPIO_Init+0x100>)
 8000554:	f001 fb2e 	bl	8001bb4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 8000558:	2200      	movs	r2, #0
 800055a:	2105      	movs	r1, #5
 800055c:	2006      	movs	r0, #6
 800055e:	f001 fafe 	bl	8001b5e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000562:	2006      	movs	r0, #6
 8000564:	f001 fb17 	bl	8001b96 <HAL_NVIC_EnableIRQ>

}
 8000568:	bf00      	nop
 800056a:	3720      	adds	r7, #32
 800056c:	46bd      	mov	sp, r7
 800056e:	bd80      	pop	{r7, pc}
 8000570:	40021000 	.word	0x40021000
 8000574:	40011000 	.word	0x40011000
 8000578:	40010c00 	.word	0x40010c00
 800057c:	10210000 	.word	0x10210000

08000580 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	b084      	sub	sp, #16
 8000584:	af00      	add	r7, sp, #0
 8000586:	4603      	mov	r3, r0
 8000588:	80fb      	strh	r3, [r7, #6]
  if (GPIO_Pin == GPIO_PIN_0)
 800058a:	88fb      	ldrh	r3, [r7, #6]
 800058c:	2b01      	cmp	r3, #1
 800058e:	d147      	bne.n	8000620 <HAL_GPIO_EXTI_Callback+0xa0>
	  //uint8_t tx_fail;
	  static uint8_t rx_ready;
	  static uint8_t status;
	  static uint8_t pipeNo;
	  //static uint8_t s;
	  status = whatHappened();
 8000590:	f000 fd4d 	bl	800102e <whatHappened>
 8000594:	4603      	mov	r3, r0
 8000596:	461a      	mov	r2, r3
 8000598:	4b24      	ldr	r3, [pc, #144]	; (800062c <HAL_GPIO_EXTI_Callback+0xac>)
 800059a:	701a      	strb	r2, [r3, #0]
	  //tx_ok = status & (1 << TX_DS);
	  //tx_fail = status & (1 << MAX_RT);
	  rx_ready = status & (1 << RX_DR);
 800059c:	4b23      	ldr	r3, [pc, #140]	; (800062c <HAL_GPIO_EXTI_Callback+0xac>)
 800059e:	781b      	ldrb	r3, [r3, #0]
 80005a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80005a4:	b2da      	uxtb	r2, r3
 80005a6:	4b22      	ldr	r3, [pc, #136]	; (8000630 <HAL_GPIO_EXTI_Callback+0xb0>)
 80005a8:	701a      	strb	r2, [r3, #0]
	  if (rx_ready){
 80005aa:	4b21      	ldr	r3, [pc, #132]	; (8000630 <HAL_GPIO_EXTI_Callback+0xb0>)
 80005ac:	781b      	ldrb	r3, [r3, #0]
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	d033      	beq.n	800061a <HAL_GPIO_EXTI_Callback+0x9a>
		  while( available(&pipeNo)){              // Read all available payloads
 80005b2:	e02c      	b.n	800060e <HAL_GPIO_EXTI_Callback+0x8e>
			struct ReceivedData *pPipeData  = osPoolAlloc(pipe_pool_id);
 80005b4:	4b1f      	ldr	r3, [pc, #124]	; (8000634 <HAL_GPIO_EXTI_Callback+0xb4>)
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	4618      	mov	r0, r3
 80005ba:	f003 fb84 	bl	8003cc6 <osPoolAlloc>
 80005be:	60f8      	str	r0, [r7, #12]
			pPipeData->pipeNo = pipeNo;
 80005c0:	4b1d      	ldr	r3, [pc, #116]	; (8000638 <HAL_GPIO_EXTI_Callback+0xb8>)
 80005c2:	781a      	ldrb	r2, [r3, #0]
 80005c4:	68fb      	ldr	r3, [r7, #12]
 80005c6:	701a      	strb	r2, [r3, #0]
			status = getPayloadSize();
 80005c8:	f000 fc14 	bl	8000df4 <getPayloadSize>
 80005cc:	4603      	mov	r3, r0
 80005ce:	461a      	mov	r2, r3
 80005d0:	4b16      	ldr	r3, [pc, #88]	; (800062c <HAL_GPIO_EXTI_Callback+0xac>)
 80005d2:	701a      	strb	r2, [r3, #0]
			read( &pPipeData->data, sizeof(struct meteo_data_struct));
 80005d4:	68fb      	ldr	r3, [r7, #12]
 80005d6:	3304      	adds	r3, #4
 80005d8:	2118      	movs	r1, #24
 80005da:	4618      	mov	r0, r3
 80005dc:	f000 fd14 	bl	8001008 <read>

			writeAckPayload(pipeNo,&pipeData[pipeNo].ackData, sizeof(struct server_ack ));
 80005e0:	4b15      	ldr	r3, [pc, #84]	; (8000638 <HAL_GPIO_EXTI_Callback+0xb8>)
 80005e2:	7818      	ldrb	r0, [r3, #0]
 80005e4:	4b14      	ldr	r3, [pc, #80]	; (8000638 <HAL_GPIO_EXTI_Callback+0xb8>)
 80005e6:	781b      	ldrb	r3, [r3, #0]
 80005e8:	461a      	mov	r2, r3
 80005ea:	232c      	movs	r3, #44	; 0x2c
 80005ec:	fb03 f302 	mul.w	r3, r3, r2
 80005f0:	3310      	adds	r3, #16
 80005f2:	4a12      	ldr	r2, [pc, #72]	; (800063c <HAL_GPIO_EXTI_Callback+0xbc>)
 80005f4:	4413      	add	r3, r2
 80005f6:	3304      	adds	r3, #4
 80005f8:	2218      	movs	r2, #24
 80005fa:	4619      	mov	r1, r3
 80005fc:	f000 fe20 	bl	8001240 <writeAckPayload>
			osMessagePut(msgPipeAllocHandle, (uint32_t)pPipeData, 0);
 8000600:	4b0f      	ldr	r3, [pc, #60]	; (8000640 <HAL_GPIO_EXTI_Callback+0xc0>)
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	68f9      	ldr	r1, [r7, #12]
 8000606:	2200      	movs	r2, #0
 8000608:	4618      	mov	r0, r3
 800060a:	f003 fc27 	bl	8003e5c <osMessagePut>
		  while( available(&pipeNo)){              // Read all available payloads
 800060e:	480a      	ldr	r0, [pc, #40]	; (8000638 <HAL_GPIO_EXTI_Callback+0xb8>)
 8000610:	f000 fcd8 	bl	8000fc4 <available>
 8000614:	4603      	mov	r3, r0
 8000616:	2b00      	cmp	r3, #0
 8000618:	d1cc      	bne.n	80005b4 <HAL_GPIO_EXTI_Callback+0x34>
			}
		}
	  startListening();
 800061a:	f000 fc81 	bl	8000f20 <startListening>
  else
    {
      __NOP();

    }
}
 800061e:	e000      	b.n	8000622 <HAL_GPIO_EXTI_Callback+0xa2>
      __NOP();
 8000620:	bf00      	nop
}
 8000622:	bf00      	nop
 8000624:	3710      	adds	r7, #16
 8000626:	46bd      	mov	sp, r7
 8000628:	bd80      	pop	{r7, pc}
 800062a:	bf00      	nop
 800062c:	2000043c 	.word	0x2000043c
 8000630:	2000043d 	.word	0x2000043d
 8000634:	200013b4 	.word	0x200013b4
 8000638:	2000043e 	.word	0x2000043e
 800063c:	20001440 	.word	0x20001440
 8000640:	2000143c 	.word	0x2000143c

08000644 <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	b082      	sub	sp, #8
 8000648:	af00      	add	r7, sp, #0
 800064a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	HAL_GPIO_TogglePin(GPIOC,IND_Pin);
 800064c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000650:	4803      	ldr	r0, [pc, #12]	; (8000660 <StartDefaultTask+0x1c>)
 8000652:	f001 fc21 	bl	8001e98 <HAL_GPIO_TogglePin>
    osDelay(500);
 8000656:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800065a:	f003 fa30 	bl	8003abe <osDelay>
	HAL_GPIO_TogglePin(GPIOC,IND_Pin);
 800065e:	e7f5      	b.n	800064c <StartDefaultTask+0x8>
 8000660:	40011000 	.word	0x40011000
 8000664:	00000000 	.word	0x00000000

08000668 <StartRadio>:

/* USER CODE BEGIN Header_StartRadio */

/* USER CODE END Header_StartRadio */
void StartRadio(void const * argument)
{
 8000668:	b5f0      	push	{r4, r5, r6, r7, lr}
 800066a:	b091      	sub	sp, #68	; 0x44
 800066c:	af08      	add	r7, sp, #32
 800066e:	6178      	str	r0, [r7, #20]
  /* USER CODE BEGIN StartRadio */

	  receiver_init();
 8000670:	f000 fe99 	bl	80013a6 <receiver_init>
	  uint8_t res = isChipConnected(); // проверяет подключён ли модуль к SPI
 8000674:	f000 fc3e 	bl	8000ef4 <isChipConnected>
 8000678:	4603      	mov	r3, r0
 800067a:	77fb      	strb	r3, [r7, #31]

	  static char str[100] = {0,};
	  snprintf(str, 64, "Connected: %s\n", res ? "OK" : "NOT OK");
 800067c:	7ffb      	ldrb	r3, [r7, #31]
 800067e:	2b00      	cmp	r3, #0
 8000680:	d001      	beq.n	8000686 <StartRadio+0x1e>
 8000682:	4b6d      	ldr	r3, [pc, #436]	; (8000838 <StartRadio+0x1d0>)
 8000684:	e000      	b.n	8000688 <StartRadio+0x20>
 8000686:	4b6d      	ldr	r3, [pc, #436]	; (800083c <StartRadio+0x1d4>)
 8000688:	4a6d      	ldr	r2, [pc, #436]	; (8000840 <StartRadio+0x1d8>)
 800068a:	2140      	movs	r1, #64	; 0x40
 800068c:	486d      	ldr	r0, [pc, #436]	; (8000844 <StartRadio+0x1dc>)
 800068e:	f006 fbf7 	bl	8006e80 <sniprintf>
	  HAL_UART_Transmit(&huart1, (uint8_t*)str, strlen(str), 1000);
 8000692:	486c      	ldr	r0, [pc, #432]	; (8000844 <StartRadio+0x1dc>)
 8000694:	f7ff fd5c 	bl	8000150 <strlen>
 8000698:	4603      	mov	r3, r0
 800069a:	b29a      	uxth	r2, r3
 800069c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006a0:	4968      	ldr	r1, [pc, #416]	; (8000844 <StartRadio+0x1dc>)
 80006a2:	4869      	ldr	r0, [pc, #420]	; (8000848 <StartRadio+0x1e0>)
 80006a4:	f002 ffd3 	bl	800364e <HAL_UART_Transmit>

	  res = NRF_Init(); // инициализация
 80006a8:	f000 fbae 	bl	8000e08 <NRF_Init>
 80006ac:	4603      	mov	r3, r0
 80006ae:	77fb      	strb	r3, [r7, #31]
#if defined( SERIAL_DEBUG)
	  snprintf(str, 64, "Init: %s\n", res > 0 && res < 255 ? "OK" : "NOT OK");
 80006b0:	7ffb      	ldrb	r3, [r7, #31]
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d004      	beq.n	80006c0 <StartRadio+0x58>
 80006b6:	7ffb      	ldrb	r3, [r7, #31]
 80006b8:	2bff      	cmp	r3, #255	; 0xff
 80006ba:	d001      	beq.n	80006c0 <StartRadio+0x58>
 80006bc:	4b5e      	ldr	r3, [pc, #376]	; (8000838 <StartRadio+0x1d0>)
 80006be:	e000      	b.n	80006c2 <StartRadio+0x5a>
 80006c0:	4b5e      	ldr	r3, [pc, #376]	; (800083c <StartRadio+0x1d4>)
 80006c2:	4a62      	ldr	r2, [pc, #392]	; (800084c <StartRadio+0x1e4>)
 80006c4:	2140      	movs	r1, #64	; 0x40
 80006c6:	485f      	ldr	r0, [pc, #380]	; (8000844 <StartRadio+0x1dc>)
 80006c8:	f006 fbda 	bl	8006e80 <sniprintf>
	  HAL_UART_Transmit(&huart1, (uint8_t*)str, strlen(str), 1000);
 80006cc:	485d      	ldr	r0, [pc, #372]	; (8000844 <StartRadio+0x1dc>)
 80006ce:	f7ff fd3f 	bl	8000150 <strlen>
 80006d2:	4603      	mov	r3, r0
 80006d4:	b29a      	uxth	r2, r3
 80006d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006da:	495a      	ldr	r1, [pc, #360]	; (8000844 <StartRadio+0x1dc>)
 80006dc:	485a      	ldr	r0, [pc, #360]	; (8000848 <StartRadio+0x1e0>)
 80006de:	f002 ffb6 	bl	800364e <HAL_UART_Transmit>
#endif
	  ////////////// SET ////////////////

	  setPALevel(RF24_PA_LOW);
 80006e2:	2001      	movs	r0, #1
 80006e4:	f000 fde2 	bl	80012ac <setPALevel>
	  //uint8_t status = getPALevel();
	  //setAutoAck(false);
	  setPayloadSize(sizeof(struct meteo_data_struct));
 80006e8:	2018      	movs	r0, #24
 80006ea:	f000 fb6f 	bl	8000dcc <setPayloadSize>
	  enableDynamicPayloads();
 80006ee:	f000 fd67 	bl	80011c0 <enableDynamicPayloads>
	  enableAckPayload();
 80006f2:	f000 fd85 	bl	8001200 <enableAckPayload>
	  setChannel(106);
 80006f6:	206a      	movs	r0, #106	; 0x6a
 80006f8:	f000 fb5a 	bl	8000db0 <setChannel>
		  openWritingPipe(pipe_addresses[0]);
 80006fc:	a44a      	add	r4, pc, #296	; (adr r4, 8000828 <StartRadio+0x1c0>)
 80006fe:	e9d4 3400 	ldrd	r3, r4, [r4]
 8000702:	4618      	mov	r0, r3
 8000704:	4621      	mov	r1, r4
 8000706:	f000 fca1 	bl	800104c <openWritingPipe>
		  openReadingPipe(1,pipe_addresses[1]); //0xF0F0F0F0E1LL);
 800070a:	a449      	add	r4, pc, #292	; (adr r4, 8000830 <StartRadio+0x1c8>)
 800070c:	e9d4 3400 	ldrd	r3, r4, [r4]
 8000710:	461a      	mov	r2, r3
 8000712:	4623      	mov	r3, r4
 8000714:	2001      	movs	r0, #1
 8000716:	f000 fcbb 	bl	8001090 <openReadingPipe>
		  openReadingPipe(2,pipe_addresses[1]);
 800071a:	a445      	add	r4, pc, #276	; (adr r4, 8000830 <StartRadio+0x1c8>)
 800071c:	e9d4 3400 	ldrd	r3, r4, [r4]
 8000720:	461a      	mov	r2, r3
 8000722:	4623      	mov	r3, r4
 8000724:	2002      	movs	r0, #2
 8000726:	f000 fcb3 	bl	8001090 <openReadingPipe>
		  CreateNullAck(1);
 800072a:	2001      	movs	r0, #1
 800072c:	f000 feb8 	bl	80014a0 <CreateNullAck>
		  writeAckPayload(1,&pipeData[1].ackData, sizeof(struct server_ack ));
 8000730:	2218      	movs	r2, #24
 8000732:	4947      	ldr	r1, [pc, #284]	; (8000850 <StartRadio+0x1e8>)
 8000734:	2001      	movs	r0, #1
 8000736:	f000 fd83 	bl	8001240 <writeAckPayload>
		  CreateNullAck(2);
 800073a:	2002      	movs	r0, #2
 800073c:	f000 feb0 	bl	80014a0 <CreateNullAck>
		  writeAckPayload(2,&pipeData[2].ackData, sizeof(struct server_ack ));
 8000740:	2218      	movs	r2, #24
 8000742:	4944      	ldr	r1, [pc, #272]	; (8000854 <StartRadio+0x1ec>)
 8000744:	2002      	movs	r0, #2
 8000746:	f000 fd7b 	bl	8001240 <writeAckPayload>
		  //writeAckPayload(3,&pipeData[3].ackData, sizeof(struct server_ack ));
		  startListening();
 800074a:	f000 fbe9 	bl	8000f20 <startListening>
  for(;;)
  {
	  	//static uint8_t pipeLine;
	  	static char strT[8];

	  		event = osMessageGet(msgPipeAllocHandle, osWaitForever);
 800074e:	4b42      	ldr	r3, [pc, #264]	; (8000858 <StartRadio+0x1f0>)
 8000750:	6819      	ldr	r1, [r3, #0]
 8000752:	4c42      	ldr	r4, [pc, #264]	; (800085c <StartRadio+0x1f4>)
 8000754:	463b      	mov	r3, r7
 8000756:	f04f 32ff 	mov.w	r2, #4294967295
 800075a:	4618      	mov	r0, r3
 800075c:	f003 fbbe 	bl	8003edc <osMessageGet>
 8000760:	463b      	mov	r3, r7
 8000762:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000766:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	  		if(event.status == osEventMessage)
 800076a:	4b3c      	ldr	r3, [pc, #240]	; (800085c <StartRadio+0x1f4>)
 800076c:	681b      	ldr	r3, [r3, #0]
 800076e:	2b10      	cmp	r3, #16
 8000770:	d1ed      	bne.n	800074e <StartRadio+0xe6>
	  		{
	  			struct ReceivedData *pPipeData = event.value.p;
 8000772:	4b3a      	ldr	r3, [pc, #232]	; (800085c <StartRadio+0x1f4>)
 8000774:	685b      	ldr	r3, [r3, #4]
 8000776:	61bb      	str	r3, [r7, #24]
	  			PackDataToAck(pPipeData);
 8000778:	69b8      	ldr	r0, [r7, #24]
 800077a:	f000 fe1b 	bl	80013b4 <PackDataToAck>
#if defined( SERIAL_DEBUG)
	  			unixtimeToString( pPipeData->data.meteo_data.unixtime,(char*)&strT);
 800077e:	69bb      	ldr	r3, [r7, #24]
 8000780:	689b      	ldr	r3, [r3, #8]
 8000782:	4937      	ldr	r1, [pc, #220]	; (8000860 <StartRadio+0x1f8>)
 8000784:	4618      	mov	r0, r3
 8000786:	f000 f943 	bl	8000a10 <unixtimeToString>

	  			snprintf(str, 100, "\r\ngot: T=%i P=%i H=%i state=%i power=%i delay=%lius  time= %s Vcc=%i\r\n",
	  			pPipeData->data.meteo_data.T,
 800078a:	69bb      	ldr	r3, [r7, #24]
 800078c:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
	  			snprintf(str, 100, "\r\ngot: T=%i P=%i H=%i state=%i power=%i delay=%lius  time= %s Vcc=%i\r\n",
 8000790:	461e      	mov	r6, r3
				pPipeData->data.meteo_data.P,
 8000792:	69bb      	ldr	r3, [r7, #24]
 8000794:	89db      	ldrh	r3, [r3, #14]
	  			snprintf(str, 100, "\r\ngot: T=%i P=%i H=%i state=%i power=%i delay=%lius  time= %s Vcc=%i\r\n",
 8000796:	4619      	mov	r1, r3
				pPipeData->data.meteo_data.H,
 8000798:	69bb      	ldr	r3, [r7, #24]
 800079a:	8a1b      	ldrh	r3, [r3, #16]
	  			snprintf(str, 100, "\r\ngot: T=%i P=%i H=%i state=%i power=%i delay=%lius  time= %s Vcc=%i\r\n",
 800079c:	4618      	mov	r0, r3
				pPipeData->data.state,
 800079e:	69bb      	ldr	r3, [r7, #24]
 80007a0:	7d9b      	ldrb	r3, [r3, #22]
	  			snprintf(str, 100, "\r\ngot: T=%i P=%i H=%i state=%i power=%i delay=%lius  time= %s Vcc=%i\r\n",
 80007a2:	461c      	mov	r4, r3
				pPipeData->data.power,
 80007a4:	69bb      	ldr	r3, [r7, #24]
 80007a6:	7ddb      	ldrb	r3, [r3, #23]
	  			snprintf(str, 100, "\r\ngot: T=%i P=%i H=%i state=%i power=%i delay=%lius  time= %s Vcc=%i\r\n",
 80007a8:	461d      	mov	r5, r3
 80007aa:	69bb      	ldr	r3, [r7, #24]
 80007ac:	685b      	ldr	r3, [r3, #4]
				pPipeData->data.round_tripDelay,
				  //pPipeData->data.unixtime,
				strT,
				pPipeData->data.vcc);
 80007ae:	69ba      	ldr	r2, [r7, #24]
 80007b0:	7e12      	ldrb	r2, [r2, #24]
	  			snprintf(str, 100, "\r\ngot: T=%i P=%i H=%i state=%i power=%i delay=%lius  time= %s Vcc=%i\r\n",
 80007b2:	9206      	str	r2, [sp, #24]
 80007b4:	4a2a      	ldr	r2, [pc, #168]	; (8000860 <StartRadio+0x1f8>)
 80007b6:	9205      	str	r2, [sp, #20]
 80007b8:	9304      	str	r3, [sp, #16]
 80007ba:	9503      	str	r5, [sp, #12]
 80007bc:	9402      	str	r4, [sp, #8]
 80007be:	9001      	str	r0, [sp, #4]
 80007c0:	9100      	str	r1, [sp, #0]
 80007c2:	4633      	mov	r3, r6
 80007c4:	4a27      	ldr	r2, [pc, #156]	; (8000864 <StartRadio+0x1fc>)
 80007c6:	2164      	movs	r1, #100	; 0x64
 80007c8:	481e      	ldr	r0, [pc, #120]	; (8000844 <StartRadio+0x1dc>)
 80007ca:	f006 fb59 	bl	8006e80 <sniprintf>
#endif
	  			//ShowMessage(str);
    			osPoolFree(pipe_pool_id,pPipeData);
 80007ce:	4b26      	ldr	r3, [pc, #152]	; (8000868 <StartRadio+0x200>)
 80007d0:	681b      	ldr	r3, [r3, #0]
 80007d2:	69b9      	ldr	r1, [r7, #24]
 80007d4:	4618      	mov	r0, r3
 80007d6:	f003 fad8 	bl	8003d8a <osPoolFree>
#if defined( SERIAL_DEBUG)
	  			HAL_UART_Transmit(&huart1, (uint8_t*)str, strlen(str), 1000);
 80007da:	481a      	ldr	r0, [pc, #104]	; (8000844 <StartRadio+0x1dc>)
 80007dc:	f7ff fcb8 	bl	8000150 <strlen>
 80007e0:	4603      	mov	r3, r0
 80007e2:	b29a      	uxth	r2, r3
 80007e4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007e8:	4916      	ldr	r1, [pc, #88]	; (8000844 <StartRadio+0x1dc>)
 80007ea:	4817      	ldr	r0, [pc, #92]	; (8000848 <StartRadio+0x1e0>)
 80007ec:	f002 ff2f 	bl	800364e <HAL_UART_Transmit>
    			  unixtimeToString(unixtime,(char*)&strT);
 80007f0:	4b1e      	ldr	r3, [pc, #120]	; (800086c <StartRadio+0x204>)
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	491a      	ldr	r1, [pc, #104]	; (8000860 <StartRadio+0x1f8>)
 80007f6:	4618      	mov	r0, r3
 80007f8:	f000 f90a 	bl	8000a10 <unixtimeToString>
  	  			snprintf(str, 100, "now: time= %s\r\n",strT);
 80007fc:	4b18      	ldr	r3, [pc, #96]	; (8000860 <StartRadio+0x1f8>)
 80007fe:	4a1c      	ldr	r2, [pc, #112]	; (8000870 <StartRadio+0x208>)
 8000800:	2164      	movs	r1, #100	; 0x64
 8000802:	4810      	ldr	r0, [pc, #64]	; (8000844 <StartRadio+0x1dc>)
 8000804:	f006 fb3c 	bl	8006e80 <sniprintf>
	  			HAL_UART_Transmit(&huart1, (uint8_t*)str, strlen(str), 1000);
 8000808:	480e      	ldr	r0, [pc, #56]	; (8000844 <StartRadio+0x1dc>)
 800080a:	f7ff fca1 	bl	8000150 <strlen>
 800080e:	4603      	mov	r3, r0
 8000810:	b29a      	uxth	r2, r3
 8000812:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000816:	490b      	ldr	r1, [pc, #44]	; (8000844 <StartRadio+0x1dc>)
 8000818:	480b      	ldr	r0, [pc, #44]	; (8000848 <StartRadio+0x1e0>)
 800081a:	f002 ff18 	bl	800364e <HAL_UART_Transmit>
	  			osDelay(100);
 800081e:	2064      	movs	r0, #100	; 0x64
 8000820:	f003 f94d 	bl	8003abe <osDelay>
  {
 8000824:	e793      	b.n	800074e <StartRadio+0xe6>
 8000826:	bf00      	nop
 8000828:	f0f0f0d2 	.word	0xf0f0f0d2
 800082c:	000000f0 	.word	0x000000f0
 8000830:	f0f0f0e1 	.word	0xf0f0f0e1
 8000834:	000000f0 	.word	0x000000f0
 8000838:	08007798 	.word	0x08007798
 800083c:	0800779c 	.word	0x0800779c
 8000840:	080077a4 	.word	0x080077a4
 8000844:	20000440 	.word	0x20000440
 8000848:	200013d0 	.word	0x200013d0
 800084c:	080077b4 	.word	0x080077b4
 8000850:	20001480 	.word	0x20001480
 8000854:	200014ac 	.word	0x200014ac
 8000858:	2000143c 	.word	0x2000143c
 800085c:	200004a4 	.word	0x200004a4
 8000860:	200004b0 	.word	0x200004b0
 8000864:	080077c0 	.word	0x080077c0
 8000868:	200013b4 	.word	0x200013b4
 800086c:	20000438 	.word	0x20000438
 8000870:	08007808 	.word	0x08007808

08000874 <StartUnixTimeCounter>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartUnixTimeCounter */
void StartUnixTimeCounter(void const * argument)
{
 8000874:	b590      	push	{r4, r7, lr}
 8000876:	b089      	sub	sp, #36	; 0x24
 8000878:	af02      	add	r7, sp, #8
 800087a:	6178      	str	r0, [r7, #20]
  /* USER CODE BEGIN StartUnixTimeCounter */
	osTimerStart(osUnixTimerHandle, 1000);
 800087c:	4b39      	ldr	r3, [pc, #228]	; (8000964 <StartUnixTimeCounter+0xf0>)
 800087e:	681b      	ldr	r3, [r3, #0]
 8000880:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000884:	4618      	mov	r0, r3
 8000886:	f003 f963 	bl	8003b50 <osTimerStart>
	  static osEvent event;
	  static uint8_t strT[8];

	  unixtime = 946681200;
 800088a:	4b37      	ldr	r3, [pc, #220]	; (8000968 <StartUnixTimeCounter+0xf4>)
 800088c:	4a37      	ldr	r2, [pc, #220]	; (800096c <StartUnixTimeCounter+0xf8>)
 800088e:	601a      	str	r2, [r3, #0]
	    unixtimeToString(unixtime,(char*)&strT);
 8000890:	4b35      	ldr	r3, [pc, #212]	; (8000968 <StartUnixTimeCounter+0xf4>)
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	4936      	ldr	r1, [pc, #216]	; (8000970 <StartUnixTimeCounter+0xfc>)
 8000896:	4618      	mov	r0, r3
 8000898:	f000 f8ba 	bl	8000a10 <unixtimeToString>
#if defined( SERIAL_DEBUG)
		  static char str[100] = {0,};
		  sprintf(str, "start time: %s unixtime=%li\r\n",strT,unixtime);
 800089c:	4b32      	ldr	r3, [pc, #200]	; (8000968 <StartUnixTimeCounter+0xf4>)
 800089e:	681b      	ldr	r3, [r3, #0]
 80008a0:	4a33      	ldr	r2, [pc, #204]	; (8000970 <StartUnixTimeCounter+0xfc>)
 80008a2:	4934      	ldr	r1, [pc, #208]	; (8000974 <StartUnixTimeCounter+0x100>)
 80008a4:	4834      	ldr	r0, [pc, #208]	; (8000978 <StartUnixTimeCounter+0x104>)
 80008a6:	f006 fb1f 	bl	8006ee8 <siprintf>
		  HAL_UART_Transmit(&huart1, (uint8_t*)str, strlen(str), 1000);
 80008aa:	4833      	ldr	r0, [pc, #204]	; (8000978 <StartUnixTimeCounter+0x104>)
 80008ac:	f7ff fc50 	bl	8000150 <strlen>
 80008b0:	4603      	mov	r3, r0
 80008b2:	b29a      	uxth	r2, r3
 80008b4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008b8:	492f      	ldr	r1, [pc, #188]	; (8000978 <StartUnixTimeCounter+0x104>)
 80008ba:	4830      	ldr	r0, [pc, #192]	; (800097c <StartUnixTimeCounter+0x108>)
 80008bc:	f002 fec7 	bl	800364e <HAL_UART_Transmit>


  /* Infinite loop */
  for(;;)
  {
	  event = osMessageGet(msgUnixTimerHandle, osWaitForever);
 80008c0:	4b2f      	ldr	r3, [pc, #188]	; (8000980 <StartUnixTimeCounter+0x10c>)
 80008c2:	6819      	ldr	r1, [r3, #0]
 80008c4:	4c2f      	ldr	r4, [pc, #188]	; (8000984 <StartUnixTimeCounter+0x110>)
 80008c6:	463b      	mov	r3, r7
 80008c8:	f04f 32ff 	mov.w	r2, #4294967295
 80008cc:	4618      	mov	r0, r3
 80008ce:	f003 fb05 	bl	8003edc <osMessageGet>
 80008d2:	463b      	mov	r3, r7
 80008d4:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80008d8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	  if(event.status == osEventMessage)
 80008dc:	4b29      	ldr	r3, [pc, #164]	; (8000984 <StartUnixTimeCounter+0x110>)
 80008de:	681b      	ldr	r3, [r3, #0]
 80008e0:	2b10      	cmp	r3, #16
 80008e2:	d1ed      	bne.n	80008c0 <StartUnixTimeCounter+0x4c>
      {

		  xSemaphoreTake(unixtimeMutexHandle, portMAX_DELAY);
 80008e4:	4b28      	ldr	r3, [pc, #160]	; (8000988 <StartUnixTimeCounter+0x114>)
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	f04f 31ff 	mov.w	r1, #4294967295
 80008ec:	4618      	mov	r0, r3
 80008ee:	f004 f807 	bl	8004900 <xQueueSemaphoreTake>
		  unixtime++;
 80008f2:	4b1d      	ldr	r3, [pc, #116]	; (8000968 <StartUnixTimeCounter+0xf4>)
 80008f4:	681b      	ldr	r3, [r3, #0]
 80008f6:	3301      	adds	r3, #1
 80008f8:	4a1b      	ldr	r2, [pc, #108]	; (8000968 <StartUnixTimeCounter+0xf4>)
 80008fa:	6013      	str	r3, [r2, #0]
		  xSemaphoreGive(unixtimeMutexHandle);
 80008fc:	4b22      	ldr	r3, [pc, #136]	; (8000988 <StartUnixTimeCounter+0x114>)
 80008fe:	6818      	ldr	r0, [r3, #0]
 8000900:	2300      	movs	r3, #0
 8000902:	2200      	movs	r2, #0
 8000904:	2100      	movs	r1, #0
 8000906:	f003 fd91 	bl	800442c <xQueueGenericSend>
		  if (unixtime % 60 ==0)
 800090a:	4b17      	ldr	r3, [pc, #92]	; (8000968 <StartUnixTimeCounter+0xf4>)
 800090c:	681a      	ldr	r2, [r3, #0]
 800090e:	4b1f      	ldr	r3, [pc, #124]	; (800098c <StartUnixTimeCounter+0x118>)
 8000910:	fb83 1302 	smull	r1, r3, r3, r2
 8000914:	4413      	add	r3, r2
 8000916:	1159      	asrs	r1, r3, #5
 8000918:	17d3      	asrs	r3, r2, #31
 800091a:	1ac9      	subs	r1, r1, r3
 800091c:	460b      	mov	r3, r1
 800091e:	011b      	lsls	r3, r3, #4
 8000920:	1a5b      	subs	r3, r3, r1
 8000922:	009b      	lsls	r3, r3, #2
 8000924:	1ad1      	subs	r1, r2, r3
 8000926:	2900      	cmp	r1, #0
 8000928:	d1ca      	bne.n	80008c0 <StartUnixTimeCounter+0x4c>
		  {
		    unixtimeToString(unixtime,(char*)&strT);
 800092a:	4b0f      	ldr	r3, [pc, #60]	; (8000968 <StartUnixTimeCounter+0xf4>)
 800092c:	681b      	ldr	r3, [r3, #0]
 800092e:	4910      	ldr	r1, [pc, #64]	; (8000970 <StartUnixTimeCounter+0xfc>)
 8000930:	4618      	mov	r0, r3
 8000932:	f000 f86d 	bl	8000a10 <unixtimeToString>
#if defined( SERIAL_DEBUG)
		    sprintf(str, "\r\nserver time: %s unixtime=%li  %li\r\n\r\n",strT,unixtime,event.value.v);
 8000936:	4b0c      	ldr	r3, [pc, #48]	; (8000968 <StartUnixTimeCounter+0xf4>)
 8000938:	681a      	ldr	r2, [r3, #0]
 800093a:	4b12      	ldr	r3, [pc, #72]	; (8000984 <StartUnixTimeCounter+0x110>)
 800093c:	685b      	ldr	r3, [r3, #4]
 800093e:	9300      	str	r3, [sp, #0]
 8000940:	4613      	mov	r3, r2
 8000942:	4a0b      	ldr	r2, [pc, #44]	; (8000970 <StartUnixTimeCounter+0xfc>)
 8000944:	4912      	ldr	r1, [pc, #72]	; (8000990 <StartUnixTimeCounter+0x11c>)
 8000946:	480c      	ldr	r0, [pc, #48]	; (8000978 <StartUnixTimeCounter+0x104>)
 8000948:	f006 face 	bl	8006ee8 <siprintf>
		    HAL_UART_Transmit(&huart1, (uint8_t*)str, strlen(str), 1000);
 800094c:	480a      	ldr	r0, [pc, #40]	; (8000978 <StartUnixTimeCounter+0x104>)
 800094e:	f7ff fbff 	bl	8000150 <strlen>
 8000952:	4603      	mov	r3, r0
 8000954:	b29a      	uxth	r2, r3
 8000956:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800095a:	4907      	ldr	r1, [pc, #28]	; (8000978 <StartUnixTimeCounter+0x104>)
 800095c:	4807      	ldr	r0, [pc, #28]	; (800097c <StartUnixTimeCounter+0x108>)
 800095e:	f002 fe76 	bl	800364e <HAL_UART_Transmit>
	  event = osMessageGet(msgUnixTimerHandle, osWaitForever);
 8000962:	e7ad      	b.n	80008c0 <StartUnixTimeCounter+0x4c>
 8000964:	200013c0 	.word	0x200013c0
 8000968:	20000438 	.word	0x20000438
 800096c:	386d3570 	.word	0x386d3570
 8000970:	200004b8 	.word	0x200004b8
 8000974:	08007818 	.word	0x08007818
 8000978:	200004c0 	.word	0x200004c0
 800097c:	200013d0 	.word	0x200013d0
 8000980:	20001580 	.word	0x20001580
 8000984:	20000524 	.word	0x20000524
 8000988:	20001438 	.word	0x20001438
 800098c:	88888889 	.word	0x88888889
 8000990:	08007838 	.word	0x08007838

08000994 <CallbackUnixTimer>:
  /* USER CODE END StartUnixTimeCounter */
}

/* CallbackUnixTimer function */
void CallbackUnixTimer(void const * argument)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	b082      	sub	sp, #8
 8000998:	af00      	add	r7, sp, #0
 800099a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CallbackUnixTimer */
  static uint32_t tim = 0;
  tim++;
 800099c:	4b08      	ldr	r3, [pc, #32]	; (80009c0 <CallbackUnixTimer+0x2c>)
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	3301      	adds	r3, #1
 80009a2:	4a07      	ldr	r2, [pc, #28]	; (80009c0 <CallbackUnixTimer+0x2c>)
 80009a4:	6013      	str	r3, [r2, #0]

  osMessagePut(msgUnixTimerHandle, tim, 0);
 80009a6:	4b07      	ldr	r3, [pc, #28]	; (80009c4 <CallbackUnixTimer+0x30>)
 80009a8:	6818      	ldr	r0, [r3, #0]
 80009aa:	4b05      	ldr	r3, [pc, #20]	; (80009c0 <CallbackUnixTimer+0x2c>)
 80009ac:	681b      	ldr	r3, [r3, #0]
 80009ae:	2200      	movs	r2, #0
 80009b0:	4619      	mov	r1, r3
 80009b2:	f003 fa53 	bl	8003e5c <osMessagePut>
  xSemaphoreTake(unixtimeMutexHandle, portMAX_DELAY);
  _unixtime = tim;
  xSemaphoreGive(unixtimeMutexHandle);
  */
  /* USER CODE END CallbackUnixTimer */
}
 80009b6:	bf00      	nop
 80009b8:	3708      	adds	r7, #8
 80009ba:	46bd      	mov	sp, r7
 80009bc:	bd80      	pop	{r7, pc}
 80009be:	bf00      	nop
 80009c0:	20000530 	.word	0x20000530
 80009c4:	20001580 	.word	0x20001580

080009c8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b082      	sub	sp, #8
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	4a09      	ldr	r2, [pc, #36]	; (80009fc <HAL_TIM_PeriodElapsedCallback+0x34>)
 80009d6:	4293      	cmp	r3, r2
 80009d8:	d101      	bne.n	80009de <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80009da:	f000 ffcd 	bl	8001978 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
  if (htim->Instance == TIM2) {
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	681b      	ldr	r3, [r3, #0]
 80009e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80009e6:	d104      	bne.n	80009f2 <HAL_TIM_PeriodElapsedCallback+0x2a>
    relayDelay++;
 80009e8:	4b05      	ldr	r3, [pc, #20]	; (8000a00 <HAL_TIM_PeriodElapsedCallback+0x38>)
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	3301      	adds	r3, #1
 80009ee:	4a04      	ldr	r2, [pc, #16]	; (8000a00 <HAL_TIM_PeriodElapsedCallback+0x38>)
 80009f0:	6013      	str	r3, [r2, #0]
  }
  /* USER CODE END Callback 1 */
}
 80009f2:	bf00      	nop
 80009f4:	3708      	adds	r7, #8
 80009f6:	46bd      	mov	sp, r7
 80009f8:	bd80      	pop	{r7, pc}
 80009fa:	bf00      	nop
 80009fc:	40000800 	.word	0x40000800
 8000a00:	20001398 	.word	0x20001398

08000a04 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a04:	b480      	push	{r7}
 8000a06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000a08:	bf00      	nop
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	bc80      	pop	{r7}
 8000a0e:	4770      	bx	lr

08000a10 <unixtimeToString>:




void unixtimeToString(uint32_t unixT,char* str)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b084      	sub	sp, #16
 8000a14:	af02      	add	r7, sp, #8
 8000a16:	6078      	str	r0, [r7, #4]
 8000a18:	6039      	str	r1, [r7, #0]
    unixT -= 946681200;
 8000a1a:	687a      	ldr	r2, [r7, #4]
 8000a1c:	4b24      	ldr	r3, [pc, #144]	; (8000ab0 <unixtimeToString+0xa0>)
 8000a1e:	4413      	add	r3, r2
 8000a20:	607b      	str	r3, [r7, #4]

    static uint8_t hour;
    static uint8_t minute;
    static uint8_t second;

    second = unixT % 60;
 8000a22:	6879      	ldr	r1, [r7, #4]
 8000a24:	4b23      	ldr	r3, [pc, #140]	; (8000ab4 <unixtimeToString+0xa4>)
 8000a26:	fba3 2301 	umull	r2, r3, r3, r1
 8000a2a:	095a      	lsrs	r2, r3, #5
 8000a2c:	4613      	mov	r3, r2
 8000a2e:	011b      	lsls	r3, r3, #4
 8000a30:	1a9b      	subs	r3, r3, r2
 8000a32:	009b      	lsls	r3, r3, #2
 8000a34:	1aca      	subs	r2, r1, r3
 8000a36:	b2d2      	uxtb	r2, r2
 8000a38:	4b1f      	ldr	r3, [pc, #124]	; (8000ab8 <unixtimeToString+0xa8>)
 8000a3a:	701a      	strb	r2, [r3, #0]
    unixT /= 60;
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	4a1d      	ldr	r2, [pc, #116]	; (8000ab4 <unixtimeToString+0xa4>)
 8000a40:	fba2 2303 	umull	r2, r3, r2, r3
 8000a44:	095b      	lsrs	r3, r3, #5
 8000a46:	607b      	str	r3, [r7, #4]

    minute = unixT % 60;
 8000a48:	6879      	ldr	r1, [r7, #4]
 8000a4a:	4b1a      	ldr	r3, [pc, #104]	; (8000ab4 <unixtimeToString+0xa4>)
 8000a4c:	fba3 2301 	umull	r2, r3, r3, r1
 8000a50:	095a      	lsrs	r2, r3, #5
 8000a52:	4613      	mov	r3, r2
 8000a54:	011b      	lsls	r3, r3, #4
 8000a56:	1a9b      	subs	r3, r3, r2
 8000a58:	009b      	lsls	r3, r3, #2
 8000a5a:	1aca      	subs	r2, r1, r3
 8000a5c:	b2d2      	uxtb	r2, r2
 8000a5e:	4b17      	ldr	r3, [pc, #92]	; (8000abc <unixtimeToString+0xac>)
 8000a60:	701a      	strb	r2, [r3, #0]
    unixT /= 60;
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	4a13      	ldr	r2, [pc, #76]	; (8000ab4 <unixtimeToString+0xa4>)
 8000a66:	fba2 2303 	umull	r2, r3, r2, r3
 8000a6a:	095b      	lsrs	r3, r3, #5
 8000a6c:	607b      	str	r3, [r7, #4]

    hour = unixT % 24;
 8000a6e:	6879      	ldr	r1, [r7, #4]
 8000a70:	4b13      	ldr	r3, [pc, #76]	; (8000ac0 <unixtimeToString+0xb0>)
 8000a72:	fba3 2301 	umull	r2, r3, r3, r1
 8000a76:	091a      	lsrs	r2, r3, #4
 8000a78:	4613      	mov	r3, r2
 8000a7a:	005b      	lsls	r3, r3, #1
 8000a7c:	4413      	add	r3, r2
 8000a7e:	00db      	lsls	r3, r3, #3
 8000a80:	1aca      	subs	r2, r1, r3
 8000a82:	b2d2      	uxtb	r2, r2
 8000a84:	4b0f      	ldr	r3, [pc, #60]	; (8000ac4 <unixtimeToString+0xb4>)
 8000a86:	701a      	strb	r2, [r3, #0]

	snprintf(str,8,"%i:%i:%i",hour,minute,second);
 8000a88:	4b0e      	ldr	r3, [pc, #56]	; (8000ac4 <unixtimeToString+0xb4>)
 8000a8a:	781b      	ldrb	r3, [r3, #0]
 8000a8c:	4619      	mov	r1, r3
 8000a8e:	4b0b      	ldr	r3, [pc, #44]	; (8000abc <unixtimeToString+0xac>)
 8000a90:	781b      	ldrb	r3, [r3, #0]
 8000a92:	461a      	mov	r2, r3
 8000a94:	4b08      	ldr	r3, [pc, #32]	; (8000ab8 <unixtimeToString+0xa8>)
 8000a96:	781b      	ldrb	r3, [r3, #0]
 8000a98:	9301      	str	r3, [sp, #4]
 8000a9a:	9200      	str	r2, [sp, #0]
 8000a9c:	460b      	mov	r3, r1
 8000a9e:	4a0a      	ldr	r2, [pc, #40]	; (8000ac8 <unixtimeToString+0xb8>)
 8000aa0:	2108      	movs	r1, #8
 8000aa2:	6838      	ldr	r0, [r7, #0]
 8000aa4:	f006 f9ec 	bl	8006e80 <sniprintf>
	//Serial.println(str);
	//delay(50);
}
 8000aa8:	bf00      	nop
 8000aaa:	3708      	adds	r7, #8
 8000aac:	46bd      	mov	sp, r7
 8000aae:	bd80      	pop	{r7, pc}
 8000ab0:	c792ca90 	.word	0xc792ca90
 8000ab4:	88888889 	.word	0x88888889
 8000ab8:	20000534 	.word	0x20000534
 8000abc:	20000535 	.word	0x20000535
 8000ac0:	aaaaaaab 	.word	0xaaaaaaab
 8000ac4:	20000536 	.word	0x20000536
 8000ac8:	08007860 	.word	0x08007860

08000acc <DWT_Init>:
uint8_t addr_width = 0; /**< The address width to use - 3,4 or 5 bytes. */
uint8_t txDelay = 0;


void DWT_Init(void)
{
 8000acc:	b480      	push	{r7}
 8000ace:	af00      	add	r7, sp, #0
    SCB_DEMCR |= CoreDebug_DEMCR_TRCENA_Msk; // разрешаем использовать счётчик
 8000ad0:	4b07      	ldr	r3, [pc, #28]	; (8000af0 <DWT_Init+0x24>)
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	4a06      	ldr	r2, [pc, #24]	; (8000af0 <DWT_Init+0x24>)
 8000ad6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000ada:	6013      	str	r3, [r2, #0]
	DWT_CONTROL |= DWT_CTRL_CYCCNTENA_Msk;   // запускаем счётчик
 8000adc:	4b05      	ldr	r3, [pc, #20]	; (8000af4 <DWT_Init+0x28>)
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	4a04      	ldr	r2, [pc, #16]	; (8000af4 <DWT_Init+0x28>)
 8000ae2:	f043 0301 	orr.w	r3, r3, #1
 8000ae6:	6013      	str	r3, [r2, #0]
}
 8000ae8:	bf00      	nop
 8000aea:	46bd      	mov	sp, r7
 8000aec:	bc80      	pop	{r7}
 8000aee:	4770      	bx	lr
 8000af0:	e000edfc 	.word	0xe000edfc
 8000af4:	e0001000 	.word	0xe0001000

08000af8 <delay_us>:

void delay_us(uint32_t us) // DelayMicro
{
 8000af8:	b480      	push	{r7}
 8000afa:	b085      	sub	sp, #20
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	6078      	str	r0, [r7, #4]
    uint32_t us_count_tic =  us * (SystemCoreClock / 1000000);
 8000b00:	4b0b      	ldr	r3, [pc, #44]	; (8000b30 <delay_us+0x38>)
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	4a0b      	ldr	r2, [pc, #44]	; (8000b34 <delay_us+0x3c>)
 8000b06:	fba2 2303 	umull	r2, r3, r2, r3
 8000b0a:	0c9a      	lsrs	r2, r3, #18
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	fb02 f303 	mul.w	r3, r2, r3
 8000b12:	60fb      	str	r3, [r7, #12]
    DWT->CYCCNT = 0U; // обнуляем счётчик
 8000b14:	4b08      	ldr	r3, [pc, #32]	; (8000b38 <delay_us+0x40>)
 8000b16:	2200      	movs	r2, #0
 8000b18:	605a      	str	r2, [r3, #4]
    while(DWT->CYCCNT < us_count_tic);
 8000b1a:	bf00      	nop
 8000b1c:	4b06      	ldr	r3, [pc, #24]	; (8000b38 <delay_us+0x40>)
 8000b1e:	685b      	ldr	r3, [r3, #4]
 8000b20:	68fa      	ldr	r2, [r7, #12]
 8000b22:	429a      	cmp	r2, r3
 8000b24:	d8fa      	bhi.n	8000b1c <delay_us+0x24>
}
 8000b26:	bf00      	nop
 8000b28:	3714      	adds	r7, #20
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	bc80      	pop	{r7}
 8000b2e:	4770      	bx	lr
 8000b30:	20000000 	.word	0x20000000
 8000b34:	431bde83 	.word	0x431bde83
 8000b38:	e0001000 	.word	0xe0001000

08000b3c <csn>:

void csn(uint8_t level)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b082      	sub	sp, #8
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	4603      	mov	r3, r0
 8000b44:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(CSN_GPIO_Port, CSN_Pin, level);
 8000b46:	79fb      	ldrb	r3, [r7, #7]
 8000b48:	461a      	mov	r2, r3
 8000b4a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b4e:	4805      	ldr	r0, [pc, #20]	; (8000b64 <csn+0x28>)
 8000b50:	f001 f98a 	bl	8001e68 <HAL_GPIO_WritePin>
	delay_us(5);
 8000b54:	2005      	movs	r0, #5
 8000b56:	f7ff ffcf 	bl	8000af8 <delay_us>
}
 8000b5a:	bf00      	nop
 8000b5c:	3708      	adds	r7, #8
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	bd80      	pop	{r7, pc}
 8000b62:	bf00      	nop
 8000b64:	40010c00 	.word	0x40010c00

08000b68 <ce>:

void ce(uint8_t level)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b082      	sub	sp, #8
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	4603      	mov	r3, r0
 8000b70:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(CE_GPIO_Port, CE_Pin, level);
 8000b72:	79fb      	ldrb	r3, [r7, #7]
 8000b74:	461a      	mov	r2, r3
 8000b76:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b7a:	4803      	ldr	r0, [pc, #12]	; (8000b88 <ce+0x20>)
 8000b7c:	f001 f974 	bl	8001e68 <HAL_GPIO_WritePin>
}
 8000b80:	bf00      	nop
 8000b82:	3708      	adds	r7, #8
 8000b84:	46bd      	mov	sp, r7
 8000b86:	bd80      	pop	{r7, pc}
 8000b88:	40010c00 	.word	0x40010c00

08000b8c <read_register>:

uint8_t read_register(uint8_t reg)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b086      	sub	sp, #24
 8000b90:	af02      	add	r7, sp, #8
 8000b92:	4603      	mov	r3, r0
 8000b94:	71fb      	strb	r3, [r7, #7]
	uint8_t addr = R_REGISTER | (REGISTER_MASK & reg);
 8000b96:	79fb      	ldrb	r3, [r7, #7]
 8000b98:	f003 031f 	and.w	r3, r3, #31
 8000b9c:	b2db      	uxtb	r3, r3
 8000b9e:	73fb      	strb	r3, [r7, #15]
	uint8_t dt = 0;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	73bb      	strb	r3, [r7, #14]

	csn(LOW);
 8000ba4:	2000      	movs	r0, #0
 8000ba6:	f7ff ffc9 	bl	8000b3c <csn>
	HAL_SPI_TransmitReceive(&hspi1, &addr, &dt, 1, 1000);
 8000baa:	f107 020e 	add.w	r2, r7, #14
 8000bae:	f107 010f 	add.w	r1, r7, #15
 8000bb2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000bb6:	9300      	str	r3, [sp, #0]
 8000bb8:	2301      	movs	r3, #1
 8000bba:	480a      	ldr	r0, [pc, #40]	; (8000be4 <read_register+0x58>)
 8000bbc:	f002 f886 	bl	8002ccc <HAL_SPI_TransmitReceive>
	HAL_SPI_TransmitReceive(&hspi1, (uint8_t*)0xff, &dt, 1, 1000);
 8000bc0:	f107 020e 	add.w	r2, r7, #14
 8000bc4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000bc8:	9300      	str	r3, [sp, #0]
 8000bca:	2301      	movs	r3, #1
 8000bcc:	21ff      	movs	r1, #255	; 0xff
 8000bce:	4805      	ldr	r0, [pc, #20]	; (8000be4 <read_register+0x58>)
 8000bd0:	f002 f87c 	bl	8002ccc <HAL_SPI_TransmitReceive>
	csn(HIGH);
 8000bd4:	2001      	movs	r0, #1
 8000bd6:	f7ff ffb1 	bl	8000b3c <csn>
	return dt;
 8000bda:	7bbb      	ldrb	r3, [r7, #14]
}
 8000bdc:	4618      	mov	r0, r3
 8000bde:	3710      	adds	r7, #16
 8000be0:	46bd      	mov	sp, r7
 8000be2:	bd80      	pop	{r7, pc}
 8000be4:	20001520 	.word	0x20001520

08000be8 <write_registerMy>:

uint8_t write_registerMy(uint8_t reg, const uint8_t* buf, uint8_t len)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b086      	sub	sp, #24
 8000bec:	af02      	add	r7, sp, #8
 8000bee:	4603      	mov	r3, r0
 8000bf0:	6039      	str	r1, [r7, #0]
 8000bf2:	71fb      	strb	r3, [r7, #7]
 8000bf4:	4613      	mov	r3, r2
 8000bf6:	71bb      	strb	r3, [r7, #6]
	uint8_t status = 0;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	73fb      	strb	r3, [r7, #15]
	uint8_t addr = W_REGISTER | (REGISTER_MASK & reg);
 8000bfc:	79fb      	ldrb	r3, [r7, #7]
 8000bfe:	f003 031f 	and.w	r3, r3, #31
 8000c02:	b2db      	uxtb	r3, r3
 8000c04:	f043 0320 	orr.w	r3, r3, #32
 8000c08:	b2db      	uxtb	r3, r3
 8000c0a:	73bb      	strb	r3, [r7, #14]

	csn(LOW);
 8000c0c:	2000      	movs	r0, #0
 8000c0e:	f7ff ff95 	bl	8000b3c <csn>
	HAL_SPI_TransmitReceive(&hspi1, &addr, &status, 1, 100);
 8000c12:	f107 020f 	add.w	r2, r7, #15
 8000c16:	f107 010e 	add.w	r1, r7, #14
 8000c1a:	2364      	movs	r3, #100	; 0x64
 8000c1c:	9300      	str	r3, [sp, #0]
 8000c1e:	2301      	movs	r3, #1
 8000c20:	4808      	ldr	r0, [pc, #32]	; (8000c44 <write_registerMy+0x5c>)
 8000c22:	f002 f853 	bl	8002ccc <HAL_SPI_TransmitReceive>
	HAL_SPI_Transmit(&hspi1, (uint8_t*)buf, len, 100);
 8000c26:	79bb      	ldrb	r3, [r7, #6]
 8000c28:	b29a      	uxth	r2, r3
 8000c2a:	2364      	movs	r3, #100	; 0x64
 8000c2c:	6839      	ldr	r1, [r7, #0]
 8000c2e:	4805      	ldr	r0, [pc, #20]	; (8000c44 <write_registerMy+0x5c>)
 8000c30:	f001 fe0f 	bl	8002852 <HAL_SPI_Transmit>
	csn(HIGH);
 8000c34:	2001      	movs	r0, #1
 8000c36:	f7ff ff81 	bl	8000b3c <csn>
	return status;
 8000c3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c3c:	4618      	mov	r0, r3
 8000c3e:	3710      	adds	r7, #16
 8000c40:	46bd      	mov	sp, r7
 8000c42:	bd80      	pop	{r7, pc}
 8000c44:	20001520 	.word	0x20001520

08000c48 <write_register>:

uint8_t write_register(uint8_t reg, uint8_t value)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b086      	sub	sp, #24
 8000c4c:	af02      	add	r7, sp, #8
 8000c4e:	4603      	mov	r3, r0
 8000c50:	460a      	mov	r2, r1
 8000c52:	71fb      	strb	r3, [r7, #7]
 8000c54:	4613      	mov	r3, r2
 8000c56:	71bb      	strb	r3, [r7, #6]
	uint8_t status = 0;
 8000c58:	2300      	movs	r3, #0
 8000c5a:	73fb      	strb	r3, [r7, #15]
	uint8_t addr = W_REGISTER | (REGISTER_MASK & reg);
 8000c5c:	79fb      	ldrb	r3, [r7, #7]
 8000c5e:	f003 031f 	and.w	r3, r3, #31
 8000c62:	b2db      	uxtb	r3, r3
 8000c64:	f043 0320 	orr.w	r3, r3, #32
 8000c68:	b2db      	uxtb	r3, r3
 8000c6a:	73bb      	strb	r3, [r7, #14]
	csn(LOW);
 8000c6c:	2000      	movs	r0, #0
 8000c6e:	f7ff ff65 	bl	8000b3c <csn>
	HAL_SPI_TransmitReceive(&hspi1, &addr, &status, 1, 100);
 8000c72:	f107 020f 	add.w	r2, r7, #15
 8000c76:	f107 010e 	add.w	r1, r7, #14
 8000c7a:	2364      	movs	r3, #100	; 0x64
 8000c7c:	9300      	str	r3, [sp, #0]
 8000c7e:	2301      	movs	r3, #1
 8000c80:	4808      	ldr	r0, [pc, #32]	; (8000ca4 <write_register+0x5c>)
 8000c82:	f002 f823 	bl	8002ccc <HAL_SPI_TransmitReceive>
	HAL_SPI_Transmit(&hspi1, &value, 1, 1000);
 8000c86:	1db9      	adds	r1, r7, #6
 8000c88:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c8c:	2201      	movs	r2, #1
 8000c8e:	4805      	ldr	r0, [pc, #20]	; (8000ca4 <write_register+0x5c>)
 8000c90:	f001 fddf 	bl	8002852 <HAL_SPI_Transmit>
	csn(HIGH);
 8000c94:	2001      	movs	r0, #1
 8000c96:	f7ff ff51 	bl	8000b3c <csn>
	return status;
 8000c9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c9c:	4618      	mov	r0, r3
 8000c9e:	3710      	adds	r7, #16
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	bd80      	pop	{r7, pc}
 8000ca4:	20001520 	.word	0x20001520

08000ca8 <read_payload>:
	csn(HIGH);
	return status;
}

uint8_t read_payload(void* buf, uint8_t data_len)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b086      	sub	sp, #24
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
 8000cb0:	460b      	mov	r3, r1
 8000cb2:	70fb      	strb	r3, [r7, #3]
	uint8_t status = 0;
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	75bb      	strb	r3, [r7, #22]
	uint8_t* current = (uint8_t*)buf;
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	613b      	str	r3, [r7, #16]

	if(data_len > payload_size)
 8000cbc:	4b1e      	ldr	r3, [pc, #120]	; (8000d38 <read_payload+0x90>)
 8000cbe:	781b      	ldrb	r3, [r3, #0]
 8000cc0:	78fa      	ldrb	r2, [r7, #3]
 8000cc2:	429a      	cmp	r2, r3
 8000cc4:	d902      	bls.n	8000ccc <read_payload+0x24>
	{
		data_len = payload_size;
 8000cc6:	4b1c      	ldr	r3, [pc, #112]	; (8000d38 <read_payload+0x90>)
 8000cc8:	781b      	ldrb	r3, [r3, #0]
 8000cca:	70fb      	strb	r3, [r7, #3]
	}

	uint8_t blank_len = dynamic_payloads_enabled ? 0 : payload_size - data_len;
 8000ccc:	4b1b      	ldr	r3, [pc, #108]	; (8000d3c <read_payload+0x94>)
 8000cce:	781b      	ldrb	r3, [r3, #0]
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d001      	beq.n	8000cd8 <read_payload+0x30>
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	e004      	b.n	8000ce2 <read_payload+0x3a>
 8000cd8:	4b17      	ldr	r3, [pc, #92]	; (8000d38 <read_payload+0x90>)
 8000cda:	781a      	ldrb	r2, [r3, #0]
 8000cdc:	78fb      	ldrb	r3, [r7, #3]
 8000cde:	1ad3      	subs	r3, r2, r3
 8000ce0:	b2db      	uxtb	r3, r3
 8000ce2:	75fb      	strb	r3, [r7, #23]

	uint8_t addr = R_RX_PAYLOAD;
 8000ce4:	2361      	movs	r3, #97	; 0x61
 8000ce6:	73fb      	strb	r3, [r7, #15]
	csn(LOW);
 8000ce8:	2000      	movs	r0, #0
 8000cea:	f7ff ff27 	bl	8000b3c <csn>
	HAL_SPI_Transmit(&hspi1, &addr, 1, 100);
 8000cee:	f107 010f 	add.w	r1, r7, #15
 8000cf2:	2364      	movs	r3, #100	; 0x64
 8000cf4:	2201      	movs	r2, #1
 8000cf6:	4812      	ldr	r0, [pc, #72]	; (8000d40 <read_payload+0x98>)
 8000cf8:	f001 fdab 	bl	8002852 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi1, (uint8_t*)current, data_len, 100);
 8000cfc:	78fb      	ldrb	r3, [r7, #3]
 8000cfe:	b29a      	uxth	r2, r3
 8000d00:	2364      	movs	r3, #100	; 0x64
 8000d02:	6939      	ldr	r1, [r7, #16]
 8000d04:	480e      	ldr	r0, [pc, #56]	; (8000d40 <read_payload+0x98>)
 8000d06:	f001 fed8 	bl	8002aba <HAL_SPI_Receive>

	while(blank_len--)
 8000d0a:	e008      	b.n	8000d1e <read_payload+0x76>
	{
		uint8_t empt = 0;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	73bb      	strb	r3, [r7, #14]
		HAL_SPI_Receive(&hspi1, &empt, 1, 100);
 8000d10:	f107 010e 	add.w	r1, r7, #14
 8000d14:	2364      	movs	r3, #100	; 0x64
 8000d16:	2201      	movs	r2, #1
 8000d18:	4809      	ldr	r0, [pc, #36]	; (8000d40 <read_payload+0x98>)
 8000d1a:	f001 fece 	bl	8002aba <HAL_SPI_Receive>
	while(blank_len--)
 8000d1e:	7dfb      	ldrb	r3, [r7, #23]
 8000d20:	1e5a      	subs	r2, r3, #1
 8000d22:	75fa      	strb	r2, [r7, #23]
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d1f1      	bne.n	8000d0c <read_payload+0x64>
	}

	csn(HIGH);
 8000d28:	2001      	movs	r0, #1
 8000d2a:	f7ff ff07 	bl	8000b3c <csn>
	return status;
 8000d2e:	7dbb      	ldrb	r3, [r7, #22]
}
 8000d30:	4618      	mov	r0, r3
 8000d32:	3718      	adds	r7, #24
 8000d34:	46bd      	mov	sp, r7
 8000d36:	bd80      	pop	{r7, pc}
 8000d38:	20000537 	.word	0x20000537
 8000d3c:	20001600 	.word	0x20001600
 8000d40:	20001520 	.word	0x20001520

08000d44 <flush_rx>:

uint8_t flush_rx(void)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	af00      	add	r7, sp, #0
	return spiTrans(FLUSH_RX);
 8000d48:	20e2      	movs	r0, #226	; 0xe2
 8000d4a:	f000 f80b 	bl	8000d64 <spiTrans>
 8000d4e:	4603      	mov	r3, r0
}
 8000d50:	4618      	mov	r0, r3
 8000d52:	bd80      	pop	{r7, pc}

08000d54 <flush_tx>:

uint8_t flush_tx(void)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	af00      	add	r7, sp, #0
	return spiTrans(FLUSH_TX);
 8000d58:	20e1      	movs	r0, #225	; 0xe1
 8000d5a:	f000 f803 	bl	8000d64 <spiTrans>
 8000d5e:	4603      	mov	r3, r0
}
 8000d60:	4618      	mov	r0, r3
 8000d62:	bd80      	pop	{r7, pc}

08000d64 <spiTrans>:

uint8_t spiTrans(uint8_t cmd)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b086      	sub	sp, #24
 8000d68:	af02      	add	r7, sp, #8
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	71fb      	strb	r3, [r7, #7]
	uint8_t status = 0;
 8000d6e:	2300      	movs	r3, #0
 8000d70:	73fb      	strb	r3, [r7, #15]
	csn(LOW);
 8000d72:	2000      	movs	r0, #0
 8000d74:	f7ff fee2 	bl	8000b3c <csn>
	HAL_SPI_TransmitReceive(&hspi1, &cmd, &status, 1, 1000);
 8000d78:	f107 020f 	add.w	r2, r7, #15
 8000d7c:	1df9      	adds	r1, r7, #7
 8000d7e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d82:	9300      	str	r3, [sp, #0]
 8000d84:	2301      	movs	r3, #1
 8000d86:	4805      	ldr	r0, [pc, #20]	; (8000d9c <spiTrans+0x38>)
 8000d88:	f001 ffa0 	bl	8002ccc <HAL_SPI_TransmitReceive>
	csn(HIGH);
 8000d8c:	2001      	movs	r0, #1
 8000d8e:	f7ff fed5 	bl	8000b3c <csn>
	return status;
 8000d92:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d94:	4618      	mov	r0, r3
 8000d96:	3710      	adds	r7, #16
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	bd80      	pop	{r7, pc}
 8000d9c:	20001520 	.word	0x20001520

08000da0 <get_status>:

uint8_t get_status(void)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	af00      	add	r7, sp, #0
	return spiTrans(NOP);
 8000da4:	20ff      	movs	r0, #255	; 0xff
 8000da6:	f7ff ffdd 	bl	8000d64 <spiTrans>
 8000daa:	4603      	mov	r3, r0
}
 8000dac:	4618      	mov	r0, r3
 8000dae:	bd80      	pop	{r7, pc}

08000db0 <setChannel>:

void setChannel(uint8_t channel)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b082      	sub	sp, #8
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	4603      	mov	r3, r0
 8000db8:	71fb      	strb	r3, [r7, #7]
	write_register(RF_CH, channel);
 8000dba:	79fb      	ldrb	r3, [r7, #7]
 8000dbc:	4619      	mov	r1, r3
 8000dbe:	2005      	movs	r0, #5
 8000dc0:	f7ff ff42 	bl	8000c48 <write_register>
}
 8000dc4:	bf00      	nop
 8000dc6:	3708      	adds	r7, #8
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	bd80      	pop	{r7, pc}

08000dcc <setPayloadSize>:
{
	return read_register(RF_CH);
}

void setPayloadSize(uint8_t size)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	b083      	sub	sp, #12
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	71fb      	strb	r3, [r7, #7]
	payload_size = rf24_min(size, 32);
 8000dd6:	79fb      	ldrb	r3, [r7, #7]
 8000dd8:	2b20      	cmp	r3, #32
 8000dda:	bf28      	it	cs
 8000ddc:	2320      	movcs	r3, #32
 8000dde:	b2da      	uxtb	r2, r3
 8000de0:	4b03      	ldr	r3, [pc, #12]	; (8000df0 <setPayloadSize+0x24>)
 8000de2:	701a      	strb	r2, [r3, #0]
}
 8000de4:	bf00      	nop
 8000de6:	370c      	adds	r7, #12
 8000de8:	46bd      	mov	sp, r7
 8000dea:	bc80      	pop	{r7}
 8000dec:	4770      	bx	lr
 8000dee:	bf00      	nop
 8000df0:	20000537 	.word	0x20000537

08000df4 <getPayloadSize>:

uint8_t getPayloadSize(void)
{
 8000df4:	b480      	push	{r7}
 8000df6:	af00      	add	r7, sp, #0
	return payload_size;
 8000df8:	4b02      	ldr	r3, [pc, #8]	; (8000e04 <getPayloadSize+0x10>)
 8000dfa:	781b      	ldrb	r3, [r3, #0]
}
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	bc80      	pop	{r7}
 8000e02:	4770      	bx	lr
 8000e04:	20000537 	.word	0x20000537

08000e08 <NRF_Init>:

uint8_t NRF_Init(void)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b082      	sub	sp, #8
 8000e0c:	af00      	add	r7, sp, #0
	uint8_t setup = 0;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	71fb      	strb	r3, [r7, #7]
	p_variant = false;
 8000e12:	4b33      	ldr	r3, [pc, #204]	; (8000ee0 <NRF_Init+0xd8>)
 8000e14:	2200      	movs	r2, #0
 8000e16:	701a      	strb	r2, [r3, #0]
	payload_size = 32;
 8000e18:	4b32      	ldr	r3, [pc, #200]	; (8000ee4 <NRF_Init+0xdc>)
 8000e1a:	2220      	movs	r2, #32
 8000e1c:	701a      	strb	r2, [r3, #0]
	dynamic_payloads_enabled = false;
 8000e1e:	4b32      	ldr	r3, [pc, #200]	; (8000ee8 <NRF_Init+0xe0>)
 8000e20:	2200      	movs	r2, #0
 8000e22:	701a      	strb	r2, [r3, #0]
	addr_width = 5;
 8000e24:	4b31      	ldr	r3, [pc, #196]	; (8000eec <NRF_Init+0xe4>)
 8000e26:	2205      	movs	r2, #5
 8000e28:	701a      	strb	r2, [r3, #0]
	pipe0_reading_address[0] = 0;
 8000e2a:	4b31      	ldr	r3, [pc, #196]	; (8000ef0 <NRF_Init+0xe8>)
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	701a      	strb	r2, [r3, #0]

	ce(LOW);
 8000e30:	2000      	movs	r0, #0
 8000e32:	f7ff fe99 	bl	8000b68 <ce>
	csn(HIGH);
 8000e36:	2001      	movs	r0, #1
 8000e38:	f7ff fe80 	bl	8000b3c <csn>
	HAL_Delay(5);
 8000e3c:	2005      	movs	r0, #5
 8000e3e:	f000 fdb7 	bl	80019b0 <HAL_Delay>

	write_register(NRF_CONFIG, 0x0C); // Reset NRF_CONFIG and enable 16-bit CRC.
 8000e42:	210c      	movs	r1, #12
 8000e44:	2000      	movs	r0, #0
 8000e46:	f7ff feff 	bl	8000c48 <write_register>
	setRetries(5, 15);
 8000e4a:	210f      	movs	r1, #15
 8000e4c:	2005      	movs	r0, #5
 8000e4e:	f000 fa8f 	bl	8001370 <setRetries>
	setPALevel(RF24_PA_MAX); // Reset value is MAX
 8000e52:	2003      	movs	r0, #3
 8000e54:	f000 fa2a 	bl	80012ac <setPALevel>

	if(setDataRate(RF24_250KBPS)) // check for connected module and if this is a p nRF24l01 variant
 8000e58:	2002      	movs	r0, #2
 8000e5a:	f000 fa49 	bl	80012f0 <setDataRate>
 8000e5e:	4603      	mov	r3, r0
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d002      	beq.n	8000e6a <NRF_Init+0x62>
	{
		p_variant = true;
 8000e64:	4b1e      	ldr	r3, [pc, #120]	; (8000ee0 <NRF_Init+0xd8>)
 8000e66:	2201      	movs	r2, #1
 8000e68:	701a      	strb	r2, [r3, #0]
	}

	setup = read_register(RF_SETUP);
 8000e6a:	2006      	movs	r0, #6
 8000e6c:	f7ff fe8e 	bl	8000b8c <read_register>
 8000e70:	4603      	mov	r3, r0
 8000e72:	71fb      	strb	r3, [r7, #7]
	setDataRate(RF24_1MBPS); // Then set the data rate to the slowest (and most reliable) speed supported by all hardware.
 8000e74:	2000      	movs	r0, #0
 8000e76:	f000 fa3b 	bl	80012f0 <setDataRate>

	// Disable dynamic payloads, to match dynamic_payloads_enabled setting - Reset value is 0
	toggle_features();
 8000e7a:	f000 f981 	bl	8001180 <toggle_features>
	write_register(FEATURE, 0);
 8000e7e:	2100      	movs	r1, #0
 8000e80:	201d      	movs	r0, #29
 8000e82:	f7ff fee1 	bl	8000c48 <write_register>
	write_register(DYNPD, 0);
 8000e86:	2100      	movs	r1, #0
 8000e88:	201c      	movs	r0, #28
 8000e8a:	f7ff fedd 	bl	8000c48 <write_register>
	dynamic_payloads_enabled = false;
 8000e8e:	4b16      	ldr	r3, [pc, #88]	; (8000ee8 <NRF_Init+0xe0>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	701a      	strb	r2, [r3, #0]

	// Reset current status. Notice reset and flush is the last thing we do
	write_register(NRF_STATUS, (1 << RX_DR) | (1 << TX_DS) | (1 << MAX_RT));
 8000e94:	2170      	movs	r1, #112	; 0x70
 8000e96:	2007      	movs	r0, #7
 8000e98:	f7ff fed6 	bl	8000c48 <write_register>
	setChannel(76);
 8000e9c:	204c      	movs	r0, #76	; 0x4c
 8000e9e:	f7ff ff87 	bl	8000db0 <setChannel>
	flush_rx();
 8000ea2:	f7ff ff4f 	bl	8000d44 <flush_rx>
	flush_tx();
 8000ea6:	f7ff ff55 	bl	8000d54 <flush_tx>
	powerUp(); //Power up by default when begin() is called
 8000eaa:	f000 f86f 	bl	8000f8c <powerUp>
	write_register(NRF_CONFIG, (read_register(NRF_CONFIG)) & ~(1 << PRIM_RX));
 8000eae:	2000      	movs	r0, #0
 8000eb0:	f7ff fe6c 	bl	8000b8c <read_register>
 8000eb4:	4603      	mov	r3, r0
 8000eb6:	f023 0301 	bic.w	r3, r3, #1
 8000eba:	b2db      	uxtb	r3, r3
 8000ebc:	4619      	mov	r1, r3
 8000ebe:	2000      	movs	r0, #0
 8000ec0:	f7ff fec2 	bl	8000c48 <write_register>
	return (setup != 0 && setup != 0xff);
 8000ec4:	79fb      	ldrb	r3, [r7, #7]
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d004      	beq.n	8000ed4 <NRF_Init+0xcc>
 8000eca:	79fb      	ldrb	r3, [r7, #7]
 8000ecc:	2bff      	cmp	r3, #255	; 0xff
 8000ece:	d001      	beq.n	8000ed4 <NRF_Init+0xcc>
 8000ed0:	2301      	movs	r3, #1
 8000ed2:	e000      	b.n	8000ed6 <NRF_Init+0xce>
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	b2db      	uxtb	r3, r3
}
 8000ed8:	4618      	mov	r0, r3
 8000eda:	3708      	adds	r7, #8
 8000edc:	46bd      	mov	sp, r7
 8000ede:	bd80      	pop	{r7, pc}
 8000ee0:	20001601 	.word	0x20001601
 8000ee4:	20000537 	.word	0x20000537
 8000ee8:	20001600 	.word	0x20001600
 8000eec:	2000053d 	.word	0x2000053d
 8000ef0:	20000538 	.word	0x20000538

08000ef4 <isChipConnected>:

bool isChipConnected()
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b082      	sub	sp, #8
 8000ef8:	af00      	add	r7, sp, #0
	uint8_t setup = read_register(SETUP_AW);
 8000efa:	2003      	movs	r0, #3
 8000efc:	f7ff fe46 	bl	8000b8c <read_register>
 8000f00:	4603      	mov	r3, r0
 8000f02:	71fb      	strb	r3, [r7, #7]

	if(setup >= 1 && setup <= 3)
 8000f04:	79fb      	ldrb	r3, [r7, #7]
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d004      	beq.n	8000f14 <isChipConnected+0x20>
 8000f0a:	79fb      	ldrb	r3, [r7, #7]
 8000f0c:	2b03      	cmp	r3, #3
 8000f0e:	d801      	bhi.n	8000f14 <isChipConnected+0x20>
	{
		return true;
 8000f10:	2301      	movs	r3, #1
 8000f12:	e000      	b.n	8000f16 <isChipConnected+0x22>
	}

	return false;
 8000f14:	2300      	movs	r3, #0
}
 8000f16:	4618      	mov	r0, r3
 8000f18:	3708      	adds	r7, #8
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bd80      	pop	{r7, pc}
	...

08000f20 <startListening>:

void startListening(void)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	af00      	add	r7, sp, #0
	powerUp();
 8000f24:	f000 f832 	bl	8000f8c <powerUp>

	write_register(NRF_CONFIG, read_register(NRF_CONFIG) | (1 << PRIM_RX));
 8000f28:	2000      	movs	r0, #0
 8000f2a:	f7ff fe2f 	bl	8000b8c <read_register>
 8000f2e:	4603      	mov	r3, r0
 8000f30:	f043 0301 	orr.w	r3, r3, #1
 8000f34:	b2db      	uxtb	r3, r3
 8000f36:	4619      	mov	r1, r3
 8000f38:	2000      	movs	r0, #0
 8000f3a:	f7ff fe85 	bl	8000c48 <write_register>
	write_register(NRF_STATUS, (1 << RX_DR) | (1 << TX_DS) | (1 << MAX_RT));
 8000f3e:	2170      	movs	r1, #112	; 0x70
 8000f40:	2007      	movs	r0, #7
 8000f42:	f7ff fe81 	bl	8000c48 <write_register>
	ce(HIGH);
 8000f46:	2001      	movs	r0, #1
 8000f48:	f7ff fe0e 	bl	8000b68 <ce>
	// Restore the pipe0 adddress, if exists
	if(pipe0_reading_address[0] > 0)
 8000f4c:	4b0d      	ldr	r3, [pc, #52]	; (8000f84 <startListening+0x64>)
 8000f4e:	781b      	ldrb	r3, [r3, #0]
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d007      	beq.n	8000f64 <startListening+0x44>
	{
		write_registerMy(RX_ADDR_P0, pipe0_reading_address, addr_width);
 8000f54:	4b0c      	ldr	r3, [pc, #48]	; (8000f88 <startListening+0x68>)
 8000f56:	781b      	ldrb	r3, [r3, #0]
 8000f58:	461a      	mov	r2, r3
 8000f5a:	490a      	ldr	r1, [pc, #40]	; (8000f84 <startListening+0x64>)
 8000f5c:	200a      	movs	r0, #10
 8000f5e:	f7ff fe43 	bl	8000be8 <write_registerMy>
 8000f62:	e002      	b.n	8000f6a <startListening+0x4a>
	}
	else
	{
		closeReadingPipe(0);
 8000f64:	2000      	movs	r0, #0
 8000f66:	f000 f8eb 	bl	8001140 <closeReadingPipe>
	}

	if(read_register(FEATURE) & (1 << EN_ACK_PAY))
 8000f6a:	201d      	movs	r0, #29
 8000f6c:	f7ff fe0e 	bl	8000b8c <read_register>
 8000f70:	4603      	mov	r3, r0
 8000f72:	f003 0302 	and.w	r3, r3, #2
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d001      	beq.n	8000f7e <startListening+0x5e>
	{
		flush_tx();
 8000f7a:	f7ff feeb 	bl	8000d54 <flush_tx>
	}
}
 8000f7e:	bf00      	nop
 8000f80:	bd80      	pop	{r7, pc}
 8000f82:	bf00      	nop
 8000f84:	20000538 	.word	0x20000538
 8000f88:	2000053d 	.word	0x2000053d

08000f8c <powerUp>:
	write_register(NRF_CONFIG, read_register(NRF_CONFIG) & ~(1 << PWR_UP));
}

//Power up now. Radio will not power down unless instructed by MCU for config changes etc.
void powerUp(void)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b082      	sub	sp, #8
 8000f90:	af00      	add	r7, sp, #0
	uint8_t cfg = read_register(NRF_CONFIG);
 8000f92:	2000      	movs	r0, #0
 8000f94:	f7ff fdfa 	bl	8000b8c <read_register>
 8000f98:	4603      	mov	r3, r0
 8000f9a:	71fb      	strb	r3, [r7, #7]
	// if not powered up then power up and wait for the radio to initialize
	if(!(cfg & (1 << PWR_UP)))
 8000f9c:	79fb      	ldrb	r3, [r7, #7]
 8000f9e:	f003 0302 	and.w	r3, r3, #2
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d10a      	bne.n	8000fbc <powerUp+0x30>
	{
		write_register(NRF_CONFIG, cfg | (1 << PWR_UP));
 8000fa6:	79fb      	ldrb	r3, [r7, #7]
 8000fa8:	f043 0302 	orr.w	r3, r3, #2
 8000fac:	b2db      	uxtb	r3, r3
 8000fae:	4619      	mov	r1, r3
 8000fb0:	2000      	movs	r0, #0
 8000fb2:	f7ff fe49 	bl	8000c48 <write_register>
		HAL_Delay(5);
 8000fb6:	2005      	movs	r0, #5
 8000fb8:	f000 fcfa 	bl	80019b0 <HAL_Delay>
	}
}
 8000fbc:	bf00      	nop
 8000fbe:	3708      	adds	r7, #8
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	bd80      	pop	{r7, pc}

08000fc4 <available>:
{
	return available(NULL);
}

bool available(uint8_t* pipe_num)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b084      	sub	sp, #16
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
	if(!(read_register(FIFO_STATUS) & (1 << RX_EMPTY)))
 8000fcc:	2017      	movs	r0, #23
 8000fce:	f7ff fddd 	bl	8000b8c <read_register>
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	f003 0301 	and.w	r3, r3, #1
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d110      	bne.n	8000ffe <available+0x3a>
	{
		if(pipe_num) // If the caller wants the pipe number, include that
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d00b      	beq.n	8000ffa <available+0x36>
		{
			uint8_t status = get_status();
 8000fe2:	f7ff fedd 	bl	8000da0 <get_status>
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	73fb      	strb	r3, [r7, #15]
			*pipe_num = (status >> RX_P_NO) & 0x07;
 8000fea:	7bfb      	ldrb	r3, [r7, #15]
 8000fec:	085b      	lsrs	r3, r3, #1
 8000fee:	b2db      	uxtb	r3, r3
 8000ff0:	f003 0307 	and.w	r3, r3, #7
 8000ff4:	b2da      	uxtb	r2, r3
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	701a      	strb	r2, [r3, #0]
		}

		return 1;
 8000ffa:	2301      	movs	r3, #1
 8000ffc:	e000      	b.n	8001000 <available+0x3c>
	}

	return 0;
 8000ffe:	2300      	movs	r3, #0
}
 8001000:	4618      	mov	r0, r3
 8001002:	3710      	adds	r7, #16
 8001004:	46bd      	mov	sp, r7
 8001006:	bd80      	pop	{r7, pc}

08001008 <read>:

void read(void* buf, uint8_t len)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b082      	sub	sp, #8
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
 8001010:	460b      	mov	r3, r1
 8001012:	70fb      	strb	r3, [r7, #3]
	read_payload(buf, len);
 8001014:	78fb      	ldrb	r3, [r7, #3]
 8001016:	4619      	mov	r1, r3
 8001018:	6878      	ldr	r0, [r7, #4]
 800101a:	f7ff fe45 	bl	8000ca8 <read_payload>
	write_register(NRF_STATUS, (1 << RX_DR) | (1 << MAX_RT) | (1 << TX_DS));
 800101e:	2170      	movs	r1, #112	; 0x70
 8001020:	2007      	movs	r0, #7
 8001022:	f7ff fe11 	bl	8000c48 <write_register>
}
 8001026:	bf00      	nop
 8001028:	3708      	adds	r7, #8
 800102a:	46bd      	mov	sp, r7
 800102c:	bd80      	pop	{r7, pc}

0800102e <whatHappened>:


uint8_t whatHappened()
{
 800102e:	b580      	push	{r7, lr}
 8001030:	b082      	sub	sp, #8
 8001032:	af00      	add	r7, sp, #0
	uint8_t status = write_register(NRF_STATUS, (1 << RX_DR) | (1 << TX_DS) | (1 << MAX_RT));
 8001034:	2170      	movs	r1, #112	; 0x70
 8001036:	2007      	movs	r0, #7
 8001038:	f7ff fe06 	bl	8000c48 <write_register>
 800103c:	4603      	mov	r3, r0
 800103e:	71fb      	strb	r3, [r7, #7]
	/*uint8_t tx_ok = status & (1 << TX_DS);
	uint8_t tx_fail = status & (1 << MAX_RT);
	uint8_t rx_ready = status & (1 << RX_DR);*/
	return status;
 8001040:	79fb      	ldrb	r3, [r7, #7]
}
 8001042:	4618      	mov	r0, r3
 8001044:	3708      	adds	r7, #8
 8001046:	46bd      	mov	sp, r7
 8001048:	bd80      	pop	{r7, pc}
	...

0800104c <openWritingPipe>:

void openWritingPipe(uint64_t value)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b082      	sub	sp, #8
 8001050:	af00      	add	r7, sp, #0
 8001052:	e9c7 0100 	strd	r0, r1, [r7]
	write_registerMy(RX_ADDR_P0, (uint8_t*)&value, addr_width);
 8001056:	4b0c      	ldr	r3, [pc, #48]	; (8001088 <openWritingPipe+0x3c>)
 8001058:	781a      	ldrb	r2, [r3, #0]
 800105a:	463b      	mov	r3, r7
 800105c:	4619      	mov	r1, r3
 800105e:	200a      	movs	r0, #10
 8001060:	f7ff fdc2 	bl	8000be8 <write_registerMy>
	write_registerMy(TX_ADDR, (uint8_t*)&value, addr_width);
 8001064:	4b08      	ldr	r3, [pc, #32]	; (8001088 <openWritingPipe+0x3c>)
 8001066:	781a      	ldrb	r2, [r3, #0]
 8001068:	463b      	mov	r3, r7
 800106a:	4619      	mov	r1, r3
 800106c:	2010      	movs	r0, #16
 800106e:	f7ff fdbb 	bl	8000be8 <write_registerMy>
	write_register(RX_PW_P0, payload_size);
 8001072:	4b06      	ldr	r3, [pc, #24]	; (800108c <openWritingPipe+0x40>)
 8001074:	781b      	ldrb	r3, [r3, #0]
 8001076:	4619      	mov	r1, r3
 8001078:	2011      	movs	r0, #17
 800107a:	f7ff fde5 	bl	8000c48 <write_register>
}
 800107e:	bf00      	nop
 8001080:	3708      	adds	r7, #8
 8001082:	46bd      	mov	sp, r7
 8001084:	bd80      	pop	{r7, pc}
 8001086:	bf00      	nop
 8001088:	2000053d 	.word	0x2000053d
 800108c:	20000537 	.word	0x20000537

08001090 <openReadingPipe>:

static const uint8_t child_payload_size[] = {RX_PW_P0, RX_PW_P1, RX_PW_P2, RX_PW_P3, RX_PW_P4, RX_PW_P5};


void openReadingPipe(uint8_t child, uint64_t address)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b084      	sub	sp, #16
 8001094:	af00      	add	r7, sp, #0
 8001096:	4601      	mov	r1, r0
 8001098:	e9c7 2300 	strd	r2, r3, [r7]
 800109c:	460b      	mov	r3, r1
 800109e:	73fb      	strb	r3, [r7, #15]
	if(child == 0)
 80010a0:	7bfb      	ldrb	r3, [r7, #15]
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d107      	bne.n	80010b6 <openReadingPipe+0x26>
	{
		memcpy(pipe0_reading_address, &address, addr_width);
 80010a6:	4b20      	ldr	r3, [pc, #128]	; (8001128 <openReadingPipe+0x98>)
 80010a8:	781b      	ldrb	r3, [r3, #0]
 80010aa:	461a      	mov	r2, r3
 80010ac:	463b      	mov	r3, r7
 80010ae:	4619      	mov	r1, r3
 80010b0:	481e      	ldr	r0, [pc, #120]	; (800112c <openReadingPipe+0x9c>)
 80010b2:	f005 fed1 	bl	8006e58 <memcpy>
	}

	if(child <= 6)
 80010b6:	7bfb      	ldrb	r3, [r7, #15]
 80010b8:	2b06      	cmp	r3, #6
 80010ba:	d830      	bhi.n	800111e <openReadingPipe+0x8e>
	{
		// For pipes 2-5, only write the LSB
		if(child < 2)
 80010bc:	7bfb      	ldrb	r3, [r7, #15]
 80010be:	2b01      	cmp	r3, #1
 80010c0:	d809      	bhi.n	80010d6 <openReadingPipe+0x46>
		  write_registerMy(child_pipe[child], (const uint8_t*)&address, addr_width);
 80010c2:	7bfb      	ldrb	r3, [r7, #15]
 80010c4:	4a1a      	ldr	r2, [pc, #104]	; (8001130 <openReadingPipe+0xa0>)
 80010c6:	5cd0      	ldrb	r0, [r2, r3]
 80010c8:	4b17      	ldr	r3, [pc, #92]	; (8001128 <openReadingPipe+0x98>)
 80010ca:	781a      	ldrb	r2, [r3, #0]
 80010cc:	463b      	mov	r3, r7
 80010ce:	4619      	mov	r1, r3
 80010d0:	f7ff fd8a 	bl	8000be8 <write_registerMy>
 80010d4:	e007      	b.n	80010e6 <openReadingPipe+0x56>
		else
		  write_registerMy(child_pipe[child], (const uint8_t*)&address, 1);
 80010d6:	7bfb      	ldrb	r3, [r7, #15]
 80010d8:	4a15      	ldr	r2, [pc, #84]	; (8001130 <openReadingPipe+0xa0>)
 80010da:	5cd3      	ldrb	r3, [r2, r3]
 80010dc:	4639      	mov	r1, r7
 80010de:	2201      	movs	r2, #1
 80010e0:	4618      	mov	r0, r3
 80010e2:	f7ff fd81 	bl	8000be8 <write_registerMy>

		write_register(child_payload_size[child], payload_size);
 80010e6:	7bfb      	ldrb	r3, [r7, #15]
 80010e8:	4a12      	ldr	r2, [pc, #72]	; (8001134 <openReadingPipe+0xa4>)
 80010ea:	5cd2      	ldrb	r2, [r2, r3]
 80010ec:	4b12      	ldr	r3, [pc, #72]	; (8001138 <openReadingPipe+0xa8>)
 80010ee:	781b      	ldrb	r3, [r3, #0]
 80010f0:	4619      	mov	r1, r3
 80010f2:	4610      	mov	r0, r2
 80010f4:	f7ff fda8 	bl	8000c48 <write_register>
		write_register(EN_RXADDR, read_register(EN_RXADDR) | (1 << child_pipe_enable[child]));
 80010f8:	2002      	movs	r0, #2
 80010fa:	f7ff fd47 	bl	8000b8c <read_register>
 80010fe:	4603      	mov	r3, r0
 8001100:	b25a      	sxtb	r2, r3
 8001102:	7bfb      	ldrb	r3, [r7, #15]
 8001104:	490d      	ldr	r1, [pc, #52]	; (800113c <openReadingPipe+0xac>)
 8001106:	5ccb      	ldrb	r3, [r1, r3]
 8001108:	4619      	mov	r1, r3
 800110a:	2301      	movs	r3, #1
 800110c:	408b      	lsls	r3, r1
 800110e:	b25b      	sxtb	r3, r3
 8001110:	4313      	orrs	r3, r2
 8001112:	b25b      	sxtb	r3, r3
 8001114:	b2db      	uxtb	r3, r3
 8001116:	4619      	mov	r1, r3
 8001118:	2002      	movs	r0, #2
 800111a:	f7ff fd95 	bl	8000c48 <write_register>
	}
}
 800111e:	bf00      	nop
 8001120:	3710      	adds	r7, #16
 8001122:	46bd      	mov	sp, r7
 8001124:	bd80      	pop	{r7, pc}
 8001126:	bf00      	nop
 8001128:	2000053d 	.word	0x2000053d
 800112c:	20000538 	.word	0x20000538
 8001130:	080078b0 	.word	0x080078b0
 8001134:	080078b8 	.word	0x080078b8
 8001138:	20000537 	.word	0x20000537
 800113c:	080078a8 	.word	0x080078a8

08001140 <closeReadingPipe>:
        addr_width = 2;
    }
}

void closeReadingPipe(uint8_t pipe)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b082      	sub	sp, #8
 8001144:	af00      	add	r7, sp, #0
 8001146:	4603      	mov	r3, r0
 8001148:	71fb      	strb	r3, [r7, #7]
	write_register(EN_RXADDR, read_register(EN_RXADDR) & ~(1 << child_pipe_enable[pipe]));
 800114a:	2002      	movs	r0, #2
 800114c:	f7ff fd1e 	bl	8000b8c <read_register>
 8001150:	4603      	mov	r3, r0
 8001152:	b25a      	sxtb	r2, r3
 8001154:	79fb      	ldrb	r3, [r7, #7]
 8001156:	4909      	ldr	r1, [pc, #36]	; (800117c <closeReadingPipe+0x3c>)
 8001158:	5ccb      	ldrb	r3, [r1, r3]
 800115a:	4619      	mov	r1, r3
 800115c:	2301      	movs	r3, #1
 800115e:	408b      	lsls	r3, r1
 8001160:	b25b      	sxtb	r3, r3
 8001162:	43db      	mvns	r3, r3
 8001164:	b25b      	sxtb	r3, r3
 8001166:	4013      	ands	r3, r2
 8001168:	b25b      	sxtb	r3, r3
 800116a:	b2db      	uxtb	r3, r3
 800116c:	4619      	mov	r1, r3
 800116e:	2002      	movs	r0, #2
 8001170:	f7ff fd6a 	bl	8000c48 <write_register>
}
 8001174:	bf00      	nop
 8001176:	3708      	adds	r7, #8
 8001178:	46bd      	mov	sp, r7
 800117a:	bd80      	pop	{r7, pc}
 800117c:	080078a8 	.word	0x080078a8

08001180 <toggle_features>:

void toggle_features(void)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b082      	sub	sp, #8
 8001184:	af00      	add	r7, sp, #0
	uint8_t addr = ACTIVATE;
 8001186:	2350      	movs	r3, #80	; 0x50
 8001188:	71fb      	strb	r3, [r7, #7]
	csn(LOW);
 800118a:	2000      	movs	r0, #0
 800118c:	f7ff fcd6 	bl	8000b3c <csn>
	HAL_SPI_Transmit(&hspi1, &addr, 1, 1000);
 8001190:	1df9      	adds	r1, r7, #7
 8001192:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001196:	2201      	movs	r2, #1
 8001198:	4808      	ldr	r0, [pc, #32]	; (80011bc <toggle_features+0x3c>)
 800119a:	f001 fb5a 	bl	8002852 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi1, (uint8_t*)0x73, 1, 1000);
 800119e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011a2:	2201      	movs	r2, #1
 80011a4:	2173      	movs	r1, #115	; 0x73
 80011a6:	4805      	ldr	r0, [pc, #20]	; (80011bc <toggle_features+0x3c>)
 80011a8:	f001 fb53 	bl	8002852 <HAL_SPI_Transmit>
	csn(HIGH);
 80011ac:	2001      	movs	r0, #1
 80011ae:	f7ff fcc5 	bl	8000b3c <csn>
}
 80011b2:	bf00      	nop
 80011b4:	3708      	adds	r7, #8
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bd80      	pop	{r7, pc}
 80011ba:	bf00      	nop
 80011bc:	20001520 	.word	0x20001520

080011c0 <enableDynamicPayloads>:

void enableDynamicPayloads(void)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	af00      	add	r7, sp, #0
	write_register(FEATURE, read_register(FEATURE) | (1 << EN_DPL));
 80011c4:	201d      	movs	r0, #29
 80011c6:	f7ff fce1 	bl	8000b8c <read_register>
 80011ca:	4603      	mov	r3, r0
 80011cc:	f043 0304 	orr.w	r3, r3, #4
 80011d0:	b2db      	uxtb	r3, r3
 80011d2:	4619      	mov	r1, r3
 80011d4:	201d      	movs	r0, #29
 80011d6:	f7ff fd37 	bl	8000c48 <write_register>
	write_register(DYNPD, read_register(DYNPD) | (1 << DPL_P5) | (1 << DPL_P4) | (1 << DPL_P3) | (1 << DPL_P2) | (1 << DPL_P1) | (1 << DPL_P0));
 80011da:	201c      	movs	r0, #28
 80011dc:	f7ff fcd6 	bl	8000b8c <read_register>
 80011e0:	4603      	mov	r3, r0
 80011e2:	f043 033f 	orr.w	r3, r3, #63	; 0x3f
 80011e6:	b2db      	uxtb	r3, r3
 80011e8:	4619      	mov	r1, r3
 80011ea:	201c      	movs	r0, #28
 80011ec:	f7ff fd2c 	bl	8000c48 <write_register>
	dynamic_payloads_enabled = true;
 80011f0:	4b02      	ldr	r3, [pc, #8]	; (80011fc <enableDynamicPayloads+0x3c>)
 80011f2:	2201      	movs	r2, #1
 80011f4:	701a      	strb	r2, [r3, #0]
}
 80011f6:	bf00      	nop
 80011f8:	bd80      	pop	{r7, pc}
 80011fa:	bf00      	nop
 80011fc:	20001600 	.word	0x20001600

08001200 <enableAckPayload>:
	write_register(DYNPD, 0);
	dynamic_payloads_enabled = false;
}

void enableAckPayload(void)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	af00      	add	r7, sp, #0
	write_register(FEATURE, read_register(FEATURE) | (1 << EN_ACK_PAY) | (1 << EN_DPL));
 8001204:	201d      	movs	r0, #29
 8001206:	f7ff fcc1 	bl	8000b8c <read_register>
 800120a:	4603      	mov	r3, r0
 800120c:	f043 0306 	orr.w	r3, r3, #6
 8001210:	b2db      	uxtb	r3, r3
 8001212:	4619      	mov	r1, r3
 8001214:	201d      	movs	r0, #29
 8001216:	f7ff fd17 	bl	8000c48 <write_register>
	write_register(DYNPD, read_register(DYNPD) | (1 << DPL_P1) | (1 << DPL_P0));
 800121a:	201c      	movs	r0, #28
 800121c:	f7ff fcb6 	bl	8000b8c <read_register>
 8001220:	4603      	mov	r3, r0
 8001222:	f043 0303 	orr.w	r3, r3, #3
 8001226:	b2db      	uxtb	r3, r3
 8001228:	4619      	mov	r1, r3
 800122a:	201c      	movs	r0, #28
 800122c:	f7ff fd0c 	bl	8000c48 <write_register>
	dynamic_payloads_enabled = true;
 8001230:	4b02      	ldr	r3, [pc, #8]	; (800123c <enableAckPayload+0x3c>)
 8001232:	2201      	movs	r2, #1
 8001234:	701a      	strb	r2, [r3, #0]
}
 8001236:	bf00      	nop
 8001238:	bd80      	pop	{r7, pc}
 800123a:	bf00      	nop
 800123c:	20001600 	.word	0x20001600

08001240 <writeAckPayload>:
{
    write_register(FEATURE, read_register(FEATURE) | (1 << EN_DYN_ACK));
}

void writeAckPayload(uint8_t pipe, const void* buf, uint8_t len)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b084      	sub	sp, #16
 8001244:	af00      	add	r7, sp, #0
 8001246:	4603      	mov	r3, r0
 8001248:	6039      	str	r1, [r7, #0]
 800124a:	71fb      	strb	r3, [r7, #7]
 800124c:	4613      	mov	r3, r2
 800124e:	71bb      	strb	r3, [r7, #6]
	const uint8_t* current = (const uint8_t*)buf;
 8001250:	683b      	ldr	r3, [r7, #0]
 8001252:	60fb      	str	r3, [r7, #12]
	uint8_t data_len = rf24_min(len, 32);
 8001254:	79bb      	ldrb	r3, [r7, #6]
 8001256:	2b20      	cmp	r3, #32
 8001258:	bf28      	it	cs
 800125a:	2320      	movcs	r3, #32
 800125c:	72fb      	strb	r3, [r7, #11]
	uint8_t addr = W_ACK_PAYLOAD | (pipe & 0x07);
 800125e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001262:	f003 0307 	and.w	r3, r3, #7
 8001266:	b25b      	sxtb	r3, r3
 8001268:	f063 0357 	orn	r3, r3, #87	; 0x57
 800126c:	b25b      	sxtb	r3, r3
 800126e:	b2db      	uxtb	r3, r3
 8001270:	72bb      	strb	r3, [r7, #10]
	csn(LOW);
 8001272:	2000      	movs	r0, #0
 8001274:	f7ff fc62 	bl	8000b3c <csn>
	HAL_SPI_Transmit(&hspi1, &addr, 1, 1000);
 8001278:	f107 010a 	add.w	r1, r7, #10
 800127c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001280:	2201      	movs	r2, #1
 8001282:	4809      	ldr	r0, [pc, #36]	; (80012a8 <writeAckPayload+0x68>)
 8001284:	f001 fae5 	bl	8002852 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi1, (uint8_t*)current, data_len, 1000);
 8001288:	7afb      	ldrb	r3, [r7, #11]
 800128a:	b29a      	uxth	r2, r3
 800128c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001290:	68f9      	ldr	r1, [r7, #12]
 8001292:	4805      	ldr	r0, [pc, #20]	; (80012a8 <writeAckPayload+0x68>)
 8001294:	f001 fadd 	bl	8002852 <HAL_SPI_Transmit>
	csn(HIGH);
 8001298:	2001      	movs	r0, #1
 800129a:	f7ff fc4f 	bl	8000b3c <csn>
}
 800129e:	bf00      	nop
 80012a0:	3710      	adds	r7, #16
 80012a2:	46bd      	mov	sp, r7
 80012a4:	bd80      	pop	{r7, pc}
 80012a6:	bf00      	nop
 80012a8:	20001520 	.word	0x20001520

080012ac <setPALevel>:
		write_register(EN_AA, en_aa);
	}
}

void setPALevel(uint8_t level)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b084      	sub	sp, #16
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	4603      	mov	r3, r0
 80012b4:	71fb      	strb	r3, [r7, #7]
  uint8_t setup = read_register(RF_SETUP) & 0xF8;
 80012b6:	2006      	movs	r0, #6
 80012b8:	f7ff fc68 	bl	8000b8c <read_register>
 80012bc:	4603      	mov	r3, r0
 80012be:	f023 0307 	bic.w	r3, r3, #7
 80012c2:	73fb      	strb	r3, [r7, #15]

  if(level > 3) // If invalid level, go to max PA
 80012c4:	79fb      	ldrb	r3, [r7, #7]
 80012c6:	2b03      	cmp	r3, #3
 80012c8:	d902      	bls.n	80012d0 <setPALevel+0x24>
  {
	  level = (RF24_PA_MAX << 1) | (RF24_PA_LOW << 1);		// +1 to support the SI24R1 chip extra bit
 80012ca:	2306      	movs	r3, #6
 80012cc:	71fb      	strb	r3, [r7, #7]
 80012ce:	e002      	b.n	80012d6 <setPALevel+0x2a>
  }
  else
  {
	  level = (level << 1);	 		// Else set level as requested
 80012d0:	79fb      	ldrb	r3, [r7, #7]
 80012d2:	005b      	lsls	r3, r3, #1
 80012d4:	71fb      	strb	r3, [r7, #7]
  }

  write_register(RF_SETUP, setup |= level);	// Write it to the chip
 80012d6:	7bfa      	ldrb	r2, [r7, #15]
 80012d8:	79fb      	ldrb	r3, [r7, #7]
 80012da:	4313      	orrs	r3, r2
 80012dc:	73fb      	strb	r3, [r7, #15]
 80012de:	7bfb      	ldrb	r3, [r7, #15]
 80012e0:	4619      	mov	r1, r3
 80012e2:	2006      	movs	r0, #6
 80012e4:	f7ff fcb0 	bl	8000c48 <write_register>
}
 80012e8:	bf00      	nop
 80012ea:	3710      	adds	r7, #16
 80012ec:	46bd      	mov	sp, r7
 80012ee:	bd80      	pop	{r7, pc}

080012f0 <setDataRate>:
{
	return (read_register(RF_SETUP) & ((1 << RF24_PA_LOW) | (1 << RF24_PA_HIGH))) >> 1;
}

bool setDataRate(rf24_datarate_e speed)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b084      	sub	sp, #16
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	4603      	mov	r3, r0
 80012f8:	71fb      	strb	r3, [r7, #7]
	bool result = false;
 80012fa:	2300      	movs	r3, #0
 80012fc:	73fb      	strb	r3, [r7, #15]
	uint8_t setup = read_register(RF_SETUP);
 80012fe:	2006      	movs	r0, #6
 8001300:	f7ff fc44 	bl	8000b8c <read_register>
 8001304:	4603      	mov	r3, r0
 8001306:	73bb      	strb	r3, [r7, #14]
	setup &= ~((1 << RF_DR_LOW) | (1 << RF_DR_HIGH));
 8001308:	7bbb      	ldrb	r3, [r7, #14]
 800130a:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 800130e:	73bb      	strb	r3, [r7, #14]
	txDelay = 85;
 8001310:	4b16      	ldr	r3, [pc, #88]	; (800136c <setDataRate+0x7c>)
 8001312:	2255      	movs	r2, #85	; 0x55
 8001314:	701a      	strb	r2, [r3, #0]

	if(speed == RF24_250KBPS)
 8001316:	79fb      	ldrb	r3, [r7, #7]
 8001318:	2b02      	cmp	r3, #2
 800131a:	d107      	bne.n	800132c <setDataRate+0x3c>
	{
		setup |= (1 << RF_DR_LOW);
 800131c:	7bbb      	ldrb	r3, [r7, #14]
 800131e:	f043 0320 	orr.w	r3, r3, #32
 8001322:	73bb      	strb	r3, [r7, #14]
		txDelay = 155;
 8001324:	4b11      	ldr	r3, [pc, #68]	; (800136c <setDataRate+0x7c>)
 8001326:	229b      	movs	r2, #155	; 0x9b
 8001328:	701a      	strb	r2, [r3, #0]
 800132a:	e009      	b.n	8001340 <setDataRate+0x50>
	}
	else
	{
		if(speed == RF24_2MBPS)
 800132c:	79fb      	ldrb	r3, [r7, #7]
 800132e:	2b01      	cmp	r3, #1
 8001330:	d106      	bne.n	8001340 <setDataRate+0x50>
		{
			setup |= (1 << RF_DR_HIGH);
 8001332:	7bbb      	ldrb	r3, [r7, #14]
 8001334:	f043 0308 	orr.w	r3, r3, #8
 8001338:	73bb      	strb	r3, [r7, #14]
			txDelay = 65;
 800133a:	4b0c      	ldr	r3, [pc, #48]	; (800136c <setDataRate+0x7c>)
 800133c:	2241      	movs	r2, #65	; 0x41
 800133e:	701a      	strb	r2, [r3, #0]
		}
	}

	write_register(RF_SETUP, setup);
 8001340:	7bbb      	ldrb	r3, [r7, #14]
 8001342:	4619      	mov	r1, r3
 8001344:	2006      	movs	r0, #6
 8001346:	f7ff fc7f 	bl	8000c48 <write_register>
	uint8_t ggg = read_register(RF_SETUP);
 800134a:	2006      	movs	r0, #6
 800134c:	f7ff fc1e 	bl	8000b8c <read_register>
 8001350:	4603      	mov	r3, r0
 8001352:	737b      	strb	r3, [r7, #13]

	if(ggg == setup)
 8001354:	7b7a      	ldrb	r2, [r7, #13]
 8001356:	7bbb      	ldrb	r3, [r7, #14]
 8001358:	429a      	cmp	r2, r3
 800135a:	d101      	bne.n	8001360 <setDataRate+0x70>
	{
		result = true;
 800135c:	2301      	movs	r3, #1
 800135e:	73fb      	strb	r3, [r7, #15]
	}

	return result;
 8001360:	7bfb      	ldrb	r3, [r7, #15]
}
 8001362:	4618      	mov	r0, r3
 8001364:	3710      	adds	r7, #16
 8001366:	46bd      	mov	sp, r7
 8001368:	bd80      	pop	{r7, pc}
 800136a:	bf00      	nop
 800136c:	2000053e 	.word	0x2000053e

08001370 <setRetries>:
	uint8_t disable = read_register(NRF_CONFIG) & ~(1 << EN_CRC);
	write_register(NRF_CONFIG, disable);
}

void setRetries(uint8_t delay, uint8_t count)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b082      	sub	sp, #8
 8001374:	af00      	add	r7, sp, #0
 8001376:	4603      	mov	r3, r0
 8001378:	460a      	mov	r2, r1
 800137a:	71fb      	strb	r3, [r7, #7]
 800137c:	4613      	mov	r3, r2
 800137e:	71bb      	strb	r3, [r7, #6]
	write_register(SETUP_RETR, (delay&0xf)<<ARD | (count&0xf)<<ARC);
 8001380:	79fb      	ldrb	r3, [r7, #7]
 8001382:	011b      	lsls	r3, r3, #4
 8001384:	b25a      	sxtb	r2, r3
 8001386:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800138a:	f003 030f 	and.w	r3, r3, #15
 800138e:	b25b      	sxtb	r3, r3
 8001390:	4313      	orrs	r3, r2
 8001392:	b25b      	sxtb	r3, r3
 8001394:	b2db      	uxtb	r3, r3
 8001396:	4619      	mov	r1, r3
 8001398:	2004      	movs	r0, #4
 800139a:	f7ff fc55 	bl	8000c48 <write_register>
}
 800139e:	bf00      	nop
 80013a0:	3708      	adds	r7, #8
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bd80      	pop	{r7, pc}

080013a6 <receiver_init>:
 *      Author: sbaya
 */
#include "receiver.h"
#include "meteo_home.h"

void receiver_init(){
 80013a6:	b480      	push	{r7}
 80013a8:	af00      	add	r7, sp, #0

}
 80013aa:	bf00      	nop
 80013ac:	46bd      	mov	sp, r7
 80013ae:	bc80      	pop	{r7}
 80013b0:	4770      	bx	lr
	...

080013b4 <PackDataToAck>:
void PackDataToAck(struct ReceivedData *pPipeData)
{
 80013b4:	b590      	push	{r4, r7, lr}
 80013b6:	b083      	sub	sp, #12
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
	switch(pPipeData->data.type_of_data)
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	7d5b      	ldrb	r3, [r3, #21]
 80013c0:	2b03      	cmp	r3, #3
 80013c2:	d833      	bhi.n	800142c <PackDataToAck+0x78>
 80013c4:	a201      	add	r2, pc, #4	; (adr r2, 80013cc <PackDataToAck+0x18>)
 80013c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013ca:	bf00      	nop
 80013cc:	080013dd 	.word	0x080013dd
 80013d0:	080013e9 	.word	0x080013e9
 80013d4:	08001405 	.word	0x08001405
 80013d8:	08001421 	.word	0x08001421
	{
	case data_null :
		CreateNullAck(pPipeData->pipeNo);
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	781b      	ldrb	r3, [r3, #0]
 80013e0:	4618      	mov	r0, r3
 80013e2:	f000 f85d 	bl	80014a0 <CreateNullAck>
		break;
 80013e6:	e021      	b.n	800142c <PackDataToAck+0x78>
	case data_meteoOutDoor :
		meteoOutDoor=pPipeData->data.meteo_data;
 80013e8:	4a2a      	ldr	r2, [pc, #168]	; (8001494 <PackDataToAck+0xe0>)
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	4614      	mov	r4, r2
 80013ee:	3308      	adds	r3, #8
 80013f0:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80013f4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
		CreateNullAck(pPipeData->pipeNo);
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	781b      	ldrb	r3, [r3, #0]
 80013fc:	4618      	mov	r0, r3
 80013fe:	f000 f84f 	bl	80014a0 <CreateNullAck>
		break;
 8001402:	e013      	b.n	800142c <PackDataToAck+0x78>
	case data_meteoInDoor :
		meteoOutDoor=pPipeData->data.meteo_data;
 8001404:	4a23      	ldr	r2, [pc, #140]	; (8001494 <PackDataToAck+0xe0>)
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	4614      	mov	r4, r2
 800140a:	3308      	adds	r3, #8
 800140c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001410:	e884 0007 	stmia.w	r4, {r0, r1, r2}
		CreateNullAck(pPipeData->pipeNo);
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	781b      	ldrb	r3, [r3, #0]
 8001418:	4618      	mov	r0, r3
 800141a:	f000 f841 	bl	80014a0 <CreateNullAck>
		break;
 800141e:	e005      	b.n	800142c <PackDataToAck+0x78>
	case exactly_time:
		CreateNullAck(pPipeData->pipeNo);
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	781b      	ldrb	r3, [r3, #0]
 8001424:	4618      	mov	r0, r3
 8001426:	f000 f83b 	bl	80014a0 <CreateNullAck>
		break;
 800142a:	bf00      	nop
	}
	switch(pPipeData->data.query)
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	7d1b      	ldrb	r3, [r3, #20]
 8001430:	2b03      	cmp	r3, #3
 8001432:	d82a      	bhi.n	800148a <PackDataToAck+0xd6>
 8001434:	a201      	add	r2, pc, #4	; (adr r2, 800143c <PackDataToAck+0x88>)
 8001436:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800143a:	bf00      	nop
 800143c:	08001489 	.word	0x08001489
 8001440:	08001489 	.word	0x08001489
 8001444:	0800144d 	.word	0x0800144d
 8001448:	0800146b 	.word	0x0800146b
	case none_q:
		break;
	case get_time:
		break;
	case get_meteoOutDoor:
		pipeData[pPipeData->pipeNo].ackData.meteo_data = meteoOutDoor;
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	781b      	ldrb	r3, [r3, #0]
 8001450:	4619      	mov	r1, r3
 8001452:	4a11      	ldr	r2, [pc, #68]	; (8001498 <PackDataToAck+0xe4>)
 8001454:	232c      	movs	r3, #44	; 0x2c
 8001456:	fb03 f301 	mul.w	r3, r3, r1
 800145a:	4413      	add	r3, r2
 800145c:	3310      	adds	r3, #16
 800145e:	4a0d      	ldr	r2, [pc, #52]	; (8001494 <PackDataToAck+0xe0>)
 8001460:	3308      	adds	r3, #8
 8001462:	ca07      	ldmia	r2, {r0, r1, r2}
 8001464:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		break;
 8001468:	e00f      	b.n	800148a <PackDataToAck+0xd6>
	case get_meteoInDoor:
		pipeData[pPipeData->pipeNo].ackData.meteo_data = meteoInDoor;
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	781b      	ldrb	r3, [r3, #0]
 800146e:	4619      	mov	r1, r3
 8001470:	4a09      	ldr	r2, [pc, #36]	; (8001498 <PackDataToAck+0xe4>)
 8001472:	232c      	movs	r3, #44	; 0x2c
 8001474:	fb03 f301 	mul.w	r3, r3, r1
 8001478:	4413      	add	r3, r2
 800147a:	3310      	adds	r3, #16
 800147c:	4a07      	ldr	r2, [pc, #28]	; (800149c <PackDataToAck+0xe8>)
 800147e:	3308      	adds	r3, #8
 8001480:	ca07      	ldmia	r2, {r0, r1, r2}
 8001482:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		break;
 8001486:	e000      	b.n	800148a <PackDataToAck+0xd6>
		break;
 8001488:	bf00      	nop
	}
}
 800148a:	bf00      	nop
 800148c:	370c      	adds	r7, #12
 800148e:	46bd      	mov	sp, r7
 8001490:	bd90      	pop	{r4, r7, pc}
 8001492:	bf00      	nop
 8001494:	20001414 	.word	0x20001414
 8001498:	20001440 	.word	0x20001440
 800149c:	2000139c 	.word	0x2000139c

080014a0 <CreateNullAck>:
void CreateNullAck(const uint8_t pipeNo)
{
 80014a0:	b480      	push	{r7}
 80014a2:	b083      	sub	sp, #12
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	4603      	mov	r3, r0
 80014a8:	71fb      	strb	r3, [r7, #7]
	pipeData[pipeNo].ackData.time_interval = -1; //задержка перед следующей передачей
 80014aa:	79fb      	ldrb	r3, [r7, #7]
 80014ac:	4a37      	ldr	r2, [pc, #220]	; (800158c <CreateNullAck+0xec>)
 80014ae:	212c      	movs	r1, #44	; 0x2c
 80014b0:	fb01 f303 	mul.w	r3, r1, r3
 80014b4:	4413      	add	r3, r2
 80014b6:	3314      	adds	r3, #20
 80014b8:	f04f 32ff 	mov.w	r2, #4294967295
 80014bc:	601a      	str	r2, [r3, #0]
	pipeData[pipeNo].ackData.meteo_data.unixtime=unixtime;
 80014be:	4b34      	ldr	r3, [pc, #208]	; (8001590 <CreateNullAck+0xf0>)
 80014c0:	681a      	ldr	r2, [r3, #0]
 80014c2:	79fb      	ldrb	r3, [r7, #7]
 80014c4:	4610      	mov	r0, r2
 80014c6:	4a31      	ldr	r2, [pc, #196]	; (800158c <CreateNullAck+0xec>)
 80014c8:	212c      	movs	r1, #44	; 0x2c
 80014ca:	fb01 f303 	mul.w	r3, r1, r3
 80014ce:	4413      	add	r3, r2
 80014d0:	3318      	adds	r3, #24
 80014d2:	6018      	str	r0, [r3, #0]
	pipeData[pipeNo].ackData.meteo_data.T =0;
 80014d4:	79fb      	ldrb	r3, [r7, #7]
 80014d6:	4a2d      	ldr	r2, [pc, #180]	; (800158c <CreateNullAck+0xec>)
 80014d8:	212c      	movs	r1, #44	; 0x2c
 80014da:	fb01 f303 	mul.w	r3, r1, r3
 80014de:	4413      	add	r3, r2
 80014e0:	331c      	adds	r3, #28
 80014e2:	2200      	movs	r2, #0
 80014e4:	801a      	strh	r2, [r3, #0]
	pipeData[pipeNo].ackData.meteo_data.P = 0;
 80014e6:	79fb      	ldrb	r3, [r7, #7]
 80014e8:	4a28      	ldr	r2, [pc, #160]	; (800158c <CreateNullAck+0xec>)
 80014ea:	212c      	movs	r1, #44	; 0x2c
 80014ec:	fb01 f303 	mul.w	r3, r1, r3
 80014f0:	4413      	add	r3, r2
 80014f2:	331e      	adds	r3, #30
 80014f4:	2200      	movs	r2, #0
 80014f6:	801a      	strh	r2, [r3, #0]
	pipeData[pipeNo].ackData.meteo_data.H = 0;
 80014f8:	79fb      	ldrb	r3, [r7, #7]
 80014fa:	4a24      	ldr	r2, [pc, #144]	; (800158c <CreateNullAck+0xec>)
 80014fc:	212c      	movs	r1, #44	; 0x2c
 80014fe:	fb01 f303 	mul.w	r3, r1, r3
 8001502:	4413      	add	r3, r2
 8001504:	3320      	adds	r3, #32
 8001506:	2200      	movs	r2, #0
 8001508:	801a      	strh	r2, [r3, #0]
	pipeData[pipeNo].ackData.meteo_data.CO2 = 0;
 800150a:	79fb      	ldrb	r3, [r7, #7]
 800150c:	4a1f      	ldr	r2, [pc, #124]	; (800158c <CreateNullAck+0xec>)
 800150e:	212c      	movs	r1, #44	; 0x2c
 8001510:	fb01 f303 	mul.w	r3, r1, r3
 8001514:	4413      	add	r3, r2
 8001516:	3322      	adds	r3, #34	; 0x22
 8001518:	2200      	movs	r2, #0
 800151a:	801a      	strh	r2, [r3, #0]
	pipeData[pipeNo].ackData.ack_query = none_q;
 800151c:	79fb      	ldrb	r3, [r7, #7]
 800151e:	4a1b      	ldr	r2, [pc, #108]	; (800158c <CreateNullAck+0xec>)
 8001520:	212c      	movs	r1, #44	; 0x2c
 8001522:	fb01 f303 	mul.w	r3, r1, r3
 8001526:	4413      	add	r3, r2
 8001528:	3325      	adds	r3, #37	; 0x25
 800152a:	2200      	movs	r2, #0
 800152c:	701a      	strb	r2, [r3, #0]
	pipeData[pipeNo].ackData.command=none_command;
 800152e:	79fb      	ldrb	r3, [r7, #7]
 8001530:	4a16      	ldr	r2, [pc, #88]	; (800158c <CreateNullAck+0xec>)
 8001532:	212c      	movs	r1, #44	; 0x2c
 8001534:	fb01 f303 	mul.w	r3, r1, r3
 8001538:	4413      	add	r3, r2
 800153a:	3324      	adds	r3, #36	; 0x24
 800153c:	2200      	movs	r2, #0
 800153e:	701a      	strb	r2, [r3, #0]
	pipeData[pipeNo].ackData.channel=current_channel;
 8001540:	79fb      	ldrb	r3, [r7, #7]
 8001542:	4a14      	ldr	r2, [pc, #80]	; (8001594 <CreateNullAck+0xf4>)
 8001544:	7810      	ldrb	r0, [r2, #0]
 8001546:	4a11      	ldr	r2, [pc, #68]	; (800158c <CreateNullAck+0xec>)
 8001548:	212c      	movs	r1, #44	; 0x2c
 800154a:	fb01 f303 	mul.w	r3, r1, r3
 800154e:	4413      	add	r3, r2
 8001550:	3326      	adds	r3, #38	; 0x26
 8001552:	4602      	mov	r2, r0
 8001554:	701a      	strb	r2, [r3, #0]
	pipeData[pipeNo].ackData.data_rate=current_data_rate;
 8001556:	79fb      	ldrb	r3, [r7, #7]
 8001558:	4a0f      	ldr	r2, [pc, #60]	; (8001598 <CreateNullAck+0xf8>)
 800155a:	7810      	ldrb	r0, [r2, #0]
 800155c:	4a0b      	ldr	r2, [pc, #44]	; (800158c <CreateNullAck+0xec>)
 800155e:	212c      	movs	r1, #44	; 0x2c
 8001560:	fb01 f303 	mul.w	r3, r1, r3
 8001564:	4413      	add	r3, r2
 8001566:	3327      	adds	r3, #39	; 0x27
 8001568:	4602      	mov	r2, r0
 800156a:	701a      	strb	r2, [r3, #0]
	pipeData[pipeNo].ackData.power=current_power;
 800156c:	79fb      	ldrb	r3, [r7, #7]
 800156e:	4a0b      	ldr	r2, [pc, #44]	; (800159c <CreateNullAck+0xfc>)
 8001570:	7810      	ldrb	r0, [r2, #0]
 8001572:	4a06      	ldr	r2, [pc, #24]	; (800158c <CreateNullAck+0xec>)
 8001574:	212c      	movs	r1, #44	; 0x2c
 8001576:	fb01 f303 	mul.w	r3, r1, r3
 800157a:	4413      	add	r3, r2
 800157c:	3328      	adds	r3, #40	; 0x28
 800157e:	4602      	mov	r2, r0
 8001580:	701a      	strb	r2, [r3, #0]
	}
 8001582:	bf00      	nop
 8001584:	370c      	adds	r7, #12
 8001586:	46bd      	mov	sp, r7
 8001588:	bc80      	pop	{r7}
 800158a:	4770      	bx	lr
 800158c:	20001440 	.word	0x20001440
 8001590:	20000540 	.word	0x20000540
 8001594:	20001435 	.word	0x20001435
 8001598:	200013ac 	.word	0x200013ac
 800159c:	200013b8 	.word	0x200013b8

080015a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b084      	sub	sp, #16
 80015a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80015a6:	4b18      	ldr	r3, [pc, #96]	; (8001608 <HAL_MspInit+0x68>)
 80015a8:	699b      	ldr	r3, [r3, #24]
 80015aa:	4a17      	ldr	r2, [pc, #92]	; (8001608 <HAL_MspInit+0x68>)
 80015ac:	f043 0301 	orr.w	r3, r3, #1
 80015b0:	6193      	str	r3, [r2, #24]
 80015b2:	4b15      	ldr	r3, [pc, #84]	; (8001608 <HAL_MspInit+0x68>)
 80015b4:	699b      	ldr	r3, [r3, #24]
 80015b6:	f003 0301 	and.w	r3, r3, #1
 80015ba:	60bb      	str	r3, [r7, #8]
 80015bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80015be:	4b12      	ldr	r3, [pc, #72]	; (8001608 <HAL_MspInit+0x68>)
 80015c0:	69db      	ldr	r3, [r3, #28]
 80015c2:	4a11      	ldr	r2, [pc, #68]	; (8001608 <HAL_MspInit+0x68>)
 80015c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015c8:	61d3      	str	r3, [r2, #28]
 80015ca:	4b0f      	ldr	r3, [pc, #60]	; (8001608 <HAL_MspInit+0x68>)
 80015cc:	69db      	ldr	r3, [r3, #28]
 80015ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015d2:	607b      	str	r3, [r7, #4]
 80015d4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80015d6:	2200      	movs	r2, #0
 80015d8:	210f      	movs	r1, #15
 80015da:	f06f 0001 	mvn.w	r0, #1
 80015de:	f000 fabe 	bl	8001b5e <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80015e2:	4b0a      	ldr	r3, [pc, #40]	; (800160c <HAL_MspInit+0x6c>)
 80015e4:	685b      	ldr	r3, [r3, #4]
 80015e6:	60fb      	str	r3, [r7, #12]
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80015ee:	60fb      	str	r3, [r7, #12]
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80015f6:	60fb      	str	r3, [r7, #12]
 80015f8:	4a04      	ldr	r2, [pc, #16]	; (800160c <HAL_MspInit+0x6c>)
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015fe:	bf00      	nop
 8001600:	3710      	adds	r7, #16
 8001602:	46bd      	mov	sp, r7
 8001604:	bd80      	pop	{r7, pc}
 8001606:	bf00      	nop
 8001608:	40021000 	.word	0x40021000
 800160c:	40010000 	.word	0x40010000

08001610 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b088      	sub	sp, #32
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001618:	f107 0310 	add.w	r3, r7, #16
 800161c:	2200      	movs	r2, #0
 800161e:	601a      	str	r2, [r3, #0]
 8001620:	605a      	str	r2, [r3, #4]
 8001622:	609a      	str	r2, [r3, #8]
 8001624:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	4a1b      	ldr	r2, [pc, #108]	; (8001698 <HAL_SPI_MspInit+0x88>)
 800162c:	4293      	cmp	r3, r2
 800162e:	d12f      	bne.n	8001690 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001630:	4b1a      	ldr	r3, [pc, #104]	; (800169c <HAL_SPI_MspInit+0x8c>)
 8001632:	699b      	ldr	r3, [r3, #24]
 8001634:	4a19      	ldr	r2, [pc, #100]	; (800169c <HAL_SPI_MspInit+0x8c>)
 8001636:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800163a:	6193      	str	r3, [r2, #24]
 800163c:	4b17      	ldr	r3, [pc, #92]	; (800169c <HAL_SPI_MspInit+0x8c>)
 800163e:	699b      	ldr	r3, [r3, #24]
 8001640:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001644:	60fb      	str	r3, [r7, #12]
 8001646:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001648:	4b14      	ldr	r3, [pc, #80]	; (800169c <HAL_SPI_MspInit+0x8c>)
 800164a:	699b      	ldr	r3, [r3, #24]
 800164c:	4a13      	ldr	r2, [pc, #76]	; (800169c <HAL_SPI_MspInit+0x8c>)
 800164e:	f043 0304 	orr.w	r3, r3, #4
 8001652:	6193      	str	r3, [r2, #24]
 8001654:	4b11      	ldr	r3, [pc, #68]	; (800169c <HAL_SPI_MspInit+0x8c>)
 8001656:	699b      	ldr	r3, [r3, #24]
 8001658:	f003 0304 	and.w	r3, r3, #4
 800165c:	60bb      	str	r3, [r7, #8]
 800165e:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001660:	23a0      	movs	r3, #160	; 0xa0
 8001662:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001664:	2302      	movs	r3, #2
 8001666:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001668:	2303      	movs	r3, #3
 800166a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800166c:	f107 0310 	add.w	r3, r7, #16
 8001670:	4619      	mov	r1, r3
 8001672:	480b      	ldr	r0, [pc, #44]	; (80016a0 <HAL_SPI_MspInit+0x90>)
 8001674:	f000 fa9e 	bl	8001bb4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001678:	2340      	movs	r3, #64	; 0x40
 800167a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800167c:	2300      	movs	r3, #0
 800167e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001680:	2300      	movs	r3, #0
 8001682:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001684:	f107 0310 	add.w	r3, r7, #16
 8001688:	4619      	mov	r1, r3
 800168a:	4805      	ldr	r0, [pc, #20]	; (80016a0 <HAL_SPI_MspInit+0x90>)
 800168c:	f000 fa92 	bl	8001bb4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001690:	bf00      	nop
 8001692:	3720      	adds	r7, #32
 8001694:	46bd      	mov	sp, r7
 8001696:	bd80      	pop	{r7, pc}
 8001698:	40013000 	.word	0x40013000
 800169c:	40021000 	.word	0x40021000
 80016a0:	40010800 	.word	0x40010800

080016a4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b088      	sub	sp, #32
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016ac:	f107 0310 	add.w	r3, r7, #16
 80016b0:	2200      	movs	r2, #0
 80016b2:	601a      	str	r2, [r3, #0]
 80016b4:	605a      	str	r2, [r3, #4]
 80016b6:	609a      	str	r2, [r3, #8]
 80016b8:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	4a1c      	ldr	r2, [pc, #112]	; (8001730 <HAL_UART_MspInit+0x8c>)
 80016c0:	4293      	cmp	r3, r2
 80016c2:	d131      	bne.n	8001728 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80016c4:	4b1b      	ldr	r3, [pc, #108]	; (8001734 <HAL_UART_MspInit+0x90>)
 80016c6:	699b      	ldr	r3, [r3, #24]
 80016c8:	4a1a      	ldr	r2, [pc, #104]	; (8001734 <HAL_UART_MspInit+0x90>)
 80016ca:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016ce:	6193      	str	r3, [r2, #24]
 80016d0:	4b18      	ldr	r3, [pc, #96]	; (8001734 <HAL_UART_MspInit+0x90>)
 80016d2:	699b      	ldr	r3, [r3, #24]
 80016d4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80016d8:	60fb      	str	r3, [r7, #12]
 80016da:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016dc:	4b15      	ldr	r3, [pc, #84]	; (8001734 <HAL_UART_MspInit+0x90>)
 80016de:	699b      	ldr	r3, [r3, #24]
 80016e0:	4a14      	ldr	r2, [pc, #80]	; (8001734 <HAL_UART_MspInit+0x90>)
 80016e2:	f043 0304 	orr.w	r3, r3, #4
 80016e6:	6193      	str	r3, [r2, #24]
 80016e8:	4b12      	ldr	r3, [pc, #72]	; (8001734 <HAL_UART_MspInit+0x90>)
 80016ea:	699b      	ldr	r3, [r3, #24]
 80016ec:	f003 0304 	and.w	r3, r3, #4
 80016f0:	60bb      	str	r3, [r7, #8]
 80016f2:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80016f4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80016f8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016fa:	2302      	movs	r3, #2
 80016fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80016fe:	2303      	movs	r3, #3
 8001700:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001702:	f107 0310 	add.w	r3, r7, #16
 8001706:	4619      	mov	r1, r3
 8001708:	480b      	ldr	r0, [pc, #44]	; (8001738 <HAL_UART_MspInit+0x94>)
 800170a:	f000 fa53 	bl	8001bb4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800170e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001712:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001714:	2300      	movs	r3, #0
 8001716:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001718:	2300      	movs	r3, #0
 800171a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800171c:	f107 0310 	add.w	r3, r7, #16
 8001720:	4619      	mov	r1, r3
 8001722:	4805      	ldr	r0, [pc, #20]	; (8001738 <HAL_UART_MspInit+0x94>)
 8001724:	f000 fa46 	bl	8001bb4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001728:	bf00      	nop
 800172a:	3720      	adds	r7, #32
 800172c:	46bd      	mov	sp, r7
 800172e:	bd80      	pop	{r7, pc}
 8001730:	40013800 	.word	0x40013800
 8001734:	40021000 	.word	0x40021000
 8001738:	40010800 	.word	0x40010800

0800173c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b08c      	sub	sp, #48	; 0x30
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001744:	2300      	movs	r3, #0
 8001746:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001748:	2300      	movs	r3, #0
 800174a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM4 IRQ priority */
  HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority ,0); 
 800174c:	2200      	movs	r2, #0
 800174e:	6879      	ldr	r1, [r7, #4]
 8001750:	201e      	movs	r0, #30
 8001752:	f000 fa04 	bl	8001b5e <HAL_NVIC_SetPriority>
  
  /* Enable the TIM4 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM4_IRQn); 
 8001756:	201e      	movs	r0, #30
 8001758:	f000 fa1d 	bl	8001b96 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 800175c:	4b1f      	ldr	r3, [pc, #124]	; (80017dc <HAL_InitTick+0xa0>)
 800175e:	69db      	ldr	r3, [r3, #28]
 8001760:	4a1e      	ldr	r2, [pc, #120]	; (80017dc <HAL_InitTick+0xa0>)
 8001762:	f043 0304 	orr.w	r3, r3, #4
 8001766:	61d3      	str	r3, [r2, #28]
 8001768:	4b1c      	ldr	r3, [pc, #112]	; (80017dc <HAL_InitTick+0xa0>)
 800176a:	69db      	ldr	r3, [r3, #28]
 800176c:	f003 0304 	and.w	r3, r3, #4
 8001770:	60fb      	str	r3, [r7, #12]
 8001772:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001774:	f107 0210 	add.w	r2, r7, #16
 8001778:	f107 0314 	add.w	r3, r7, #20
 800177c:	4611      	mov	r1, r2
 800177e:	4618      	mov	r0, r3
 8001780:	f000 ffb8 	bl	80026f4 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM4 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8001784:	f000 ff8e 	bl	80026a4 <HAL_RCC_GetPCLK1Freq>
 8001788:	4603      	mov	r3, r0
 800178a:	005b      	lsls	r3, r3, #1
 800178c:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 800178e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001790:	4a13      	ldr	r2, [pc, #76]	; (80017e0 <HAL_InitTick+0xa4>)
 8001792:	fba2 2303 	umull	r2, r3, r2, r3
 8001796:	0c9b      	lsrs	r3, r3, #18
 8001798:	3b01      	subs	r3, #1
 800179a:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 800179c:	4b11      	ldr	r3, [pc, #68]	; (80017e4 <HAL_InitTick+0xa8>)
 800179e:	4a12      	ldr	r2, [pc, #72]	; (80017e8 <HAL_InitTick+0xac>)
 80017a0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000 / 1000) - 1;
 80017a2:	4b10      	ldr	r3, [pc, #64]	; (80017e4 <HAL_InitTick+0xa8>)
 80017a4:	f240 32e7 	movw	r2, #999	; 0x3e7
 80017a8:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 80017aa:	4a0e      	ldr	r2, [pc, #56]	; (80017e4 <HAL_InitTick+0xa8>)
 80017ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80017ae:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 80017b0:	4b0c      	ldr	r3, [pc, #48]	; (80017e4 <HAL_InitTick+0xa8>)
 80017b2:	2200      	movs	r2, #0
 80017b4:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017b6:	4b0b      	ldr	r3, [pc, #44]	; (80017e4 <HAL_InitTick+0xa8>)
 80017b8:	2200      	movs	r2, #0
 80017ba:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim4) == HAL_OK)
 80017bc:	4809      	ldr	r0, [pc, #36]	; (80017e4 <HAL_InitTick+0xa8>)
 80017be:	f001 fd01 	bl	80031c4 <HAL_TIM_Base_Init>
 80017c2:	4603      	mov	r3, r0
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d104      	bne.n	80017d2 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim4);
 80017c8:	4806      	ldr	r0, [pc, #24]	; (80017e4 <HAL_InitTick+0xa8>)
 80017ca:	f001 fd2f 	bl	800322c <HAL_TIM_Base_Start_IT>
 80017ce:	4603      	mov	r3, r0
 80017d0:	e000      	b.n	80017d4 <HAL_InitTick+0x98>
  }
  
  /* Return function status */
  return HAL_ERROR;
 80017d2:	2301      	movs	r3, #1
}
 80017d4:	4618      	mov	r0, r3
 80017d6:	3730      	adds	r7, #48	; 0x30
 80017d8:	46bd      	mov	sp, r7
 80017da:	bd80      	pop	{r7, pc}
 80017dc:	40021000 	.word	0x40021000
 80017e0:	431bde83 	.word	0x431bde83
 80017e4:	20001604 	.word	0x20001604
 80017e8:	40000800 	.word	0x40000800

080017ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017ec:	b480      	push	{r7}
 80017ee:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80017f0:	bf00      	nop
 80017f2:	46bd      	mov	sp, r7
 80017f4:	bc80      	pop	{r7}
 80017f6:	4770      	bx	lr

080017f8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017f8:	b480      	push	{r7}
 80017fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017fc:	e7fe      	b.n	80017fc <HardFault_Handler+0x4>

080017fe <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017fe:	b480      	push	{r7}
 8001800:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001802:	e7fe      	b.n	8001802 <MemManage_Handler+0x4>

08001804 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001804:	b480      	push	{r7}
 8001806:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001808:	e7fe      	b.n	8001808 <BusFault_Handler+0x4>

0800180a <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800180a:	b480      	push	{r7}
 800180c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800180e:	e7fe      	b.n	800180e <UsageFault_Handler+0x4>

08001810 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001810:	b480      	push	{r7}
 8001812:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001814:	bf00      	nop
 8001816:	46bd      	mov	sp, r7
 8001818:	bc80      	pop	{r7}
 800181a:	4770      	bx	lr

0800181c <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8001820:	2001      	movs	r0, #1
 8001822:	f000 fb51 	bl	8001ec8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001826:	bf00      	nop
 8001828:	bd80      	pop	{r7, pc}
	...

0800182c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001830:	4802      	ldr	r0, [pc, #8]	; (800183c <TIM4_IRQHandler+0x10>)
 8001832:	f001 fd1e 	bl	8003272 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001836:	bf00      	nop
 8001838:	bd80      	pop	{r7, pc}
 800183a:	bf00      	nop
 800183c:	20001604 	.word	0x20001604

08001840 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b084      	sub	sp, #16
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001848:	4b11      	ldr	r3, [pc, #68]	; (8001890 <_sbrk+0x50>)
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	2b00      	cmp	r3, #0
 800184e:	d102      	bne.n	8001856 <_sbrk+0x16>
		heap_end = &end;
 8001850:	4b0f      	ldr	r3, [pc, #60]	; (8001890 <_sbrk+0x50>)
 8001852:	4a10      	ldr	r2, [pc, #64]	; (8001894 <_sbrk+0x54>)
 8001854:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8001856:	4b0e      	ldr	r3, [pc, #56]	; (8001890 <_sbrk+0x50>)
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 800185c:	4b0c      	ldr	r3, [pc, #48]	; (8001890 <_sbrk+0x50>)
 800185e:	681a      	ldr	r2, [r3, #0]
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	4413      	add	r3, r2
 8001864:	466a      	mov	r2, sp
 8001866:	4293      	cmp	r3, r2
 8001868:	d907      	bls.n	800187a <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800186a:	f005 facb 	bl	8006e04 <__errno>
 800186e:	4602      	mov	r2, r0
 8001870:	230c      	movs	r3, #12
 8001872:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8001874:	f04f 33ff 	mov.w	r3, #4294967295
 8001878:	e006      	b.n	8001888 <_sbrk+0x48>
	}

	heap_end += incr;
 800187a:	4b05      	ldr	r3, [pc, #20]	; (8001890 <_sbrk+0x50>)
 800187c:	681a      	ldr	r2, [r3, #0]
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	4413      	add	r3, r2
 8001882:	4a03      	ldr	r2, [pc, #12]	; (8001890 <_sbrk+0x50>)
 8001884:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8001886:	68fb      	ldr	r3, [r7, #12]
}
 8001888:	4618      	mov	r0, r3
 800188a:	3710      	adds	r7, #16
 800188c:	46bd      	mov	sp, r7
 800188e:	bd80      	pop	{r7, pc}
 8001890:	20000544 	.word	0x20000544
 8001894:	20001690 	.word	0x20001690

08001898 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001898:	b480      	push	{r7}
 800189a:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 800189c:	4b15      	ldr	r3, [pc, #84]	; (80018f4 <SystemInit+0x5c>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	4a14      	ldr	r2, [pc, #80]	; (80018f4 <SystemInit+0x5c>)
 80018a2:	f043 0301 	orr.w	r3, r3, #1
 80018a6:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 80018a8:	4b12      	ldr	r3, [pc, #72]	; (80018f4 <SystemInit+0x5c>)
 80018aa:	685a      	ldr	r2, [r3, #4]
 80018ac:	4911      	ldr	r1, [pc, #68]	; (80018f4 <SystemInit+0x5c>)
 80018ae:	4b12      	ldr	r3, [pc, #72]	; (80018f8 <SystemInit+0x60>)
 80018b0:	4013      	ands	r3, r2
 80018b2:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 80018b4:	4b0f      	ldr	r3, [pc, #60]	; (80018f4 <SystemInit+0x5c>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	4a0e      	ldr	r2, [pc, #56]	; (80018f4 <SystemInit+0x5c>)
 80018ba:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80018be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80018c2:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80018c4:	4b0b      	ldr	r3, [pc, #44]	; (80018f4 <SystemInit+0x5c>)
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	4a0a      	ldr	r2, [pc, #40]	; (80018f4 <SystemInit+0x5c>)
 80018ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80018ce:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 80018d0:	4b08      	ldr	r3, [pc, #32]	; (80018f4 <SystemInit+0x5c>)
 80018d2:	685b      	ldr	r3, [r3, #4]
 80018d4:	4a07      	ldr	r2, [pc, #28]	; (80018f4 <SystemInit+0x5c>)
 80018d6:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 80018da:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 80018dc:	4b05      	ldr	r3, [pc, #20]	; (80018f4 <SystemInit+0x5c>)
 80018de:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80018e2:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80018e4:	4b05      	ldr	r3, [pc, #20]	; (80018fc <SystemInit+0x64>)
 80018e6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80018ea:	609a      	str	r2, [r3, #8]
#endif 
}
 80018ec:	bf00      	nop
 80018ee:	46bd      	mov	sp, r7
 80018f0:	bc80      	pop	{r7}
 80018f2:	4770      	bx	lr
 80018f4:	40021000 	.word	0x40021000
 80018f8:	f8ff0000 	.word	0xf8ff0000
 80018fc:	e000ed00 	.word	0xe000ed00

08001900 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001900:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8001902:	e003      	b.n	800190c <LoopCopyDataInit>

08001904 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001904:	4b0b      	ldr	r3, [pc, #44]	; (8001934 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8001906:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001908:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800190a:	3104      	adds	r1, #4

0800190c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 800190c:	480a      	ldr	r0, [pc, #40]	; (8001938 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800190e:	4b0b      	ldr	r3, [pc, #44]	; (800193c <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8001910:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8001912:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001914:	d3f6      	bcc.n	8001904 <CopyDataInit>
  ldr r2, =_sbss
 8001916:	4a0a      	ldr	r2, [pc, #40]	; (8001940 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8001918:	e002      	b.n	8001920 <LoopFillZerobss>

0800191a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800191a:	2300      	movs	r3, #0
  str r3, [r2], #4
 800191c:	f842 3b04 	str.w	r3, [r2], #4

08001920 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8001920:	4b08      	ldr	r3, [pc, #32]	; (8001944 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8001922:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001924:	d3f9      	bcc.n	800191a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001926:	f7ff ffb7 	bl	8001898 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800192a:	f005 fa71 	bl	8006e10 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800192e:	f7fe fc57 	bl	80001e0 <main>
  bx lr
 8001932:	4770      	bx	lr
  ldr r3, =_sidata
 8001934:	08007914 	.word	0x08007914
  ldr r0, =_sdata
 8001938:	20000000 	.word	0x20000000
  ldr r3, =_edata
 800193c:	20000074 	.word	0x20000074
  ldr r2, =_sbss
 8001940:	20000074 	.word	0x20000074
  ldr r3, = _ebss
 8001944:	2000168c 	.word	0x2000168c

08001948 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001948:	e7fe      	b.n	8001948 <ADC1_2_IRQHandler>
	...

0800194c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001950:	4b08      	ldr	r3, [pc, #32]	; (8001974 <HAL_Init+0x28>)
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	4a07      	ldr	r2, [pc, #28]	; (8001974 <HAL_Init+0x28>)
 8001956:	f043 0310 	orr.w	r3, r3, #16
 800195a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800195c:	2003      	movs	r0, #3
 800195e:	f000 f8f3 	bl	8001b48 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001962:	2000      	movs	r0, #0
 8001964:	f7ff feea 	bl	800173c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001968:	f7ff fe1a 	bl	80015a0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800196c:	2300      	movs	r3, #0
}
 800196e:	4618      	mov	r0, r3
 8001970:	bd80      	pop	{r7, pc}
 8001972:	bf00      	nop
 8001974:	40022000 	.word	0x40022000

08001978 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001978:	b480      	push	{r7}
 800197a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800197c:	4b05      	ldr	r3, [pc, #20]	; (8001994 <HAL_IncTick+0x1c>)
 800197e:	781b      	ldrb	r3, [r3, #0]
 8001980:	461a      	mov	r2, r3
 8001982:	4b05      	ldr	r3, [pc, #20]	; (8001998 <HAL_IncTick+0x20>)
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	4413      	add	r3, r2
 8001988:	4a03      	ldr	r2, [pc, #12]	; (8001998 <HAL_IncTick+0x20>)
 800198a:	6013      	str	r3, [r2, #0]
}
 800198c:	bf00      	nop
 800198e:	46bd      	mov	sp, r7
 8001990:	bc80      	pop	{r7}
 8001992:	4770      	bx	lr
 8001994:	20000008 	.word	0x20000008
 8001998:	20001644 	.word	0x20001644

0800199c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800199c:	b480      	push	{r7}
 800199e:	af00      	add	r7, sp, #0
  return uwTick;
 80019a0:	4b02      	ldr	r3, [pc, #8]	; (80019ac <HAL_GetTick+0x10>)
 80019a2:	681b      	ldr	r3, [r3, #0]
}
 80019a4:	4618      	mov	r0, r3
 80019a6:	46bd      	mov	sp, r7
 80019a8:	bc80      	pop	{r7}
 80019aa:	4770      	bx	lr
 80019ac:	20001644 	.word	0x20001644

080019b0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b084      	sub	sp, #16
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80019b8:	f7ff fff0 	bl	800199c <HAL_GetTick>
 80019bc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019c8:	d005      	beq.n	80019d6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80019ca:	4b09      	ldr	r3, [pc, #36]	; (80019f0 <HAL_Delay+0x40>)
 80019cc:	781b      	ldrb	r3, [r3, #0]
 80019ce:	461a      	mov	r2, r3
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	4413      	add	r3, r2
 80019d4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80019d6:	bf00      	nop
 80019d8:	f7ff ffe0 	bl	800199c <HAL_GetTick>
 80019dc:	4602      	mov	r2, r0
 80019de:	68bb      	ldr	r3, [r7, #8]
 80019e0:	1ad3      	subs	r3, r2, r3
 80019e2:	68fa      	ldr	r2, [r7, #12]
 80019e4:	429a      	cmp	r2, r3
 80019e6:	d8f7      	bhi.n	80019d8 <HAL_Delay+0x28>
  {
  }
}
 80019e8:	bf00      	nop
 80019ea:	3710      	adds	r7, #16
 80019ec:	46bd      	mov	sp, r7
 80019ee:	bd80      	pop	{r7, pc}
 80019f0:	20000008 	.word	0x20000008

080019f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019f4:	b480      	push	{r7}
 80019f6:	b085      	sub	sp, #20
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	f003 0307 	and.w	r3, r3, #7
 8001a02:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a04:	4b0c      	ldr	r3, [pc, #48]	; (8001a38 <__NVIC_SetPriorityGrouping+0x44>)
 8001a06:	68db      	ldr	r3, [r3, #12]
 8001a08:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a0a:	68ba      	ldr	r2, [r7, #8]
 8001a0c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001a10:	4013      	ands	r3, r2
 8001a12:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a18:	68bb      	ldr	r3, [r7, #8]
 8001a1a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a1c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001a20:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a24:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a26:	4a04      	ldr	r2, [pc, #16]	; (8001a38 <__NVIC_SetPriorityGrouping+0x44>)
 8001a28:	68bb      	ldr	r3, [r7, #8]
 8001a2a:	60d3      	str	r3, [r2, #12]
}
 8001a2c:	bf00      	nop
 8001a2e:	3714      	adds	r7, #20
 8001a30:	46bd      	mov	sp, r7
 8001a32:	bc80      	pop	{r7}
 8001a34:	4770      	bx	lr
 8001a36:	bf00      	nop
 8001a38:	e000ed00 	.word	0xe000ed00

08001a3c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a40:	4b04      	ldr	r3, [pc, #16]	; (8001a54 <__NVIC_GetPriorityGrouping+0x18>)
 8001a42:	68db      	ldr	r3, [r3, #12]
 8001a44:	0a1b      	lsrs	r3, r3, #8
 8001a46:	f003 0307 	and.w	r3, r3, #7
}
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	bc80      	pop	{r7}
 8001a50:	4770      	bx	lr
 8001a52:	bf00      	nop
 8001a54:	e000ed00 	.word	0xe000ed00

08001a58 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	b083      	sub	sp, #12
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	4603      	mov	r3, r0
 8001a60:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	db0b      	blt.n	8001a82 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a6a:	79fb      	ldrb	r3, [r7, #7]
 8001a6c:	f003 021f 	and.w	r2, r3, #31
 8001a70:	4906      	ldr	r1, [pc, #24]	; (8001a8c <__NVIC_EnableIRQ+0x34>)
 8001a72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a76:	095b      	lsrs	r3, r3, #5
 8001a78:	2001      	movs	r0, #1
 8001a7a:	fa00 f202 	lsl.w	r2, r0, r2
 8001a7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001a82:	bf00      	nop
 8001a84:	370c      	adds	r7, #12
 8001a86:	46bd      	mov	sp, r7
 8001a88:	bc80      	pop	{r7}
 8001a8a:	4770      	bx	lr
 8001a8c:	e000e100 	.word	0xe000e100

08001a90 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a90:	b480      	push	{r7}
 8001a92:	b083      	sub	sp, #12
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	4603      	mov	r3, r0
 8001a98:	6039      	str	r1, [r7, #0]
 8001a9a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	db0a      	blt.n	8001aba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001aa4:	683b      	ldr	r3, [r7, #0]
 8001aa6:	b2da      	uxtb	r2, r3
 8001aa8:	490c      	ldr	r1, [pc, #48]	; (8001adc <__NVIC_SetPriority+0x4c>)
 8001aaa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001aae:	0112      	lsls	r2, r2, #4
 8001ab0:	b2d2      	uxtb	r2, r2
 8001ab2:	440b      	add	r3, r1
 8001ab4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ab8:	e00a      	b.n	8001ad0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001aba:	683b      	ldr	r3, [r7, #0]
 8001abc:	b2da      	uxtb	r2, r3
 8001abe:	4908      	ldr	r1, [pc, #32]	; (8001ae0 <__NVIC_SetPriority+0x50>)
 8001ac0:	79fb      	ldrb	r3, [r7, #7]
 8001ac2:	f003 030f 	and.w	r3, r3, #15
 8001ac6:	3b04      	subs	r3, #4
 8001ac8:	0112      	lsls	r2, r2, #4
 8001aca:	b2d2      	uxtb	r2, r2
 8001acc:	440b      	add	r3, r1
 8001ace:	761a      	strb	r2, [r3, #24]
}
 8001ad0:	bf00      	nop
 8001ad2:	370c      	adds	r7, #12
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	bc80      	pop	{r7}
 8001ad8:	4770      	bx	lr
 8001ada:	bf00      	nop
 8001adc:	e000e100 	.word	0xe000e100
 8001ae0:	e000ed00 	.word	0xe000ed00

08001ae4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	b089      	sub	sp, #36	; 0x24
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	60f8      	str	r0, [r7, #12]
 8001aec:	60b9      	str	r1, [r7, #8]
 8001aee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	f003 0307 	and.w	r3, r3, #7
 8001af6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001af8:	69fb      	ldr	r3, [r7, #28]
 8001afa:	f1c3 0307 	rsb	r3, r3, #7
 8001afe:	2b04      	cmp	r3, #4
 8001b00:	bf28      	it	cs
 8001b02:	2304      	movcs	r3, #4
 8001b04:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b06:	69fb      	ldr	r3, [r7, #28]
 8001b08:	3304      	adds	r3, #4
 8001b0a:	2b06      	cmp	r3, #6
 8001b0c:	d902      	bls.n	8001b14 <NVIC_EncodePriority+0x30>
 8001b0e:	69fb      	ldr	r3, [r7, #28]
 8001b10:	3b03      	subs	r3, #3
 8001b12:	e000      	b.n	8001b16 <NVIC_EncodePriority+0x32>
 8001b14:	2300      	movs	r3, #0
 8001b16:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b18:	f04f 32ff 	mov.w	r2, #4294967295
 8001b1c:	69bb      	ldr	r3, [r7, #24]
 8001b1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b22:	43da      	mvns	r2, r3
 8001b24:	68bb      	ldr	r3, [r7, #8]
 8001b26:	401a      	ands	r2, r3
 8001b28:	697b      	ldr	r3, [r7, #20]
 8001b2a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b2c:	f04f 31ff 	mov.w	r1, #4294967295
 8001b30:	697b      	ldr	r3, [r7, #20]
 8001b32:	fa01 f303 	lsl.w	r3, r1, r3
 8001b36:	43d9      	mvns	r1, r3
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b3c:	4313      	orrs	r3, r2
         );
}
 8001b3e:	4618      	mov	r0, r3
 8001b40:	3724      	adds	r7, #36	; 0x24
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bc80      	pop	{r7}
 8001b46:	4770      	bx	lr

08001b48 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b082      	sub	sp, #8
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b50:	6878      	ldr	r0, [r7, #4]
 8001b52:	f7ff ff4f 	bl	80019f4 <__NVIC_SetPriorityGrouping>
}
 8001b56:	bf00      	nop
 8001b58:	3708      	adds	r7, #8
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bd80      	pop	{r7, pc}

08001b5e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b5e:	b580      	push	{r7, lr}
 8001b60:	b086      	sub	sp, #24
 8001b62:	af00      	add	r7, sp, #0
 8001b64:	4603      	mov	r3, r0
 8001b66:	60b9      	str	r1, [r7, #8]
 8001b68:	607a      	str	r2, [r7, #4]
 8001b6a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b70:	f7ff ff64 	bl	8001a3c <__NVIC_GetPriorityGrouping>
 8001b74:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b76:	687a      	ldr	r2, [r7, #4]
 8001b78:	68b9      	ldr	r1, [r7, #8]
 8001b7a:	6978      	ldr	r0, [r7, #20]
 8001b7c:	f7ff ffb2 	bl	8001ae4 <NVIC_EncodePriority>
 8001b80:	4602      	mov	r2, r0
 8001b82:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b86:	4611      	mov	r1, r2
 8001b88:	4618      	mov	r0, r3
 8001b8a:	f7ff ff81 	bl	8001a90 <__NVIC_SetPriority>
}
 8001b8e:	bf00      	nop
 8001b90:	3718      	adds	r7, #24
 8001b92:	46bd      	mov	sp, r7
 8001b94:	bd80      	pop	{r7, pc}

08001b96 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b96:	b580      	push	{r7, lr}
 8001b98:	b082      	sub	sp, #8
 8001b9a:	af00      	add	r7, sp, #0
 8001b9c:	4603      	mov	r3, r0
 8001b9e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ba0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	f7ff ff57 	bl	8001a58 <__NVIC_EnableIRQ>
}
 8001baa:	bf00      	nop
 8001bac:	3708      	adds	r7, #8
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	bd80      	pop	{r7, pc}
	...

08001bb4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	b08b      	sub	sp, #44	; 0x2c
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
 8001bbc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001bc6:	e127      	b.n	8001e18 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001bc8:	2201      	movs	r2, #1
 8001bca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bcc:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001bd2:	683b      	ldr	r3, [r7, #0]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	69fa      	ldr	r2, [r7, #28]
 8001bd8:	4013      	ands	r3, r2
 8001bda:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001bdc:	69ba      	ldr	r2, [r7, #24]
 8001bde:	69fb      	ldr	r3, [r7, #28]
 8001be0:	429a      	cmp	r2, r3
 8001be2:	f040 8116 	bne.w	8001e12 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001be6:	683b      	ldr	r3, [r7, #0]
 8001be8:	685b      	ldr	r3, [r3, #4]
 8001bea:	2b12      	cmp	r3, #18
 8001bec:	d034      	beq.n	8001c58 <HAL_GPIO_Init+0xa4>
 8001bee:	2b12      	cmp	r3, #18
 8001bf0:	d80d      	bhi.n	8001c0e <HAL_GPIO_Init+0x5a>
 8001bf2:	2b02      	cmp	r3, #2
 8001bf4:	d02b      	beq.n	8001c4e <HAL_GPIO_Init+0x9a>
 8001bf6:	2b02      	cmp	r3, #2
 8001bf8:	d804      	bhi.n	8001c04 <HAL_GPIO_Init+0x50>
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d031      	beq.n	8001c62 <HAL_GPIO_Init+0xae>
 8001bfe:	2b01      	cmp	r3, #1
 8001c00:	d01c      	beq.n	8001c3c <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001c02:	e048      	b.n	8001c96 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001c04:	2b03      	cmp	r3, #3
 8001c06:	d043      	beq.n	8001c90 <HAL_GPIO_Init+0xdc>
 8001c08:	2b11      	cmp	r3, #17
 8001c0a:	d01b      	beq.n	8001c44 <HAL_GPIO_Init+0x90>
          break;
 8001c0c:	e043      	b.n	8001c96 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001c0e:	4a89      	ldr	r2, [pc, #548]	; (8001e34 <HAL_GPIO_Init+0x280>)
 8001c10:	4293      	cmp	r3, r2
 8001c12:	d026      	beq.n	8001c62 <HAL_GPIO_Init+0xae>
 8001c14:	4a87      	ldr	r2, [pc, #540]	; (8001e34 <HAL_GPIO_Init+0x280>)
 8001c16:	4293      	cmp	r3, r2
 8001c18:	d806      	bhi.n	8001c28 <HAL_GPIO_Init+0x74>
 8001c1a:	4a87      	ldr	r2, [pc, #540]	; (8001e38 <HAL_GPIO_Init+0x284>)
 8001c1c:	4293      	cmp	r3, r2
 8001c1e:	d020      	beq.n	8001c62 <HAL_GPIO_Init+0xae>
 8001c20:	4a86      	ldr	r2, [pc, #536]	; (8001e3c <HAL_GPIO_Init+0x288>)
 8001c22:	4293      	cmp	r3, r2
 8001c24:	d01d      	beq.n	8001c62 <HAL_GPIO_Init+0xae>
          break;
 8001c26:	e036      	b.n	8001c96 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001c28:	4a85      	ldr	r2, [pc, #532]	; (8001e40 <HAL_GPIO_Init+0x28c>)
 8001c2a:	4293      	cmp	r3, r2
 8001c2c:	d019      	beq.n	8001c62 <HAL_GPIO_Init+0xae>
 8001c2e:	4a85      	ldr	r2, [pc, #532]	; (8001e44 <HAL_GPIO_Init+0x290>)
 8001c30:	4293      	cmp	r3, r2
 8001c32:	d016      	beq.n	8001c62 <HAL_GPIO_Init+0xae>
 8001c34:	4a84      	ldr	r2, [pc, #528]	; (8001e48 <HAL_GPIO_Init+0x294>)
 8001c36:	4293      	cmp	r3, r2
 8001c38:	d013      	beq.n	8001c62 <HAL_GPIO_Init+0xae>
          break;
 8001c3a:	e02c      	b.n	8001c96 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001c3c:	683b      	ldr	r3, [r7, #0]
 8001c3e:	68db      	ldr	r3, [r3, #12]
 8001c40:	623b      	str	r3, [r7, #32]
          break;
 8001c42:	e028      	b.n	8001c96 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001c44:	683b      	ldr	r3, [r7, #0]
 8001c46:	68db      	ldr	r3, [r3, #12]
 8001c48:	3304      	adds	r3, #4
 8001c4a:	623b      	str	r3, [r7, #32]
          break;
 8001c4c:	e023      	b.n	8001c96 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001c4e:	683b      	ldr	r3, [r7, #0]
 8001c50:	68db      	ldr	r3, [r3, #12]
 8001c52:	3308      	adds	r3, #8
 8001c54:	623b      	str	r3, [r7, #32]
          break;
 8001c56:	e01e      	b.n	8001c96 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001c58:	683b      	ldr	r3, [r7, #0]
 8001c5a:	68db      	ldr	r3, [r3, #12]
 8001c5c:	330c      	adds	r3, #12
 8001c5e:	623b      	str	r3, [r7, #32]
          break;
 8001c60:	e019      	b.n	8001c96 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001c62:	683b      	ldr	r3, [r7, #0]
 8001c64:	689b      	ldr	r3, [r3, #8]
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d102      	bne.n	8001c70 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001c6a:	2304      	movs	r3, #4
 8001c6c:	623b      	str	r3, [r7, #32]
          break;
 8001c6e:	e012      	b.n	8001c96 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001c70:	683b      	ldr	r3, [r7, #0]
 8001c72:	689b      	ldr	r3, [r3, #8]
 8001c74:	2b01      	cmp	r3, #1
 8001c76:	d105      	bne.n	8001c84 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001c78:	2308      	movs	r3, #8
 8001c7a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	69fa      	ldr	r2, [r7, #28]
 8001c80:	611a      	str	r2, [r3, #16]
          break;
 8001c82:	e008      	b.n	8001c96 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001c84:	2308      	movs	r3, #8
 8001c86:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	69fa      	ldr	r2, [r7, #28]
 8001c8c:	615a      	str	r2, [r3, #20]
          break;
 8001c8e:	e002      	b.n	8001c96 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001c90:	2300      	movs	r3, #0
 8001c92:	623b      	str	r3, [r7, #32]
          break;
 8001c94:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001c96:	69bb      	ldr	r3, [r7, #24]
 8001c98:	2bff      	cmp	r3, #255	; 0xff
 8001c9a:	d801      	bhi.n	8001ca0 <HAL_GPIO_Init+0xec>
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	e001      	b.n	8001ca4 <HAL_GPIO_Init+0xf0>
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	3304      	adds	r3, #4
 8001ca4:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001ca6:	69bb      	ldr	r3, [r7, #24]
 8001ca8:	2bff      	cmp	r3, #255	; 0xff
 8001caa:	d802      	bhi.n	8001cb2 <HAL_GPIO_Init+0xfe>
 8001cac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cae:	009b      	lsls	r3, r3, #2
 8001cb0:	e002      	b.n	8001cb8 <HAL_GPIO_Init+0x104>
 8001cb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cb4:	3b08      	subs	r3, #8
 8001cb6:	009b      	lsls	r3, r3, #2
 8001cb8:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001cba:	697b      	ldr	r3, [r7, #20]
 8001cbc:	681a      	ldr	r2, [r3, #0]
 8001cbe:	210f      	movs	r1, #15
 8001cc0:	693b      	ldr	r3, [r7, #16]
 8001cc2:	fa01 f303 	lsl.w	r3, r1, r3
 8001cc6:	43db      	mvns	r3, r3
 8001cc8:	401a      	ands	r2, r3
 8001cca:	6a39      	ldr	r1, [r7, #32]
 8001ccc:	693b      	ldr	r3, [r7, #16]
 8001cce:	fa01 f303 	lsl.w	r3, r1, r3
 8001cd2:	431a      	orrs	r2, r3
 8001cd4:	697b      	ldr	r3, [r7, #20]
 8001cd6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001cd8:	683b      	ldr	r3, [r7, #0]
 8001cda:	685b      	ldr	r3, [r3, #4]
 8001cdc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	f000 8096 	beq.w	8001e12 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001ce6:	4b59      	ldr	r3, [pc, #356]	; (8001e4c <HAL_GPIO_Init+0x298>)
 8001ce8:	699b      	ldr	r3, [r3, #24]
 8001cea:	4a58      	ldr	r2, [pc, #352]	; (8001e4c <HAL_GPIO_Init+0x298>)
 8001cec:	f043 0301 	orr.w	r3, r3, #1
 8001cf0:	6193      	str	r3, [r2, #24]
 8001cf2:	4b56      	ldr	r3, [pc, #344]	; (8001e4c <HAL_GPIO_Init+0x298>)
 8001cf4:	699b      	ldr	r3, [r3, #24]
 8001cf6:	f003 0301 	and.w	r3, r3, #1
 8001cfa:	60bb      	str	r3, [r7, #8]
 8001cfc:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001cfe:	4a54      	ldr	r2, [pc, #336]	; (8001e50 <HAL_GPIO_Init+0x29c>)
 8001d00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d02:	089b      	lsrs	r3, r3, #2
 8001d04:	3302      	adds	r3, #2
 8001d06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d0a:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001d0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d0e:	f003 0303 	and.w	r3, r3, #3
 8001d12:	009b      	lsls	r3, r3, #2
 8001d14:	220f      	movs	r2, #15
 8001d16:	fa02 f303 	lsl.w	r3, r2, r3
 8001d1a:	43db      	mvns	r3, r3
 8001d1c:	68fa      	ldr	r2, [r7, #12]
 8001d1e:	4013      	ands	r3, r2
 8001d20:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	4a4b      	ldr	r2, [pc, #300]	; (8001e54 <HAL_GPIO_Init+0x2a0>)
 8001d26:	4293      	cmp	r3, r2
 8001d28:	d013      	beq.n	8001d52 <HAL_GPIO_Init+0x19e>
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	4a4a      	ldr	r2, [pc, #296]	; (8001e58 <HAL_GPIO_Init+0x2a4>)
 8001d2e:	4293      	cmp	r3, r2
 8001d30:	d00d      	beq.n	8001d4e <HAL_GPIO_Init+0x19a>
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	4a49      	ldr	r2, [pc, #292]	; (8001e5c <HAL_GPIO_Init+0x2a8>)
 8001d36:	4293      	cmp	r3, r2
 8001d38:	d007      	beq.n	8001d4a <HAL_GPIO_Init+0x196>
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	4a48      	ldr	r2, [pc, #288]	; (8001e60 <HAL_GPIO_Init+0x2ac>)
 8001d3e:	4293      	cmp	r3, r2
 8001d40:	d101      	bne.n	8001d46 <HAL_GPIO_Init+0x192>
 8001d42:	2303      	movs	r3, #3
 8001d44:	e006      	b.n	8001d54 <HAL_GPIO_Init+0x1a0>
 8001d46:	2304      	movs	r3, #4
 8001d48:	e004      	b.n	8001d54 <HAL_GPIO_Init+0x1a0>
 8001d4a:	2302      	movs	r3, #2
 8001d4c:	e002      	b.n	8001d54 <HAL_GPIO_Init+0x1a0>
 8001d4e:	2301      	movs	r3, #1
 8001d50:	e000      	b.n	8001d54 <HAL_GPIO_Init+0x1a0>
 8001d52:	2300      	movs	r3, #0
 8001d54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d56:	f002 0203 	and.w	r2, r2, #3
 8001d5a:	0092      	lsls	r2, r2, #2
 8001d5c:	4093      	lsls	r3, r2
 8001d5e:	68fa      	ldr	r2, [r7, #12]
 8001d60:	4313      	orrs	r3, r2
 8001d62:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001d64:	493a      	ldr	r1, [pc, #232]	; (8001e50 <HAL_GPIO_Init+0x29c>)
 8001d66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d68:	089b      	lsrs	r3, r3, #2
 8001d6a:	3302      	adds	r3, #2
 8001d6c:	68fa      	ldr	r2, [r7, #12]
 8001d6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001d72:	683b      	ldr	r3, [r7, #0]
 8001d74:	685b      	ldr	r3, [r3, #4]
 8001d76:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d006      	beq.n	8001d8c <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001d7e:	4b39      	ldr	r3, [pc, #228]	; (8001e64 <HAL_GPIO_Init+0x2b0>)
 8001d80:	681a      	ldr	r2, [r3, #0]
 8001d82:	4938      	ldr	r1, [pc, #224]	; (8001e64 <HAL_GPIO_Init+0x2b0>)
 8001d84:	69bb      	ldr	r3, [r7, #24]
 8001d86:	4313      	orrs	r3, r2
 8001d88:	600b      	str	r3, [r1, #0]
 8001d8a:	e006      	b.n	8001d9a <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001d8c:	4b35      	ldr	r3, [pc, #212]	; (8001e64 <HAL_GPIO_Init+0x2b0>)
 8001d8e:	681a      	ldr	r2, [r3, #0]
 8001d90:	69bb      	ldr	r3, [r7, #24]
 8001d92:	43db      	mvns	r3, r3
 8001d94:	4933      	ldr	r1, [pc, #204]	; (8001e64 <HAL_GPIO_Init+0x2b0>)
 8001d96:	4013      	ands	r3, r2
 8001d98:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001d9a:	683b      	ldr	r3, [r7, #0]
 8001d9c:	685b      	ldr	r3, [r3, #4]
 8001d9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d006      	beq.n	8001db4 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001da6:	4b2f      	ldr	r3, [pc, #188]	; (8001e64 <HAL_GPIO_Init+0x2b0>)
 8001da8:	685a      	ldr	r2, [r3, #4]
 8001daa:	492e      	ldr	r1, [pc, #184]	; (8001e64 <HAL_GPIO_Init+0x2b0>)
 8001dac:	69bb      	ldr	r3, [r7, #24]
 8001dae:	4313      	orrs	r3, r2
 8001db0:	604b      	str	r3, [r1, #4]
 8001db2:	e006      	b.n	8001dc2 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001db4:	4b2b      	ldr	r3, [pc, #172]	; (8001e64 <HAL_GPIO_Init+0x2b0>)
 8001db6:	685a      	ldr	r2, [r3, #4]
 8001db8:	69bb      	ldr	r3, [r7, #24]
 8001dba:	43db      	mvns	r3, r3
 8001dbc:	4929      	ldr	r1, [pc, #164]	; (8001e64 <HAL_GPIO_Init+0x2b0>)
 8001dbe:	4013      	ands	r3, r2
 8001dc0:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001dc2:	683b      	ldr	r3, [r7, #0]
 8001dc4:	685b      	ldr	r3, [r3, #4]
 8001dc6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d006      	beq.n	8001ddc <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001dce:	4b25      	ldr	r3, [pc, #148]	; (8001e64 <HAL_GPIO_Init+0x2b0>)
 8001dd0:	689a      	ldr	r2, [r3, #8]
 8001dd2:	4924      	ldr	r1, [pc, #144]	; (8001e64 <HAL_GPIO_Init+0x2b0>)
 8001dd4:	69bb      	ldr	r3, [r7, #24]
 8001dd6:	4313      	orrs	r3, r2
 8001dd8:	608b      	str	r3, [r1, #8]
 8001dda:	e006      	b.n	8001dea <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001ddc:	4b21      	ldr	r3, [pc, #132]	; (8001e64 <HAL_GPIO_Init+0x2b0>)
 8001dde:	689a      	ldr	r2, [r3, #8]
 8001de0:	69bb      	ldr	r3, [r7, #24]
 8001de2:	43db      	mvns	r3, r3
 8001de4:	491f      	ldr	r1, [pc, #124]	; (8001e64 <HAL_GPIO_Init+0x2b0>)
 8001de6:	4013      	ands	r3, r2
 8001de8:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001dea:	683b      	ldr	r3, [r7, #0]
 8001dec:	685b      	ldr	r3, [r3, #4]
 8001dee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d006      	beq.n	8001e04 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001df6:	4b1b      	ldr	r3, [pc, #108]	; (8001e64 <HAL_GPIO_Init+0x2b0>)
 8001df8:	68da      	ldr	r2, [r3, #12]
 8001dfa:	491a      	ldr	r1, [pc, #104]	; (8001e64 <HAL_GPIO_Init+0x2b0>)
 8001dfc:	69bb      	ldr	r3, [r7, #24]
 8001dfe:	4313      	orrs	r3, r2
 8001e00:	60cb      	str	r3, [r1, #12]
 8001e02:	e006      	b.n	8001e12 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001e04:	4b17      	ldr	r3, [pc, #92]	; (8001e64 <HAL_GPIO_Init+0x2b0>)
 8001e06:	68da      	ldr	r2, [r3, #12]
 8001e08:	69bb      	ldr	r3, [r7, #24]
 8001e0a:	43db      	mvns	r3, r3
 8001e0c:	4915      	ldr	r1, [pc, #84]	; (8001e64 <HAL_GPIO_Init+0x2b0>)
 8001e0e:	4013      	ands	r3, r2
 8001e10:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001e12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e14:	3301      	adds	r3, #1
 8001e16:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e18:	683b      	ldr	r3, [r7, #0]
 8001e1a:	681a      	ldr	r2, [r3, #0]
 8001e1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e1e:	fa22 f303 	lsr.w	r3, r2, r3
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	f47f aed0 	bne.w	8001bc8 <HAL_GPIO_Init+0x14>
  }
}
 8001e28:	bf00      	nop
 8001e2a:	372c      	adds	r7, #44	; 0x2c
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	bc80      	pop	{r7}
 8001e30:	4770      	bx	lr
 8001e32:	bf00      	nop
 8001e34:	10210000 	.word	0x10210000
 8001e38:	10110000 	.word	0x10110000
 8001e3c:	10120000 	.word	0x10120000
 8001e40:	10310000 	.word	0x10310000
 8001e44:	10320000 	.word	0x10320000
 8001e48:	10220000 	.word	0x10220000
 8001e4c:	40021000 	.word	0x40021000
 8001e50:	40010000 	.word	0x40010000
 8001e54:	40010800 	.word	0x40010800
 8001e58:	40010c00 	.word	0x40010c00
 8001e5c:	40011000 	.word	0x40011000
 8001e60:	40011400 	.word	0x40011400
 8001e64:	40010400 	.word	0x40010400

08001e68 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e68:	b480      	push	{r7}
 8001e6a:	b083      	sub	sp, #12
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
 8001e70:	460b      	mov	r3, r1
 8001e72:	807b      	strh	r3, [r7, #2]
 8001e74:	4613      	mov	r3, r2
 8001e76:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001e78:	787b      	ldrb	r3, [r7, #1]
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d003      	beq.n	8001e86 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001e7e:	887a      	ldrh	r2, [r7, #2]
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001e84:	e003      	b.n	8001e8e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001e86:	887b      	ldrh	r3, [r7, #2]
 8001e88:	041a      	lsls	r2, r3, #16
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	611a      	str	r2, [r3, #16]
}
 8001e8e:	bf00      	nop
 8001e90:	370c      	adds	r7, #12
 8001e92:	46bd      	mov	sp, r7
 8001e94:	bc80      	pop	{r7}
 8001e96:	4770      	bx	lr

08001e98 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001e98:	b480      	push	{r7}
 8001e9a:	b083      	sub	sp, #12
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
 8001ea0:	460b      	mov	r3, r1
 8001ea2:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	68da      	ldr	r2, [r3, #12]
 8001ea8:	887b      	ldrh	r3, [r7, #2]
 8001eaa:	4013      	ands	r3, r2
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d003      	beq.n	8001eb8 <HAL_GPIO_TogglePin+0x20>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001eb0:	887a      	ldrh	r2, [r7, #2]
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	615a      	str	r2, [r3, #20]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 8001eb6:	e002      	b.n	8001ebe <HAL_GPIO_TogglePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001eb8:	887a      	ldrh	r2, [r7, #2]
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	611a      	str	r2, [r3, #16]
}
 8001ebe:	bf00      	nop
 8001ec0:	370c      	adds	r7, #12
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	bc80      	pop	{r7}
 8001ec6:	4770      	bx	lr

08001ec8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b082      	sub	sp, #8
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	4603      	mov	r3, r0
 8001ed0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001ed2:	4b08      	ldr	r3, [pc, #32]	; (8001ef4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001ed4:	695a      	ldr	r2, [r3, #20]
 8001ed6:	88fb      	ldrh	r3, [r7, #6]
 8001ed8:	4013      	ands	r3, r2
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d006      	beq.n	8001eec <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001ede:	4a05      	ldr	r2, [pc, #20]	; (8001ef4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001ee0:	88fb      	ldrh	r3, [r7, #6]
 8001ee2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001ee4:	88fb      	ldrh	r3, [r7, #6]
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	f7fe fb4a 	bl	8000580 <HAL_GPIO_EXTI_Callback>
  }
}
 8001eec:	bf00      	nop
 8001eee:	3708      	adds	r7, #8
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	bd80      	pop	{r7, pc}
 8001ef4:	40010400 	.word	0x40010400

08001ef8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b086      	sub	sp, #24
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d101      	bne.n	8001f0a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001f06:	2301      	movs	r3, #1
 8001f08:	e26c      	b.n	80023e4 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f003 0301 	and.w	r3, r3, #1
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	f000 8087 	beq.w	8002026 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001f18:	4b92      	ldr	r3, [pc, #584]	; (8002164 <HAL_RCC_OscConfig+0x26c>)
 8001f1a:	685b      	ldr	r3, [r3, #4]
 8001f1c:	f003 030c 	and.w	r3, r3, #12
 8001f20:	2b04      	cmp	r3, #4
 8001f22:	d00c      	beq.n	8001f3e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001f24:	4b8f      	ldr	r3, [pc, #572]	; (8002164 <HAL_RCC_OscConfig+0x26c>)
 8001f26:	685b      	ldr	r3, [r3, #4]
 8001f28:	f003 030c 	and.w	r3, r3, #12
 8001f2c:	2b08      	cmp	r3, #8
 8001f2e:	d112      	bne.n	8001f56 <HAL_RCC_OscConfig+0x5e>
 8001f30:	4b8c      	ldr	r3, [pc, #560]	; (8002164 <HAL_RCC_OscConfig+0x26c>)
 8001f32:	685b      	ldr	r3, [r3, #4]
 8001f34:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f3c:	d10b      	bne.n	8001f56 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f3e:	4b89      	ldr	r3, [pc, #548]	; (8002164 <HAL_RCC_OscConfig+0x26c>)
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d06c      	beq.n	8002024 <HAL_RCC_OscConfig+0x12c>
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	685b      	ldr	r3, [r3, #4]
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d168      	bne.n	8002024 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001f52:	2301      	movs	r3, #1
 8001f54:	e246      	b.n	80023e4 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	685b      	ldr	r3, [r3, #4]
 8001f5a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f5e:	d106      	bne.n	8001f6e <HAL_RCC_OscConfig+0x76>
 8001f60:	4b80      	ldr	r3, [pc, #512]	; (8002164 <HAL_RCC_OscConfig+0x26c>)
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	4a7f      	ldr	r2, [pc, #508]	; (8002164 <HAL_RCC_OscConfig+0x26c>)
 8001f66:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f6a:	6013      	str	r3, [r2, #0]
 8001f6c:	e02e      	b.n	8001fcc <HAL_RCC_OscConfig+0xd4>
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	685b      	ldr	r3, [r3, #4]
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d10c      	bne.n	8001f90 <HAL_RCC_OscConfig+0x98>
 8001f76:	4b7b      	ldr	r3, [pc, #492]	; (8002164 <HAL_RCC_OscConfig+0x26c>)
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	4a7a      	ldr	r2, [pc, #488]	; (8002164 <HAL_RCC_OscConfig+0x26c>)
 8001f7c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f80:	6013      	str	r3, [r2, #0]
 8001f82:	4b78      	ldr	r3, [pc, #480]	; (8002164 <HAL_RCC_OscConfig+0x26c>)
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	4a77      	ldr	r2, [pc, #476]	; (8002164 <HAL_RCC_OscConfig+0x26c>)
 8001f88:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f8c:	6013      	str	r3, [r2, #0]
 8001f8e:	e01d      	b.n	8001fcc <HAL_RCC_OscConfig+0xd4>
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	685b      	ldr	r3, [r3, #4]
 8001f94:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001f98:	d10c      	bne.n	8001fb4 <HAL_RCC_OscConfig+0xbc>
 8001f9a:	4b72      	ldr	r3, [pc, #456]	; (8002164 <HAL_RCC_OscConfig+0x26c>)
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	4a71      	ldr	r2, [pc, #452]	; (8002164 <HAL_RCC_OscConfig+0x26c>)
 8001fa0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001fa4:	6013      	str	r3, [r2, #0]
 8001fa6:	4b6f      	ldr	r3, [pc, #444]	; (8002164 <HAL_RCC_OscConfig+0x26c>)
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	4a6e      	ldr	r2, [pc, #440]	; (8002164 <HAL_RCC_OscConfig+0x26c>)
 8001fac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001fb0:	6013      	str	r3, [r2, #0]
 8001fb2:	e00b      	b.n	8001fcc <HAL_RCC_OscConfig+0xd4>
 8001fb4:	4b6b      	ldr	r3, [pc, #428]	; (8002164 <HAL_RCC_OscConfig+0x26c>)
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	4a6a      	ldr	r2, [pc, #424]	; (8002164 <HAL_RCC_OscConfig+0x26c>)
 8001fba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001fbe:	6013      	str	r3, [r2, #0]
 8001fc0:	4b68      	ldr	r3, [pc, #416]	; (8002164 <HAL_RCC_OscConfig+0x26c>)
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	4a67      	ldr	r2, [pc, #412]	; (8002164 <HAL_RCC_OscConfig+0x26c>)
 8001fc6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001fca:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	685b      	ldr	r3, [r3, #4]
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d013      	beq.n	8001ffc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fd4:	f7ff fce2 	bl	800199c <HAL_GetTick>
 8001fd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fda:	e008      	b.n	8001fee <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001fdc:	f7ff fcde 	bl	800199c <HAL_GetTick>
 8001fe0:	4602      	mov	r2, r0
 8001fe2:	693b      	ldr	r3, [r7, #16]
 8001fe4:	1ad3      	subs	r3, r2, r3
 8001fe6:	2b64      	cmp	r3, #100	; 0x64
 8001fe8:	d901      	bls.n	8001fee <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001fea:	2303      	movs	r3, #3
 8001fec:	e1fa      	b.n	80023e4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fee:	4b5d      	ldr	r3, [pc, #372]	; (8002164 <HAL_RCC_OscConfig+0x26c>)
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d0f0      	beq.n	8001fdc <HAL_RCC_OscConfig+0xe4>
 8001ffa:	e014      	b.n	8002026 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ffc:	f7ff fcce 	bl	800199c <HAL_GetTick>
 8002000:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002002:	e008      	b.n	8002016 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002004:	f7ff fcca 	bl	800199c <HAL_GetTick>
 8002008:	4602      	mov	r2, r0
 800200a:	693b      	ldr	r3, [r7, #16]
 800200c:	1ad3      	subs	r3, r2, r3
 800200e:	2b64      	cmp	r3, #100	; 0x64
 8002010:	d901      	bls.n	8002016 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002012:	2303      	movs	r3, #3
 8002014:	e1e6      	b.n	80023e4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002016:	4b53      	ldr	r3, [pc, #332]	; (8002164 <HAL_RCC_OscConfig+0x26c>)
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800201e:	2b00      	cmp	r3, #0
 8002020:	d1f0      	bne.n	8002004 <HAL_RCC_OscConfig+0x10c>
 8002022:	e000      	b.n	8002026 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002024:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f003 0302 	and.w	r3, r3, #2
 800202e:	2b00      	cmp	r3, #0
 8002030:	d063      	beq.n	80020fa <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002032:	4b4c      	ldr	r3, [pc, #304]	; (8002164 <HAL_RCC_OscConfig+0x26c>)
 8002034:	685b      	ldr	r3, [r3, #4]
 8002036:	f003 030c 	and.w	r3, r3, #12
 800203a:	2b00      	cmp	r3, #0
 800203c:	d00b      	beq.n	8002056 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800203e:	4b49      	ldr	r3, [pc, #292]	; (8002164 <HAL_RCC_OscConfig+0x26c>)
 8002040:	685b      	ldr	r3, [r3, #4]
 8002042:	f003 030c 	and.w	r3, r3, #12
 8002046:	2b08      	cmp	r3, #8
 8002048:	d11c      	bne.n	8002084 <HAL_RCC_OscConfig+0x18c>
 800204a:	4b46      	ldr	r3, [pc, #280]	; (8002164 <HAL_RCC_OscConfig+0x26c>)
 800204c:	685b      	ldr	r3, [r3, #4]
 800204e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002052:	2b00      	cmp	r3, #0
 8002054:	d116      	bne.n	8002084 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002056:	4b43      	ldr	r3, [pc, #268]	; (8002164 <HAL_RCC_OscConfig+0x26c>)
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f003 0302 	and.w	r3, r3, #2
 800205e:	2b00      	cmp	r3, #0
 8002060:	d005      	beq.n	800206e <HAL_RCC_OscConfig+0x176>
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	691b      	ldr	r3, [r3, #16]
 8002066:	2b01      	cmp	r3, #1
 8002068:	d001      	beq.n	800206e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800206a:	2301      	movs	r3, #1
 800206c:	e1ba      	b.n	80023e4 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800206e:	4b3d      	ldr	r3, [pc, #244]	; (8002164 <HAL_RCC_OscConfig+0x26c>)
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	695b      	ldr	r3, [r3, #20]
 800207a:	00db      	lsls	r3, r3, #3
 800207c:	4939      	ldr	r1, [pc, #228]	; (8002164 <HAL_RCC_OscConfig+0x26c>)
 800207e:	4313      	orrs	r3, r2
 8002080:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002082:	e03a      	b.n	80020fa <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	691b      	ldr	r3, [r3, #16]
 8002088:	2b00      	cmp	r3, #0
 800208a:	d020      	beq.n	80020ce <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800208c:	4b36      	ldr	r3, [pc, #216]	; (8002168 <HAL_RCC_OscConfig+0x270>)
 800208e:	2201      	movs	r2, #1
 8002090:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002092:	f7ff fc83 	bl	800199c <HAL_GetTick>
 8002096:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002098:	e008      	b.n	80020ac <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800209a:	f7ff fc7f 	bl	800199c <HAL_GetTick>
 800209e:	4602      	mov	r2, r0
 80020a0:	693b      	ldr	r3, [r7, #16]
 80020a2:	1ad3      	subs	r3, r2, r3
 80020a4:	2b02      	cmp	r3, #2
 80020a6:	d901      	bls.n	80020ac <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80020a8:	2303      	movs	r3, #3
 80020aa:	e19b      	b.n	80023e4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020ac:	4b2d      	ldr	r3, [pc, #180]	; (8002164 <HAL_RCC_OscConfig+0x26c>)
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f003 0302 	and.w	r3, r3, #2
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d0f0      	beq.n	800209a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020b8:	4b2a      	ldr	r3, [pc, #168]	; (8002164 <HAL_RCC_OscConfig+0x26c>)
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	695b      	ldr	r3, [r3, #20]
 80020c4:	00db      	lsls	r3, r3, #3
 80020c6:	4927      	ldr	r1, [pc, #156]	; (8002164 <HAL_RCC_OscConfig+0x26c>)
 80020c8:	4313      	orrs	r3, r2
 80020ca:	600b      	str	r3, [r1, #0]
 80020cc:	e015      	b.n	80020fa <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80020ce:	4b26      	ldr	r3, [pc, #152]	; (8002168 <HAL_RCC_OscConfig+0x270>)
 80020d0:	2200      	movs	r2, #0
 80020d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020d4:	f7ff fc62 	bl	800199c <HAL_GetTick>
 80020d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020da:	e008      	b.n	80020ee <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80020dc:	f7ff fc5e 	bl	800199c <HAL_GetTick>
 80020e0:	4602      	mov	r2, r0
 80020e2:	693b      	ldr	r3, [r7, #16]
 80020e4:	1ad3      	subs	r3, r2, r3
 80020e6:	2b02      	cmp	r3, #2
 80020e8:	d901      	bls.n	80020ee <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80020ea:	2303      	movs	r3, #3
 80020ec:	e17a      	b.n	80023e4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020ee:	4b1d      	ldr	r3, [pc, #116]	; (8002164 <HAL_RCC_OscConfig+0x26c>)
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f003 0302 	and.w	r3, r3, #2
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d1f0      	bne.n	80020dc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f003 0308 	and.w	r3, r3, #8
 8002102:	2b00      	cmp	r3, #0
 8002104:	d03a      	beq.n	800217c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	699b      	ldr	r3, [r3, #24]
 800210a:	2b00      	cmp	r3, #0
 800210c:	d019      	beq.n	8002142 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800210e:	4b17      	ldr	r3, [pc, #92]	; (800216c <HAL_RCC_OscConfig+0x274>)
 8002110:	2201      	movs	r2, #1
 8002112:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002114:	f7ff fc42 	bl	800199c <HAL_GetTick>
 8002118:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800211a:	e008      	b.n	800212e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800211c:	f7ff fc3e 	bl	800199c <HAL_GetTick>
 8002120:	4602      	mov	r2, r0
 8002122:	693b      	ldr	r3, [r7, #16]
 8002124:	1ad3      	subs	r3, r2, r3
 8002126:	2b02      	cmp	r3, #2
 8002128:	d901      	bls.n	800212e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800212a:	2303      	movs	r3, #3
 800212c:	e15a      	b.n	80023e4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800212e:	4b0d      	ldr	r3, [pc, #52]	; (8002164 <HAL_RCC_OscConfig+0x26c>)
 8002130:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002132:	f003 0302 	and.w	r3, r3, #2
 8002136:	2b00      	cmp	r3, #0
 8002138:	d0f0      	beq.n	800211c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800213a:	2001      	movs	r0, #1
 800213c:	f000 fb0a 	bl	8002754 <RCC_Delay>
 8002140:	e01c      	b.n	800217c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002142:	4b0a      	ldr	r3, [pc, #40]	; (800216c <HAL_RCC_OscConfig+0x274>)
 8002144:	2200      	movs	r2, #0
 8002146:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002148:	f7ff fc28 	bl	800199c <HAL_GetTick>
 800214c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800214e:	e00f      	b.n	8002170 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002150:	f7ff fc24 	bl	800199c <HAL_GetTick>
 8002154:	4602      	mov	r2, r0
 8002156:	693b      	ldr	r3, [r7, #16]
 8002158:	1ad3      	subs	r3, r2, r3
 800215a:	2b02      	cmp	r3, #2
 800215c:	d908      	bls.n	8002170 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800215e:	2303      	movs	r3, #3
 8002160:	e140      	b.n	80023e4 <HAL_RCC_OscConfig+0x4ec>
 8002162:	bf00      	nop
 8002164:	40021000 	.word	0x40021000
 8002168:	42420000 	.word	0x42420000
 800216c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002170:	4b9e      	ldr	r3, [pc, #632]	; (80023ec <HAL_RCC_OscConfig+0x4f4>)
 8002172:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002174:	f003 0302 	and.w	r3, r3, #2
 8002178:	2b00      	cmp	r3, #0
 800217a:	d1e9      	bne.n	8002150 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f003 0304 	and.w	r3, r3, #4
 8002184:	2b00      	cmp	r3, #0
 8002186:	f000 80a6 	beq.w	80022d6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800218a:	2300      	movs	r3, #0
 800218c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800218e:	4b97      	ldr	r3, [pc, #604]	; (80023ec <HAL_RCC_OscConfig+0x4f4>)
 8002190:	69db      	ldr	r3, [r3, #28]
 8002192:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002196:	2b00      	cmp	r3, #0
 8002198:	d10d      	bne.n	80021b6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800219a:	4b94      	ldr	r3, [pc, #592]	; (80023ec <HAL_RCC_OscConfig+0x4f4>)
 800219c:	69db      	ldr	r3, [r3, #28]
 800219e:	4a93      	ldr	r2, [pc, #588]	; (80023ec <HAL_RCC_OscConfig+0x4f4>)
 80021a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021a4:	61d3      	str	r3, [r2, #28]
 80021a6:	4b91      	ldr	r3, [pc, #580]	; (80023ec <HAL_RCC_OscConfig+0x4f4>)
 80021a8:	69db      	ldr	r3, [r3, #28]
 80021aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021ae:	60bb      	str	r3, [r7, #8]
 80021b0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80021b2:	2301      	movs	r3, #1
 80021b4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021b6:	4b8e      	ldr	r3, [pc, #568]	; (80023f0 <HAL_RCC_OscConfig+0x4f8>)
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d118      	bne.n	80021f4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80021c2:	4b8b      	ldr	r3, [pc, #556]	; (80023f0 <HAL_RCC_OscConfig+0x4f8>)
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	4a8a      	ldr	r2, [pc, #552]	; (80023f0 <HAL_RCC_OscConfig+0x4f8>)
 80021c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021cc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80021ce:	f7ff fbe5 	bl	800199c <HAL_GetTick>
 80021d2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021d4:	e008      	b.n	80021e8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80021d6:	f7ff fbe1 	bl	800199c <HAL_GetTick>
 80021da:	4602      	mov	r2, r0
 80021dc:	693b      	ldr	r3, [r7, #16]
 80021de:	1ad3      	subs	r3, r2, r3
 80021e0:	2b64      	cmp	r3, #100	; 0x64
 80021e2:	d901      	bls.n	80021e8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80021e4:	2303      	movs	r3, #3
 80021e6:	e0fd      	b.n	80023e4 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021e8:	4b81      	ldr	r3, [pc, #516]	; (80023f0 <HAL_RCC_OscConfig+0x4f8>)
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d0f0      	beq.n	80021d6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	68db      	ldr	r3, [r3, #12]
 80021f8:	2b01      	cmp	r3, #1
 80021fa:	d106      	bne.n	800220a <HAL_RCC_OscConfig+0x312>
 80021fc:	4b7b      	ldr	r3, [pc, #492]	; (80023ec <HAL_RCC_OscConfig+0x4f4>)
 80021fe:	6a1b      	ldr	r3, [r3, #32]
 8002200:	4a7a      	ldr	r2, [pc, #488]	; (80023ec <HAL_RCC_OscConfig+0x4f4>)
 8002202:	f043 0301 	orr.w	r3, r3, #1
 8002206:	6213      	str	r3, [r2, #32]
 8002208:	e02d      	b.n	8002266 <HAL_RCC_OscConfig+0x36e>
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	68db      	ldr	r3, [r3, #12]
 800220e:	2b00      	cmp	r3, #0
 8002210:	d10c      	bne.n	800222c <HAL_RCC_OscConfig+0x334>
 8002212:	4b76      	ldr	r3, [pc, #472]	; (80023ec <HAL_RCC_OscConfig+0x4f4>)
 8002214:	6a1b      	ldr	r3, [r3, #32]
 8002216:	4a75      	ldr	r2, [pc, #468]	; (80023ec <HAL_RCC_OscConfig+0x4f4>)
 8002218:	f023 0301 	bic.w	r3, r3, #1
 800221c:	6213      	str	r3, [r2, #32]
 800221e:	4b73      	ldr	r3, [pc, #460]	; (80023ec <HAL_RCC_OscConfig+0x4f4>)
 8002220:	6a1b      	ldr	r3, [r3, #32]
 8002222:	4a72      	ldr	r2, [pc, #456]	; (80023ec <HAL_RCC_OscConfig+0x4f4>)
 8002224:	f023 0304 	bic.w	r3, r3, #4
 8002228:	6213      	str	r3, [r2, #32]
 800222a:	e01c      	b.n	8002266 <HAL_RCC_OscConfig+0x36e>
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	68db      	ldr	r3, [r3, #12]
 8002230:	2b05      	cmp	r3, #5
 8002232:	d10c      	bne.n	800224e <HAL_RCC_OscConfig+0x356>
 8002234:	4b6d      	ldr	r3, [pc, #436]	; (80023ec <HAL_RCC_OscConfig+0x4f4>)
 8002236:	6a1b      	ldr	r3, [r3, #32]
 8002238:	4a6c      	ldr	r2, [pc, #432]	; (80023ec <HAL_RCC_OscConfig+0x4f4>)
 800223a:	f043 0304 	orr.w	r3, r3, #4
 800223e:	6213      	str	r3, [r2, #32]
 8002240:	4b6a      	ldr	r3, [pc, #424]	; (80023ec <HAL_RCC_OscConfig+0x4f4>)
 8002242:	6a1b      	ldr	r3, [r3, #32]
 8002244:	4a69      	ldr	r2, [pc, #420]	; (80023ec <HAL_RCC_OscConfig+0x4f4>)
 8002246:	f043 0301 	orr.w	r3, r3, #1
 800224a:	6213      	str	r3, [r2, #32]
 800224c:	e00b      	b.n	8002266 <HAL_RCC_OscConfig+0x36e>
 800224e:	4b67      	ldr	r3, [pc, #412]	; (80023ec <HAL_RCC_OscConfig+0x4f4>)
 8002250:	6a1b      	ldr	r3, [r3, #32]
 8002252:	4a66      	ldr	r2, [pc, #408]	; (80023ec <HAL_RCC_OscConfig+0x4f4>)
 8002254:	f023 0301 	bic.w	r3, r3, #1
 8002258:	6213      	str	r3, [r2, #32]
 800225a:	4b64      	ldr	r3, [pc, #400]	; (80023ec <HAL_RCC_OscConfig+0x4f4>)
 800225c:	6a1b      	ldr	r3, [r3, #32]
 800225e:	4a63      	ldr	r2, [pc, #396]	; (80023ec <HAL_RCC_OscConfig+0x4f4>)
 8002260:	f023 0304 	bic.w	r3, r3, #4
 8002264:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	68db      	ldr	r3, [r3, #12]
 800226a:	2b00      	cmp	r3, #0
 800226c:	d015      	beq.n	800229a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800226e:	f7ff fb95 	bl	800199c <HAL_GetTick>
 8002272:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002274:	e00a      	b.n	800228c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002276:	f7ff fb91 	bl	800199c <HAL_GetTick>
 800227a:	4602      	mov	r2, r0
 800227c:	693b      	ldr	r3, [r7, #16]
 800227e:	1ad3      	subs	r3, r2, r3
 8002280:	f241 3288 	movw	r2, #5000	; 0x1388
 8002284:	4293      	cmp	r3, r2
 8002286:	d901      	bls.n	800228c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002288:	2303      	movs	r3, #3
 800228a:	e0ab      	b.n	80023e4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800228c:	4b57      	ldr	r3, [pc, #348]	; (80023ec <HAL_RCC_OscConfig+0x4f4>)
 800228e:	6a1b      	ldr	r3, [r3, #32]
 8002290:	f003 0302 	and.w	r3, r3, #2
 8002294:	2b00      	cmp	r3, #0
 8002296:	d0ee      	beq.n	8002276 <HAL_RCC_OscConfig+0x37e>
 8002298:	e014      	b.n	80022c4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800229a:	f7ff fb7f 	bl	800199c <HAL_GetTick>
 800229e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80022a0:	e00a      	b.n	80022b8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022a2:	f7ff fb7b 	bl	800199c <HAL_GetTick>
 80022a6:	4602      	mov	r2, r0
 80022a8:	693b      	ldr	r3, [r7, #16]
 80022aa:	1ad3      	subs	r3, r2, r3
 80022ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80022b0:	4293      	cmp	r3, r2
 80022b2:	d901      	bls.n	80022b8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80022b4:	2303      	movs	r3, #3
 80022b6:	e095      	b.n	80023e4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80022b8:	4b4c      	ldr	r3, [pc, #304]	; (80023ec <HAL_RCC_OscConfig+0x4f4>)
 80022ba:	6a1b      	ldr	r3, [r3, #32]
 80022bc:	f003 0302 	and.w	r3, r3, #2
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d1ee      	bne.n	80022a2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80022c4:	7dfb      	ldrb	r3, [r7, #23]
 80022c6:	2b01      	cmp	r3, #1
 80022c8:	d105      	bne.n	80022d6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80022ca:	4b48      	ldr	r3, [pc, #288]	; (80023ec <HAL_RCC_OscConfig+0x4f4>)
 80022cc:	69db      	ldr	r3, [r3, #28]
 80022ce:	4a47      	ldr	r2, [pc, #284]	; (80023ec <HAL_RCC_OscConfig+0x4f4>)
 80022d0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80022d4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	69db      	ldr	r3, [r3, #28]
 80022da:	2b00      	cmp	r3, #0
 80022dc:	f000 8081 	beq.w	80023e2 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80022e0:	4b42      	ldr	r3, [pc, #264]	; (80023ec <HAL_RCC_OscConfig+0x4f4>)
 80022e2:	685b      	ldr	r3, [r3, #4]
 80022e4:	f003 030c 	and.w	r3, r3, #12
 80022e8:	2b08      	cmp	r3, #8
 80022ea:	d061      	beq.n	80023b0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	69db      	ldr	r3, [r3, #28]
 80022f0:	2b02      	cmp	r3, #2
 80022f2:	d146      	bne.n	8002382 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022f4:	4b3f      	ldr	r3, [pc, #252]	; (80023f4 <HAL_RCC_OscConfig+0x4fc>)
 80022f6:	2200      	movs	r2, #0
 80022f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022fa:	f7ff fb4f 	bl	800199c <HAL_GetTick>
 80022fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002300:	e008      	b.n	8002314 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002302:	f7ff fb4b 	bl	800199c <HAL_GetTick>
 8002306:	4602      	mov	r2, r0
 8002308:	693b      	ldr	r3, [r7, #16]
 800230a:	1ad3      	subs	r3, r2, r3
 800230c:	2b02      	cmp	r3, #2
 800230e:	d901      	bls.n	8002314 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002310:	2303      	movs	r3, #3
 8002312:	e067      	b.n	80023e4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002314:	4b35      	ldr	r3, [pc, #212]	; (80023ec <HAL_RCC_OscConfig+0x4f4>)
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800231c:	2b00      	cmp	r3, #0
 800231e:	d1f0      	bne.n	8002302 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	6a1b      	ldr	r3, [r3, #32]
 8002324:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002328:	d108      	bne.n	800233c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800232a:	4b30      	ldr	r3, [pc, #192]	; (80023ec <HAL_RCC_OscConfig+0x4f4>)
 800232c:	685b      	ldr	r3, [r3, #4]
 800232e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	689b      	ldr	r3, [r3, #8]
 8002336:	492d      	ldr	r1, [pc, #180]	; (80023ec <HAL_RCC_OscConfig+0x4f4>)
 8002338:	4313      	orrs	r3, r2
 800233a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800233c:	4b2b      	ldr	r3, [pc, #172]	; (80023ec <HAL_RCC_OscConfig+0x4f4>)
 800233e:	685b      	ldr	r3, [r3, #4]
 8002340:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	6a19      	ldr	r1, [r3, #32]
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800234c:	430b      	orrs	r3, r1
 800234e:	4927      	ldr	r1, [pc, #156]	; (80023ec <HAL_RCC_OscConfig+0x4f4>)
 8002350:	4313      	orrs	r3, r2
 8002352:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002354:	4b27      	ldr	r3, [pc, #156]	; (80023f4 <HAL_RCC_OscConfig+0x4fc>)
 8002356:	2201      	movs	r2, #1
 8002358:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800235a:	f7ff fb1f 	bl	800199c <HAL_GetTick>
 800235e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002360:	e008      	b.n	8002374 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002362:	f7ff fb1b 	bl	800199c <HAL_GetTick>
 8002366:	4602      	mov	r2, r0
 8002368:	693b      	ldr	r3, [r7, #16]
 800236a:	1ad3      	subs	r3, r2, r3
 800236c:	2b02      	cmp	r3, #2
 800236e:	d901      	bls.n	8002374 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002370:	2303      	movs	r3, #3
 8002372:	e037      	b.n	80023e4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002374:	4b1d      	ldr	r3, [pc, #116]	; (80023ec <HAL_RCC_OscConfig+0x4f4>)
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800237c:	2b00      	cmp	r3, #0
 800237e:	d0f0      	beq.n	8002362 <HAL_RCC_OscConfig+0x46a>
 8002380:	e02f      	b.n	80023e2 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002382:	4b1c      	ldr	r3, [pc, #112]	; (80023f4 <HAL_RCC_OscConfig+0x4fc>)
 8002384:	2200      	movs	r2, #0
 8002386:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002388:	f7ff fb08 	bl	800199c <HAL_GetTick>
 800238c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800238e:	e008      	b.n	80023a2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002390:	f7ff fb04 	bl	800199c <HAL_GetTick>
 8002394:	4602      	mov	r2, r0
 8002396:	693b      	ldr	r3, [r7, #16]
 8002398:	1ad3      	subs	r3, r2, r3
 800239a:	2b02      	cmp	r3, #2
 800239c:	d901      	bls.n	80023a2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800239e:	2303      	movs	r3, #3
 80023a0:	e020      	b.n	80023e4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80023a2:	4b12      	ldr	r3, [pc, #72]	; (80023ec <HAL_RCC_OscConfig+0x4f4>)
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d1f0      	bne.n	8002390 <HAL_RCC_OscConfig+0x498>
 80023ae:	e018      	b.n	80023e2 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	69db      	ldr	r3, [r3, #28]
 80023b4:	2b01      	cmp	r3, #1
 80023b6:	d101      	bne.n	80023bc <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80023b8:	2301      	movs	r3, #1
 80023ba:	e013      	b.n	80023e4 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80023bc:	4b0b      	ldr	r3, [pc, #44]	; (80023ec <HAL_RCC_OscConfig+0x4f4>)
 80023be:	685b      	ldr	r3, [r3, #4]
 80023c0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	6a1b      	ldr	r3, [r3, #32]
 80023cc:	429a      	cmp	r2, r3
 80023ce:	d106      	bne.n	80023de <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023da:	429a      	cmp	r2, r3
 80023dc:	d001      	beq.n	80023e2 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80023de:	2301      	movs	r3, #1
 80023e0:	e000      	b.n	80023e4 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80023e2:	2300      	movs	r3, #0
}
 80023e4:	4618      	mov	r0, r3
 80023e6:	3718      	adds	r7, #24
 80023e8:	46bd      	mov	sp, r7
 80023ea:	bd80      	pop	{r7, pc}
 80023ec:	40021000 	.word	0x40021000
 80023f0:	40007000 	.word	0x40007000
 80023f4:	42420060 	.word	0x42420060

080023f8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	b084      	sub	sp, #16
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]
 8002400:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	2b00      	cmp	r3, #0
 8002406:	d101      	bne.n	800240c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002408:	2301      	movs	r3, #1
 800240a:	e0d0      	b.n	80025ae <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800240c:	4b6a      	ldr	r3, [pc, #424]	; (80025b8 <HAL_RCC_ClockConfig+0x1c0>)
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f003 0307 	and.w	r3, r3, #7
 8002414:	683a      	ldr	r2, [r7, #0]
 8002416:	429a      	cmp	r2, r3
 8002418:	d910      	bls.n	800243c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800241a:	4b67      	ldr	r3, [pc, #412]	; (80025b8 <HAL_RCC_ClockConfig+0x1c0>)
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f023 0207 	bic.w	r2, r3, #7
 8002422:	4965      	ldr	r1, [pc, #404]	; (80025b8 <HAL_RCC_ClockConfig+0x1c0>)
 8002424:	683b      	ldr	r3, [r7, #0]
 8002426:	4313      	orrs	r3, r2
 8002428:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800242a:	4b63      	ldr	r3, [pc, #396]	; (80025b8 <HAL_RCC_ClockConfig+0x1c0>)
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f003 0307 	and.w	r3, r3, #7
 8002432:	683a      	ldr	r2, [r7, #0]
 8002434:	429a      	cmp	r2, r3
 8002436:	d001      	beq.n	800243c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002438:	2301      	movs	r3, #1
 800243a:	e0b8      	b.n	80025ae <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f003 0302 	and.w	r3, r3, #2
 8002444:	2b00      	cmp	r3, #0
 8002446:	d020      	beq.n	800248a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f003 0304 	and.w	r3, r3, #4
 8002450:	2b00      	cmp	r3, #0
 8002452:	d005      	beq.n	8002460 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002454:	4b59      	ldr	r3, [pc, #356]	; (80025bc <HAL_RCC_ClockConfig+0x1c4>)
 8002456:	685b      	ldr	r3, [r3, #4]
 8002458:	4a58      	ldr	r2, [pc, #352]	; (80025bc <HAL_RCC_ClockConfig+0x1c4>)
 800245a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800245e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f003 0308 	and.w	r3, r3, #8
 8002468:	2b00      	cmp	r3, #0
 800246a:	d005      	beq.n	8002478 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800246c:	4b53      	ldr	r3, [pc, #332]	; (80025bc <HAL_RCC_ClockConfig+0x1c4>)
 800246e:	685b      	ldr	r3, [r3, #4]
 8002470:	4a52      	ldr	r2, [pc, #328]	; (80025bc <HAL_RCC_ClockConfig+0x1c4>)
 8002472:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002476:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002478:	4b50      	ldr	r3, [pc, #320]	; (80025bc <HAL_RCC_ClockConfig+0x1c4>)
 800247a:	685b      	ldr	r3, [r3, #4]
 800247c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	689b      	ldr	r3, [r3, #8]
 8002484:	494d      	ldr	r1, [pc, #308]	; (80025bc <HAL_RCC_ClockConfig+0x1c4>)
 8002486:	4313      	orrs	r3, r2
 8002488:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f003 0301 	and.w	r3, r3, #1
 8002492:	2b00      	cmp	r3, #0
 8002494:	d040      	beq.n	8002518 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	685b      	ldr	r3, [r3, #4]
 800249a:	2b01      	cmp	r3, #1
 800249c:	d107      	bne.n	80024ae <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800249e:	4b47      	ldr	r3, [pc, #284]	; (80025bc <HAL_RCC_ClockConfig+0x1c4>)
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d115      	bne.n	80024d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024aa:	2301      	movs	r3, #1
 80024ac:	e07f      	b.n	80025ae <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	685b      	ldr	r3, [r3, #4]
 80024b2:	2b02      	cmp	r3, #2
 80024b4:	d107      	bne.n	80024c6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80024b6:	4b41      	ldr	r3, [pc, #260]	; (80025bc <HAL_RCC_ClockConfig+0x1c4>)
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d109      	bne.n	80024d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024c2:	2301      	movs	r3, #1
 80024c4:	e073      	b.n	80025ae <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024c6:	4b3d      	ldr	r3, [pc, #244]	; (80025bc <HAL_RCC_ClockConfig+0x1c4>)
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f003 0302 	and.w	r3, r3, #2
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d101      	bne.n	80024d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024d2:	2301      	movs	r3, #1
 80024d4:	e06b      	b.n	80025ae <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80024d6:	4b39      	ldr	r3, [pc, #228]	; (80025bc <HAL_RCC_ClockConfig+0x1c4>)
 80024d8:	685b      	ldr	r3, [r3, #4]
 80024da:	f023 0203 	bic.w	r2, r3, #3
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	685b      	ldr	r3, [r3, #4]
 80024e2:	4936      	ldr	r1, [pc, #216]	; (80025bc <HAL_RCC_ClockConfig+0x1c4>)
 80024e4:	4313      	orrs	r3, r2
 80024e6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80024e8:	f7ff fa58 	bl	800199c <HAL_GetTick>
 80024ec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024ee:	e00a      	b.n	8002506 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024f0:	f7ff fa54 	bl	800199c <HAL_GetTick>
 80024f4:	4602      	mov	r2, r0
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	1ad3      	subs	r3, r2, r3
 80024fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80024fe:	4293      	cmp	r3, r2
 8002500:	d901      	bls.n	8002506 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002502:	2303      	movs	r3, #3
 8002504:	e053      	b.n	80025ae <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002506:	4b2d      	ldr	r3, [pc, #180]	; (80025bc <HAL_RCC_ClockConfig+0x1c4>)
 8002508:	685b      	ldr	r3, [r3, #4]
 800250a:	f003 020c 	and.w	r2, r3, #12
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	685b      	ldr	r3, [r3, #4]
 8002512:	009b      	lsls	r3, r3, #2
 8002514:	429a      	cmp	r2, r3
 8002516:	d1eb      	bne.n	80024f0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002518:	4b27      	ldr	r3, [pc, #156]	; (80025b8 <HAL_RCC_ClockConfig+0x1c0>)
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f003 0307 	and.w	r3, r3, #7
 8002520:	683a      	ldr	r2, [r7, #0]
 8002522:	429a      	cmp	r2, r3
 8002524:	d210      	bcs.n	8002548 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002526:	4b24      	ldr	r3, [pc, #144]	; (80025b8 <HAL_RCC_ClockConfig+0x1c0>)
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f023 0207 	bic.w	r2, r3, #7
 800252e:	4922      	ldr	r1, [pc, #136]	; (80025b8 <HAL_RCC_ClockConfig+0x1c0>)
 8002530:	683b      	ldr	r3, [r7, #0]
 8002532:	4313      	orrs	r3, r2
 8002534:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002536:	4b20      	ldr	r3, [pc, #128]	; (80025b8 <HAL_RCC_ClockConfig+0x1c0>)
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f003 0307 	and.w	r3, r3, #7
 800253e:	683a      	ldr	r2, [r7, #0]
 8002540:	429a      	cmp	r2, r3
 8002542:	d001      	beq.n	8002548 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002544:	2301      	movs	r3, #1
 8002546:	e032      	b.n	80025ae <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f003 0304 	and.w	r3, r3, #4
 8002550:	2b00      	cmp	r3, #0
 8002552:	d008      	beq.n	8002566 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002554:	4b19      	ldr	r3, [pc, #100]	; (80025bc <HAL_RCC_ClockConfig+0x1c4>)
 8002556:	685b      	ldr	r3, [r3, #4]
 8002558:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	68db      	ldr	r3, [r3, #12]
 8002560:	4916      	ldr	r1, [pc, #88]	; (80025bc <HAL_RCC_ClockConfig+0x1c4>)
 8002562:	4313      	orrs	r3, r2
 8002564:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f003 0308 	and.w	r3, r3, #8
 800256e:	2b00      	cmp	r3, #0
 8002570:	d009      	beq.n	8002586 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002572:	4b12      	ldr	r3, [pc, #72]	; (80025bc <HAL_RCC_ClockConfig+0x1c4>)
 8002574:	685b      	ldr	r3, [r3, #4]
 8002576:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	691b      	ldr	r3, [r3, #16]
 800257e:	00db      	lsls	r3, r3, #3
 8002580:	490e      	ldr	r1, [pc, #56]	; (80025bc <HAL_RCC_ClockConfig+0x1c4>)
 8002582:	4313      	orrs	r3, r2
 8002584:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002586:	f000 f821 	bl	80025cc <HAL_RCC_GetSysClockFreq>
 800258a:	4601      	mov	r1, r0
 800258c:	4b0b      	ldr	r3, [pc, #44]	; (80025bc <HAL_RCC_ClockConfig+0x1c4>)
 800258e:	685b      	ldr	r3, [r3, #4]
 8002590:	091b      	lsrs	r3, r3, #4
 8002592:	f003 030f 	and.w	r3, r3, #15
 8002596:	4a0a      	ldr	r2, [pc, #40]	; (80025c0 <HAL_RCC_ClockConfig+0x1c8>)
 8002598:	5cd3      	ldrb	r3, [r2, r3]
 800259a:	fa21 f303 	lsr.w	r3, r1, r3
 800259e:	4a09      	ldr	r2, [pc, #36]	; (80025c4 <HAL_RCC_ClockConfig+0x1cc>)
 80025a0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80025a2:	4b09      	ldr	r3, [pc, #36]	; (80025c8 <HAL_RCC_ClockConfig+0x1d0>)
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	4618      	mov	r0, r3
 80025a8:	f7ff f8c8 	bl	800173c <HAL_InitTick>

  return HAL_OK;
 80025ac:	2300      	movs	r3, #0
}
 80025ae:	4618      	mov	r0, r3
 80025b0:	3710      	adds	r7, #16
 80025b2:	46bd      	mov	sp, r7
 80025b4:	bd80      	pop	{r7, pc}
 80025b6:	bf00      	nop
 80025b8:	40022000 	.word	0x40022000
 80025bc:	40021000 	.word	0x40021000
 80025c0:	080078c0 	.word	0x080078c0
 80025c4:	20000000 	.word	0x20000000
 80025c8:	20000004 	.word	0x20000004

080025cc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80025cc:	b490      	push	{r4, r7}
 80025ce:	b08a      	sub	sp, #40	; 0x28
 80025d0:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80025d2:	4b2a      	ldr	r3, [pc, #168]	; (800267c <HAL_RCC_GetSysClockFreq+0xb0>)
 80025d4:	1d3c      	adds	r4, r7, #4
 80025d6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80025d8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80025dc:	4b28      	ldr	r3, [pc, #160]	; (8002680 <HAL_RCC_GetSysClockFreq+0xb4>)
 80025de:	881b      	ldrh	r3, [r3, #0]
 80025e0:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80025e2:	2300      	movs	r3, #0
 80025e4:	61fb      	str	r3, [r7, #28]
 80025e6:	2300      	movs	r3, #0
 80025e8:	61bb      	str	r3, [r7, #24]
 80025ea:	2300      	movs	r3, #0
 80025ec:	627b      	str	r3, [r7, #36]	; 0x24
 80025ee:	2300      	movs	r3, #0
 80025f0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80025f2:	2300      	movs	r3, #0
 80025f4:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80025f6:	4b23      	ldr	r3, [pc, #140]	; (8002684 <HAL_RCC_GetSysClockFreq+0xb8>)
 80025f8:	685b      	ldr	r3, [r3, #4]
 80025fa:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80025fc:	69fb      	ldr	r3, [r7, #28]
 80025fe:	f003 030c 	and.w	r3, r3, #12
 8002602:	2b04      	cmp	r3, #4
 8002604:	d002      	beq.n	800260c <HAL_RCC_GetSysClockFreq+0x40>
 8002606:	2b08      	cmp	r3, #8
 8002608:	d003      	beq.n	8002612 <HAL_RCC_GetSysClockFreq+0x46>
 800260a:	e02d      	b.n	8002668 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800260c:	4b1e      	ldr	r3, [pc, #120]	; (8002688 <HAL_RCC_GetSysClockFreq+0xbc>)
 800260e:	623b      	str	r3, [r7, #32]
      break;
 8002610:	e02d      	b.n	800266e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002612:	69fb      	ldr	r3, [r7, #28]
 8002614:	0c9b      	lsrs	r3, r3, #18
 8002616:	f003 030f 	and.w	r3, r3, #15
 800261a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800261e:	4413      	add	r3, r2
 8002620:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002624:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002626:	69fb      	ldr	r3, [r7, #28]
 8002628:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800262c:	2b00      	cmp	r3, #0
 800262e:	d013      	beq.n	8002658 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002630:	4b14      	ldr	r3, [pc, #80]	; (8002684 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002632:	685b      	ldr	r3, [r3, #4]
 8002634:	0c5b      	lsrs	r3, r3, #17
 8002636:	f003 0301 	and.w	r3, r3, #1
 800263a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800263e:	4413      	add	r3, r2
 8002640:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002644:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002646:	697b      	ldr	r3, [r7, #20]
 8002648:	4a0f      	ldr	r2, [pc, #60]	; (8002688 <HAL_RCC_GetSysClockFreq+0xbc>)
 800264a:	fb02 f203 	mul.w	r2, r2, r3
 800264e:	69bb      	ldr	r3, [r7, #24]
 8002650:	fbb2 f3f3 	udiv	r3, r2, r3
 8002654:	627b      	str	r3, [r7, #36]	; 0x24
 8002656:	e004      	b.n	8002662 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002658:	697b      	ldr	r3, [r7, #20]
 800265a:	4a0c      	ldr	r2, [pc, #48]	; (800268c <HAL_RCC_GetSysClockFreq+0xc0>)
 800265c:	fb02 f303 	mul.w	r3, r2, r3
 8002660:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002664:	623b      	str	r3, [r7, #32]
      break;
 8002666:	e002      	b.n	800266e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002668:	4b07      	ldr	r3, [pc, #28]	; (8002688 <HAL_RCC_GetSysClockFreq+0xbc>)
 800266a:	623b      	str	r3, [r7, #32]
      break;
 800266c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800266e:	6a3b      	ldr	r3, [r7, #32]
}
 8002670:	4618      	mov	r0, r3
 8002672:	3728      	adds	r7, #40	; 0x28
 8002674:	46bd      	mov	sp, r7
 8002676:	bc90      	pop	{r4, r7}
 8002678:	4770      	bx	lr
 800267a:	bf00      	nop
 800267c:	0800786c 	.word	0x0800786c
 8002680:	0800787c 	.word	0x0800787c
 8002684:	40021000 	.word	0x40021000
 8002688:	007a1200 	.word	0x007a1200
 800268c:	003d0900 	.word	0x003d0900

08002690 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002690:	b480      	push	{r7}
 8002692:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002694:	4b02      	ldr	r3, [pc, #8]	; (80026a0 <HAL_RCC_GetHCLKFreq+0x10>)
 8002696:	681b      	ldr	r3, [r3, #0]
}
 8002698:	4618      	mov	r0, r3
 800269a:	46bd      	mov	sp, r7
 800269c:	bc80      	pop	{r7}
 800269e:	4770      	bx	lr
 80026a0:	20000000 	.word	0x20000000

080026a4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80026a8:	f7ff fff2 	bl	8002690 <HAL_RCC_GetHCLKFreq>
 80026ac:	4601      	mov	r1, r0
 80026ae:	4b05      	ldr	r3, [pc, #20]	; (80026c4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80026b0:	685b      	ldr	r3, [r3, #4]
 80026b2:	0a1b      	lsrs	r3, r3, #8
 80026b4:	f003 0307 	and.w	r3, r3, #7
 80026b8:	4a03      	ldr	r2, [pc, #12]	; (80026c8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80026ba:	5cd3      	ldrb	r3, [r2, r3]
 80026bc:	fa21 f303 	lsr.w	r3, r1, r3
}
 80026c0:	4618      	mov	r0, r3
 80026c2:	bd80      	pop	{r7, pc}
 80026c4:	40021000 	.word	0x40021000
 80026c8:	080078d0 	.word	0x080078d0

080026cc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80026d0:	f7ff ffde 	bl	8002690 <HAL_RCC_GetHCLKFreq>
 80026d4:	4601      	mov	r1, r0
 80026d6:	4b05      	ldr	r3, [pc, #20]	; (80026ec <HAL_RCC_GetPCLK2Freq+0x20>)
 80026d8:	685b      	ldr	r3, [r3, #4]
 80026da:	0adb      	lsrs	r3, r3, #11
 80026dc:	f003 0307 	and.w	r3, r3, #7
 80026e0:	4a03      	ldr	r2, [pc, #12]	; (80026f0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80026e2:	5cd3      	ldrb	r3, [r2, r3]
 80026e4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80026e8:	4618      	mov	r0, r3
 80026ea:	bd80      	pop	{r7, pc}
 80026ec:	40021000 	.word	0x40021000
 80026f0:	080078d0 	.word	0x080078d0

080026f4 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80026f4:	b480      	push	{r7}
 80026f6:	b083      	sub	sp, #12
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
 80026fc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	220f      	movs	r2, #15
 8002702:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002704:	4b11      	ldr	r3, [pc, #68]	; (800274c <HAL_RCC_GetClockConfig+0x58>)
 8002706:	685b      	ldr	r3, [r3, #4]
 8002708:	f003 0203 	and.w	r2, r3, #3
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002710:	4b0e      	ldr	r3, [pc, #56]	; (800274c <HAL_RCC_GetClockConfig+0x58>)
 8002712:	685b      	ldr	r3, [r3, #4]
 8002714:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800271c:	4b0b      	ldr	r3, [pc, #44]	; (800274c <HAL_RCC_GetClockConfig+0x58>)
 800271e:	685b      	ldr	r3, [r3, #4]
 8002720:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8002728:	4b08      	ldr	r3, [pc, #32]	; (800274c <HAL_RCC_GetClockConfig+0x58>)
 800272a:	685b      	ldr	r3, [r3, #4]
 800272c:	08db      	lsrs	r3, r3, #3
 800272e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002736:	4b06      	ldr	r3, [pc, #24]	; (8002750 <HAL_RCC_GetClockConfig+0x5c>)
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f003 0207 	and.w	r2, r3, #7
 800273e:	683b      	ldr	r3, [r7, #0]
 8002740:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8002742:	bf00      	nop
 8002744:	370c      	adds	r7, #12
 8002746:	46bd      	mov	sp, r7
 8002748:	bc80      	pop	{r7}
 800274a:	4770      	bx	lr
 800274c:	40021000 	.word	0x40021000
 8002750:	40022000 	.word	0x40022000

08002754 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002754:	b480      	push	{r7}
 8002756:	b085      	sub	sp, #20
 8002758:	af00      	add	r7, sp, #0
 800275a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800275c:	4b0a      	ldr	r3, [pc, #40]	; (8002788 <RCC_Delay+0x34>)
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	4a0a      	ldr	r2, [pc, #40]	; (800278c <RCC_Delay+0x38>)
 8002762:	fba2 2303 	umull	r2, r3, r2, r3
 8002766:	0a5b      	lsrs	r3, r3, #9
 8002768:	687a      	ldr	r2, [r7, #4]
 800276a:	fb02 f303 	mul.w	r3, r2, r3
 800276e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002770:	bf00      	nop
  }
  while (Delay --);
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	1e5a      	subs	r2, r3, #1
 8002776:	60fa      	str	r2, [r7, #12]
 8002778:	2b00      	cmp	r3, #0
 800277a:	d1f9      	bne.n	8002770 <RCC_Delay+0x1c>
}
 800277c:	bf00      	nop
 800277e:	3714      	adds	r7, #20
 8002780:	46bd      	mov	sp, r7
 8002782:	bc80      	pop	{r7}
 8002784:	4770      	bx	lr
 8002786:	bf00      	nop
 8002788:	20000000 	.word	0x20000000
 800278c:	10624dd3 	.word	0x10624dd3

08002790 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002790:	b580      	push	{r7, lr}
 8002792:	b082      	sub	sp, #8
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	2b00      	cmp	r3, #0
 800279c:	d101      	bne.n	80027a2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800279e:	2301      	movs	r3, #1
 80027a0:	e053      	b.n	800284a <HAL_SPI_Init+0xba>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	2200      	movs	r2, #0
 80027a6:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80027ae:	b2db      	uxtb	r3, r3
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d106      	bne.n	80027c2 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	2200      	movs	r2, #0
 80027b8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80027bc:	6878      	ldr	r0, [r7, #4]
 80027be:	f7fe ff27 	bl	8001610 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	2202      	movs	r2, #2
 80027c6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	681a      	ldr	r2, [r3, #0]
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80027d8:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	685a      	ldr	r2, [r3, #4]
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	689b      	ldr	r3, [r3, #8]
 80027e2:	431a      	orrs	r2, r3
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	68db      	ldr	r3, [r3, #12]
 80027e8:	431a      	orrs	r2, r3
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	691b      	ldr	r3, [r3, #16]
 80027ee:	431a      	orrs	r2, r3
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	695b      	ldr	r3, [r3, #20]
 80027f4:	431a      	orrs	r2, r3
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	699b      	ldr	r3, [r3, #24]
 80027fa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80027fe:	431a      	orrs	r2, r3
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	69db      	ldr	r3, [r3, #28]
 8002804:	431a      	orrs	r2, r3
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	6a1b      	ldr	r3, [r3, #32]
 800280a:	ea42 0103 	orr.w	r1, r2, r3
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	430a      	orrs	r2, r1
 8002818:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	699b      	ldr	r3, [r3, #24]
 800281e:	0c1a      	lsrs	r2, r3, #16
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f002 0204 	and.w	r2, r2, #4
 8002828:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	69da      	ldr	r2, [r3, #28]
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002838:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	2200      	movs	r2, #0
 800283e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	2201      	movs	r2, #1
 8002844:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002848:	2300      	movs	r3, #0
}
 800284a:	4618      	mov	r0, r3
 800284c:	3708      	adds	r7, #8
 800284e:	46bd      	mov	sp, r7
 8002850:	bd80      	pop	{r7, pc}

08002852 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002852:	b580      	push	{r7, lr}
 8002854:	b088      	sub	sp, #32
 8002856:	af00      	add	r7, sp, #0
 8002858:	60f8      	str	r0, [r7, #12]
 800285a:	60b9      	str	r1, [r7, #8]
 800285c:	603b      	str	r3, [r7, #0]
 800285e:	4613      	mov	r3, r2
 8002860:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002862:	2300      	movs	r3, #0
 8002864:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800286c:	2b01      	cmp	r3, #1
 800286e:	d101      	bne.n	8002874 <HAL_SPI_Transmit+0x22>
 8002870:	2302      	movs	r3, #2
 8002872:	e11e      	b.n	8002ab2 <HAL_SPI_Transmit+0x260>
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	2201      	movs	r2, #1
 8002878:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800287c:	f7ff f88e 	bl	800199c <HAL_GetTick>
 8002880:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002882:	88fb      	ldrh	r3, [r7, #6]
 8002884:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800288c:	b2db      	uxtb	r3, r3
 800288e:	2b01      	cmp	r3, #1
 8002890:	d002      	beq.n	8002898 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002892:	2302      	movs	r3, #2
 8002894:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002896:	e103      	b.n	8002aa0 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 8002898:	68bb      	ldr	r3, [r7, #8]
 800289a:	2b00      	cmp	r3, #0
 800289c:	d002      	beq.n	80028a4 <HAL_SPI_Transmit+0x52>
 800289e:	88fb      	ldrh	r3, [r7, #6]
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d102      	bne.n	80028aa <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80028a4:	2301      	movs	r3, #1
 80028a6:	77fb      	strb	r3, [r7, #31]
    goto error;
 80028a8:	e0fa      	b.n	8002aa0 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	2203      	movs	r2, #3
 80028ae:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	2200      	movs	r2, #0
 80028b6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	68ba      	ldr	r2, [r7, #8]
 80028bc:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	88fa      	ldrh	r2, [r7, #6]
 80028c2:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	88fa      	ldrh	r2, [r7, #6]
 80028c8:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	2200      	movs	r2, #0
 80028ce:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	2200      	movs	r2, #0
 80028d4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	2200      	movs	r2, #0
 80028da:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	2200      	movs	r2, #0
 80028e0:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	2200      	movs	r2, #0
 80028e6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	689b      	ldr	r3, [r3, #8]
 80028ec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80028f0:	d107      	bne.n	8002902 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	681a      	ldr	r2, [r3, #0]
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002900:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800290c:	2b40      	cmp	r3, #64	; 0x40
 800290e:	d007      	beq.n	8002920 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	681a      	ldr	r2, [r3, #0]
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800291e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	68db      	ldr	r3, [r3, #12]
 8002924:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002928:	d14b      	bne.n	80029c2 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	685b      	ldr	r3, [r3, #4]
 800292e:	2b00      	cmp	r3, #0
 8002930:	d002      	beq.n	8002938 <HAL_SPI_Transmit+0xe6>
 8002932:	8afb      	ldrh	r3, [r7, #22]
 8002934:	2b01      	cmp	r3, #1
 8002936:	d13e      	bne.n	80029b6 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800293c:	881a      	ldrh	r2, [r3, #0]
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002948:	1c9a      	adds	r2, r3, #2
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002952:	b29b      	uxth	r3, r3
 8002954:	3b01      	subs	r3, #1
 8002956:	b29a      	uxth	r2, r3
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800295c:	e02b      	b.n	80029b6 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	689b      	ldr	r3, [r3, #8]
 8002964:	f003 0302 	and.w	r3, r3, #2
 8002968:	2b02      	cmp	r3, #2
 800296a:	d112      	bne.n	8002992 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002970:	881a      	ldrh	r2, [r3, #0]
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800297c:	1c9a      	adds	r2, r3, #2
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002986:	b29b      	uxth	r3, r3
 8002988:	3b01      	subs	r3, #1
 800298a:	b29a      	uxth	r2, r3
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	86da      	strh	r2, [r3, #54]	; 0x36
 8002990:	e011      	b.n	80029b6 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002992:	f7ff f803 	bl	800199c <HAL_GetTick>
 8002996:	4602      	mov	r2, r0
 8002998:	69bb      	ldr	r3, [r7, #24]
 800299a:	1ad3      	subs	r3, r2, r3
 800299c:	683a      	ldr	r2, [r7, #0]
 800299e:	429a      	cmp	r2, r3
 80029a0:	d803      	bhi.n	80029aa <HAL_SPI_Transmit+0x158>
 80029a2:	683b      	ldr	r3, [r7, #0]
 80029a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029a8:	d102      	bne.n	80029b0 <HAL_SPI_Transmit+0x15e>
 80029aa:	683b      	ldr	r3, [r7, #0]
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d102      	bne.n	80029b6 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 80029b0:	2303      	movs	r3, #3
 80029b2:	77fb      	strb	r3, [r7, #31]
          goto error;
 80029b4:	e074      	b.n	8002aa0 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80029ba:	b29b      	uxth	r3, r3
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d1ce      	bne.n	800295e <HAL_SPI_Transmit+0x10c>
 80029c0:	e04c      	b.n	8002a5c <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	685b      	ldr	r3, [r3, #4]
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d002      	beq.n	80029d0 <HAL_SPI_Transmit+0x17e>
 80029ca:	8afb      	ldrh	r3, [r7, #22]
 80029cc:	2b01      	cmp	r3, #1
 80029ce:	d140      	bne.n	8002a52 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	330c      	adds	r3, #12
 80029da:	7812      	ldrb	r2, [r2, #0]
 80029dc:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029e2:	1c5a      	adds	r2, r3, #1
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80029ec:	b29b      	uxth	r3, r3
 80029ee:	3b01      	subs	r3, #1
 80029f0:	b29a      	uxth	r2, r3
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80029f6:	e02c      	b.n	8002a52 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	689b      	ldr	r3, [r3, #8]
 80029fe:	f003 0302 	and.w	r3, r3, #2
 8002a02:	2b02      	cmp	r3, #2
 8002a04:	d113      	bne.n	8002a2e <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	330c      	adds	r3, #12
 8002a10:	7812      	ldrb	r2, [r2, #0]
 8002a12:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a18:	1c5a      	adds	r2, r3, #1
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002a22:	b29b      	uxth	r3, r3
 8002a24:	3b01      	subs	r3, #1
 8002a26:	b29a      	uxth	r2, r3
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	86da      	strh	r2, [r3, #54]	; 0x36
 8002a2c:	e011      	b.n	8002a52 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002a2e:	f7fe ffb5 	bl	800199c <HAL_GetTick>
 8002a32:	4602      	mov	r2, r0
 8002a34:	69bb      	ldr	r3, [r7, #24]
 8002a36:	1ad3      	subs	r3, r2, r3
 8002a38:	683a      	ldr	r2, [r7, #0]
 8002a3a:	429a      	cmp	r2, r3
 8002a3c:	d803      	bhi.n	8002a46 <HAL_SPI_Transmit+0x1f4>
 8002a3e:	683b      	ldr	r3, [r7, #0]
 8002a40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a44:	d102      	bne.n	8002a4c <HAL_SPI_Transmit+0x1fa>
 8002a46:	683b      	ldr	r3, [r7, #0]
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d102      	bne.n	8002a52 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 8002a4c:	2303      	movs	r3, #3
 8002a4e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002a50:	e026      	b.n	8002aa0 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002a56:	b29b      	uxth	r3, r3
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d1cd      	bne.n	80029f8 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002a5c:	69ba      	ldr	r2, [r7, #24]
 8002a5e:	6839      	ldr	r1, [r7, #0]
 8002a60:	68f8      	ldr	r0, [r7, #12]
 8002a62:	f000 fb91 	bl	8003188 <SPI_EndRxTxTransaction>
 8002a66:	4603      	mov	r3, r0
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d002      	beq.n	8002a72 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	2220      	movs	r2, #32
 8002a70:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	689b      	ldr	r3, [r3, #8]
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d10a      	bne.n	8002a90 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	613b      	str	r3, [r7, #16]
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	68db      	ldr	r3, [r3, #12]
 8002a84:	613b      	str	r3, [r7, #16]
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	689b      	ldr	r3, [r3, #8]
 8002a8c:	613b      	str	r3, [r7, #16]
 8002a8e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d002      	beq.n	8002a9e <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 8002a98:	2301      	movs	r3, #1
 8002a9a:	77fb      	strb	r3, [r7, #31]
 8002a9c:	e000      	b.n	8002aa0 <HAL_SPI_Transmit+0x24e>
  }

error:
 8002a9e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	2201      	movs	r2, #1
 8002aa4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	2200      	movs	r2, #0
 8002aac:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002ab0:	7ffb      	ldrb	r3, [r7, #31]
}
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	3720      	adds	r7, #32
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	bd80      	pop	{r7, pc}

08002aba <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002aba:	b580      	push	{r7, lr}
 8002abc:	b088      	sub	sp, #32
 8002abe:	af02      	add	r7, sp, #8
 8002ac0:	60f8      	str	r0, [r7, #12]
 8002ac2:	60b9      	str	r1, [r7, #8]
 8002ac4:	603b      	str	r3, [r7, #0]
 8002ac6:	4613      	mov	r3, r2
 8002ac8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002aca:	2300      	movs	r3, #0
 8002acc:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	685b      	ldr	r3, [r3, #4]
 8002ad2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002ad6:	d112      	bne.n	8002afe <HAL_SPI_Receive+0x44>
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	689b      	ldr	r3, [r3, #8]
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d10e      	bne.n	8002afe <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	2204      	movs	r2, #4
 8002ae4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8002ae8:	88fa      	ldrh	r2, [r7, #6]
 8002aea:	683b      	ldr	r3, [r7, #0]
 8002aec:	9300      	str	r3, [sp, #0]
 8002aee:	4613      	mov	r3, r2
 8002af0:	68ba      	ldr	r2, [r7, #8]
 8002af2:	68b9      	ldr	r1, [r7, #8]
 8002af4:	68f8      	ldr	r0, [r7, #12]
 8002af6:	f000 f8e9 	bl	8002ccc <HAL_SPI_TransmitReceive>
 8002afa:	4603      	mov	r3, r0
 8002afc:	e0e2      	b.n	8002cc4 <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002b04:	2b01      	cmp	r3, #1
 8002b06:	d101      	bne.n	8002b0c <HAL_SPI_Receive+0x52>
 8002b08:	2302      	movs	r3, #2
 8002b0a:	e0db      	b.n	8002cc4 <HAL_SPI_Receive+0x20a>
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	2201      	movs	r2, #1
 8002b10:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002b14:	f7fe ff42 	bl	800199c <HAL_GetTick>
 8002b18:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002b20:	b2db      	uxtb	r3, r3
 8002b22:	2b01      	cmp	r3, #1
 8002b24:	d002      	beq.n	8002b2c <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8002b26:	2302      	movs	r3, #2
 8002b28:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002b2a:	e0c2      	b.n	8002cb2 <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 8002b2c:	68bb      	ldr	r3, [r7, #8]
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d002      	beq.n	8002b38 <HAL_SPI_Receive+0x7e>
 8002b32:	88fb      	ldrh	r3, [r7, #6]
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d102      	bne.n	8002b3e <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8002b38:	2301      	movs	r3, #1
 8002b3a:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002b3c:	e0b9      	b.n	8002cb2 <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	2204      	movs	r2, #4
 8002b42:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	2200      	movs	r2, #0
 8002b4a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	68ba      	ldr	r2, [r7, #8]
 8002b50:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	88fa      	ldrh	r2, [r7, #6]
 8002b56:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	88fa      	ldrh	r2, [r7, #6]
 8002b5c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	2200      	movs	r2, #0
 8002b62:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	2200      	movs	r2, #0
 8002b68:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	2200      	movs	r2, #0
 8002b74:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	2200      	movs	r2, #0
 8002b7a:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	689b      	ldr	r3, [r3, #8]
 8002b80:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002b84:	d107      	bne.n	8002b96 <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	681a      	ldr	r2, [r3, #0]
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002b94:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ba0:	2b40      	cmp	r3, #64	; 0x40
 8002ba2:	d007      	beq.n	8002bb4 <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	681a      	ldr	r2, [r3, #0]
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002bb2:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	68db      	ldr	r3, [r3, #12]
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d162      	bne.n	8002c82 <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8002bbc:	e02e      	b.n	8002c1c <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	689b      	ldr	r3, [r3, #8]
 8002bc4:	f003 0301 	and.w	r3, r3, #1
 8002bc8:	2b01      	cmp	r3, #1
 8002bca:	d115      	bne.n	8002bf8 <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f103 020c 	add.w	r2, r3, #12
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bd8:	7812      	ldrb	r2, [r2, #0]
 8002bda:	b2d2      	uxtb	r2, r2
 8002bdc:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002be2:	1c5a      	adds	r2, r3, #1
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002bec:	b29b      	uxth	r3, r3
 8002bee:	3b01      	subs	r3, #1
 8002bf0:	b29a      	uxth	r2, r3
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002bf6:	e011      	b.n	8002c1c <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002bf8:	f7fe fed0 	bl	800199c <HAL_GetTick>
 8002bfc:	4602      	mov	r2, r0
 8002bfe:	693b      	ldr	r3, [r7, #16]
 8002c00:	1ad3      	subs	r3, r2, r3
 8002c02:	683a      	ldr	r2, [r7, #0]
 8002c04:	429a      	cmp	r2, r3
 8002c06:	d803      	bhi.n	8002c10 <HAL_SPI_Receive+0x156>
 8002c08:	683b      	ldr	r3, [r7, #0]
 8002c0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c0e:	d102      	bne.n	8002c16 <HAL_SPI_Receive+0x15c>
 8002c10:	683b      	ldr	r3, [r7, #0]
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d102      	bne.n	8002c1c <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 8002c16:	2303      	movs	r3, #3
 8002c18:	75fb      	strb	r3, [r7, #23]
          goto error;
 8002c1a:	e04a      	b.n	8002cb2 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002c20:	b29b      	uxth	r3, r3
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d1cb      	bne.n	8002bbe <HAL_SPI_Receive+0x104>
 8002c26:	e031      	b.n	8002c8c <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	689b      	ldr	r3, [r3, #8]
 8002c2e:	f003 0301 	and.w	r3, r3, #1
 8002c32:	2b01      	cmp	r3, #1
 8002c34:	d113      	bne.n	8002c5e <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	68da      	ldr	r2, [r3, #12]
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c40:	b292      	uxth	r2, r2
 8002c42:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c48:	1c9a      	adds	r2, r3, #2
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002c52:	b29b      	uxth	r3, r3
 8002c54:	3b01      	subs	r3, #1
 8002c56:	b29a      	uxth	r2, r3
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002c5c:	e011      	b.n	8002c82 <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002c5e:	f7fe fe9d 	bl	800199c <HAL_GetTick>
 8002c62:	4602      	mov	r2, r0
 8002c64:	693b      	ldr	r3, [r7, #16]
 8002c66:	1ad3      	subs	r3, r2, r3
 8002c68:	683a      	ldr	r2, [r7, #0]
 8002c6a:	429a      	cmp	r2, r3
 8002c6c:	d803      	bhi.n	8002c76 <HAL_SPI_Receive+0x1bc>
 8002c6e:	683b      	ldr	r3, [r7, #0]
 8002c70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c74:	d102      	bne.n	8002c7c <HAL_SPI_Receive+0x1c2>
 8002c76:	683b      	ldr	r3, [r7, #0]
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d102      	bne.n	8002c82 <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 8002c7c:	2303      	movs	r3, #3
 8002c7e:	75fb      	strb	r3, [r7, #23]
          goto error;
 8002c80:	e017      	b.n	8002cb2 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002c86:	b29b      	uxth	r3, r3
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d1cd      	bne.n	8002c28 <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002c8c:	693a      	ldr	r2, [r7, #16]
 8002c8e:	6839      	ldr	r1, [r7, #0]
 8002c90:	68f8      	ldr	r0, [r7, #12]
 8002c92:	f000 fa27 	bl	80030e4 <SPI_EndRxTransaction>
 8002c96:	4603      	mov	r3, r0
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d002      	beq.n	8002ca2 <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	2220      	movs	r2, #32
 8002ca0:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d002      	beq.n	8002cb0 <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 8002caa:	2301      	movs	r3, #1
 8002cac:	75fb      	strb	r3, [r7, #23]
 8002cae:	e000      	b.n	8002cb2 <HAL_SPI_Receive+0x1f8>
  }

error :
 8002cb0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	2201      	movs	r2, #1
 8002cb6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002cc2:	7dfb      	ldrb	r3, [r7, #23]
}
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	3718      	adds	r7, #24
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	bd80      	pop	{r7, pc}

08002ccc <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	b08c      	sub	sp, #48	; 0x30
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	60f8      	str	r0, [r7, #12]
 8002cd4:	60b9      	str	r1, [r7, #8]
 8002cd6:	607a      	str	r2, [r7, #4]
 8002cd8:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002cda:	2301      	movs	r3, #1
 8002cdc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002cde:	2300      	movs	r3, #0
 8002ce0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002cea:	2b01      	cmp	r3, #1
 8002cec:	d101      	bne.n	8002cf2 <HAL_SPI_TransmitReceive+0x26>
 8002cee:	2302      	movs	r3, #2
 8002cf0:	e18a      	b.n	8003008 <HAL_SPI_TransmitReceive+0x33c>
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	2201      	movs	r2, #1
 8002cf6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002cfa:	f7fe fe4f 	bl	800199c <HAL_GetTick>
 8002cfe:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002d06:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	685b      	ldr	r3, [r3, #4]
 8002d0e:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8002d10:	887b      	ldrh	r3, [r7, #2]
 8002d12:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002d14:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002d18:	2b01      	cmp	r3, #1
 8002d1a:	d00f      	beq.n	8002d3c <HAL_SPI_TransmitReceive+0x70>
 8002d1c:	69fb      	ldr	r3, [r7, #28]
 8002d1e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002d22:	d107      	bne.n	8002d34 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	689b      	ldr	r3, [r3, #8]
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d103      	bne.n	8002d34 <HAL_SPI_TransmitReceive+0x68>
 8002d2c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002d30:	2b04      	cmp	r3, #4
 8002d32:	d003      	beq.n	8002d3c <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8002d34:	2302      	movs	r3, #2
 8002d36:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002d3a:	e15b      	b.n	8002ff4 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002d3c:	68bb      	ldr	r3, [r7, #8]
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d005      	beq.n	8002d4e <HAL_SPI_TransmitReceive+0x82>
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d002      	beq.n	8002d4e <HAL_SPI_TransmitReceive+0x82>
 8002d48:	887b      	ldrh	r3, [r7, #2]
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d103      	bne.n	8002d56 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8002d4e:	2301      	movs	r3, #1
 8002d50:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002d54:	e14e      	b.n	8002ff4 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002d5c:	b2db      	uxtb	r3, r3
 8002d5e:	2b04      	cmp	r3, #4
 8002d60:	d003      	beq.n	8002d6a <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	2205      	movs	r2, #5
 8002d66:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	687a      	ldr	r2, [r7, #4]
 8002d74:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	887a      	ldrh	r2, [r7, #2]
 8002d7a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	887a      	ldrh	r2, [r7, #2]
 8002d80:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	68ba      	ldr	r2, [r7, #8]
 8002d86:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	887a      	ldrh	r2, [r7, #2]
 8002d8c:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	887a      	ldrh	r2, [r7, #2]
 8002d92:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	2200      	movs	r2, #0
 8002d98:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002daa:	2b40      	cmp	r3, #64	; 0x40
 8002dac:	d007      	beq.n	8002dbe <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	681a      	ldr	r2, [r3, #0]
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002dbc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	68db      	ldr	r3, [r3, #12]
 8002dc2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002dc6:	d178      	bne.n	8002eba <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	685b      	ldr	r3, [r3, #4]
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d002      	beq.n	8002dd6 <HAL_SPI_TransmitReceive+0x10a>
 8002dd0:	8b7b      	ldrh	r3, [r7, #26]
 8002dd2:	2b01      	cmp	r3, #1
 8002dd4:	d166      	bne.n	8002ea4 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dda:	881a      	ldrh	r2, [r3, #0]
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002de6:	1c9a      	adds	r2, r3, #2
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002df0:	b29b      	uxth	r3, r3
 8002df2:	3b01      	subs	r3, #1
 8002df4:	b29a      	uxth	r2, r3
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002dfa:	e053      	b.n	8002ea4 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	689b      	ldr	r3, [r3, #8]
 8002e02:	f003 0302 	and.w	r3, r3, #2
 8002e06:	2b02      	cmp	r3, #2
 8002e08:	d11b      	bne.n	8002e42 <HAL_SPI_TransmitReceive+0x176>
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002e0e:	b29b      	uxth	r3, r3
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d016      	beq.n	8002e42 <HAL_SPI_TransmitReceive+0x176>
 8002e14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e16:	2b01      	cmp	r3, #1
 8002e18:	d113      	bne.n	8002e42 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e1e:	881a      	ldrh	r2, [r3, #0]
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e2a:	1c9a      	adds	r2, r3, #2
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002e34:	b29b      	uxth	r3, r3
 8002e36:	3b01      	subs	r3, #1
 8002e38:	b29a      	uxth	r2, r3
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002e3e:	2300      	movs	r3, #0
 8002e40:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	689b      	ldr	r3, [r3, #8]
 8002e48:	f003 0301 	and.w	r3, r3, #1
 8002e4c:	2b01      	cmp	r3, #1
 8002e4e:	d119      	bne.n	8002e84 <HAL_SPI_TransmitReceive+0x1b8>
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002e54:	b29b      	uxth	r3, r3
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d014      	beq.n	8002e84 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	68da      	ldr	r2, [r3, #12]
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e64:	b292      	uxth	r2, r2
 8002e66:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e6c:	1c9a      	adds	r2, r3, #2
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002e76:	b29b      	uxth	r3, r3
 8002e78:	3b01      	subs	r3, #1
 8002e7a:	b29a      	uxth	r2, r3
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002e80:	2301      	movs	r3, #1
 8002e82:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002e84:	f7fe fd8a 	bl	800199c <HAL_GetTick>
 8002e88:	4602      	mov	r2, r0
 8002e8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e8c:	1ad3      	subs	r3, r2, r3
 8002e8e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002e90:	429a      	cmp	r2, r3
 8002e92:	d807      	bhi.n	8002ea4 <HAL_SPI_TransmitReceive+0x1d8>
 8002e94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e9a:	d003      	beq.n	8002ea4 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8002e9c:	2303      	movs	r3, #3
 8002e9e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002ea2:	e0a7      	b.n	8002ff4 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002ea8:	b29b      	uxth	r3, r3
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d1a6      	bne.n	8002dfc <HAL_SPI_TransmitReceive+0x130>
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002eb2:	b29b      	uxth	r3, r3
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d1a1      	bne.n	8002dfc <HAL_SPI_TransmitReceive+0x130>
 8002eb8:	e07c      	b.n	8002fb4 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	685b      	ldr	r3, [r3, #4]
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d002      	beq.n	8002ec8 <HAL_SPI_TransmitReceive+0x1fc>
 8002ec2:	8b7b      	ldrh	r3, [r7, #26]
 8002ec4:	2b01      	cmp	r3, #1
 8002ec6:	d16b      	bne.n	8002fa0 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	330c      	adds	r3, #12
 8002ed2:	7812      	ldrb	r2, [r2, #0]
 8002ed4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eda:	1c5a      	adds	r2, r3, #1
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002ee4:	b29b      	uxth	r3, r3
 8002ee6:	3b01      	subs	r3, #1
 8002ee8:	b29a      	uxth	r2, r3
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002eee:	e057      	b.n	8002fa0 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	689b      	ldr	r3, [r3, #8]
 8002ef6:	f003 0302 	and.w	r3, r3, #2
 8002efa:	2b02      	cmp	r3, #2
 8002efc:	d11c      	bne.n	8002f38 <HAL_SPI_TransmitReceive+0x26c>
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002f02:	b29b      	uxth	r3, r3
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d017      	beq.n	8002f38 <HAL_SPI_TransmitReceive+0x26c>
 8002f08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f0a:	2b01      	cmp	r3, #1
 8002f0c:	d114      	bne.n	8002f38 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	330c      	adds	r3, #12
 8002f18:	7812      	ldrb	r2, [r2, #0]
 8002f1a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f20:	1c5a      	adds	r2, r3, #1
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002f2a:	b29b      	uxth	r3, r3
 8002f2c:	3b01      	subs	r3, #1
 8002f2e:	b29a      	uxth	r2, r3
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002f34:	2300      	movs	r3, #0
 8002f36:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	689b      	ldr	r3, [r3, #8]
 8002f3e:	f003 0301 	and.w	r3, r3, #1
 8002f42:	2b01      	cmp	r3, #1
 8002f44:	d119      	bne.n	8002f7a <HAL_SPI_TransmitReceive+0x2ae>
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f4a:	b29b      	uxth	r3, r3
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d014      	beq.n	8002f7a <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	68da      	ldr	r2, [r3, #12]
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f5a:	b2d2      	uxtb	r2, r2
 8002f5c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f62:	1c5a      	adds	r2, r3, #1
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f6c:	b29b      	uxth	r3, r3
 8002f6e:	3b01      	subs	r3, #1
 8002f70:	b29a      	uxth	r2, r3
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002f76:	2301      	movs	r3, #1
 8002f78:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002f7a:	f7fe fd0f 	bl	800199c <HAL_GetTick>
 8002f7e:	4602      	mov	r2, r0
 8002f80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f82:	1ad3      	subs	r3, r2, r3
 8002f84:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002f86:	429a      	cmp	r2, r3
 8002f88:	d803      	bhi.n	8002f92 <HAL_SPI_TransmitReceive+0x2c6>
 8002f8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f90:	d102      	bne.n	8002f98 <HAL_SPI_TransmitReceive+0x2cc>
 8002f92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d103      	bne.n	8002fa0 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8002f98:	2303      	movs	r3, #3
 8002f9a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002f9e:	e029      	b.n	8002ff4 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002fa4:	b29b      	uxth	r3, r3
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d1a2      	bne.n	8002ef0 <HAL_SPI_TransmitReceive+0x224>
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002fae:	b29b      	uxth	r3, r3
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d19d      	bne.n	8002ef0 <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002fb4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002fb6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002fb8:	68f8      	ldr	r0, [r7, #12]
 8002fba:	f000 f8e5 	bl	8003188 <SPI_EndRxTxTransaction>
 8002fbe:	4603      	mov	r3, r0
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d006      	beq.n	8002fd2 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8002fc4:	2301      	movs	r3, #1
 8002fc6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	2220      	movs	r2, #32
 8002fce:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8002fd0:	e010      	b.n	8002ff4 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	689b      	ldr	r3, [r3, #8]
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d10b      	bne.n	8002ff2 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002fda:	2300      	movs	r3, #0
 8002fdc:	617b      	str	r3, [r7, #20]
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	68db      	ldr	r3, [r3, #12]
 8002fe4:	617b      	str	r3, [r7, #20]
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	689b      	ldr	r3, [r3, #8]
 8002fec:	617b      	str	r3, [r7, #20]
 8002fee:	697b      	ldr	r3, [r7, #20]
 8002ff0:	e000      	b.n	8002ff4 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8002ff2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	2201      	movs	r2, #1
 8002ff8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	2200      	movs	r2, #0
 8003000:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003004:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8003008:	4618      	mov	r0, r3
 800300a:	3730      	adds	r7, #48	; 0x30
 800300c:	46bd      	mov	sp, r7
 800300e:	bd80      	pop	{r7, pc}

08003010 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003010:	b580      	push	{r7, lr}
 8003012:	b084      	sub	sp, #16
 8003014:	af00      	add	r7, sp, #0
 8003016:	60f8      	str	r0, [r7, #12]
 8003018:	60b9      	str	r1, [r7, #8]
 800301a:	603b      	str	r3, [r7, #0]
 800301c:	4613      	mov	r3, r2
 800301e:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003020:	e04c      	b.n	80030bc <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003022:	683b      	ldr	r3, [r7, #0]
 8003024:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003028:	d048      	beq.n	80030bc <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800302a:	f7fe fcb7 	bl	800199c <HAL_GetTick>
 800302e:	4602      	mov	r2, r0
 8003030:	69bb      	ldr	r3, [r7, #24]
 8003032:	1ad3      	subs	r3, r2, r3
 8003034:	683a      	ldr	r2, [r7, #0]
 8003036:	429a      	cmp	r2, r3
 8003038:	d902      	bls.n	8003040 <SPI_WaitFlagStateUntilTimeout+0x30>
 800303a:	683b      	ldr	r3, [r7, #0]
 800303c:	2b00      	cmp	r3, #0
 800303e:	d13d      	bne.n	80030bc <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	685a      	ldr	r2, [r3, #4]
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800304e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	685b      	ldr	r3, [r3, #4]
 8003054:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003058:	d111      	bne.n	800307e <SPI_WaitFlagStateUntilTimeout+0x6e>
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	689b      	ldr	r3, [r3, #8]
 800305e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003062:	d004      	beq.n	800306e <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	689b      	ldr	r3, [r3, #8]
 8003068:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800306c:	d107      	bne.n	800307e <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	681a      	ldr	r2, [r3, #0]
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800307c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003082:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003086:	d10f      	bne.n	80030a8 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	681a      	ldr	r2, [r3, #0]
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003096:	601a      	str	r2, [r3, #0]
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	681a      	ldr	r2, [r3, #0]
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80030a6:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	2201      	movs	r2, #1
 80030ac:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	2200      	movs	r2, #0
 80030b4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80030b8:	2303      	movs	r3, #3
 80030ba:	e00f      	b.n	80030dc <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	689a      	ldr	r2, [r3, #8]
 80030c2:	68bb      	ldr	r3, [r7, #8]
 80030c4:	4013      	ands	r3, r2
 80030c6:	68ba      	ldr	r2, [r7, #8]
 80030c8:	429a      	cmp	r2, r3
 80030ca:	bf0c      	ite	eq
 80030cc:	2301      	moveq	r3, #1
 80030ce:	2300      	movne	r3, #0
 80030d0:	b2db      	uxtb	r3, r3
 80030d2:	461a      	mov	r2, r3
 80030d4:	79fb      	ldrb	r3, [r7, #7]
 80030d6:	429a      	cmp	r2, r3
 80030d8:	d1a3      	bne.n	8003022 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 80030da:	2300      	movs	r3, #0
}
 80030dc:	4618      	mov	r0, r3
 80030de:	3710      	adds	r7, #16
 80030e0:	46bd      	mov	sp, r7
 80030e2:	bd80      	pop	{r7, pc}

080030e4 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80030e4:	b580      	push	{r7, lr}
 80030e6:	b086      	sub	sp, #24
 80030e8:	af02      	add	r7, sp, #8
 80030ea:	60f8      	str	r0, [r7, #12]
 80030ec:	60b9      	str	r1, [r7, #8]
 80030ee:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	685b      	ldr	r3, [r3, #4]
 80030f4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80030f8:	d111      	bne.n	800311e <SPI_EndRxTransaction+0x3a>
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	689b      	ldr	r3, [r3, #8]
 80030fe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003102:	d004      	beq.n	800310e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	689b      	ldr	r3, [r3, #8]
 8003108:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800310c:	d107      	bne.n	800311e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	681a      	ldr	r2, [r3, #0]
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800311c:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	685b      	ldr	r3, [r3, #4]
 8003122:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003126:	d117      	bne.n	8003158 <SPI_EndRxTransaction+0x74>
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	689b      	ldr	r3, [r3, #8]
 800312c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003130:	d112      	bne.n	8003158 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	9300      	str	r3, [sp, #0]
 8003136:	68bb      	ldr	r3, [r7, #8]
 8003138:	2200      	movs	r2, #0
 800313a:	2101      	movs	r1, #1
 800313c:	68f8      	ldr	r0, [r7, #12]
 800313e:	f7ff ff67 	bl	8003010 <SPI_WaitFlagStateUntilTimeout>
 8003142:	4603      	mov	r3, r0
 8003144:	2b00      	cmp	r3, #0
 8003146:	d01a      	beq.n	800317e <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800314c:	f043 0220 	orr.w	r2, r3, #32
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003154:	2303      	movs	r3, #3
 8003156:	e013      	b.n	8003180 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	9300      	str	r3, [sp, #0]
 800315c:	68bb      	ldr	r3, [r7, #8]
 800315e:	2200      	movs	r2, #0
 8003160:	2180      	movs	r1, #128	; 0x80
 8003162:	68f8      	ldr	r0, [r7, #12]
 8003164:	f7ff ff54 	bl	8003010 <SPI_WaitFlagStateUntilTimeout>
 8003168:	4603      	mov	r3, r0
 800316a:	2b00      	cmp	r3, #0
 800316c:	d007      	beq.n	800317e <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003172:	f043 0220 	orr.w	r2, r3, #32
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800317a:	2303      	movs	r3, #3
 800317c:	e000      	b.n	8003180 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 800317e:	2300      	movs	r3, #0
}
 8003180:	4618      	mov	r0, r3
 8003182:	3710      	adds	r7, #16
 8003184:	46bd      	mov	sp, r7
 8003186:	bd80      	pop	{r7, pc}

08003188 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003188:	b580      	push	{r7, lr}
 800318a:	b086      	sub	sp, #24
 800318c:	af02      	add	r7, sp, #8
 800318e:	60f8      	str	r0, [r7, #12]
 8003190:	60b9      	str	r1, [r7, #8]
 8003192:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	9300      	str	r3, [sp, #0]
 8003198:	68bb      	ldr	r3, [r7, #8]
 800319a:	2200      	movs	r2, #0
 800319c:	2180      	movs	r1, #128	; 0x80
 800319e:	68f8      	ldr	r0, [r7, #12]
 80031a0:	f7ff ff36 	bl	8003010 <SPI_WaitFlagStateUntilTimeout>
 80031a4:	4603      	mov	r3, r0
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d007      	beq.n	80031ba <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031ae:	f043 0220 	orr.w	r2, r3, #32
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 80031b6:	2303      	movs	r3, #3
 80031b8:	e000      	b.n	80031bc <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 80031ba:	2300      	movs	r3, #0
}
 80031bc:	4618      	mov	r0, r3
 80031be:	3710      	adds	r7, #16
 80031c0:	46bd      	mov	sp, r7
 80031c2:	bd80      	pop	{r7, pc}

080031c4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80031c4:	b580      	push	{r7, lr}
 80031c6:	b082      	sub	sp, #8
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d101      	bne.n	80031d6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80031d2:	2301      	movs	r3, #1
 80031d4:	e01d      	b.n	8003212 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031dc:	b2db      	uxtb	r3, r3
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d106      	bne.n	80031f0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	2200      	movs	r2, #0
 80031e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80031ea:	6878      	ldr	r0, [r7, #4]
 80031ec:	f000 f815 	bl	800321a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	2202      	movs	r2, #2
 80031f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681a      	ldr	r2, [r3, #0]
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	3304      	adds	r3, #4
 8003200:	4619      	mov	r1, r3
 8003202:	4610      	mov	r0, r2
 8003204:	f000 f962 	bl	80034cc <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	2201      	movs	r2, #1
 800320c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003210:	2300      	movs	r3, #0
}
 8003212:	4618      	mov	r0, r3
 8003214:	3708      	adds	r7, #8
 8003216:	46bd      	mov	sp, r7
 8003218:	bd80      	pop	{r7, pc}

0800321a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800321a:	b480      	push	{r7}
 800321c:	b083      	sub	sp, #12
 800321e:	af00      	add	r7, sp, #0
 8003220:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003222:	bf00      	nop
 8003224:	370c      	adds	r7, #12
 8003226:	46bd      	mov	sp, r7
 8003228:	bc80      	pop	{r7}
 800322a:	4770      	bx	lr

0800322c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800322c:	b480      	push	{r7}
 800322e:	b085      	sub	sp, #20
 8003230:	af00      	add	r7, sp, #0
 8003232:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	68da      	ldr	r2, [r3, #12]
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f042 0201 	orr.w	r2, r2, #1
 8003242:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	689b      	ldr	r3, [r3, #8]
 800324a:	f003 0307 	and.w	r3, r3, #7
 800324e:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	2b06      	cmp	r3, #6
 8003254:	d007      	beq.n	8003266 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	681a      	ldr	r2, [r3, #0]
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f042 0201 	orr.w	r2, r2, #1
 8003264:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003266:	2300      	movs	r3, #0
}
 8003268:	4618      	mov	r0, r3
 800326a:	3714      	adds	r7, #20
 800326c:	46bd      	mov	sp, r7
 800326e:	bc80      	pop	{r7}
 8003270:	4770      	bx	lr

08003272 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003272:	b580      	push	{r7, lr}
 8003274:	b082      	sub	sp, #8
 8003276:	af00      	add	r7, sp, #0
 8003278:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	691b      	ldr	r3, [r3, #16]
 8003280:	f003 0302 	and.w	r3, r3, #2
 8003284:	2b02      	cmp	r3, #2
 8003286:	d122      	bne.n	80032ce <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	68db      	ldr	r3, [r3, #12]
 800328e:	f003 0302 	and.w	r3, r3, #2
 8003292:	2b02      	cmp	r3, #2
 8003294:	d11b      	bne.n	80032ce <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f06f 0202 	mvn.w	r2, #2
 800329e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	2201      	movs	r2, #1
 80032a4:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	699b      	ldr	r3, [r3, #24]
 80032ac:	f003 0303 	and.w	r3, r3, #3
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d003      	beq.n	80032bc <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80032b4:	6878      	ldr	r0, [r7, #4]
 80032b6:	f000 f8ed 	bl	8003494 <HAL_TIM_IC_CaptureCallback>
 80032ba:	e005      	b.n	80032c8 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80032bc:	6878      	ldr	r0, [r7, #4]
 80032be:	f000 f8e0 	bl	8003482 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80032c2:	6878      	ldr	r0, [r7, #4]
 80032c4:	f000 f8ef 	bl	80034a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	2200      	movs	r2, #0
 80032cc:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	691b      	ldr	r3, [r3, #16]
 80032d4:	f003 0304 	and.w	r3, r3, #4
 80032d8:	2b04      	cmp	r3, #4
 80032da:	d122      	bne.n	8003322 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	68db      	ldr	r3, [r3, #12]
 80032e2:	f003 0304 	and.w	r3, r3, #4
 80032e6:	2b04      	cmp	r3, #4
 80032e8:	d11b      	bne.n	8003322 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f06f 0204 	mvn.w	r2, #4
 80032f2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	2202      	movs	r2, #2
 80032f8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	699b      	ldr	r3, [r3, #24]
 8003300:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003304:	2b00      	cmp	r3, #0
 8003306:	d003      	beq.n	8003310 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003308:	6878      	ldr	r0, [r7, #4]
 800330a:	f000 f8c3 	bl	8003494 <HAL_TIM_IC_CaptureCallback>
 800330e:	e005      	b.n	800331c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003310:	6878      	ldr	r0, [r7, #4]
 8003312:	f000 f8b6 	bl	8003482 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003316:	6878      	ldr	r0, [r7, #4]
 8003318:	f000 f8c5 	bl	80034a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	2200      	movs	r2, #0
 8003320:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	691b      	ldr	r3, [r3, #16]
 8003328:	f003 0308 	and.w	r3, r3, #8
 800332c:	2b08      	cmp	r3, #8
 800332e:	d122      	bne.n	8003376 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	68db      	ldr	r3, [r3, #12]
 8003336:	f003 0308 	and.w	r3, r3, #8
 800333a:	2b08      	cmp	r3, #8
 800333c:	d11b      	bne.n	8003376 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f06f 0208 	mvn.w	r2, #8
 8003346:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	2204      	movs	r2, #4
 800334c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	69db      	ldr	r3, [r3, #28]
 8003354:	f003 0303 	and.w	r3, r3, #3
 8003358:	2b00      	cmp	r3, #0
 800335a:	d003      	beq.n	8003364 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800335c:	6878      	ldr	r0, [r7, #4]
 800335e:	f000 f899 	bl	8003494 <HAL_TIM_IC_CaptureCallback>
 8003362:	e005      	b.n	8003370 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003364:	6878      	ldr	r0, [r7, #4]
 8003366:	f000 f88c 	bl	8003482 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800336a:	6878      	ldr	r0, [r7, #4]
 800336c:	f000 f89b 	bl	80034a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	2200      	movs	r2, #0
 8003374:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	691b      	ldr	r3, [r3, #16]
 800337c:	f003 0310 	and.w	r3, r3, #16
 8003380:	2b10      	cmp	r3, #16
 8003382:	d122      	bne.n	80033ca <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	68db      	ldr	r3, [r3, #12]
 800338a:	f003 0310 	and.w	r3, r3, #16
 800338e:	2b10      	cmp	r3, #16
 8003390:	d11b      	bne.n	80033ca <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f06f 0210 	mvn.w	r2, #16
 800339a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	2208      	movs	r2, #8
 80033a0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	69db      	ldr	r3, [r3, #28]
 80033a8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d003      	beq.n	80033b8 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80033b0:	6878      	ldr	r0, [r7, #4]
 80033b2:	f000 f86f 	bl	8003494 <HAL_TIM_IC_CaptureCallback>
 80033b6:	e005      	b.n	80033c4 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80033b8:	6878      	ldr	r0, [r7, #4]
 80033ba:	f000 f862 	bl	8003482 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80033be:	6878      	ldr	r0, [r7, #4]
 80033c0:	f000 f871 	bl	80034a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	2200      	movs	r2, #0
 80033c8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	691b      	ldr	r3, [r3, #16]
 80033d0:	f003 0301 	and.w	r3, r3, #1
 80033d4:	2b01      	cmp	r3, #1
 80033d6:	d10e      	bne.n	80033f6 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	68db      	ldr	r3, [r3, #12]
 80033de:	f003 0301 	and.w	r3, r3, #1
 80033e2:	2b01      	cmp	r3, #1
 80033e4:	d107      	bne.n	80033f6 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f06f 0201 	mvn.w	r2, #1
 80033ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80033f0:	6878      	ldr	r0, [r7, #4]
 80033f2:	f7fd fae9 	bl	80009c8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	691b      	ldr	r3, [r3, #16]
 80033fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003400:	2b80      	cmp	r3, #128	; 0x80
 8003402:	d10e      	bne.n	8003422 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	68db      	ldr	r3, [r3, #12]
 800340a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800340e:	2b80      	cmp	r3, #128	; 0x80
 8003410:	d107      	bne.n	8003422 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800341a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800341c:	6878      	ldr	r0, [r7, #4]
 800341e:	f000 f8c0 	bl	80035a2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	691b      	ldr	r3, [r3, #16]
 8003428:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800342c:	2b40      	cmp	r3, #64	; 0x40
 800342e:	d10e      	bne.n	800344e <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	68db      	ldr	r3, [r3, #12]
 8003436:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800343a:	2b40      	cmp	r3, #64	; 0x40
 800343c:	d107      	bne.n	800344e <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003446:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003448:	6878      	ldr	r0, [r7, #4]
 800344a:	f000 f835 	bl	80034b8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	691b      	ldr	r3, [r3, #16]
 8003454:	f003 0320 	and.w	r3, r3, #32
 8003458:	2b20      	cmp	r3, #32
 800345a:	d10e      	bne.n	800347a <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	68db      	ldr	r3, [r3, #12]
 8003462:	f003 0320 	and.w	r3, r3, #32
 8003466:	2b20      	cmp	r3, #32
 8003468:	d107      	bne.n	800347a <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f06f 0220 	mvn.w	r2, #32
 8003472:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003474:	6878      	ldr	r0, [r7, #4]
 8003476:	f000 f88b 	bl	8003590 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800347a:	bf00      	nop
 800347c:	3708      	adds	r7, #8
 800347e:	46bd      	mov	sp, r7
 8003480:	bd80      	pop	{r7, pc}

08003482 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003482:	b480      	push	{r7}
 8003484:	b083      	sub	sp, #12
 8003486:	af00      	add	r7, sp, #0
 8003488:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800348a:	bf00      	nop
 800348c:	370c      	adds	r7, #12
 800348e:	46bd      	mov	sp, r7
 8003490:	bc80      	pop	{r7}
 8003492:	4770      	bx	lr

08003494 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003494:	b480      	push	{r7}
 8003496:	b083      	sub	sp, #12
 8003498:	af00      	add	r7, sp, #0
 800349a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800349c:	bf00      	nop
 800349e:	370c      	adds	r7, #12
 80034a0:	46bd      	mov	sp, r7
 80034a2:	bc80      	pop	{r7}
 80034a4:	4770      	bx	lr

080034a6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80034a6:	b480      	push	{r7}
 80034a8:	b083      	sub	sp, #12
 80034aa:	af00      	add	r7, sp, #0
 80034ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80034ae:	bf00      	nop
 80034b0:	370c      	adds	r7, #12
 80034b2:	46bd      	mov	sp, r7
 80034b4:	bc80      	pop	{r7}
 80034b6:	4770      	bx	lr

080034b8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80034b8:	b480      	push	{r7}
 80034ba:	b083      	sub	sp, #12
 80034bc:	af00      	add	r7, sp, #0
 80034be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80034c0:	bf00      	nop
 80034c2:	370c      	adds	r7, #12
 80034c4:	46bd      	mov	sp, r7
 80034c6:	bc80      	pop	{r7}
 80034c8:	4770      	bx	lr
	...

080034cc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80034cc:	b480      	push	{r7}
 80034ce:	b085      	sub	sp, #20
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	6078      	str	r0, [r7, #4]
 80034d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	4a29      	ldr	r2, [pc, #164]	; (8003584 <TIM_Base_SetConfig+0xb8>)
 80034e0:	4293      	cmp	r3, r2
 80034e2:	d00b      	beq.n	80034fc <TIM_Base_SetConfig+0x30>
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034ea:	d007      	beq.n	80034fc <TIM_Base_SetConfig+0x30>
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	4a26      	ldr	r2, [pc, #152]	; (8003588 <TIM_Base_SetConfig+0xbc>)
 80034f0:	4293      	cmp	r3, r2
 80034f2:	d003      	beq.n	80034fc <TIM_Base_SetConfig+0x30>
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	4a25      	ldr	r2, [pc, #148]	; (800358c <TIM_Base_SetConfig+0xc0>)
 80034f8:	4293      	cmp	r3, r2
 80034fa:	d108      	bne.n	800350e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003502:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003504:	683b      	ldr	r3, [r7, #0]
 8003506:	685b      	ldr	r3, [r3, #4]
 8003508:	68fa      	ldr	r2, [r7, #12]
 800350a:	4313      	orrs	r3, r2
 800350c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	4a1c      	ldr	r2, [pc, #112]	; (8003584 <TIM_Base_SetConfig+0xb8>)
 8003512:	4293      	cmp	r3, r2
 8003514:	d00b      	beq.n	800352e <TIM_Base_SetConfig+0x62>
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800351c:	d007      	beq.n	800352e <TIM_Base_SetConfig+0x62>
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	4a19      	ldr	r2, [pc, #100]	; (8003588 <TIM_Base_SetConfig+0xbc>)
 8003522:	4293      	cmp	r3, r2
 8003524:	d003      	beq.n	800352e <TIM_Base_SetConfig+0x62>
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	4a18      	ldr	r2, [pc, #96]	; (800358c <TIM_Base_SetConfig+0xc0>)
 800352a:	4293      	cmp	r3, r2
 800352c:	d108      	bne.n	8003540 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003534:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003536:	683b      	ldr	r3, [r7, #0]
 8003538:	68db      	ldr	r3, [r3, #12]
 800353a:	68fa      	ldr	r2, [r7, #12]
 800353c:	4313      	orrs	r3, r2
 800353e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003546:	683b      	ldr	r3, [r7, #0]
 8003548:	695b      	ldr	r3, [r3, #20]
 800354a:	4313      	orrs	r3, r2
 800354c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	68fa      	ldr	r2, [r7, #12]
 8003552:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003554:	683b      	ldr	r3, [r7, #0]
 8003556:	689a      	ldr	r2, [r3, #8]
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800355c:	683b      	ldr	r3, [r7, #0]
 800355e:	681a      	ldr	r2, [r3, #0]
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	4a07      	ldr	r2, [pc, #28]	; (8003584 <TIM_Base_SetConfig+0xb8>)
 8003568:	4293      	cmp	r3, r2
 800356a:	d103      	bne.n	8003574 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800356c:	683b      	ldr	r3, [r7, #0]
 800356e:	691a      	ldr	r2, [r3, #16]
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	2201      	movs	r2, #1
 8003578:	615a      	str	r2, [r3, #20]
}
 800357a:	bf00      	nop
 800357c:	3714      	adds	r7, #20
 800357e:	46bd      	mov	sp, r7
 8003580:	bc80      	pop	{r7}
 8003582:	4770      	bx	lr
 8003584:	40012c00 	.word	0x40012c00
 8003588:	40000400 	.word	0x40000400
 800358c:	40000800 	.word	0x40000800

08003590 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003590:	b480      	push	{r7}
 8003592:	b083      	sub	sp, #12
 8003594:	af00      	add	r7, sp, #0
 8003596:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003598:	bf00      	nop
 800359a:	370c      	adds	r7, #12
 800359c:	46bd      	mov	sp, r7
 800359e:	bc80      	pop	{r7}
 80035a0:	4770      	bx	lr

080035a2 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80035a2:	b480      	push	{r7}
 80035a4:	b083      	sub	sp, #12
 80035a6:	af00      	add	r7, sp, #0
 80035a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80035aa:	bf00      	nop
 80035ac:	370c      	adds	r7, #12
 80035ae:	46bd      	mov	sp, r7
 80035b0:	bc80      	pop	{r7}
 80035b2:	4770      	bx	lr

080035b4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80035b4:	b580      	push	{r7, lr}
 80035b6:	b082      	sub	sp, #8
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d101      	bne.n	80035c6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80035c2:	2301      	movs	r3, #1
 80035c4:	e03f      	b.n	8003646 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80035cc:	b2db      	uxtb	r3, r3
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d106      	bne.n	80035e0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	2200      	movs	r2, #0
 80035d6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80035da:	6878      	ldr	r0, [r7, #4]
 80035dc:	f7fe f862 	bl	80016a4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	2224      	movs	r2, #36	; 0x24
 80035e4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	68da      	ldr	r2, [r3, #12]
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80035f6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80035f8:	6878      	ldr	r0, [r7, #4]
 80035fa:	f000 f90b 	bl	8003814 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	691a      	ldr	r2, [r3, #16]
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800360c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	695a      	ldr	r2, [r3, #20]
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800361c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	68da      	ldr	r2, [r3, #12]
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800362c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	2200      	movs	r2, #0
 8003632:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	2220      	movs	r2, #32
 8003638:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	2220      	movs	r2, #32
 8003640:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8003644:	2300      	movs	r3, #0
}
 8003646:	4618      	mov	r0, r3
 8003648:	3708      	adds	r7, #8
 800364a:	46bd      	mov	sp, r7
 800364c:	bd80      	pop	{r7, pc}

0800364e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800364e:	b580      	push	{r7, lr}
 8003650:	b088      	sub	sp, #32
 8003652:	af02      	add	r7, sp, #8
 8003654:	60f8      	str	r0, [r7, #12]
 8003656:	60b9      	str	r1, [r7, #8]
 8003658:	603b      	str	r3, [r7, #0]
 800365a:	4613      	mov	r3, r2
 800365c:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 800365e:	2300      	movs	r3, #0
 8003660:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003668:	b2db      	uxtb	r3, r3
 800366a:	2b20      	cmp	r3, #32
 800366c:	f040 8083 	bne.w	8003776 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8003670:	68bb      	ldr	r3, [r7, #8]
 8003672:	2b00      	cmp	r3, #0
 8003674:	d002      	beq.n	800367c <HAL_UART_Transmit+0x2e>
 8003676:	88fb      	ldrh	r3, [r7, #6]
 8003678:	2b00      	cmp	r3, #0
 800367a:	d101      	bne.n	8003680 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 800367c:	2301      	movs	r3, #1
 800367e:	e07b      	b.n	8003778 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003686:	2b01      	cmp	r3, #1
 8003688:	d101      	bne.n	800368e <HAL_UART_Transmit+0x40>
 800368a:	2302      	movs	r3, #2
 800368c:	e074      	b.n	8003778 <HAL_UART_Transmit+0x12a>
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	2201      	movs	r2, #1
 8003692:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	2200      	movs	r2, #0
 800369a:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	2221      	movs	r2, #33	; 0x21
 80036a0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80036a4:	f7fe f97a 	bl	800199c <HAL_GetTick>
 80036a8:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	88fa      	ldrh	r2, [r7, #6]
 80036ae:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	88fa      	ldrh	r2, [r7, #6]
 80036b4:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80036b6:	e042      	b.n	800373e <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80036bc:	b29b      	uxth	r3, r3
 80036be:	3b01      	subs	r3, #1
 80036c0:	b29a      	uxth	r2, r3
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	689b      	ldr	r3, [r3, #8]
 80036ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80036ce:	d122      	bne.n	8003716 <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80036d0:	683b      	ldr	r3, [r7, #0]
 80036d2:	9300      	str	r3, [sp, #0]
 80036d4:	697b      	ldr	r3, [r7, #20]
 80036d6:	2200      	movs	r2, #0
 80036d8:	2180      	movs	r1, #128	; 0x80
 80036da:	68f8      	ldr	r0, [r7, #12]
 80036dc:	f000 f850 	bl	8003780 <UART_WaitOnFlagUntilTimeout>
 80036e0:	4603      	mov	r3, r0
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d001      	beq.n	80036ea <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 80036e6:	2303      	movs	r3, #3
 80036e8:	e046      	b.n	8003778 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 80036ea:	68bb      	ldr	r3, [r7, #8]
 80036ec:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80036ee:	693b      	ldr	r3, [r7, #16]
 80036f0:	881b      	ldrh	r3, [r3, #0]
 80036f2:	461a      	mov	r2, r3
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80036fc:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	691b      	ldr	r3, [r3, #16]
 8003702:	2b00      	cmp	r3, #0
 8003704:	d103      	bne.n	800370e <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 8003706:	68bb      	ldr	r3, [r7, #8]
 8003708:	3302      	adds	r3, #2
 800370a:	60bb      	str	r3, [r7, #8]
 800370c:	e017      	b.n	800373e <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 800370e:	68bb      	ldr	r3, [r7, #8]
 8003710:	3301      	adds	r3, #1
 8003712:	60bb      	str	r3, [r7, #8]
 8003714:	e013      	b.n	800373e <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003716:	683b      	ldr	r3, [r7, #0]
 8003718:	9300      	str	r3, [sp, #0]
 800371a:	697b      	ldr	r3, [r7, #20]
 800371c:	2200      	movs	r2, #0
 800371e:	2180      	movs	r1, #128	; 0x80
 8003720:	68f8      	ldr	r0, [r7, #12]
 8003722:	f000 f82d 	bl	8003780 <UART_WaitOnFlagUntilTimeout>
 8003726:	4603      	mov	r3, r0
 8003728:	2b00      	cmp	r3, #0
 800372a:	d001      	beq.n	8003730 <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 800372c:	2303      	movs	r3, #3
 800372e:	e023      	b.n	8003778 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8003730:	68bb      	ldr	r3, [r7, #8]
 8003732:	1c5a      	adds	r2, r3, #1
 8003734:	60ba      	str	r2, [r7, #8]
 8003736:	781a      	ldrb	r2, [r3, #0]
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003742:	b29b      	uxth	r3, r3
 8003744:	2b00      	cmp	r3, #0
 8003746:	d1b7      	bne.n	80036b8 <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003748:	683b      	ldr	r3, [r7, #0]
 800374a:	9300      	str	r3, [sp, #0]
 800374c:	697b      	ldr	r3, [r7, #20]
 800374e:	2200      	movs	r2, #0
 8003750:	2140      	movs	r1, #64	; 0x40
 8003752:	68f8      	ldr	r0, [r7, #12]
 8003754:	f000 f814 	bl	8003780 <UART_WaitOnFlagUntilTimeout>
 8003758:	4603      	mov	r3, r0
 800375a:	2b00      	cmp	r3, #0
 800375c:	d001      	beq.n	8003762 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 800375e:	2303      	movs	r3, #3
 8003760:	e00a      	b.n	8003778 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	2220      	movs	r2, #32
 8003766:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	2200      	movs	r2, #0
 800376e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 8003772:	2300      	movs	r3, #0
 8003774:	e000      	b.n	8003778 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8003776:	2302      	movs	r3, #2
  }
}
 8003778:	4618      	mov	r0, r3
 800377a:	3718      	adds	r7, #24
 800377c:	46bd      	mov	sp, r7
 800377e:	bd80      	pop	{r7, pc}

08003780 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003780:	b580      	push	{r7, lr}
 8003782:	b084      	sub	sp, #16
 8003784:	af00      	add	r7, sp, #0
 8003786:	60f8      	str	r0, [r7, #12]
 8003788:	60b9      	str	r1, [r7, #8]
 800378a:	603b      	str	r3, [r7, #0]
 800378c:	4613      	mov	r3, r2
 800378e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003790:	e02c      	b.n	80037ec <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003792:	69bb      	ldr	r3, [r7, #24]
 8003794:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003798:	d028      	beq.n	80037ec <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800379a:	69bb      	ldr	r3, [r7, #24]
 800379c:	2b00      	cmp	r3, #0
 800379e:	d007      	beq.n	80037b0 <UART_WaitOnFlagUntilTimeout+0x30>
 80037a0:	f7fe f8fc 	bl	800199c <HAL_GetTick>
 80037a4:	4602      	mov	r2, r0
 80037a6:	683b      	ldr	r3, [r7, #0]
 80037a8:	1ad3      	subs	r3, r2, r3
 80037aa:	69ba      	ldr	r2, [r7, #24]
 80037ac:	429a      	cmp	r2, r3
 80037ae:	d21d      	bcs.n	80037ec <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	68da      	ldr	r2, [r3, #12]
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80037be:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	695a      	ldr	r2, [r3, #20]
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f022 0201 	bic.w	r2, r2, #1
 80037ce:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	2220      	movs	r2, #32
 80037d4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	2220      	movs	r2, #32
 80037dc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	2200      	movs	r2, #0
 80037e4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 80037e8:	2303      	movs	r3, #3
 80037ea:	e00f      	b.n	800380c <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	681a      	ldr	r2, [r3, #0]
 80037f2:	68bb      	ldr	r3, [r7, #8]
 80037f4:	4013      	ands	r3, r2
 80037f6:	68ba      	ldr	r2, [r7, #8]
 80037f8:	429a      	cmp	r2, r3
 80037fa:	bf0c      	ite	eq
 80037fc:	2301      	moveq	r3, #1
 80037fe:	2300      	movne	r3, #0
 8003800:	b2db      	uxtb	r3, r3
 8003802:	461a      	mov	r2, r3
 8003804:	79fb      	ldrb	r3, [r7, #7]
 8003806:	429a      	cmp	r2, r3
 8003808:	d0c3      	beq.n	8003792 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800380a:	2300      	movs	r3, #0
}
 800380c:	4618      	mov	r0, r3
 800380e:	3710      	adds	r7, #16
 8003810:	46bd      	mov	sp, r7
 8003812:	bd80      	pop	{r7, pc}

08003814 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003814:	b580      	push	{r7, lr}
 8003816:	b084      	sub	sp, #16
 8003818:	af00      	add	r7, sp, #0
 800381a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	691b      	ldr	r3, [r3, #16]
 8003822:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	68da      	ldr	r2, [r3, #12]
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	430a      	orrs	r2, r1
 8003830:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	689a      	ldr	r2, [r3, #8]
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	691b      	ldr	r3, [r3, #16]
 800383a:	431a      	orrs	r2, r3
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	695b      	ldr	r3, [r3, #20]
 8003840:	4313      	orrs	r3, r2
 8003842:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	68db      	ldr	r3, [r3, #12]
 800384a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800384e:	f023 030c 	bic.w	r3, r3, #12
 8003852:	687a      	ldr	r2, [r7, #4]
 8003854:	6812      	ldr	r2, [r2, #0]
 8003856:	68f9      	ldr	r1, [r7, #12]
 8003858:	430b      	orrs	r3, r1
 800385a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	695b      	ldr	r3, [r3, #20]
 8003862:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	699a      	ldr	r2, [r3, #24]
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	430a      	orrs	r2, r1
 8003870:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	4a52      	ldr	r2, [pc, #328]	; (80039c0 <UART_SetConfig+0x1ac>)
 8003878:	4293      	cmp	r3, r2
 800387a:	d14e      	bne.n	800391a <UART_SetConfig+0x106>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800387c:	f7fe ff26 	bl	80026cc <HAL_RCC_GetPCLK2Freq>
 8003880:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003882:	68ba      	ldr	r2, [r7, #8]
 8003884:	4613      	mov	r3, r2
 8003886:	009b      	lsls	r3, r3, #2
 8003888:	4413      	add	r3, r2
 800388a:	009a      	lsls	r2, r3, #2
 800388c:	441a      	add	r2, r3
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	685b      	ldr	r3, [r3, #4]
 8003892:	009b      	lsls	r3, r3, #2
 8003894:	fbb2 f3f3 	udiv	r3, r2, r3
 8003898:	4a4a      	ldr	r2, [pc, #296]	; (80039c4 <UART_SetConfig+0x1b0>)
 800389a:	fba2 2303 	umull	r2, r3, r2, r3
 800389e:	095b      	lsrs	r3, r3, #5
 80038a0:	0119      	lsls	r1, r3, #4
 80038a2:	68ba      	ldr	r2, [r7, #8]
 80038a4:	4613      	mov	r3, r2
 80038a6:	009b      	lsls	r3, r3, #2
 80038a8:	4413      	add	r3, r2
 80038aa:	009a      	lsls	r2, r3, #2
 80038ac:	441a      	add	r2, r3
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	685b      	ldr	r3, [r3, #4]
 80038b2:	009b      	lsls	r3, r3, #2
 80038b4:	fbb2 f2f3 	udiv	r2, r2, r3
 80038b8:	4b42      	ldr	r3, [pc, #264]	; (80039c4 <UART_SetConfig+0x1b0>)
 80038ba:	fba3 0302 	umull	r0, r3, r3, r2
 80038be:	095b      	lsrs	r3, r3, #5
 80038c0:	2064      	movs	r0, #100	; 0x64
 80038c2:	fb00 f303 	mul.w	r3, r0, r3
 80038c6:	1ad3      	subs	r3, r2, r3
 80038c8:	011b      	lsls	r3, r3, #4
 80038ca:	3332      	adds	r3, #50	; 0x32
 80038cc:	4a3d      	ldr	r2, [pc, #244]	; (80039c4 <UART_SetConfig+0x1b0>)
 80038ce:	fba2 2303 	umull	r2, r3, r2, r3
 80038d2:	095b      	lsrs	r3, r3, #5
 80038d4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80038d8:	4419      	add	r1, r3
 80038da:	68ba      	ldr	r2, [r7, #8]
 80038dc:	4613      	mov	r3, r2
 80038de:	009b      	lsls	r3, r3, #2
 80038e0:	4413      	add	r3, r2
 80038e2:	009a      	lsls	r2, r3, #2
 80038e4:	441a      	add	r2, r3
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	685b      	ldr	r3, [r3, #4]
 80038ea:	009b      	lsls	r3, r3, #2
 80038ec:	fbb2 f2f3 	udiv	r2, r2, r3
 80038f0:	4b34      	ldr	r3, [pc, #208]	; (80039c4 <UART_SetConfig+0x1b0>)
 80038f2:	fba3 0302 	umull	r0, r3, r3, r2
 80038f6:	095b      	lsrs	r3, r3, #5
 80038f8:	2064      	movs	r0, #100	; 0x64
 80038fa:	fb00 f303 	mul.w	r3, r0, r3
 80038fe:	1ad3      	subs	r3, r2, r3
 8003900:	011b      	lsls	r3, r3, #4
 8003902:	3332      	adds	r3, #50	; 0x32
 8003904:	4a2f      	ldr	r2, [pc, #188]	; (80039c4 <UART_SetConfig+0x1b0>)
 8003906:	fba2 2303 	umull	r2, r3, r2, r3
 800390a:	095b      	lsrs	r3, r3, #5
 800390c:	f003 020f 	and.w	r2, r3, #15
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	440a      	add	r2, r1
 8003916:	609a      	str	r2, [r3, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 8003918:	e04d      	b.n	80039b6 <UART_SetConfig+0x1a2>
    pclk = HAL_RCC_GetPCLK1Freq();
 800391a:	f7fe fec3 	bl	80026a4 <HAL_RCC_GetPCLK1Freq>
 800391e:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003920:	68ba      	ldr	r2, [r7, #8]
 8003922:	4613      	mov	r3, r2
 8003924:	009b      	lsls	r3, r3, #2
 8003926:	4413      	add	r3, r2
 8003928:	009a      	lsls	r2, r3, #2
 800392a:	441a      	add	r2, r3
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	685b      	ldr	r3, [r3, #4]
 8003930:	009b      	lsls	r3, r3, #2
 8003932:	fbb2 f3f3 	udiv	r3, r2, r3
 8003936:	4a23      	ldr	r2, [pc, #140]	; (80039c4 <UART_SetConfig+0x1b0>)
 8003938:	fba2 2303 	umull	r2, r3, r2, r3
 800393c:	095b      	lsrs	r3, r3, #5
 800393e:	0119      	lsls	r1, r3, #4
 8003940:	68ba      	ldr	r2, [r7, #8]
 8003942:	4613      	mov	r3, r2
 8003944:	009b      	lsls	r3, r3, #2
 8003946:	4413      	add	r3, r2
 8003948:	009a      	lsls	r2, r3, #2
 800394a:	441a      	add	r2, r3
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	685b      	ldr	r3, [r3, #4]
 8003950:	009b      	lsls	r3, r3, #2
 8003952:	fbb2 f2f3 	udiv	r2, r2, r3
 8003956:	4b1b      	ldr	r3, [pc, #108]	; (80039c4 <UART_SetConfig+0x1b0>)
 8003958:	fba3 0302 	umull	r0, r3, r3, r2
 800395c:	095b      	lsrs	r3, r3, #5
 800395e:	2064      	movs	r0, #100	; 0x64
 8003960:	fb00 f303 	mul.w	r3, r0, r3
 8003964:	1ad3      	subs	r3, r2, r3
 8003966:	011b      	lsls	r3, r3, #4
 8003968:	3332      	adds	r3, #50	; 0x32
 800396a:	4a16      	ldr	r2, [pc, #88]	; (80039c4 <UART_SetConfig+0x1b0>)
 800396c:	fba2 2303 	umull	r2, r3, r2, r3
 8003970:	095b      	lsrs	r3, r3, #5
 8003972:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003976:	4419      	add	r1, r3
 8003978:	68ba      	ldr	r2, [r7, #8]
 800397a:	4613      	mov	r3, r2
 800397c:	009b      	lsls	r3, r3, #2
 800397e:	4413      	add	r3, r2
 8003980:	009a      	lsls	r2, r3, #2
 8003982:	441a      	add	r2, r3
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	685b      	ldr	r3, [r3, #4]
 8003988:	009b      	lsls	r3, r3, #2
 800398a:	fbb2 f2f3 	udiv	r2, r2, r3
 800398e:	4b0d      	ldr	r3, [pc, #52]	; (80039c4 <UART_SetConfig+0x1b0>)
 8003990:	fba3 0302 	umull	r0, r3, r3, r2
 8003994:	095b      	lsrs	r3, r3, #5
 8003996:	2064      	movs	r0, #100	; 0x64
 8003998:	fb00 f303 	mul.w	r3, r0, r3
 800399c:	1ad3      	subs	r3, r2, r3
 800399e:	011b      	lsls	r3, r3, #4
 80039a0:	3332      	adds	r3, #50	; 0x32
 80039a2:	4a08      	ldr	r2, [pc, #32]	; (80039c4 <UART_SetConfig+0x1b0>)
 80039a4:	fba2 2303 	umull	r2, r3, r2, r3
 80039a8:	095b      	lsrs	r3, r3, #5
 80039aa:	f003 020f 	and.w	r2, r3, #15
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	440a      	add	r2, r1
 80039b4:	609a      	str	r2, [r3, #8]
}
 80039b6:	bf00      	nop
 80039b8:	3710      	adds	r7, #16
 80039ba:	46bd      	mov	sp, r7
 80039bc:	bd80      	pop	{r7, pc}
 80039be:	bf00      	nop
 80039c0:	40013800 	.word	0x40013800
 80039c4:	51eb851f 	.word	0x51eb851f

080039c8 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80039c8:	b480      	push	{r7}
 80039ca:	b085      	sub	sp, #20
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	4603      	mov	r3, r0
 80039d0:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80039d2:	2300      	movs	r3, #0
 80039d4:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80039d6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80039da:	2b84      	cmp	r3, #132	; 0x84
 80039dc:	d005      	beq.n	80039ea <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80039de:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	4413      	add	r3, r2
 80039e6:	3303      	adds	r3, #3
 80039e8:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80039ea:	68fb      	ldr	r3, [r7, #12]
}
 80039ec:	4618      	mov	r0, r3
 80039ee:	3714      	adds	r7, #20
 80039f0:	46bd      	mov	sp, r7
 80039f2:	bc80      	pop	{r7}
 80039f4:	4770      	bx	lr

080039f6 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 80039f6:	b480      	push	{r7}
 80039f8:	b083      	sub	sp, #12
 80039fa:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80039fc:	f3ef 8305 	mrs	r3, IPSR
 8003a00:	607b      	str	r3, [r7, #4]
  return(result);
 8003a02:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	bf14      	ite	ne
 8003a08:	2301      	movne	r3, #1
 8003a0a:	2300      	moveq	r3, #0
 8003a0c:	b2db      	uxtb	r3, r3
}
 8003a0e:	4618      	mov	r0, r3
 8003a10:	370c      	adds	r7, #12
 8003a12:	46bd      	mov	sp, r7
 8003a14:	bc80      	pop	{r7}
 8003a16:	4770      	bx	lr

08003a18 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8003a1c:	f001 fc32 	bl	8005284 <vTaskStartScheduler>
  
  return osOK;
 8003a20:	2300      	movs	r3, #0
}
 8003a22:	4618      	mov	r0, r3
 8003a24:	bd80      	pop	{r7, pc}

08003a26 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8003a26:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003a28:	b089      	sub	sp, #36	; 0x24
 8003a2a:	af04      	add	r7, sp, #16
 8003a2c:	6078      	str	r0, [r7, #4]
 8003a2e:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	695b      	ldr	r3, [r3, #20]
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d020      	beq.n	8003a7a <osThreadCreate+0x54>
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	699b      	ldr	r3, [r3, #24]
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d01c      	beq.n	8003a7a <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	685c      	ldr	r4, [r3, #4]
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681d      	ldr	r5, [r3, #0]
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	691e      	ldr	r6, [r3, #16]
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003a52:	4618      	mov	r0, r3
 8003a54:	f7ff ffb8 	bl	80039c8 <makeFreeRtosPriority>
 8003a58:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	695b      	ldr	r3, [r3, #20]
 8003a5e:	687a      	ldr	r2, [r7, #4]
 8003a60:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003a62:	9202      	str	r2, [sp, #8]
 8003a64:	9301      	str	r3, [sp, #4]
 8003a66:	9100      	str	r1, [sp, #0]
 8003a68:	683b      	ldr	r3, [r7, #0]
 8003a6a:	4632      	mov	r2, r6
 8003a6c:	4629      	mov	r1, r5
 8003a6e:	4620      	mov	r0, r4
 8003a70:	f001 fa4e 	bl	8004f10 <xTaskCreateStatic>
 8003a74:	4603      	mov	r3, r0
 8003a76:	60fb      	str	r3, [r7, #12]
 8003a78:	e01c      	b.n	8003ab4 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	685c      	ldr	r4, [r3, #4]
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003a86:	b29e      	uxth	r6, r3
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003a8e:	4618      	mov	r0, r3
 8003a90:	f7ff ff9a 	bl	80039c8 <makeFreeRtosPriority>
 8003a94:	4602      	mov	r2, r0
 8003a96:	f107 030c 	add.w	r3, r7, #12
 8003a9a:	9301      	str	r3, [sp, #4]
 8003a9c:	9200      	str	r2, [sp, #0]
 8003a9e:	683b      	ldr	r3, [r7, #0]
 8003aa0:	4632      	mov	r2, r6
 8003aa2:	4629      	mov	r1, r5
 8003aa4:	4620      	mov	r0, r4
 8003aa6:	f001 fa8c 	bl	8004fc2 <xTaskCreate>
 8003aaa:	4603      	mov	r3, r0
 8003aac:	2b01      	cmp	r3, #1
 8003aae:	d001      	beq.n	8003ab4 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8003ab0:	2300      	movs	r3, #0
 8003ab2:	e000      	b.n	8003ab6 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8003ab4:	68fb      	ldr	r3, [r7, #12]
}
 8003ab6:	4618      	mov	r0, r3
 8003ab8:	3714      	adds	r7, #20
 8003aba:	46bd      	mov	sp, r7
 8003abc:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003abe <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8003abe:	b580      	push	{r7, lr}
 8003ac0:	b084      	sub	sp, #16
 8003ac2:	af00      	add	r7, sp, #0
 8003ac4:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d001      	beq.n	8003ad4 <osDelay+0x16>
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	e000      	b.n	8003ad6 <osDelay+0x18>
 8003ad4:	2301      	movs	r3, #1
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	f001 fba0 	bl	800521c <vTaskDelay>
  
  return osOK;
 8003adc:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8003ade:	4618      	mov	r0, r3
 8003ae0:	3710      	adds	r7, #16
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	bd80      	pop	{r7, pc}
	...

08003ae8 <osTimerCreate>:
* @param  argument      argument to the timer call back function.
* @retval  timer ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osTimerCreate shall be consistent in every CMSIS-RTOS.
*/
osTimerId osTimerCreate (const osTimerDef_t *timer_def, os_timer_type type, void *argument)
{
 8003ae8:	b580      	push	{r7, lr}
 8003aea:	b086      	sub	sp, #24
 8003aec:	af02      	add	r7, sp, #8
 8003aee:	60f8      	str	r0, [r7, #12]
 8003af0:	460b      	mov	r3, r1
 8003af2:	607a      	str	r2, [r7, #4]
 8003af4:	72fb      	strb	r3, [r7, #11]
#if (configUSE_TIMERS == 1)

#if( ( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) 
  if(timer_def->controlblock != NULL) {
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	685b      	ldr	r3, [r3, #4]
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d013      	beq.n	8003b26 <osTimerCreate+0x3e>
    return xTimerCreateStatic((const char *)"",
 8003afe:	7afb      	ldrb	r3, [r7, #11]
 8003b00:	2b01      	cmp	r3, #1
 8003b02:	d101      	bne.n	8003b08 <osTimerCreate+0x20>
 8003b04:	2101      	movs	r1, #1
 8003b06:	e000      	b.n	8003b0a <osTimerCreate+0x22>
 8003b08:	2100      	movs	r1, #0
                      1, // period should be filled when starting the Timer using osTimerStart
                      (type == osTimerPeriodic) ? pdTRUE : pdFALSE,
                      (void *) argument,
                      (TaskFunction_t)timer_def->ptimer,
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	681b      	ldr	r3, [r3, #0]
                      (StaticTimer_t *)timer_def->controlblock);
 8003b0e:	68fa      	ldr	r2, [r7, #12]
 8003b10:	6852      	ldr	r2, [r2, #4]
    return xTimerCreateStatic((const char *)"",
 8003b12:	9201      	str	r2, [sp, #4]
 8003b14:	9300      	str	r3, [sp, #0]
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	460a      	mov	r2, r1
 8003b1a:	2101      	movs	r1, #1
 8003b1c:	480b      	ldr	r0, [pc, #44]	; (8003b4c <osTimerCreate+0x64>)
 8003b1e:	f002 faa4 	bl	800606a <xTimerCreateStatic>
 8003b22:	4603      	mov	r3, r0
 8003b24:	e00e      	b.n	8003b44 <osTimerCreate+0x5c>
  }
  else {
    return xTimerCreate((const char *)"",
 8003b26:	7afb      	ldrb	r3, [r7, #11]
 8003b28:	2b01      	cmp	r3, #1
 8003b2a:	d101      	bne.n	8003b30 <osTimerCreate+0x48>
 8003b2c:	2201      	movs	r2, #1
 8003b2e:	e000      	b.n	8003b32 <osTimerCreate+0x4a>
 8003b30:	2200      	movs	r2, #0
                      1, // period should be filled when starting the Timer using osTimerStart
                      (type == osTimerPeriodic) ? pdTRUE : pdFALSE,
                      (void *) argument,
                      (TaskFunction_t)timer_def->ptimer);
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	681b      	ldr	r3, [r3, #0]
    return xTimerCreate((const char *)"",
 8003b36:	9300      	str	r3, [sp, #0]
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	2101      	movs	r1, #1
 8003b3c:	4803      	ldr	r0, [pc, #12]	; (8003b4c <osTimerCreate+0x64>)
 8003b3e:	f002 fa73 	bl	8006028 <xTimerCreate>
 8003b42:	4603      	mov	r3, r0
#endif

#else 
	return NULL;
#endif
}
 8003b44:	4618      	mov	r0, r3
 8003b46:	3710      	adds	r7, #16
 8003b48:	46bd      	mov	sp, r7
 8003b4a:	bd80      	pop	{r7, pc}
 8003b4c:	08007880 	.word	0x08007880

08003b50 <osTimerStart>:
* @param  millisec      time delay value of the timer.
* @retval  status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osTimerStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osTimerStart (osTimerId timer_id, uint32_t millisec)
{
 8003b50:	b580      	push	{r7, lr}
 8003b52:	b088      	sub	sp, #32
 8003b54:	af02      	add	r7, sp, #8
 8003b56:	6078      	str	r0, [r7, #4]
 8003b58:	6039      	str	r1, [r7, #0]
  osStatus result = osOK;
 8003b5a:	2300      	movs	r3, #0
 8003b5c:	617b      	str	r3, [r7, #20]
#if (configUSE_TIMERS == 1)  
  portBASE_TYPE taskWoken = pdFALSE;
 8003b5e:	2300      	movs	r3, #0
 8003b60:	60fb      	str	r3, [r7, #12]
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8003b62:	683b      	ldr	r3, [r7, #0]
 8003b64:	613b      	str	r3, [r7, #16]

  if (ticks == 0)
 8003b66:	693b      	ldr	r3, [r7, #16]
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d101      	bne.n	8003b70 <osTimerStart+0x20>
    ticks = 1;
 8003b6c:	2301      	movs	r3, #1
 8003b6e:	613b      	str	r3, [r7, #16]
    
  if (inHandlerMode()) 
 8003b70:	f7ff ff41 	bl	80039f6 <inHandlerMode>
 8003b74:	4603      	mov	r3, r0
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d01b      	beq.n	8003bb2 <osTimerStart+0x62>
  {
    if (xTimerChangePeriodFromISR(timer_id, ticks, &taskWoken) != pdPASS)
 8003b7a:	f107 020c 	add.w	r2, r7, #12
 8003b7e:	2300      	movs	r3, #0
 8003b80:	9300      	str	r3, [sp, #0]
 8003b82:	4613      	mov	r3, r2
 8003b84:	693a      	ldr	r2, [r7, #16]
 8003b86:	2109      	movs	r1, #9
 8003b88:	6878      	ldr	r0, [r7, #4]
 8003b8a:	f002 fadb 	bl	8006144 <xTimerGenericCommand>
 8003b8e:	4603      	mov	r3, r0
 8003b90:	2b01      	cmp	r3, #1
 8003b92:	d002      	beq.n	8003b9a <osTimerStart+0x4a>
    {
      result = osErrorOS;
 8003b94:	23ff      	movs	r3, #255	; 0xff
 8003b96:	617b      	str	r3, [r7, #20]
 8003b98:	e018      	b.n	8003bcc <osTimerStart+0x7c>
    }
    else
    {
      portEND_SWITCHING_ISR(taskWoken);     
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d015      	beq.n	8003bcc <osTimerStart+0x7c>
 8003ba0:	4b0d      	ldr	r3, [pc, #52]	; (8003bd8 <osTimerStart+0x88>)
 8003ba2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003ba6:	601a      	str	r2, [r3, #0]
 8003ba8:	f3bf 8f4f 	dsb	sy
 8003bac:	f3bf 8f6f 	isb	sy
 8003bb0:	e00c      	b.n	8003bcc <osTimerStart+0x7c>
    }
  }
  else 
  {
    if (xTimerChangePeriod(timer_id, ticks, 0) != pdPASS)
 8003bb2:	2300      	movs	r3, #0
 8003bb4:	9300      	str	r3, [sp, #0]
 8003bb6:	2300      	movs	r3, #0
 8003bb8:	693a      	ldr	r2, [r7, #16]
 8003bba:	2104      	movs	r1, #4
 8003bbc:	6878      	ldr	r0, [r7, #4]
 8003bbe:	f002 fac1 	bl	8006144 <xTimerGenericCommand>
 8003bc2:	4603      	mov	r3, r0
 8003bc4:	2b01      	cmp	r3, #1
 8003bc6:	d001      	beq.n	8003bcc <osTimerStart+0x7c>
      result = osErrorOS;
 8003bc8:	23ff      	movs	r3, #255	; 0xff
 8003bca:	617b      	str	r3, [r7, #20]
  }

#else 
  result = osErrorOS;
#endif
  return result;
 8003bcc:	697b      	ldr	r3, [r7, #20]
}
 8003bce:	4618      	mov	r0, r3
 8003bd0:	3718      	adds	r7, #24
 8003bd2:	46bd      	mov	sp, r7
 8003bd4:	bd80      	pop	{r7, pc}
 8003bd6:	bf00      	nop
 8003bd8:	e000ed04 	.word	0xe000ed04

08003bdc <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 8003bdc:	b580      	push	{r7, lr}
 8003bde:	b082      	sub	sp, #8
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	685b      	ldr	r3, [r3, #4]
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d007      	beq.n	8003bfc <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	685b      	ldr	r3, [r3, #4]
 8003bf0:	4619      	mov	r1, r3
 8003bf2:	2001      	movs	r0, #1
 8003bf4:	f000 fbfe 	bl	80043f4 <xQueueCreateMutexStatic>
 8003bf8:	4603      	mov	r3, r0
 8003bfa:	e003      	b.n	8003c04 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 8003bfc:	2001      	movs	r0, #1
 8003bfe:	f000 fbe1 	bl	80043c4 <xQueueCreateMutex>
 8003c02:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 8003c04:	4618      	mov	r0, r3
 8003c06:	3708      	adds	r7, #8
 8003c08:	46bd      	mov	sp, r7
 8003c0a:	bd80      	pop	{r7, pc}

08003c0c <osPoolCreate>:
* @param  pool_def      memory pool definition referenced with \ref osPool.
* @retval  memory pool ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osPoolCreate shall be consistent in every CMSIS-RTOS.
*/
osPoolId osPoolCreate (const osPoolDef_t *pool_def)
{
 8003c0c:	b580      	push	{r7, lr}
 8003c0e:	b086      	sub	sp, #24
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	6078      	str	r0, [r7, #4]
#if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
  osPoolId thePool;
  int itemSize = 4 * ((pool_def->item_sz + 3) / 4);
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	685b      	ldr	r3, [r3, #4]
 8003c18:	3303      	adds	r3, #3
 8003c1a:	f023 0303 	bic.w	r3, r3, #3
 8003c1e:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  
  /* First have to allocate memory for the pool control block. */
 thePool = pvPortMalloc(sizeof(os_pool_cb_t));
 8003c20:	2014      	movs	r0, #20
 8003c22:	f002 ff17 	bl	8006a54 <pvPortMalloc>
 8003c26:	6178      	str	r0, [r7, #20]

  
  if (thePool) {
 8003c28:	697b      	ldr	r3, [r7, #20]
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d046      	beq.n	8003cbc <osPoolCreate+0xb0>
    thePool->pool_sz = pool_def->pool_sz;
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681a      	ldr	r2, [r3, #0]
 8003c32:	697b      	ldr	r3, [r7, #20]
 8003c34:	609a      	str	r2, [r3, #8]
    thePool->item_sz = itemSize;
 8003c36:	68fa      	ldr	r2, [r7, #12]
 8003c38:	697b      	ldr	r3, [r7, #20]
 8003c3a:	60da      	str	r2, [r3, #12]
    thePool->currentIndex = 0;
 8003c3c:	697b      	ldr	r3, [r7, #20]
 8003c3e:	2200      	movs	r2, #0
 8003c40:	611a      	str	r2, [r3, #16]
    
    /* Memory for markers */
    thePool->markers = pvPortMalloc(pool_def->pool_sz);
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	4618      	mov	r0, r3
 8003c48:	f002 ff04 	bl	8006a54 <pvPortMalloc>
 8003c4c:	4602      	mov	r2, r0
 8003c4e:	697b      	ldr	r3, [r7, #20]
 8003c50:	605a      	str	r2, [r3, #4]
   
    if (thePool->markers) {
 8003c52:	697b      	ldr	r3, [r7, #20]
 8003c54:	685b      	ldr	r3, [r3, #4]
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d02b      	beq.n	8003cb2 <osPoolCreate+0xa6>
      /* Now allocate the pool itself. */
     thePool->pool = pvPortMalloc(pool_def->pool_sz * itemSize);
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	68fa      	ldr	r2, [r7, #12]
 8003c60:	fb02 f303 	mul.w	r3, r2, r3
 8003c64:	4618      	mov	r0, r3
 8003c66:	f002 fef5 	bl	8006a54 <pvPortMalloc>
 8003c6a:	4602      	mov	r2, r0
 8003c6c:	697b      	ldr	r3, [r7, #20]
 8003c6e:	601a      	str	r2, [r3, #0]
      
      if (thePool->pool) {
 8003c70:	697b      	ldr	r3, [r7, #20]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d011      	beq.n	8003c9c <osPoolCreate+0x90>
        for (i = 0; i < pool_def->pool_sz; i++) {
 8003c78:	2300      	movs	r3, #0
 8003c7a:	613b      	str	r3, [r7, #16]
 8003c7c:	e008      	b.n	8003c90 <osPoolCreate+0x84>
          thePool->markers[i] = 0;
 8003c7e:	697b      	ldr	r3, [r7, #20]
 8003c80:	685a      	ldr	r2, [r3, #4]
 8003c82:	693b      	ldr	r3, [r7, #16]
 8003c84:	4413      	add	r3, r2
 8003c86:	2200      	movs	r2, #0
 8003c88:	701a      	strb	r2, [r3, #0]
        for (i = 0; i < pool_def->pool_sz; i++) {
 8003c8a:	693b      	ldr	r3, [r7, #16]
 8003c8c:	3301      	adds	r3, #1
 8003c8e:	613b      	str	r3, [r7, #16]
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	693a      	ldr	r2, [r7, #16]
 8003c96:	429a      	cmp	r2, r3
 8003c98:	d3f1      	bcc.n	8003c7e <osPoolCreate+0x72>
 8003c9a:	e00f      	b.n	8003cbc <osPoolCreate+0xb0>
        }
      }
      else {
        vPortFree(thePool->markers);
 8003c9c:	697b      	ldr	r3, [r7, #20]
 8003c9e:	685b      	ldr	r3, [r3, #4]
 8003ca0:	4618      	mov	r0, r3
 8003ca2:	f002 ff9d 	bl	8006be0 <vPortFree>
        vPortFree(thePool);
 8003ca6:	6978      	ldr	r0, [r7, #20]
 8003ca8:	f002 ff9a 	bl	8006be0 <vPortFree>
        thePool = NULL;
 8003cac:	2300      	movs	r3, #0
 8003cae:	617b      	str	r3, [r7, #20]
 8003cb0:	e004      	b.n	8003cbc <osPoolCreate+0xb0>
      }
    }
    else {
      vPortFree(thePool);
 8003cb2:	6978      	ldr	r0, [r7, #20]
 8003cb4:	f002 ff94 	bl	8006be0 <vPortFree>
      thePool = NULL;
 8003cb8:	2300      	movs	r3, #0
 8003cba:	617b      	str	r3, [r7, #20]
    }
  }

  return thePool;
 8003cbc:	697b      	ldr	r3, [r7, #20]
 
#else
  return NULL;
#endif
}
 8003cbe:	4618      	mov	r0, r3
 8003cc0:	3718      	adds	r7, #24
 8003cc2:	46bd      	mov	sp, r7
 8003cc4:	bd80      	pop	{r7, pc}

08003cc6 <osPoolAlloc>:
* @param pool_id       memory pool ID obtain referenced with \ref osPoolCreate.
* @retval  address of the allocated memory block or NULL in case of no memory available.
* @note   MUST REMAIN UNCHANGED: \b osPoolAlloc shall be consistent in every CMSIS-RTOS.
*/
void *osPoolAlloc (osPoolId pool_id)
{
 8003cc6:	b580      	push	{r7, lr}
 8003cc8:	b08a      	sub	sp, #40	; 0x28
 8003cca:	af00      	add	r7, sp, #0
 8003ccc:	6078      	str	r0, [r7, #4]
  int dummy = 0;
 8003cce:	2300      	movs	r3, #0
 8003cd0:	627b      	str	r3, [r7, #36]	; 0x24
  void *p = NULL;
 8003cd2:	2300      	movs	r3, #0
 8003cd4:	623b      	str	r3, [r7, #32]
  uint32_t i;
  uint32_t index;
  
  if (inHandlerMode()) {
 8003cd6:	f7ff fe8e 	bl	80039f6 <inHandlerMode>
 8003cda:	4603      	mov	r3, r0
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d00e      	beq.n	8003cfe <osPoolAlloc+0x38>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003ce0:	f3ef 8211 	mrs	r2, BASEPRI
 8003ce4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ce8:	f383 8811 	msr	BASEPRI, r3
 8003cec:	f3bf 8f6f 	isb	sy
 8003cf0:	f3bf 8f4f 	dsb	sy
 8003cf4:	617a      	str	r2, [r7, #20]
 8003cf6:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8003cf8:	697b      	ldr	r3, [r7, #20]
    dummy = portSET_INTERRUPT_MASK_FROM_ISR();
 8003cfa:	627b      	str	r3, [r7, #36]	; 0x24
 8003cfc:	e001      	b.n	8003d02 <osPoolAlloc+0x3c>
  }
  else {
    vPortEnterCritical();
 8003cfe:	f002 fdb3 	bl	8006868 <vPortEnterCritical>
  }
  
  for (i = 0; i < pool_id->pool_sz; i++) {
 8003d02:	2300      	movs	r3, #0
 8003d04:	61fb      	str	r3, [r7, #28]
 8003d06:	e029      	b.n	8003d5c <osPoolAlloc+0x96>
    index = (pool_id->currentIndex + i) % pool_id->pool_sz;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	691a      	ldr	r2, [r3, #16]
 8003d0c:	69fb      	ldr	r3, [r7, #28]
 8003d0e:	4413      	add	r3, r2
 8003d10:	687a      	ldr	r2, [r7, #4]
 8003d12:	6892      	ldr	r2, [r2, #8]
 8003d14:	fbb3 f1f2 	udiv	r1, r3, r2
 8003d18:	fb02 f201 	mul.w	r2, r2, r1
 8003d1c:	1a9b      	subs	r3, r3, r2
 8003d1e:	61bb      	str	r3, [r7, #24]
    
    if (pool_id->markers[index] == 0) {
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	685a      	ldr	r2, [r3, #4]
 8003d24:	69bb      	ldr	r3, [r7, #24]
 8003d26:	4413      	add	r3, r2
 8003d28:	781b      	ldrb	r3, [r3, #0]
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d113      	bne.n	8003d56 <osPoolAlloc+0x90>
      pool_id->markers[index] = 1;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	685a      	ldr	r2, [r3, #4]
 8003d32:	69bb      	ldr	r3, [r7, #24]
 8003d34:	4413      	add	r3, r2
 8003d36:	2201      	movs	r2, #1
 8003d38:	701a      	strb	r2, [r3, #0]
      p = (void *)((uint32_t)(pool_id->pool) + (index * pool_id->item_sz));
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	4619      	mov	r1, r3
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	68db      	ldr	r3, [r3, #12]
 8003d44:	69ba      	ldr	r2, [r7, #24]
 8003d46:	fb02 f303 	mul.w	r3, r2, r3
 8003d4a:	440b      	add	r3, r1
 8003d4c:	623b      	str	r3, [r7, #32]
      pool_id->currentIndex = index;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	69ba      	ldr	r2, [r7, #24]
 8003d52:	611a      	str	r2, [r3, #16]
      break;
 8003d54:	e007      	b.n	8003d66 <osPoolAlloc+0xa0>
  for (i = 0; i < pool_id->pool_sz; i++) {
 8003d56:	69fb      	ldr	r3, [r7, #28]
 8003d58:	3301      	adds	r3, #1
 8003d5a:	61fb      	str	r3, [r7, #28]
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	689b      	ldr	r3, [r3, #8]
 8003d60:	69fa      	ldr	r2, [r7, #28]
 8003d62:	429a      	cmp	r2, r3
 8003d64:	d3d0      	bcc.n	8003d08 <osPoolAlloc+0x42>
    }
  }
  
  if (inHandlerMode()) {
 8003d66:	f7ff fe46 	bl	80039f6 <inHandlerMode>
 8003d6a:	4603      	mov	r3, r0
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d005      	beq.n	8003d7c <osPoolAlloc+0xb6>
    portCLEAR_INTERRUPT_MASK_FROM_ISR(dummy);
 8003d70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d72:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	f383 8811 	msr	BASEPRI, r3
 8003d7a:	e001      	b.n	8003d80 <osPoolAlloc+0xba>
  }
  else {
    vPortExitCritical();
 8003d7c:	f002 fda2 	bl	80068c4 <vPortExitCritical>
  }
  
  return p;
 8003d80:	6a3b      	ldr	r3, [r7, #32]
}
 8003d82:	4618      	mov	r0, r3
 8003d84:	3728      	adds	r7, #40	; 0x28
 8003d86:	46bd      	mov	sp, r7
 8003d88:	bd80      	pop	{r7, pc}

08003d8a <osPoolFree>:
* @param  block         address of the allocated memory block that is returned to the memory pool.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osPoolFree shall be consistent in every CMSIS-RTOS.
*/
osStatus osPoolFree (osPoolId pool_id, void *block)
{
 8003d8a:	b480      	push	{r7}
 8003d8c:	b085      	sub	sp, #20
 8003d8e:	af00      	add	r7, sp, #0
 8003d90:	6078      	str	r0, [r7, #4]
 8003d92:	6039      	str	r1, [r7, #0]
  uint32_t index;
  
  if (pool_id == NULL) {
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d101      	bne.n	8003d9e <osPoolFree+0x14>
    return osErrorParameter;
 8003d9a:	2380      	movs	r3, #128	; 0x80
 8003d9c:	e030      	b.n	8003e00 <osPoolFree+0x76>
  }
  
  if (block == NULL) {
 8003d9e:	683b      	ldr	r3, [r7, #0]
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d101      	bne.n	8003da8 <osPoolFree+0x1e>
    return osErrorParameter;
 8003da4:	2380      	movs	r3, #128	; 0x80
 8003da6:	e02b      	b.n	8003e00 <osPoolFree+0x76>
  }
  
  if (block < pool_id->pool) {
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	683a      	ldr	r2, [r7, #0]
 8003dae:	429a      	cmp	r2, r3
 8003db0:	d201      	bcs.n	8003db6 <osPoolFree+0x2c>
    return osErrorParameter;
 8003db2:	2380      	movs	r3, #128	; 0x80
 8003db4:	e024      	b.n	8003e00 <osPoolFree+0x76>
  }
  
  index = (uint32_t)block - (uint32_t)(pool_id->pool);
 8003db6:	683b      	ldr	r3, [r7, #0]
 8003db8:	687a      	ldr	r2, [r7, #4]
 8003dba:	6812      	ldr	r2, [r2, #0]
 8003dbc:	1a9b      	subs	r3, r3, r2
 8003dbe:	60fb      	str	r3, [r7, #12]
  if (index % pool_id->item_sz) {
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	68da      	ldr	r2, [r3, #12]
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	fbb3 f1f2 	udiv	r1, r3, r2
 8003dca:	fb02 f201 	mul.w	r2, r2, r1
 8003dce:	1a9b      	subs	r3, r3, r2
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d001      	beq.n	8003dd8 <osPoolFree+0x4e>
    return osErrorParameter;
 8003dd4:	2380      	movs	r3, #128	; 0x80
 8003dd6:	e013      	b.n	8003e00 <osPoolFree+0x76>
  }
  index = index / pool_id->item_sz;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	68db      	ldr	r3, [r3, #12]
 8003ddc:	68fa      	ldr	r2, [r7, #12]
 8003dde:	fbb2 f3f3 	udiv	r3, r2, r3
 8003de2:	60fb      	str	r3, [r7, #12]
  if (index >= pool_id->pool_sz) {
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	689b      	ldr	r3, [r3, #8]
 8003de8:	68fa      	ldr	r2, [r7, #12]
 8003dea:	429a      	cmp	r2, r3
 8003dec:	d301      	bcc.n	8003df2 <osPoolFree+0x68>
    return osErrorParameter;
 8003dee:	2380      	movs	r3, #128	; 0x80
 8003df0:	e006      	b.n	8003e00 <osPoolFree+0x76>
  }
  
  pool_id->markers[index] = 0;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	685a      	ldr	r2, [r3, #4]
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	4413      	add	r3, r2
 8003dfa:	2200      	movs	r2, #0
 8003dfc:	701a      	strb	r2, [r3, #0]
  
  return osOK;
 8003dfe:	2300      	movs	r3, #0
}
 8003e00:	4618      	mov	r0, r3
 8003e02:	3714      	adds	r7, #20
 8003e04:	46bd      	mov	sp, r7
 8003e06:	bc80      	pop	{r7}
 8003e08:	4770      	bx	lr

08003e0a <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8003e0a:	b590      	push	{r4, r7, lr}
 8003e0c:	b085      	sub	sp, #20
 8003e0e:	af02      	add	r7, sp, #8
 8003e10:	6078      	str	r0, [r7, #4]
 8003e12:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	689b      	ldr	r3, [r3, #8]
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d012      	beq.n	8003e42 <osMessageCreate+0x38>
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	68db      	ldr	r3, [r3, #12]
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d00e      	beq.n	8003e42 <osMessageCreate+0x38>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	6818      	ldr	r0, [r3, #0]
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	6859      	ldr	r1, [r3, #4]
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	689a      	ldr	r2, [r3, #8]
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	68dc      	ldr	r4, [r3, #12]
 8003e34:	2300      	movs	r3, #0
 8003e36:	9300      	str	r3, [sp, #0]
 8003e38:	4623      	mov	r3, r4
 8003e3a:	f000 f9db 	bl	80041f4 <xQueueGenericCreateStatic>
 8003e3e:	4603      	mov	r3, r0
 8003e40:	e008      	b.n	8003e54 <osMessageCreate+0x4a>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	6818      	ldr	r0, [r3, #0]
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	685b      	ldr	r3, [r3, #4]
 8003e4a:	2200      	movs	r2, #0
 8003e4c:	4619      	mov	r1, r3
 8003e4e:	f000 fa43 	bl	80042d8 <xQueueGenericCreate>
 8003e52:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8003e54:	4618      	mov	r0, r3
 8003e56:	370c      	adds	r7, #12
 8003e58:	46bd      	mov	sp, r7
 8003e5a:	bd90      	pop	{r4, r7, pc}

08003e5c <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8003e5c:	b580      	push	{r7, lr}
 8003e5e:	b086      	sub	sp, #24
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	60f8      	str	r0, [r7, #12]
 8003e64:	60b9      	str	r1, [r7, #8]
 8003e66:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8003e68:	2300      	movs	r3, #0
 8003e6a:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8003e70:	697b      	ldr	r3, [r7, #20]
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d101      	bne.n	8003e7a <osMessagePut+0x1e>
    ticks = 1;
 8003e76:	2301      	movs	r3, #1
 8003e78:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 8003e7a:	f7ff fdbc 	bl	80039f6 <inHandlerMode>
 8003e7e:	4603      	mov	r3, r0
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d018      	beq.n	8003eb6 <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8003e84:	f107 0210 	add.w	r2, r7, #16
 8003e88:	f107 0108 	add.w	r1, r7, #8
 8003e8c:	2300      	movs	r3, #0
 8003e8e:	68f8      	ldr	r0, [r7, #12]
 8003e90:	f000 fbc6 	bl	8004620 <xQueueGenericSendFromISR>
 8003e94:	4603      	mov	r3, r0
 8003e96:	2b01      	cmp	r3, #1
 8003e98:	d001      	beq.n	8003e9e <osMessagePut+0x42>
      return osErrorOS;
 8003e9a:	23ff      	movs	r3, #255	; 0xff
 8003e9c:	e018      	b.n	8003ed0 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8003e9e:	693b      	ldr	r3, [r7, #16]
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d014      	beq.n	8003ece <osMessagePut+0x72>
 8003ea4:	4b0c      	ldr	r3, [pc, #48]	; (8003ed8 <osMessagePut+0x7c>)
 8003ea6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003eaa:	601a      	str	r2, [r3, #0]
 8003eac:	f3bf 8f4f 	dsb	sy
 8003eb0:	f3bf 8f6f 	isb	sy
 8003eb4:	e00b      	b.n	8003ece <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8003eb6:	f107 0108 	add.w	r1, r7, #8
 8003eba:	2300      	movs	r3, #0
 8003ebc:	697a      	ldr	r2, [r7, #20]
 8003ebe:	68f8      	ldr	r0, [r7, #12]
 8003ec0:	f000 fab4 	bl	800442c <xQueueGenericSend>
 8003ec4:	4603      	mov	r3, r0
 8003ec6:	2b01      	cmp	r3, #1
 8003ec8:	d001      	beq.n	8003ece <osMessagePut+0x72>
      return osErrorOS;
 8003eca:	23ff      	movs	r3, #255	; 0xff
 8003ecc:	e000      	b.n	8003ed0 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 8003ece:	2300      	movs	r3, #0
}
 8003ed0:	4618      	mov	r0, r3
 8003ed2:	3718      	adds	r7, #24
 8003ed4:	46bd      	mov	sp, r7
 8003ed6:	bd80      	pop	{r7, pc}
 8003ed8:	e000ed04 	.word	0xe000ed04

08003edc <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8003edc:	b590      	push	{r4, r7, lr}
 8003ede:	b08b      	sub	sp, #44	; 0x2c
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	60f8      	str	r0, [r7, #12]
 8003ee4:	60b9      	str	r1, [r7, #8]
 8003ee6:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 8003ee8:	68bb      	ldr	r3, [r7, #8]
 8003eea:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 8003eec:	2300      	movs	r3, #0
 8003eee:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 8003ef0:	68bb      	ldr	r3, [r7, #8]
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d10a      	bne.n	8003f0c <osMessageGet+0x30>
    event.status = osErrorParameter;
 8003ef6:	2380      	movs	r3, #128	; 0x80
 8003ef8:	617b      	str	r3, [r7, #20]
    return event;
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	461c      	mov	r4, r3
 8003efe:	f107 0314 	add.w	r3, r7, #20
 8003f02:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8003f06:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8003f0a:	e054      	b.n	8003fb6 <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8003f0c:	2300      	movs	r3, #0
 8003f0e:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8003f10:	2300      	movs	r3, #0
 8003f12:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f1a:	d103      	bne.n	8003f24 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 8003f1c:	f04f 33ff 	mov.w	r3, #4294967295
 8003f20:	627b      	str	r3, [r7, #36]	; 0x24
 8003f22:	e009      	b.n	8003f38 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d006      	beq.n	8003f38 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 8003f2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d101      	bne.n	8003f38 <osMessageGet+0x5c>
      ticks = 1;
 8003f34:	2301      	movs	r3, #1
 8003f36:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 8003f38:	f7ff fd5d 	bl	80039f6 <inHandlerMode>
 8003f3c:	4603      	mov	r3, r0
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d01c      	beq.n	8003f7c <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8003f42:	f107 0220 	add.w	r2, r7, #32
 8003f46:	f107 0314 	add.w	r3, r7, #20
 8003f4a:	3304      	adds	r3, #4
 8003f4c:	4619      	mov	r1, r3
 8003f4e:	68b8      	ldr	r0, [r7, #8]
 8003f50:	f000 fdde 	bl	8004b10 <xQueueReceiveFromISR>
 8003f54:	4603      	mov	r3, r0
 8003f56:	2b01      	cmp	r3, #1
 8003f58:	d102      	bne.n	8003f60 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 8003f5a:	2310      	movs	r3, #16
 8003f5c:	617b      	str	r3, [r7, #20]
 8003f5e:	e001      	b.n	8003f64 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 8003f60:	2300      	movs	r3, #0
 8003f62:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8003f64:	6a3b      	ldr	r3, [r7, #32]
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d01d      	beq.n	8003fa6 <osMessageGet+0xca>
 8003f6a:	4b15      	ldr	r3, [pc, #84]	; (8003fc0 <osMessageGet+0xe4>)
 8003f6c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003f70:	601a      	str	r2, [r3, #0]
 8003f72:	f3bf 8f4f 	dsb	sy
 8003f76:	f3bf 8f6f 	isb	sy
 8003f7a:	e014      	b.n	8003fa6 <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8003f7c:	f107 0314 	add.w	r3, r7, #20
 8003f80:	3304      	adds	r3, #4
 8003f82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f84:	4619      	mov	r1, r3
 8003f86:	68b8      	ldr	r0, [r7, #8]
 8003f88:	f000 fbde 	bl	8004748 <xQueueReceive>
 8003f8c:	4603      	mov	r3, r0
 8003f8e:	2b01      	cmp	r3, #1
 8003f90:	d102      	bne.n	8003f98 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 8003f92:	2310      	movs	r3, #16
 8003f94:	617b      	str	r3, [r7, #20]
 8003f96:	e006      	b.n	8003fa6 <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8003f98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d101      	bne.n	8003fa2 <osMessageGet+0xc6>
 8003f9e:	2300      	movs	r3, #0
 8003fa0:	e000      	b.n	8003fa4 <osMessageGet+0xc8>
 8003fa2:	2340      	movs	r3, #64	; 0x40
 8003fa4:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	461c      	mov	r4, r3
 8003faa:	f107 0314 	add.w	r3, r7, #20
 8003fae:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8003fb2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8003fb6:	68f8      	ldr	r0, [r7, #12]
 8003fb8:	372c      	adds	r7, #44	; 0x2c
 8003fba:	46bd      	mov	sp, r7
 8003fbc:	bd90      	pop	{r4, r7, pc}
 8003fbe:	bf00      	nop
 8003fc0:	e000ed04 	.word	0xe000ed04

08003fc4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003fc4:	b480      	push	{r7}
 8003fc6:	b083      	sub	sp, #12
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	f103 0208 	add.w	r2, r3, #8
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	f04f 32ff 	mov.w	r2, #4294967295
 8003fdc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	f103 0208 	add.w	r2, r3, #8
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	f103 0208 	add.w	r2, r3, #8
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	2200      	movs	r2, #0
 8003ff6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003ff8:	bf00      	nop
 8003ffa:	370c      	adds	r7, #12
 8003ffc:	46bd      	mov	sp, r7
 8003ffe:	bc80      	pop	{r7}
 8004000:	4770      	bx	lr

08004002 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004002:	b480      	push	{r7}
 8004004:	b083      	sub	sp, #12
 8004006:	af00      	add	r7, sp, #0
 8004008:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	2200      	movs	r2, #0
 800400e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004010:	bf00      	nop
 8004012:	370c      	adds	r7, #12
 8004014:	46bd      	mov	sp, r7
 8004016:	bc80      	pop	{r7}
 8004018:	4770      	bx	lr

0800401a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800401a:	b480      	push	{r7}
 800401c:	b085      	sub	sp, #20
 800401e:	af00      	add	r7, sp, #0
 8004020:	6078      	str	r0, [r7, #4]
 8004022:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	685b      	ldr	r3, [r3, #4]
 8004028:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800402a:	683b      	ldr	r3, [r7, #0]
 800402c:	68fa      	ldr	r2, [r7, #12]
 800402e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	689a      	ldr	r2, [r3, #8]
 8004034:	683b      	ldr	r3, [r7, #0]
 8004036:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	689b      	ldr	r3, [r3, #8]
 800403c:	683a      	ldr	r2, [r7, #0]
 800403e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	683a      	ldr	r2, [r7, #0]
 8004044:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8004046:	683b      	ldr	r3, [r7, #0]
 8004048:	687a      	ldr	r2, [r7, #4]
 800404a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	1c5a      	adds	r2, r3, #1
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	601a      	str	r2, [r3, #0]
}
 8004056:	bf00      	nop
 8004058:	3714      	adds	r7, #20
 800405a:	46bd      	mov	sp, r7
 800405c:	bc80      	pop	{r7}
 800405e:	4770      	bx	lr

08004060 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004060:	b480      	push	{r7}
 8004062:	b085      	sub	sp, #20
 8004064:	af00      	add	r7, sp, #0
 8004066:	6078      	str	r0, [r7, #4]
 8004068:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800406a:	683b      	ldr	r3, [r7, #0]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004070:	68bb      	ldr	r3, [r7, #8]
 8004072:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004076:	d103      	bne.n	8004080 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	691b      	ldr	r3, [r3, #16]
 800407c:	60fb      	str	r3, [r7, #12]
 800407e:	e00c      	b.n	800409a <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	3308      	adds	r3, #8
 8004084:	60fb      	str	r3, [r7, #12]
 8004086:	e002      	b.n	800408e <vListInsert+0x2e>
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	685b      	ldr	r3, [r3, #4]
 800408c:	60fb      	str	r3, [r7, #12]
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	685b      	ldr	r3, [r3, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	68ba      	ldr	r2, [r7, #8]
 8004096:	429a      	cmp	r2, r3
 8004098:	d2f6      	bcs.n	8004088 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	685a      	ldr	r2, [r3, #4]
 800409e:	683b      	ldr	r3, [r7, #0]
 80040a0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80040a2:	683b      	ldr	r3, [r7, #0]
 80040a4:	685b      	ldr	r3, [r3, #4]
 80040a6:	683a      	ldr	r2, [r7, #0]
 80040a8:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80040aa:	683b      	ldr	r3, [r7, #0]
 80040ac:	68fa      	ldr	r2, [r7, #12]
 80040ae:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	683a      	ldr	r2, [r7, #0]
 80040b4:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80040b6:	683b      	ldr	r3, [r7, #0]
 80040b8:	687a      	ldr	r2, [r7, #4]
 80040ba:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	1c5a      	adds	r2, r3, #1
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	601a      	str	r2, [r3, #0]
}
 80040c6:	bf00      	nop
 80040c8:	3714      	adds	r7, #20
 80040ca:	46bd      	mov	sp, r7
 80040cc:	bc80      	pop	{r7}
 80040ce:	4770      	bx	lr

080040d0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80040d0:	b480      	push	{r7}
 80040d2:	b085      	sub	sp, #20
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	691b      	ldr	r3, [r3, #16]
 80040dc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	685b      	ldr	r3, [r3, #4]
 80040e2:	687a      	ldr	r2, [r7, #4]
 80040e4:	6892      	ldr	r2, [r2, #8]
 80040e6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	689b      	ldr	r3, [r3, #8]
 80040ec:	687a      	ldr	r2, [r7, #4]
 80040ee:	6852      	ldr	r2, [r2, #4]
 80040f0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	685b      	ldr	r3, [r3, #4]
 80040f6:	687a      	ldr	r2, [r7, #4]
 80040f8:	429a      	cmp	r2, r3
 80040fa:	d103      	bne.n	8004104 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	689a      	ldr	r2, [r3, #8]
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	2200      	movs	r2, #0
 8004108:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	1e5a      	subs	r2, r3, #1
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	681b      	ldr	r3, [r3, #0]
}
 8004118:	4618      	mov	r0, r3
 800411a:	3714      	adds	r7, #20
 800411c:	46bd      	mov	sp, r7
 800411e:	bc80      	pop	{r7}
 8004120:	4770      	bx	lr
	...

08004124 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004124:	b580      	push	{r7, lr}
 8004126:	b084      	sub	sp, #16
 8004128:	af00      	add	r7, sp, #0
 800412a:	6078      	str	r0, [r7, #4]
 800412c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	2b00      	cmp	r3, #0
 8004136:	d109      	bne.n	800414c <xQueueGenericReset+0x28>
	__asm volatile
 8004138:	f04f 0350 	mov.w	r3, #80	; 0x50
 800413c:	f383 8811 	msr	BASEPRI, r3
 8004140:	f3bf 8f6f 	isb	sy
 8004144:	f3bf 8f4f 	dsb	sy
 8004148:	60bb      	str	r3, [r7, #8]
 800414a:	e7fe      	b.n	800414a <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 800414c:	f002 fb8c 	bl	8006868 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	681a      	ldr	r2, [r3, #0]
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004158:	68f9      	ldr	r1, [r7, #12]
 800415a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800415c:	fb01 f303 	mul.w	r3, r1, r3
 8004160:	441a      	add	r2, r3
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	2200      	movs	r2, #0
 800416a:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	681a      	ldr	r2, [r3, #0]
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	681a      	ldr	r2, [r3, #0]
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800417c:	3b01      	subs	r3, #1
 800417e:	68f9      	ldr	r1, [r7, #12]
 8004180:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004182:	fb01 f303 	mul.w	r3, r1, r3
 8004186:	441a      	add	r2, r3
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	22ff      	movs	r2, #255	; 0xff
 8004190:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	22ff      	movs	r2, #255	; 0xff
 8004198:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800419c:	683b      	ldr	r3, [r7, #0]
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d114      	bne.n	80041cc <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	691b      	ldr	r3, [r3, #16]
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d01a      	beq.n	80041e0 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	3310      	adds	r3, #16
 80041ae:	4618      	mov	r0, r3
 80041b0:	f001 faf8 	bl	80057a4 <xTaskRemoveFromEventList>
 80041b4:	4603      	mov	r3, r0
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d012      	beq.n	80041e0 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80041ba:	4b0d      	ldr	r3, [pc, #52]	; (80041f0 <xQueueGenericReset+0xcc>)
 80041bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80041c0:	601a      	str	r2, [r3, #0]
 80041c2:	f3bf 8f4f 	dsb	sy
 80041c6:	f3bf 8f6f 	isb	sy
 80041ca:	e009      	b.n	80041e0 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	3310      	adds	r3, #16
 80041d0:	4618      	mov	r0, r3
 80041d2:	f7ff fef7 	bl	8003fc4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	3324      	adds	r3, #36	; 0x24
 80041da:	4618      	mov	r0, r3
 80041dc:	f7ff fef2 	bl	8003fc4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80041e0:	f002 fb70 	bl	80068c4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80041e4:	2301      	movs	r3, #1
}
 80041e6:	4618      	mov	r0, r3
 80041e8:	3710      	adds	r7, #16
 80041ea:	46bd      	mov	sp, r7
 80041ec:	bd80      	pop	{r7, pc}
 80041ee:	bf00      	nop
 80041f0:	e000ed04 	.word	0xe000ed04

080041f4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80041f4:	b580      	push	{r7, lr}
 80041f6:	b08e      	sub	sp, #56	; 0x38
 80041f8:	af02      	add	r7, sp, #8
 80041fa:	60f8      	str	r0, [r7, #12]
 80041fc:	60b9      	str	r1, [r7, #8]
 80041fe:	607a      	str	r2, [r7, #4]
 8004200:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	2b00      	cmp	r3, #0
 8004206:	d109      	bne.n	800421c <xQueueGenericCreateStatic+0x28>
 8004208:	f04f 0350 	mov.w	r3, #80	; 0x50
 800420c:	f383 8811 	msr	BASEPRI, r3
 8004210:	f3bf 8f6f 	isb	sy
 8004214:	f3bf 8f4f 	dsb	sy
 8004218:	62bb      	str	r3, [r7, #40]	; 0x28
 800421a:	e7fe      	b.n	800421a <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800421c:	683b      	ldr	r3, [r7, #0]
 800421e:	2b00      	cmp	r3, #0
 8004220:	d109      	bne.n	8004236 <xQueueGenericCreateStatic+0x42>
 8004222:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004226:	f383 8811 	msr	BASEPRI, r3
 800422a:	f3bf 8f6f 	isb	sy
 800422e:	f3bf 8f4f 	dsb	sy
 8004232:	627b      	str	r3, [r7, #36]	; 0x24
 8004234:	e7fe      	b.n	8004234 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	2b00      	cmp	r3, #0
 800423a:	d002      	beq.n	8004242 <xQueueGenericCreateStatic+0x4e>
 800423c:	68bb      	ldr	r3, [r7, #8]
 800423e:	2b00      	cmp	r3, #0
 8004240:	d001      	beq.n	8004246 <xQueueGenericCreateStatic+0x52>
 8004242:	2301      	movs	r3, #1
 8004244:	e000      	b.n	8004248 <xQueueGenericCreateStatic+0x54>
 8004246:	2300      	movs	r3, #0
 8004248:	2b00      	cmp	r3, #0
 800424a:	d109      	bne.n	8004260 <xQueueGenericCreateStatic+0x6c>
 800424c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004250:	f383 8811 	msr	BASEPRI, r3
 8004254:	f3bf 8f6f 	isb	sy
 8004258:	f3bf 8f4f 	dsb	sy
 800425c:	623b      	str	r3, [r7, #32]
 800425e:	e7fe      	b.n	800425e <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	2b00      	cmp	r3, #0
 8004264:	d102      	bne.n	800426c <xQueueGenericCreateStatic+0x78>
 8004266:	68bb      	ldr	r3, [r7, #8]
 8004268:	2b00      	cmp	r3, #0
 800426a:	d101      	bne.n	8004270 <xQueueGenericCreateStatic+0x7c>
 800426c:	2301      	movs	r3, #1
 800426e:	e000      	b.n	8004272 <xQueueGenericCreateStatic+0x7e>
 8004270:	2300      	movs	r3, #0
 8004272:	2b00      	cmp	r3, #0
 8004274:	d109      	bne.n	800428a <xQueueGenericCreateStatic+0x96>
 8004276:	f04f 0350 	mov.w	r3, #80	; 0x50
 800427a:	f383 8811 	msr	BASEPRI, r3
 800427e:	f3bf 8f6f 	isb	sy
 8004282:	f3bf 8f4f 	dsb	sy
 8004286:	61fb      	str	r3, [r7, #28]
 8004288:	e7fe      	b.n	8004288 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800428a:	2348      	movs	r3, #72	; 0x48
 800428c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800428e:	697b      	ldr	r3, [r7, #20]
 8004290:	2b48      	cmp	r3, #72	; 0x48
 8004292:	d009      	beq.n	80042a8 <xQueueGenericCreateStatic+0xb4>
 8004294:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004298:	f383 8811 	msr	BASEPRI, r3
 800429c:	f3bf 8f6f 	isb	sy
 80042a0:	f3bf 8f4f 	dsb	sy
 80042a4:	61bb      	str	r3, [r7, #24]
 80042a6:	e7fe      	b.n	80042a6 <xQueueGenericCreateStatic+0xb2>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80042a8:	683b      	ldr	r3, [r7, #0]
 80042aa:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80042ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d00d      	beq.n	80042ce <xQueueGenericCreateStatic+0xda>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80042b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042b4:	2201      	movs	r2, #1
 80042b6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80042ba:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80042be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042c0:	9300      	str	r3, [sp, #0]
 80042c2:	4613      	mov	r3, r2
 80042c4:	687a      	ldr	r2, [r7, #4]
 80042c6:	68b9      	ldr	r1, [r7, #8]
 80042c8:	68f8      	ldr	r0, [r7, #12]
 80042ca:	f000 f842 	bl	8004352 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 80042ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80042d0:	4618      	mov	r0, r3
 80042d2:	3730      	adds	r7, #48	; 0x30
 80042d4:	46bd      	mov	sp, r7
 80042d6:	bd80      	pop	{r7, pc}

080042d8 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80042d8:	b580      	push	{r7, lr}
 80042da:	b08a      	sub	sp, #40	; 0x28
 80042dc:	af02      	add	r7, sp, #8
 80042de:	60f8      	str	r0, [r7, #12]
 80042e0:	60b9      	str	r1, [r7, #8]
 80042e2:	4613      	mov	r3, r2
 80042e4:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d109      	bne.n	8004300 <xQueueGenericCreate+0x28>
 80042ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042f0:	f383 8811 	msr	BASEPRI, r3
 80042f4:	f3bf 8f6f 	isb	sy
 80042f8:	f3bf 8f4f 	dsb	sy
 80042fc:	613b      	str	r3, [r7, #16]
 80042fe:	e7fe      	b.n	80042fe <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8004300:	68bb      	ldr	r3, [r7, #8]
 8004302:	2b00      	cmp	r3, #0
 8004304:	d102      	bne.n	800430c <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8004306:	2300      	movs	r3, #0
 8004308:	61fb      	str	r3, [r7, #28]
 800430a:	e004      	b.n	8004316 <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	68ba      	ldr	r2, [r7, #8]
 8004310:	fb02 f303 	mul.w	r3, r2, r3
 8004314:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8004316:	69fb      	ldr	r3, [r7, #28]
 8004318:	3348      	adds	r3, #72	; 0x48
 800431a:	4618      	mov	r0, r3
 800431c:	f002 fb9a 	bl	8006a54 <pvPortMalloc>
 8004320:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8004322:	69bb      	ldr	r3, [r7, #24]
 8004324:	2b00      	cmp	r3, #0
 8004326:	d00f      	beq.n	8004348 <xQueueGenericCreate+0x70>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8004328:	69bb      	ldr	r3, [r7, #24]
 800432a:	3348      	adds	r3, #72	; 0x48
 800432c:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800432e:	69bb      	ldr	r3, [r7, #24]
 8004330:	2200      	movs	r2, #0
 8004332:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004336:	79fa      	ldrb	r2, [r7, #7]
 8004338:	69bb      	ldr	r3, [r7, #24]
 800433a:	9300      	str	r3, [sp, #0]
 800433c:	4613      	mov	r3, r2
 800433e:	697a      	ldr	r2, [r7, #20]
 8004340:	68b9      	ldr	r1, [r7, #8]
 8004342:	68f8      	ldr	r0, [r7, #12]
 8004344:	f000 f805 	bl	8004352 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8004348:	69bb      	ldr	r3, [r7, #24]
	}
 800434a:	4618      	mov	r0, r3
 800434c:	3720      	adds	r7, #32
 800434e:	46bd      	mov	sp, r7
 8004350:	bd80      	pop	{r7, pc}

08004352 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004352:	b580      	push	{r7, lr}
 8004354:	b084      	sub	sp, #16
 8004356:	af00      	add	r7, sp, #0
 8004358:	60f8      	str	r0, [r7, #12]
 800435a:	60b9      	str	r1, [r7, #8]
 800435c:	607a      	str	r2, [r7, #4]
 800435e:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004360:	68bb      	ldr	r3, [r7, #8]
 8004362:	2b00      	cmp	r3, #0
 8004364:	d103      	bne.n	800436e <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004366:	69bb      	ldr	r3, [r7, #24]
 8004368:	69ba      	ldr	r2, [r7, #24]
 800436a:	601a      	str	r2, [r3, #0]
 800436c:	e002      	b.n	8004374 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800436e:	69bb      	ldr	r3, [r7, #24]
 8004370:	687a      	ldr	r2, [r7, #4]
 8004372:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004374:	69bb      	ldr	r3, [r7, #24]
 8004376:	68fa      	ldr	r2, [r7, #12]
 8004378:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800437a:	69bb      	ldr	r3, [r7, #24]
 800437c:	68ba      	ldr	r2, [r7, #8]
 800437e:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004380:	2101      	movs	r1, #1
 8004382:	69b8      	ldr	r0, [r7, #24]
 8004384:	f7ff fece 	bl	8004124 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004388:	bf00      	nop
 800438a:	3710      	adds	r7, #16
 800438c:	46bd      	mov	sp, r7
 800438e:	bd80      	pop	{r7, pc}

08004390 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8004390:	b580      	push	{r7, lr}
 8004392:	b082      	sub	sp, #8
 8004394:	af00      	add	r7, sp, #0
 8004396:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	2b00      	cmp	r3, #0
 800439c:	d00e      	beq.n	80043bc <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	2200      	movs	r2, #0
 80043a2:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	2200      	movs	r2, #0
 80043a8:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.uxRecursiveCallCount = 0;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	2200      	movs	r2, #0
 80043ae:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80043b0:	2300      	movs	r3, #0
 80043b2:	2200      	movs	r2, #0
 80043b4:	2100      	movs	r1, #0
 80043b6:	6878      	ldr	r0, [r7, #4]
 80043b8:	f000 f838 	bl	800442c <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 80043bc:	bf00      	nop
 80043be:	3708      	adds	r7, #8
 80043c0:	46bd      	mov	sp, r7
 80043c2:	bd80      	pop	{r7, pc}

080043c4 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 80043c4:	b580      	push	{r7, lr}
 80043c6:	b086      	sub	sp, #24
 80043c8:	af00      	add	r7, sp, #0
 80043ca:	4603      	mov	r3, r0
 80043cc:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80043ce:	2301      	movs	r3, #1
 80043d0:	617b      	str	r3, [r7, #20]
 80043d2:	2300      	movs	r3, #0
 80043d4:	613b      	str	r3, [r7, #16]

		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 80043d6:	79fb      	ldrb	r3, [r7, #7]
 80043d8:	461a      	mov	r2, r3
 80043da:	6939      	ldr	r1, [r7, #16]
 80043dc:	6978      	ldr	r0, [r7, #20]
 80043de:	f7ff ff7b 	bl	80042d8 <xQueueGenericCreate>
 80043e2:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 80043e4:	68f8      	ldr	r0, [r7, #12]
 80043e6:	f7ff ffd3 	bl	8004390 <prvInitialiseMutex>

		return pxNewQueue;
 80043ea:	68fb      	ldr	r3, [r7, #12]
	}
 80043ec:	4618      	mov	r0, r3
 80043ee:	3718      	adds	r7, #24
 80043f0:	46bd      	mov	sp, r7
 80043f2:	bd80      	pop	{r7, pc}

080043f4 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 80043f4:	b580      	push	{r7, lr}
 80043f6:	b088      	sub	sp, #32
 80043f8:	af02      	add	r7, sp, #8
 80043fa:	4603      	mov	r3, r0
 80043fc:	6039      	str	r1, [r7, #0]
 80043fe:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8004400:	2301      	movs	r3, #1
 8004402:	617b      	str	r3, [r7, #20]
 8004404:	2300      	movs	r3, #0
 8004406:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		pxNewQueue = ( Queue_t * ) xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8004408:	79fb      	ldrb	r3, [r7, #7]
 800440a:	9300      	str	r3, [sp, #0]
 800440c:	683b      	ldr	r3, [r7, #0]
 800440e:	2200      	movs	r2, #0
 8004410:	6939      	ldr	r1, [r7, #16]
 8004412:	6978      	ldr	r0, [r7, #20]
 8004414:	f7ff feee 	bl	80041f4 <xQueueGenericCreateStatic>
 8004418:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 800441a:	68f8      	ldr	r0, [r7, #12]
 800441c:	f7ff ffb8 	bl	8004390 <prvInitialiseMutex>

		return pxNewQueue;
 8004420:	68fb      	ldr	r3, [r7, #12]
	}
 8004422:	4618      	mov	r0, r3
 8004424:	3718      	adds	r7, #24
 8004426:	46bd      	mov	sp, r7
 8004428:	bd80      	pop	{r7, pc}
	...

0800442c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800442c:	b580      	push	{r7, lr}
 800442e:	b08e      	sub	sp, #56	; 0x38
 8004430:	af00      	add	r7, sp, #0
 8004432:	60f8      	str	r0, [r7, #12]
 8004434:	60b9      	str	r1, [r7, #8]
 8004436:	607a      	str	r2, [r7, #4]
 8004438:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800443a:	2300      	movs	r3, #0
 800443c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004442:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004444:	2b00      	cmp	r3, #0
 8004446:	d109      	bne.n	800445c <xQueueGenericSend+0x30>
 8004448:	f04f 0350 	mov.w	r3, #80	; 0x50
 800444c:	f383 8811 	msr	BASEPRI, r3
 8004450:	f3bf 8f6f 	isb	sy
 8004454:	f3bf 8f4f 	dsb	sy
 8004458:	62bb      	str	r3, [r7, #40]	; 0x28
 800445a:	e7fe      	b.n	800445a <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800445c:	68bb      	ldr	r3, [r7, #8]
 800445e:	2b00      	cmp	r3, #0
 8004460:	d103      	bne.n	800446a <xQueueGenericSend+0x3e>
 8004462:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004464:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004466:	2b00      	cmp	r3, #0
 8004468:	d101      	bne.n	800446e <xQueueGenericSend+0x42>
 800446a:	2301      	movs	r3, #1
 800446c:	e000      	b.n	8004470 <xQueueGenericSend+0x44>
 800446e:	2300      	movs	r3, #0
 8004470:	2b00      	cmp	r3, #0
 8004472:	d109      	bne.n	8004488 <xQueueGenericSend+0x5c>
 8004474:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004478:	f383 8811 	msr	BASEPRI, r3
 800447c:	f3bf 8f6f 	isb	sy
 8004480:	f3bf 8f4f 	dsb	sy
 8004484:	627b      	str	r3, [r7, #36]	; 0x24
 8004486:	e7fe      	b.n	8004486 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004488:	683b      	ldr	r3, [r7, #0]
 800448a:	2b02      	cmp	r3, #2
 800448c:	d103      	bne.n	8004496 <xQueueGenericSend+0x6a>
 800448e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004490:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004492:	2b01      	cmp	r3, #1
 8004494:	d101      	bne.n	800449a <xQueueGenericSend+0x6e>
 8004496:	2301      	movs	r3, #1
 8004498:	e000      	b.n	800449c <xQueueGenericSend+0x70>
 800449a:	2300      	movs	r3, #0
 800449c:	2b00      	cmp	r3, #0
 800449e:	d109      	bne.n	80044b4 <xQueueGenericSend+0x88>
 80044a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044a4:	f383 8811 	msr	BASEPRI, r3
 80044a8:	f3bf 8f6f 	isb	sy
 80044ac:	f3bf 8f4f 	dsb	sy
 80044b0:	623b      	str	r3, [r7, #32]
 80044b2:	e7fe      	b.n	80044b2 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80044b4:	f001 fb30 	bl	8005b18 <xTaskGetSchedulerState>
 80044b8:	4603      	mov	r3, r0
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d102      	bne.n	80044c4 <xQueueGenericSend+0x98>
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d101      	bne.n	80044c8 <xQueueGenericSend+0x9c>
 80044c4:	2301      	movs	r3, #1
 80044c6:	e000      	b.n	80044ca <xQueueGenericSend+0x9e>
 80044c8:	2300      	movs	r3, #0
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d109      	bne.n	80044e2 <xQueueGenericSend+0xb6>
 80044ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044d2:	f383 8811 	msr	BASEPRI, r3
 80044d6:	f3bf 8f6f 	isb	sy
 80044da:	f3bf 8f4f 	dsb	sy
 80044de:	61fb      	str	r3, [r7, #28]
 80044e0:	e7fe      	b.n	80044e0 <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80044e2:	f002 f9c1 	bl	8006868 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80044e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044e8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80044ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044ee:	429a      	cmp	r2, r3
 80044f0:	d302      	bcc.n	80044f8 <xQueueGenericSend+0xcc>
 80044f2:	683b      	ldr	r3, [r7, #0]
 80044f4:	2b02      	cmp	r3, #2
 80044f6:	d129      	bne.n	800454c <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80044f8:	683a      	ldr	r2, [r7, #0]
 80044fa:	68b9      	ldr	r1, [r7, #8]
 80044fc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80044fe:	f000 fb9b 	bl	8004c38 <prvCopyDataToQueue>
 8004502:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004504:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004506:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004508:	2b00      	cmp	r3, #0
 800450a:	d010      	beq.n	800452e <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800450c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800450e:	3324      	adds	r3, #36	; 0x24
 8004510:	4618      	mov	r0, r3
 8004512:	f001 f947 	bl	80057a4 <xTaskRemoveFromEventList>
 8004516:	4603      	mov	r3, r0
 8004518:	2b00      	cmp	r3, #0
 800451a:	d013      	beq.n	8004544 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800451c:	4b3f      	ldr	r3, [pc, #252]	; (800461c <xQueueGenericSend+0x1f0>)
 800451e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004522:	601a      	str	r2, [r3, #0]
 8004524:	f3bf 8f4f 	dsb	sy
 8004528:	f3bf 8f6f 	isb	sy
 800452c:	e00a      	b.n	8004544 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800452e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004530:	2b00      	cmp	r3, #0
 8004532:	d007      	beq.n	8004544 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004534:	4b39      	ldr	r3, [pc, #228]	; (800461c <xQueueGenericSend+0x1f0>)
 8004536:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800453a:	601a      	str	r2, [r3, #0]
 800453c:	f3bf 8f4f 	dsb	sy
 8004540:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004544:	f002 f9be 	bl	80068c4 <vPortExitCritical>
				return pdPASS;
 8004548:	2301      	movs	r3, #1
 800454a:	e063      	b.n	8004614 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	2b00      	cmp	r3, #0
 8004550:	d103      	bne.n	800455a <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004552:	f002 f9b7 	bl	80068c4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004556:	2300      	movs	r3, #0
 8004558:	e05c      	b.n	8004614 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800455a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800455c:	2b00      	cmp	r3, #0
 800455e:	d106      	bne.n	800456e <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004560:	f107 0314 	add.w	r3, r7, #20
 8004564:	4618      	mov	r0, r3
 8004566:	f001 f97f 	bl	8005868 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800456a:	2301      	movs	r3, #1
 800456c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800456e:	f002 f9a9 	bl	80068c4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004572:	f000 feeb 	bl	800534c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004576:	f002 f977 	bl	8006868 <vPortEnterCritical>
 800457a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800457c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004580:	b25b      	sxtb	r3, r3
 8004582:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004586:	d103      	bne.n	8004590 <xQueueGenericSend+0x164>
 8004588:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800458a:	2200      	movs	r2, #0
 800458c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004590:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004592:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004596:	b25b      	sxtb	r3, r3
 8004598:	f1b3 3fff 	cmp.w	r3, #4294967295
 800459c:	d103      	bne.n	80045a6 <xQueueGenericSend+0x17a>
 800459e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045a0:	2200      	movs	r2, #0
 80045a2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80045a6:	f002 f98d 	bl	80068c4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80045aa:	1d3a      	adds	r2, r7, #4
 80045ac:	f107 0314 	add.w	r3, r7, #20
 80045b0:	4611      	mov	r1, r2
 80045b2:	4618      	mov	r0, r3
 80045b4:	f001 f96e 	bl	8005894 <xTaskCheckForTimeOut>
 80045b8:	4603      	mov	r3, r0
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d124      	bne.n	8004608 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80045be:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80045c0:	f000 fc32 	bl	8004e28 <prvIsQueueFull>
 80045c4:	4603      	mov	r3, r0
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d018      	beq.n	80045fc <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80045ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045cc:	3310      	adds	r3, #16
 80045ce:	687a      	ldr	r2, [r7, #4]
 80045d0:	4611      	mov	r1, r2
 80045d2:	4618      	mov	r0, r3
 80045d4:	f001 f898 	bl	8005708 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80045d8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80045da:	f000 fbbd 	bl	8004d58 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80045de:	f000 fec3 	bl	8005368 <xTaskResumeAll>
 80045e2:	4603      	mov	r3, r0
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	f47f af7c 	bne.w	80044e2 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 80045ea:	4b0c      	ldr	r3, [pc, #48]	; (800461c <xQueueGenericSend+0x1f0>)
 80045ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80045f0:	601a      	str	r2, [r3, #0]
 80045f2:	f3bf 8f4f 	dsb	sy
 80045f6:	f3bf 8f6f 	isb	sy
 80045fa:	e772      	b.n	80044e2 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80045fc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80045fe:	f000 fbab 	bl	8004d58 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004602:	f000 feb1 	bl	8005368 <xTaskResumeAll>
 8004606:	e76c      	b.n	80044e2 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004608:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800460a:	f000 fba5 	bl	8004d58 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800460e:	f000 feab 	bl	8005368 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004612:	2300      	movs	r3, #0
		}
	}
}
 8004614:	4618      	mov	r0, r3
 8004616:	3738      	adds	r7, #56	; 0x38
 8004618:	46bd      	mov	sp, r7
 800461a:	bd80      	pop	{r7, pc}
 800461c:	e000ed04 	.word	0xe000ed04

08004620 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004620:	b580      	push	{r7, lr}
 8004622:	b08e      	sub	sp, #56	; 0x38
 8004624:	af00      	add	r7, sp, #0
 8004626:	60f8      	str	r0, [r7, #12]
 8004628:	60b9      	str	r1, [r7, #8]
 800462a:	607a      	str	r2, [r7, #4]
 800462c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004632:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004634:	2b00      	cmp	r3, #0
 8004636:	d109      	bne.n	800464c <xQueueGenericSendFromISR+0x2c>
 8004638:	f04f 0350 	mov.w	r3, #80	; 0x50
 800463c:	f383 8811 	msr	BASEPRI, r3
 8004640:	f3bf 8f6f 	isb	sy
 8004644:	f3bf 8f4f 	dsb	sy
 8004648:	627b      	str	r3, [r7, #36]	; 0x24
 800464a:	e7fe      	b.n	800464a <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800464c:	68bb      	ldr	r3, [r7, #8]
 800464e:	2b00      	cmp	r3, #0
 8004650:	d103      	bne.n	800465a <xQueueGenericSendFromISR+0x3a>
 8004652:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004654:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004656:	2b00      	cmp	r3, #0
 8004658:	d101      	bne.n	800465e <xQueueGenericSendFromISR+0x3e>
 800465a:	2301      	movs	r3, #1
 800465c:	e000      	b.n	8004660 <xQueueGenericSendFromISR+0x40>
 800465e:	2300      	movs	r3, #0
 8004660:	2b00      	cmp	r3, #0
 8004662:	d109      	bne.n	8004678 <xQueueGenericSendFromISR+0x58>
 8004664:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004668:	f383 8811 	msr	BASEPRI, r3
 800466c:	f3bf 8f6f 	isb	sy
 8004670:	f3bf 8f4f 	dsb	sy
 8004674:	623b      	str	r3, [r7, #32]
 8004676:	e7fe      	b.n	8004676 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004678:	683b      	ldr	r3, [r7, #0]
 800467a:	2b02      	cmp	r3, #2
 800467c:	d103      	bne.n	8004686 <xQueueGenericSendFromISR+0x66>
 800467e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004680:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004682:	2b01      	cmp	r3, #1
 8004684:	d101      	bne.n	800468a <xQueueGenericSendFromISR+0x6a>
 8004686:	2301      	movs	r3, #1
 8004688:	e000      	b.n	800468c <xQueueGenericSendFromISR+0x6c>
 800468a:	2300      	movs	r3, #0
 800468c:	2b00      	cmp	r3, #0
 800468e:	d109      	bne.n	80046a4 <xQueueGenericSendFromISR+0x84>
 8004690:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004694:	f383 8811 	msr	BASEPRI, r3
 8004698:	f3bf 8f6f 	isb	sy
 800469c:	f3bf 8f4f 	dsb	sy
 80046a0:	61fb      	str	r3, [r7, #28]
 80046a2:	e7fe      	b.n	80046a2 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80046a4:	f002 f99a 	bl	80069dc <vPortValidateInterruptPriority>
	__asm volatile
 80046a8:	f3ef 8211 	mrs	r2, BASEPRI
 80046ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046b0:	f383 8811 	msr	BASEPRI, r3
 80046b4:	f3bf 8f6f 	isb	sy
 80046b8:	f3bf 8f4f 	dsb	sy
 80046bc:	61ba      	str	r2, [r7, #24]
 80046be:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80046c0:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80046c2:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80046c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046c6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80046c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046cc:	429a      	cmp	r2, r3
 80046ce:	d302      	bcc.n	80046d6 <xQueueGenericSendFromISR+0xb6>
 80046d0:	683b      	ldr	r3, [r7, #0]
 80046d2:	2b02      	cmp	r3, #2
 80046d4:	d12c      	bne.n	8004730 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80046d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046d8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80046dc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80046e0:	683a      	ldr	r2, [r7, #0]
 80046e2:	68b9      	ldr	r1, [r7, #8]
 80046e4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80046e6:	f000 faa7 	bl	8004c38 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80046ea:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80046ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046f2:	d112      	bne.n	800471a <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80046f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d016      	beq.n	800472a <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80046fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046fe:	3324      	adds	r3, #36	; 0x24
 8004700:	4618      	mov	r0, r3
 8004702:	f001 f84f 	bl	80057a4 <xTaskRemoveFromEventList>
 8004706:	4603      	mov	r3, r0
 8004708:	2b00      	cmp	r3, #0
 800470a:	d00e      	beq.n	800472a <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	2b00      	cmp	r3, #0
 8004710:	d00b      	beq.n	800472a <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	2201      	movs	r2, #1
 8004716:	601a      	str	r2, [r3, #0]
 8004718:	e007      	b.n	800472a <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800471a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800471e:	3301      	adds	r3, #1
 8004720:	b2db      	uxtb	r3, r3
 8004722:	b25a      	sxtb	r2, r3
 8004724:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004726:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800472a:	2301      	movs	r3, #1
 800472c:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800472e:	e001      	b.n	8004734 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004730:	2300      	movs	r3, #0
 8004732:	637b      	str	r3, [r7, #52]	; 0x34
 8004734:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004736:	613b      	str	r3, [r7, #16]
	__asm volatile
 8004738:	693b      	ldr	r3, [r7, #16]
 800473a:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800473e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8004740:	4618      	mov	r0, r3
 8004742:	3738      	adds	r7, #56	; 0x38
 8004744:	46bd      	mov	sp, r7
 8004746:	bd80      	pop	{r7, pc}

08004748 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004748:	b580      	push	{r7, lr}
 800474a:	b08c      	sub	sp, #48	; 0x30
 800474c:	af00      	add	r7, sp, #0
 800474e:	60f8      	str	r0, [r7, #12]
 8004750:	60b9      	str	r1, [r7, #8]
 8004752:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004754:	2300      	movs	r3, #0
 8004756:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800475c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800475e:	2b00      	cmp	r3, #0
 8004760:	d109      	bne.n	8004776 <xQueueReceive+0x2e>
	__asm volatile
 8004762:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004766:	f383 8811 	msr	BASEPRI, r3
 800476a:	f3bf 8f6f 	isb	sy
 800476e:	f3bf 8f4f 	dsb	sy
 8004772:	623b      	str	r3, [r7, #32]
 8004774:	e7fe      	b.n	8004774 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004776:	68bb      	ldr	r3, [r7, #8]
 8004778:	2b00      	cmp	r3, #0
 800477a:	d103      	bne.n	8004784 <xQueueReceive+0x3c>
 800477c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800477e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004780:	2b00      	cmp	r3, #0
 8004782:	d101      	bne.n	8004788 <xQueueReceive+0x40>
 8004784:	2301      	movs	r3, #1
 8004786:	e000      	b.n	800478a <xQueueReceive+0x42>
 8004788:	2300      	movs	r3, #0
 800478a:	2b00      	cmp	r3, #0
 800478c:	d109      	bne.n	80047a2 <xQueueReceive+0x5a>
 800478e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004792:	f383 8811 	msr	BASEPRI, r3
 8004796:	f3bf 8f6f 	isb	sy
 800479a:	f3bf 8f4f 	dsb	sy
 800479e:	61fb      	str	r3, [r7, #28]
 80047a0:	e7fe      	b.n	80047a0 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80047a2:	f001 f9b9 	bl	8005b18 <xTaskGetSchedulerState>
 80047a6:	4603      	mov	r3, r0
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d102      	bne.n	80047b2 <xQueueReceive+0x6a>
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d101      	bne.n	80047b6 <xQueueReceive+0x6e>
 80047b2:	2301      	movs	r3, #1
 80047b4:	e000      	b.n	80047b8 <xQueueReceive+0x70>
 80047b6:	2300      	movs	r3, #0
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d109      	bne.n	80047d0 <xQueueReceive+0x88>
 80047bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047c0:	f383 8811 	msr	BASEPRI, r3
 80047c4:	f3bf 8f6f 	isb	sy
 80047c8:	f3bf 8f4f 	dsb	sy
 80047cc:	61bb      	str	r3, [r7, #24]
 80047ce:	e7fe      	b.n	80047ce <xQueueReceive+0x86>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 80047d0:	f002 f84a 	bl	8006868 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80047d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047d8:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80047da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d01f      	beq.n	8004820 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80047e0:	68b9      	ldr	r1, [r7, #8]
 80047e2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80047e4:	f000 fa92 	bl	8004d0c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80047e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047ea:	1e5a      	subs	r2, r3, #1
 80047ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047ee:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80047f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047f2:	691b      	ldr	r3, [r3, #16]
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d00f      	beq.n	8004818 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80047f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047fa:	3310      	adds	r3, #16
 80047fc:	4618      	mov	r0, r3
 80047fe:	f000 ffd1 	bl	80057a4 <xTaskRemoveFromEventList>
 8004802:	4603      	mov	r3, r0
 8004804:	2b00      	cmp	r3, #0
 8004806:	d007      	beq.n	8004818 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004808:	4b3c      	ldr	r3, [pc, #240]	; (80048fc <xQueueReceive+0x1b4>)
 800480a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800480e:	601a      	str	r2, [r3, #0]
 8004810:	f3bf 8f4f 	dsb	sy
 8004814:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004818:	f002 f854 	bl	80068c4 <vPortExitCritical>
				return pdPASS;
 800481c:	2301      	movs	r3, #1
 800481e:	e069      	b.n	80048f4 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	2b00      	cmp	r3, #0
 8004824:	d103      	bne.n	800482e <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004826:	f002 f84d 	bl	80068c4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800482a:	2300      	movs	r3, #0
 800482c:	e062      	b.n	80048f4 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 800482e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004830:	2b00      	cmp	r3, #0
 8004832:	d106      	bne.n	8004842 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004834:	f107 0310 	add.w	r3, r7, #16
 8004838:	4618      	mov	r0, r3
 800483a:	f001 f815 	bl	8005868 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800483e:	2301      	movs	r3, #1
 8004840:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004842:	f002 f83f 	bl	80068c4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004846:	f000 fd81 	bl	800534c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800484a:	f002 f80d 	bl	8006868 <vPortEnterCritical>
 800484e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004850:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004854:	b25b      	sxtb	r3, r3
 8004856:	f1b3 3fff 	cmp.w	r3, #4294967295
 800485a:	d103      	bne.n	8004864 <xQueueReceive+0x11c>
 800485c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800485e:	2200      	movs	r2, #0
 8004860:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004864:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004866:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800486a:	b25b      	sxtb	r3, r3
 800486c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004870:	d103      	bne.n	800487a <xQueueReceive+0x132>
 8004872:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004874:	2200      	movs	r2, #0
 8004876:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800487a:	f002 f823 	bl	80068c4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800487e:	1d3a      	adds	r2, r7, #4
 8004880:	f107 0310 	add.w	r3, r7, #16
 8004884:	4611      	mov	r1, r2
 8004886:	4618      	mov	r0, r3
 8004888:	f001 f804 	bl	8005894 <xTaskCheckForTimeOut>
 800488c:	4603      	mov	r3, r0
 800488e:	2b00      	cmp	r3, #0
 8004890:	d123      	bne.n	80048da <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004892:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004894:	f000 fab2 	bl	8004dfc <prvIsQueueEmpty>
 8004898:	4603      	mov	r3, r0
 800489a:	2b00      	cmp	r3, #0
 800489c:	d017      	beq.n	80048ce <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800489e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048a0:	3324      	adds	r3, #36	; 0x24
 80048a2:	687a      	ldr	r2, [r7, #4]
 80048a4:	4611      	mov	r1, r2
 80048a6:	4618      	mov	r0, r3
 80048a8:	f000 ff2e 	bl	8005708 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80048ac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80048ae:	f000 fa53 	bl	8004d58 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80048b2:	f000 fd59 	bl	8005368 <xTaskResumeAll>
 80048b6:	4603      	mov	r3, r0
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d189      	bne.n	80047d0 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 80048bc:	4b0f      	ldr	r3, [pc, #60]	; (80048fc <xQueueReceive+0x1b4>)
 80048be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80048c2:	601a      	str	r2, [r3, #0]
 80048c4:	f3bf 8f4f 	dsb	sy
 80048c8:	f3bf 8f6f 	isb	sy
 80048cc:	e780      	b.n	80047d0 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80048ce:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80048d0:	f000 fa42 	bl	8004d58 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80048d4:	f000 fd48 	bl	8005368 <xTaskResumeAll>
 80048d8:	e77a      	b.n	80047d0 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80048da:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80048dc:	f000 fa3c 	bl	8004d58 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80048e0:	f000 fd42 	bl	8005368 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80048e4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80048e6:	f000 fa89 	bl	8004dfc <prvIsQueueEmpty>
 80048ea:	4603      	mov	r3, r0
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	f43f af6f 	beq.w	80047d0 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80048f2:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 80048f4:	4618      	mov	r0, r3
 80048f6:	3730      	adds	r7, #48	; 0x30
 80048f8:	46bd      	mov	sp, r7
 80048fa:	bd80      	pop	{r7, pc}
 80048fc:	e000ed04 	.word	0xe000ed04

08004900 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8004900:	b580      	push	{r7, lr}
 8004902:	b08e      	sub	sp, #56	; 0x38
 8004904:	af00      	add	r7, sp, #0
 8004906:	6078      	str	r0, [r7, #4]
 8004908:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800490a:	2300      	movs	r3, #0
 800490c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8004912:	2300      	movs	r3, #0
 8004914:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004916:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004918:	2b00      	cmp	r3, #0
 800491a:	d109      	bne.n	8004930 <xQueueSemaphoreTake+0x30>
 800491c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004920:	f383 8811 	msr	BASEPRI, r3
 8004924:	f3bf 8f6f 	isb	sy
 8004928:	f3bf 8f4f 	dsb	sy
 800492c:	623b      	str	r3, [r7, #32]
 800492e:	e7fe      	b.n	800492e <xQueueSemaphoreTake+0x2e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8004930:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004932:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004934:	2b00      	cmp	r3, #0
 8004936:	d009      	beq.n	800494c <xQueueSemaphoreTake+0x4c>
 8004938:	f04f 0350 	mov.w	r3, #80	; 0x50
 800493c:	f383 8811 	msr	BASEPRI, r3
 8004940:	f3bf 8f6f 	isb	sy
 8004944:	f3bf 8f4f 	dsb	sy
 8004948:	61fb      	str	r3, [r7, #28]
 800494a:	e7fe      	b.n	800494a <xQueueSemaphoreTake+0x4a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800494c:	f001 f8e4 	bl	8005b18 <xTaskGetSchedulerState>
 8004950:	4603      	mov	r3, r0
 8004952:	2b00      	cmp	r3, #0
 8004954:	d102      	bne.n	800495c <xQueueSemaphoreTake+0x5c>
 8004956:	683b      	ldr	r3, [r7, #0]
 8004958:	2b00      	cmp	r3, #0
 800495a:	d101      	bne.n	8004960 <xQueueSemaphoreTake+0x60>
 800495c:	2301      	movs	r3, #1
 800495e:	e000      	b.n	8004962 <xQueueSemaphoreTake+0x62>
 8004960:	2300      	movs	r3, #0
 8004962:	2b00      	cmp	r3, #0
 8004964:	d109      	bne.n	800497a <xQueueSemaphoreTake+0x7a>
 8004966:	f04f 0350 	mov.w	r3, #80	; 0x50
 800496a:	f383 8811 	msr	BASEPRI, r3
 800496e:	f3bf 8f6f 	isb	sy
 8004972:	f3bf 8f4f 	dsb	sy
 8004976:	61bb      	str	r3, [r7, #24]
 8004978:	e7fe      	b.n	8004978 <xQueueSemaphoreTake+0x78>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 800497a:	f001 ff75 	bl	8006868 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800497e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004980:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004982:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8004984:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004986:	2b00      	cmp	r3, #0
 8004988:	d024      	beq.n	80049d4 <xQueueSemaphoreTake+0xd4>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800498a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800498c:	1e5a      	subs	r2, r3, #1
 800498e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004990:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004992:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	2b00      	cmp	r3, #0
 8004998:	d104      	bne.n	80049a4 <xQueueSemaphoreTake+0xa4>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 800499a:	f001 fa83 	bl	8005ea4 <pvTaskIncrementMutexHeldCount>
 800499e:	4602      	mov	r2, r0
 80049a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049a2:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80049a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049a6:	691b      	ldr	r3, [r3, #16]
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d00f      	beq.n	80049cc <xQueueSemaphoreTake+0xcc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80049ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049ae:	3310      	adds	r3, #16
 80049b0:	4618      	mov	r0, r3
 80049b2:	f000 fef7 	bl	80057a4 <xTaskRemoveFromEventList>
 80049b6:	4603      	mov	r3, r0
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d007      	beq.n	80049cc <xQueueSemaphoreTake+0xcc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80049bc:	4b53      	ldr	r3, [pc, #332]	; (8004b0c <xQueueSemaphoreTake+0x20c>)
 80049be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80049c2:	601a      	str	r2, [r3, #0]
 80049c4:	f3bf 8f4f 	dsb	sy
 80049c8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80049cc:	f001 ff7a 	bl	80068c4 <vPortExitCritical>
				return pdPASS;
 80049d0:	2301      	movs	r3, #1
 80049d2:	e096      	b.n	8004b02 <xQueueSemaphoreTake+0x202>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80049d4:	683b      	ldr	r3, [r7, #0]
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d110      	bne.n	80049fc <xQueueSemaphoreTake+0xfc>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80049da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d009      	beq.n	80049f4 <xQueueSemaphoreTake+0xf4>
 80049e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049e4:	f383 8811 	msr	BASEPRI, r3
 80049e8:	f3bf 8f6f 	isb	sy
 80049ec:	f3bf 8f4f 	dsb	sy
 80049f0:	617b      	str	r3, [r7, #20]
 80049f2:	e7fe      	b.n	80049f2 <xQueueSemaphoreTake+0xf2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80049f4:	f001 ff66 	bl	80068c4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80049f8:	2300      	movs	r3, #0
 80049fa:	e082      	b.n	8004b02 <xQueueSemaphoreTake+0x202>
				}
				else if( xEntryTimeSet == pdFALSE )
 80049fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d106      	bne.n	8004a10 <xQueueSemaphoreTake+0x110>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004a02:	f107 030c 	add.w	r3, r7, #12
 8004a06:	4618      	mov	r0, r3
 8004a08:	f000 ff2e 	bl	8005868 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004a0c:	2301      	movs	r3, #1
 8004a0e:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004a10:	f001 ff58 	bl	80068c4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004a14:	f000 fc9a 	bl	800534c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004a18:	f001 ff26 	bl	8006868 <vPortEnterCritical>
 8004a1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a1e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004a22:	b25b      	sxtb	r3, r3
 8004a24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a28:	d103      	bne.n	8004a32 <xQueueSemaphoreTake+0x132>
 8004a2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a2c:	2200      	movs	r2, #0
 8004a2e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004a32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a34:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004a38:	b25b      	sxtb	r3, r3
 8004a3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a3e:	d103      	bne.n	8004a48 <xQueueSemaphoreTake+0x148>
 8004a40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a42:	2200      	movs	r2, #0
 8004a44:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004a48:	f001 ff3c 	bl	80068c4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004a4c:	463a      	mov	r2, r7
 8004a4e:	f107 030c 	add.w	r3, r7, #12
 8004a52:	4611      	mov	r1, r2
 8004a54:	4618      	mov	r0, r3
 8004a56:	f000 ff1d 	bl	8005894 <xTaskCheckForTimeOut>
 8004a5a:	4603      	mov	r3, r0
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d132      	bne.n	8004ac6 <xQueueSemaphoreTake+0x1c6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004a60:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004a62:	f000 f9cb 	bl	8004dfc <prvIsQueueEmpty>
 8004a66:	4603      	mov	r3, r0
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d026      	beq.n	8004aba <xQueueSemaphoreTake+0x1ba>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004a6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d109      	bne.n	8004a88 <xQueueSemaphoreTake+0x188>
					{
						taskENTER_CRITICAL();
 8004a74:	f001 fef8 	bl	8006868 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8004a78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a7a:	685b      	ldr	r3, [r3, #4]
 8004a7c:	4618      	mov	r0, r3
 8004a7e:	f001 f869 	bl	8005b54 <xTaskPriorityInherit>
 8004a82:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8004a84:	f001 ff1e 	bl	80068c4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004a88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a8a:	3324      	adds	r3, #36	; 0x24
 8004a8c:	683a      	ldr	r2, [r7, #0]
 8004a8e:	4611      	mov	r1, r2
 8004a90:	4618      	mov	r0, r3
 8004a92:	f000 fe39 	bl	8005708 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004a96:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004a98:	f000 f95e 	bl	8004d58 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004a9c:	f000 fc64 	bl	8005368 <xTaskResumeAll>
 8004aa0:	4603      	mov	r3, r0
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	f47f af69 	bne.w	800497a <xQueueSemaphoreTake+0x7a>
				{
					portYIELD_WITHIN_API();
 8004aa8:	4b18      	ldr	r3, [pc, #96]	; (8004b0c <xQueueSemaphoreTake+0x20c>)
 8004aaa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004aae:	601a      	str	r2, [r3, #0]
 8004ab0:	f3bf 8f4f 	dsb	sy
 8004ab4:	f3bf 8f6f 	isb	sy
 8004ab8:	e75f      	b.n	800497a <xQueueSemaphoreTake+0x7a>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8004aba:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004abc:	f000 f94c 	bl	8004d58 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004ac0:	f000 fc52 	bl	8005368 <xTaskResumeAll>
 8004ac4:	e759      	b.n	800497a <xQueueSemaphoreTake+0x7a>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8004ac6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004ac8:	f000 f946 	bl	8004d58 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004acc:	f000 fc4c 	bl	8005368 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004ad0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004ad2:	f000 f993 	bl	8004dfc <prvIsQueueEmpty>
 8004ad6:	4603      	mov	r3, r0
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	f43f af4e 	beq.w	800497a <xQueueSemaphoreTake+0x7a>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8004ade:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d00d      	beq.n	8004b00 <xQueueSemaphoreTake+0x200>
					{
						taskENTER_CRITICAL();
 8004ae4:	f001 fec0 	bl	8006868 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8004ae8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004aea:	f000 f88e 	bl	8004c0a <prvGetDisinheritPriorityAfterTimeout>
 8004aee:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 8004af0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004af2:	685b      	ldr	r3, [r3, #4]
 8004af4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004af6:	4618      	mov	r0, r3
 8004af8:	f001 f936 	bl	8005d68 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8004afc:	f001 fee2 	bl	80068c4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004b00:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8004b02:	4618      	mov	r0, r3
 8004b04:	3738      	adds	r7, #56	; 0x38
 8004b06:	46bd      	mov	sp, r7
 8004b08:	bd80      	pop	{r7, pc}
 8004b0a:	bf00      	nop
 8004b0c:	e000ed04 	.word	0xe000ed04

08004b10 <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8004b10:	b580      	push	{r7, lr}
 8004b12:	b08e      	sub	sp, #56	; 0x38
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	60f8      	str	r0, [r7, #12]
 8004b18:	60b9      	str	r1, [r7, #8]
 8004b1a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004b20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d109      	bne.n	8004b3a <xQueueReceiveFromISR+0x2a>
 8004b26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b2a:	f383 8811 	msr	BASEPRI, r3
 8004b2e:	f3bf 8f6f 	isb	sy
 8004b32:	f3bf 8f4f 	dsb	sy
 8004b36:	623b      	str	r3, [r7, #32]
 8004b38:	e7fe      	b.n	8004b38 <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004b3a:	68bb      	ldr	r3, [r7, #8]
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d103      	bne.n	8004b48 <xQueueReceiveFromISR+0x38>
 8004b40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d101      	bne.n	8004b4c <xQueueReceiveFromISR+0x3c>
 8004b48:	2301      	movs	r3, #1
 8004b4a:	e000      	b.n	8004b4e <xQueueReceiveFromISR+0x3e>
 8004b4c:	2300      	movs	r3, #0
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d109      	bne.n	8004b66 <xQueueReceiveFromISR+0x56>
 8004b52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b56:	f383 8811 	msr	BASEPRI, r3
 8004b5a:	f3bf 8f6f 	isb	sy
 8004b5e:	f3bf 8f4f 	dsb	sy
 8004b62:	61fb      	str	r3, [r7, #28]
 8004b64:	e7fe      	b.n	8004b64 <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004b66:	f001 ff39 	bl	80069dc <vPortValidateInterruptPriority>
	__asm volatile
 8004b6a:	f3ef 8211 	mrs	r2, BASEPRI
 8004b6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b72:	f383 8811 	msr	BASEPRI, r3
 8004b76:	f3bf 8f6f 	isb	sy
 8004b7a:	f3bf 8f4f 	dsb	sy
 8004b7e:	61ba      	str	r2, [r7, #24]
 8004b80:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8004b82:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004b84:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004b86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b8a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004b8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d02f      	beq.n	8004bf2 <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8004b92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b94:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004b98:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004b9c:	68b9      	ldr	r1, [r7, #8]
 8004b9e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004ba0:	f000 f8b4 	bl	8004d0c <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004ba4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ba6:	1e5a      	subs	r2, r3, #1
 8004ba8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004baa:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8004bac:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8004bb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bb4:	d112      	bne.n	8004bdc <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004bb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bb8:	691b      	ldr	r3, [r3, #16]
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d016      	beq.n	8004bec <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004bbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bc0:	3310      	adds	r3, #16
 8004bc2:	4618      	mov	r0, r3
 8004bc4:	f000 fdee 	bl	80057a4 <xTaskRemoveFromEventList>
 8004bc8:	4603      	mov	r3, r0
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d00e      	beq.n	8004bec <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d00b      	beq.n	8004bec <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	2201      	movs	r2, #1
 8004bd8:	601a      	str	r2, [r3, #0]
 8004bda:	e007      	b.n	8004bec <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8004bdc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004be0:	3301      	adds	r3, #1
 8004be2:	b2db      	uxtb	r3, r3
 8004be4:	b25a      	sxtb	r2, r3
 8004be6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004be8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8004bec:	2301      	movs	r3, #1
 8004bee:	637b      	str	r3, [r7, #52]	; 0x34
 8004bf0:	e001      	b.n	8004bf6 <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 8004bf2:	2300      	movs	r3, #0
 8004bf4:	637b      	str	r3, [r7, #52]	; 0x34
 8004bf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bf8:	613b      	str	r3, [r7, #16]
	__asm volatile
 8004bfa:	693b      	ldr	r3, [r7, #16]
 8004bfc:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004c00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8004c02:	4618      	mov	r0, r3
 8004c04:	3738      	adds	r7, #56	; 0x38
 8004c06:	46bd      	mov	sp, r7
 8004c08:	bd80      	pop	{r7, pc}

08004c0a <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8004c0a:	b480      	push	{r7}
 8004c0c:	b085      	sub	sp, #20
 8004c0e:	af00      	add	r7, sp, #0
 8004c10:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d006      	beq.n	8004c28 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	f1c3 0307 	rsb	r3, r3, #7
 8004c24:	60fb      	str	r3, [r7, #12]
 8004c26:	e001      	b.n	8004c2c <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8004c28:	2300      	movs	r3, #0
 8004c2a:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8004c2c:	68fb      	ldr	r3, [r7, #12]
	}
 8004c2e:	4618      	mov	r0, r3
 8004c30:	3714      	adds	r7, #20
 8004c32:	46bd      	mov	sp, r7
 8004c34:	bc80      	pop	{r7}
 8004c36:	4770      	bx	lr

08004c38 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004c38:	b580      	push	{r7, lr}
 8004c3a:	b086      	sub	sp, #24
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	60f8      	str	r0, [r7, #12]
 8004c40:	60b9      	str	r1, [r7, #8]
 8004c42:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004c44:	2300      	movs	r3, #0
 8004c46:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c4c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d10d      	bne.n	8004c72 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d14d      	bne.n	8004cfa <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	685b      	ldr	r3, [r3, #4]
 8004c62:	4618      	mov	r0, r3
 8004c64:	f000 fffc 	bl	8005c60 <xTaskPriorityDisinherit>
 8004c68:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	2200      	movs	r2, #0
 8004c6e:	605a      	str	r2, [r3, #4]
 8004c70:	e043      	b.n	8004cfa <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d119      	bne.n	8004cac <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	6898      	ldr	r0, [r3, #8]
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c80:	461a      	mov	r2, r3
 8004c82:	68b9      	ldr	r1, [r7, #8]
 8004c84:	f002 f8e8 	bl	8006e58 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	689a      	ldr	r2, [r3, #8]
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c90:	441a      	add	r2, r3
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	689a      	ldr	r2, [r3, #8]
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	685b      	ldr	r3, [r3, #4]
 8004c9e:	429a      	cmp	r2, r3
 8004ca0:	d32b      	bcc.n	8004cfa <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	681a      	ldr	r2, [r3, #0]
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	609a      	str	r2, [r3, #8]
 8004caa:	e026      	b.n	8004cfa <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	68d8      	ldr	r0, [r3, #12]
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cb4:	461a      	mov	r2, r3
 8004cb6:	68b9      	ldr	r1, [r7, #8]
 8004cb8:	f002 f8ce 	bl	8006e58 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	68da      	ldr	r2, [r3, #12]
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cc4:	425b      	negs	r3, r3
 8004cc6:	441a      	add	r2, r3
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	68da      	ldr	r2, [r3, #12]
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	429a      	cmp	r2, r3
 8004cd6:	d207      	bcs.n	8004ce8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	685a      	ldr	r2, [r3, #4]
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ce0:	425b      	negs	r3, r3
 8004ce2:	441a      	add	r2, r3
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	2b02      	cmp	r3, #2
 8004cec:	d105      	bne.n	8004cfa <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004cee:	693b      	ldr	r3, [r7, #16]
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d002      	beq.n	8004cfa <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004cf4:	693b      	ldr	r3, [r7, #16]
 8004cf6:	3b01      	subs	r3, #1
 8004cf8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004cfa:	693b      	ldr	r3, [r7, #16]
 8004cfc:	1c5a      	adds	r2, r3, #1
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8004d02:	697b      	ldr	r3, [r7, #20]
}
 8004d04:	4618      	mov	r0, r3
 8004d06:	3718      	adds	r7, #24
 8004d08:	46bd      	mov	sp, r7
 8004d0a:	bd80      	pop	{r7, pc}

08004d0c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004d0c:	b580      	push	{r7, lr}
 8004d0e:	b082      	sub	sp, #8
 8004d10:	af00      	add	r7, sp, #0
 8004d12:	6078      	str	r0, [r7, #4]
 8004d14:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d018      	beq.n	8004d50 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	68da      	ldr	r2, [r3, #12]
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d26:	441a      	add	r2, r3
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	68da      	ldr	r2, [r3, #12]
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	685b      	ldr	r3, [r3, #4]
 8004d34:	429a      	cmp	r2, r3
 8004d36:	d303      	bcc.n	8004d40 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681a      	ldr	r2, [r3, #0]
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	68d9      	ldr	r1, [r3, #12]
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d48:	461a      	mov	r2, r3
 8004d4a:	6838      	ldr	r0, [r7, #0]
 8004d4c:	f002 f884 	bl	8006e58 <memcpy>
	}
}
 8004d50:	bf00      	nop
 8004d52:	3708      	adds	r7, #8
 8004d54:	46bd      	mov	sp, r7
 8004d56:	bd80      	pop	{r7, pc}

08004d58 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004d58:	b580      	push	{r7, lr}
 8004d5a:	b084      	sub	sp, #16
 8004d5c:	af00      	add	r7, sp, #0
 8004d5e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004d60:	f001 fd82 	bl	8006868 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004d6a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004d6c:	e011      	b.n	8004d92 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d012      	beq.n	8004d9c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	3324      	adds	r3, #36	; 0x24
 8004d7a:	4618      	mov	r0, r3
 8004d7c:	f000 fd12 	bl	80057a4 <xTaskRemoveFromEventList>
 8004d80:	4603      	mov	r3, r0
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d001      	beq.n	8004d8a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004d86:	f000 fde5 	bl	8005954 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004d8a:	7bfb      	ldrb	r3, [r7, #15]
 8004d8c:	3b01      	subs	r3, #1
 8004d8e:	b2db      	uxtb	r3, r3
 8004d90:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004d92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	dce9      	bgt.n	8004d6e <prvUnlockQueue+0x16>
 8004d9a:	e000      	b.n	8004d9e <prvUnlockQueue+0x46>
					break;
 8004d9c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	22ff      	movs	r2, #255	; 0xff
 8004da2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8004da6:	f001 fd8d 	bl	80068c4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004daa:	f001 fd5d 	bl	8006868 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004db4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004db6:	e011      	b.n	8004ddc <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	691b      	ldr	r3, [r3, #16]
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d012      	beq.n	8004de6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	3310      	adds	r3, #16
 8004dc4:	4618      	mov	r0, r3
 8004dc6:	f000 fced 	bl	80057a4 <xTaskRemoveFromEventList>
 8004dca:	4603      	mov	r3, r0
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d001      	beq.n	8004dd4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004dd0:	f000 fdc0 	bl	8005954 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004dd4:	7bbb      	ldrb	r3, [r7, #14]
 8004dd6:	3b01      	subs	r3, #1
 8004dd8:	b2db      	uxtb	r3, r3
 8004dda:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004ddc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	dce9      	bgt.n	8004db8 <prvUnlockQueue+0x60>
 8004de4:	e000      	b.n	8004de8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004de6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	22ff      	movs	r2, #255	; 0xff
 8004dec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8004df0:	f001 fd68 	bl	80068c4 <vPortExitCritical>
}
 8004df4:	bf00      	nop
 8004df6:	3710      	adds	r7, #16
 8004df8:	46bd      	mov	sp, r7
 8004dfa:	bd80      	pop	{r7, pc}

08004dfc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004dfc:	b580      	push	{r7, lr}
 8004dfe:	b084      	sub	sp, #16
 8004e00:	af00      	add	r7, sp, #0
 8004e02:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004e04:	f001 fd30 	bl	8006868 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d102      	bne.n	8004e16 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004e10:	2301      	movs	r3, #1
 8004e12:	60fb      	str	r3, [r7, #12]
 8004e14:	e001      	b.n	8004e1a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004e16:	2300      	movs	r3, #0
 8004e18:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004e1a:	f001 fd53 	bl	80068c4 <vPortExitCritical>

	return xReturn;
 8004e1e:	68fb      	ldr	r3, [r7, #12]
}
 8004e20:	4618      	mov	r0, r3
 8004e22:	3710      	adds	r7, #16
 8004e24:	46bd      	mov	sp, r7
 8004e26:	bd80      	pop	{r7, pc}

08004e28 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004e28:	b580      	push	{r7, lr}
 8004e2a:	b084      	sub	sp, #16
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004e30:	f001 fd1a 	bl	8006868 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e3c:	429a      	cmp	r2, r3
 8004e3e:	d102      	bne.n	8004e46 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004e40:	2301      	movs	r3, #1
 8004e42:	60fb      	str	r3, [r7, #12]
 8004e44:	e001      	b.n	8004e4a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004e46:	2300      	movs	r3, #0
 8004e48:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004e4a:	f001 fd3b 	bl	80068c4 <vPortExitCritical>

	return xReturn;
 8004e4e:	68fb      	ldr	r3, [r7, #12]
}
 8004e50:	4618      	mov	r0, r3
 8004e52:	3710      	adds	r7, #16
 8004e54:	46bd      	mov	sp, r7
 8004e56:	bd80      	pop	{r7, pc}

08004e58 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004e58:	b480      	push	{r7}
 8004e5a:	b085      	sub	sp, #20
 8004e5c:	af00      	add	r7, sp, #0
 8004e5e:	6078      	str	r0, [r7, #4]
 8004e60:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004e62:	2300      	movs	r3, #0
 8004e64:	60fb      	str	r3, [r7, #12]
 8004e66:	e014      	b.n	8004e92 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004e68:	4a0e      	ldr	r2, [pc, #56]	; (8004ea4 <vQueueAddToRegistry+0x4c>)
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d10b      	bne.n	8004e8c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004e74:	490b      	ldr	r1, [pc, #44]	; (8004ea4 <vQueueAddToRegistry+0x4c>)
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	683a      	ldr	r2, [r7, #0]
 8004e7a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8004e7e:	4a09      	ldr	r2, [pc, #36]	; (8004ea4 <vQueueAddToRegistry+0x4c>)
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	00db      	lsls	r3, r3, #3
 8004e84:	4413      	add	r3, r2
 8004e86:	687a      	ldr	r2, [r7, #4]
 8004e88:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8004e8a:	e005      	b.n	8004e98 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	3301      	adds	r3, #1
 8004e90:	60fb      	str	r3, [r7, #12]
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	2b07      	cmp	r3, #7
 8004e96:	d9e7      	bls.n	8004e68 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004e98:	bf00      	nop
 8004e9a:	3714      	adds	r7, #20
 8004e9c:	46bd      	mov	sp, r7
 8004e9e:	bc80      	pop	{r7}
 8004ea0:	4770      	bx	lr
 8004ea2:	bf00      	nop
 8004ea4:	20001648 	.word	0x20001648

08004ea8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004ea8:	b580      	push	{r7, lr}
 8004eaa:	b086      	sub	sp, #24
 8004eac:	af00      	add	r7, sp, #0
 8004eae:	60f8      	str	r0, [r7, #12]
 8004eb0:	60b9      	str	r1, [r7, #8]
 8004eb2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8004eb8:	f001 fcd6 	bl	8006868 <vPortEnterCritical>
 8004ebc:	697b      	ldr	r3, [r7, #20]
 8004ebe:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004ec2:	b25b      	sxtb	r3, r3
 8004ec4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ec8:	d103      	bne.n	8004ed2 <vQueueWaitForMessageRestricted+0x2a>
 8004eca:	697b      	ldr	r3, [r7, #20]
 8004ecc:	2200      	movs	r2, #0
 8004ece:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004ed2:	697b      	ldr	r3, [r7, #20]
 8004ed4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004ed8:	b25b      	sxtb	r3, r3
 8004eda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ede:	d103      	bne.n	8004ee8 <vQueueWaitForMessageRestricted+0x40>
 8004ee0:	697b      	ldr	r3, [r7, #20]
 8004ee2:	2200      	movs	r2, #0
 8004ee4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004ee8:	f001 fcec 	bl	80068c4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004eec:	697b      	ldr	r3, [r7, #20]
 8004eee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d106      	bne.n	8004f02 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004ef4:	697b      	ldr	r3, [r7, #20]
 8004ef6:	3324      	adds	r3, #36	; 0x24
 8004ef8:	687a      	ldr	r2, [r7, #4]
 8004efa:	68b9      	ldr	r1, [r7, #8]
 8004efc:	4618      	mov	r0, r3
 8004efe:	f000 fc27 	bl	8005750 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8004f02:	6978      	ldr	r0, [r7, #20]
 8004f04:	f7ff ff28 	bl	8004d58 <prvUnlockQueue>
	}
 8004f08:	bf00      	nop
 8004f0a:	3718      	adds	r7, #24
 8004f0c:	46bd      	mov	sp, r7
 8004f0e:	bd80      	pop	{r7, pc}

08004f10 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004f10:	b580      	push	{r7, lr}
 8004f12:	b08e      	sub	sp, #56	; 0x38
 8004f14:	af04      	add	r7, sp, #16
 8004f16:	60f8      	str	r0, [r7, #12]
 8004f18:	60b9      	str	r1, [r7, #8]
 8004f1a:	607a      	str	r2, [r7, #4]
 8004f1c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004f1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d109      	bne.n	8004f38 <xTaskCreateStatic+0x28>
	__asm volatile
 8004f24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f28:	f383 8811 	msr	BASEPRI, r3
 8004f2c:	f3bf 8f6f 	isb	sy
 8004f30:	f3bf 8f4f 	dsb	sy
 8004f34:	623b      	str	r3, [r7, #32]
 8004f36:	e7fe      	b.n	8004f36 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8004f38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d109      	bne.n	8004f52 <xTaskCreateStatic+0x42>
 8004f3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f42:	f383 8811 	msr	BASEPRI, r3
 8004f46:	f3bf 8f6f 	isb	sy
 8004f4a:	f3bf 8f4f 	dsb	sy
 8004f4e:	61fb      	str	r3, [r7, #28]
 8004f50:	e7fe      	b.n	8004f50 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004f52:	2354      	movs	r3, #84	; 0x54
 8004f54:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004f56:	693b      	ldr	r3, [r7, #16]
 8004f58:	2b54      	cmp	r3, #84	; 0x54
 8004f5a:	d009      	beq.n	8004f70 <xTaskCreateStatic+0x60>
 8004f5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f60:	f383 8811 	msr	BASEPRI, r3
 8004f64:	f3bf 8f6f 	isb	sy
 8004f68:	f3bf 8f4f 	dsb	sy
 8004f6c:	61bb      	str	r3, [r7, #24]
 8004f6e:	e7fe      	b.n	8004f6e <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004f70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d01e      	beq.n	8004fb4 <xTaskCreateStatic+0xa4>
 8004f76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d01b      	beq.n	8004fb4 <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004f7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f7e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004f80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f82:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004f84:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004f86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f88:	2202      	movs	r2, #2
 8004f8a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004f8e:	2300      	movs	r3, #0
 8004f90:	9303      	str	r3, [sp, #12]
 8004f92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f94:	9302      	str	r3, [sp, #8]
 8004f96:	f107 0314 	add.w	r3, r7, #20
 8004f9a:	9301      	str	r3, [sp, #4]
 8004f9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f9e:	9300      	str	r3, [sp, #0]
 8004fa0:	683b      	ldr	r3, [r7, #0]
 8004fa2:	687a      	ldr	r2, [r7, #4]
 8004fa4:	68b9      	ldr	r1, [r7, #8]
 8004fa6:	68f8      	ldr	r0, [r7, #12]
 8004fa8:	f000 f850 	bl	800504c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004fac:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004fae:	f000 f8cb 	bl	8005148 <prvAddNewTaskToReadyList>
 8004fb2:	e001      	b.n	8004fb8 <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 8004fb4:	2300      	movs	r3, #0
 8004fb6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004fb8:	697b      	ldr	r3, [r7, #20]
	}
 8004fba:	4618      	mov	r0, r3
 8004fbc:	3728      	adds	r7, #40	; 0x28
 8004fbe:	46bd      	mov	sp, r7
 8004fc0:	bd80      	pop	{r7, pc}

08004fc2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004fc2:	b580      	push	{r7, lr}
 8004fc4:	b08c      	sub	sp, #48	; 0x30
 8004fc6:	af04      	add	r7, sp, #16
 8004fc8:	60f8      	str	r0, [r7, #12]
 8004fca:	60b9      	str	r1, [r7, #8]
 8004fcc:	603b      	str	r3, [r7, #0]
 8004fce:	4613      	mov	r3, r2
 8004fd0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004fd2:	88fb      	ldrh	r3, [r7, #6]
 8004fd4:	009b      	lsls	r3, r3, #2
 8004fd6:	4618      	mov	r0, r3
 8004fd8:	f001 fd3c 	bl	8006a54 <pvPortMalloc>
 8004fdc:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004fde:	697b      	ldr	r3, [r7, #20]
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d00e      	beq.n	8005002 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8004fe4:	2054      	movs	r0, #84	; 0x54
 8004fe6:	f001 fd35 	bl	8006a54 <pvPortMalloc>
 8004fea:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004fec:	69fb      	ldr	r3, [r7, #28]
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d003      	beq.n	8004ffa <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004ff2:	69fb      	ldr	r3, [r7, #28]
 8004ff4:	697a      	ldr	r2, [r7, #20]
 8004ff6:	631a      	str	r2, [r3, #48]	; 0x30
 8004ff8:	e005      	b.n	8005006 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004ffa:	6978      	ldr	r0, [r7, #20]
 8004ffc:	f001 fdf0 	bl	8006be0 <vPortFree>
 8005000:	e001      	b.n	8005006 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005002:	2300      	movs	r3, #0
 8005004:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005006:	69fb      	ldr	r3, [r7, #28]
 8005008:	2b00      	cmp	r3, #0
 800500a:	d017      	beq.n	800503c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800500c:	69fb      	ldr	r3, [r7, #28]
 800500e:	2200      	movs	r2, #0
 8005010:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005014:	88fa      	ldrh	r2, [r7, #6]
 8005016:	2300      	movs	r3, #0
 8005018:	9303      	str	r3, [sp, #12]
 800501a:	69fb      	ldr	r3, [r7, #28]
 800501c:	9302      	str	r3, [sp, #8]
 800501e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005020:	9301      	str	r3, [sp, #4]
 8005022:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005024:	9300      	str	r3, [sp, #0]
 8005026:	683b      	ldr	r3, [r7, #0]
 8005028:	68b9      	ldr	r1, [r7, #8]
 800502a:	68f8      	ldr	r0, [r7, #12]
 800502c:	f000 f80e 	bl	800504c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005030:	69f8      	ldr	r0, [r7, #28]
 8005032:	f000 f889 	bl	8005148 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005036:	2301      	movs	r3, #1
 8005038:	61bb      	str	r3, [r7, #24]
 800503a:	e002      	b.n	8005042 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800503c:	f04f 33ff 	mov.w	r3, #4294967295
 8005040:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005042:	69bb      	ldr	r3, [r7, #24]
	}
 8005044:	4618      	mov	r0, r3
 8005046:	3720      	adds	r7, #32
 8005048:	46bd      	mov	sp, r7
 800504a:	bd80      	pop	{r7, pc}

0800504c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800504c:	b580      	push	{r7, lr}
 800504e:	b088      	sub	sp, #32
 8005050:	af00      	add	r7, sp, #0
 8005052:	60f8      	str	r0, [r7, #12]
 8005054:	60b9      	str	r1, [r7, #8]
 8005056:	607a      	str	r2, [r7, #4]
 8005058:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800505a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800505c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005064:	3b01      	subs	r3, #1
 8005066:	009b      	lsls	r3, r3, #2
 8005068:	4413      	add	r3, r2
 800506a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800506c:	69bb      	ldr	r3, [r7, #24]
 800506e:	f023 0307 	bic.w	r3, r3, #7
 8005072:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005074:	69bb      	ldr	r3, [r7, #24]
 8005076:	f003 0307 	and.w	r3, r3, #7
 800507a:	2b00      	cmp	r3, #0
 800507c:	d009      	beq.n	8005092 <prvInitialiseNewTask+0x46>
 800507e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005082:	f383 8811 	msr	BASEPRI, r3
 8005086:	f3bf 8f6f 	isb	sy
 800508a:	f3bf 8f4f 	dsb	sy
 800508e:	617b      	str	r3, [r7, #20]
 8005090:	e7fe      	b.n	8005090 <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005092:	2300      	movs	r3, #0
 8005094:	61fb      	str	r3, [r7, #28]
 8005096:	e012      	b.n	80050be <prvInitialiseNewTask+0x72>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005098:	68ba      	ldr	r2, [r7, #8]
 800509a:	69fb      	ldr	r3, [r7, #28]
 800509c:	4413      	add	r3, r2
 800509e:	7819      	ldrb	r1, [r3, #0]
 80050a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80050a2:	69fb      	ldr	r3, [r7, #28]
 80050a4:	4413      	add	r3, r2
 80050a6:	3334      	adds	r3, #52	; 0x34
 80050a8:	460a      	mov	r2, r1
 80050aa:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 80050ac:	68ba      	ldr	r2, [r7, #8]
 80050ae:	69fb      	ldr	r3, [r7, #28]
 80050b0:	4413      	add	r3, r2
 80050b2:	781b      	ldrb	r3, [r3, #0]
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d006      	beq.n	80050c6 <prvInitialiseNewTask+0x7a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80050b8:	69fb      	ldr	r3, [r7, #28]
 80050ba:	3301      	adds	r3, #1
 80050bc:	61fb      	str	r3, [r7, #28]
 80050be:	69fb      	ldr	r3, [r7, #28]
 80050c0:	2b0f      	cmp	r3, #15
 80050c2:	d9e9      	bls.n	8005098 <prvInitialiseNewTask+0x4c>
 80050c4:	e000      	b.n	80050c8 <prvInitialiseNewTask+0x7c>
		{
			break;
 80050c6:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80050c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050ca:	2200      	movs	r2, #0
 80050cc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80050d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050d2:	2b06      	cmp	r3, #6
 80050d4:	d901      	bls.n	80050da <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80050d6:	2306      	movs	r3, #6
 80050d8:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80050da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050dc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80050de:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80050e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050e2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80050e4:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80050e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050e8:	2200      	movs	r2, #0
 80050ea:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80050ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050ee:	3304      	adds	r3, #4
 80050f0:	4618      	mov	r0, r3
 80050f2:	f7fe ff86 	bl	8004002 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80050f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050f8:	3318      	adds	r3, #24
 80050fa:	4618      	mov	r0, r3
 80050fc:	f7fe ff81 	bl	8004002 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005100:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005102:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005104:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005106:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005108:	f1c3 0207 	rsb	r2, r3, #7
 800510c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800510e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005110:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005112:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005114:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005116:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005118:	2200      	movs	r2, #0
 800511a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800511c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800511e:	2200      	movs	r2, #0
 8005120:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005124:	683a      	ldr	r2, [r7, #0]
 8005126:	68f9      	ldr	r1, [r7, #12]
 8005128:	69b8      	ldr	r0, [r7, #24]
 800512a:	f001 fab3 	bl	8006694 <pxPortInitialiseStack>
 800512e:	4602      	mov	r2, r0
 8005130:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005132:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8005134:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005136:	2b00      	cmp	r3, #0
 8005138:	d002      	beq.n	8005140 <prvInitialiseNewTask+0xf4>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800513a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800513c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800513e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005140:	bf00      	nop
 8005142:	3720      	adds	r7, #32
 8005144:	46bd      	mov	sp, r7
 8005146:	bd80      	pop	{r7, pc}

08005148 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005148:	b580      	push	{r7, lr}
 800514a:	b082      	sub	sp, #8
 800514c:	af00      	add	r7, sp, #0
 800514e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005150:	f001 fb8a 	bl	8006868 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005154:	4b2a      	ldr	r3, [pc, #168]	; (8005200 <prvAddNewTaskToReadyList+0xb8>)
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	3301      	adds	r3, #1
 800515a:	4a29      	ldr	r2, [pc, #164]	; (8005200 <prvAddNewTaskToReadyList+0xb8>)
 800515c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800515e:	4b29      	ldr	r3, [pc, #164]	; (8005204 <prvAddNewTaskToReadyList+0xbc>)
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	2b00      	cmp	r3, #0
 8005164:	d109      	bne.n	800517a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005166:	4a27      	ldr	r2, [pc, #156]	; (8005204 <prvAddNewTaskToReadyList+0xbc>)
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800516c:	4b24      	ldr	r3, [pc, #144]	; (8005200 <prvAddNewTaskToReadyList+0xb8>)
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	2b01      	cmp	r3, #1
 8005172:	d110      	bne.n	8005196 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005174:	f000 fc12 	bl	800599c <prvInitialiseTaskLists>
 8005178:	e00d      	b.n	8005196 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800517a:	4b23      	ldr	r3, [pc, #140]	; (8005208 <prvAddNewTaskToReadyList+0xc0>)
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	2b00      	cmp	r3, #0
 8005180:	d109      	bne.n	8005196 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005182:	4b20      	ldr	r3, [pc, #128]	; (8005204 <prvAddNewTaskToReadyList+0xbc>)
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800518c:	429a      	cmp	r2, r3
 800518e:	d802      	bhi.n	8005196 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005190:	4a1c      	ldr	r2, [pc, #112]	; (8005204 <prvAddNewTaskToReadyList+0xbc>)
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005196:	4b1d      	ldr	r3, [pc, #116]	; (800520c <prvAddNewTaskToReadyList+0xc4>)
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	3301      	adds	r3, #1
 800519c:	4a1b      	ldr	r2, [pc, #108]	; (800520c <prvAddNewTaskToReadyList+0xc4>)
 800519e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051a4:	2201      	movs	r2, #1
 80051a6:	409a      	lsls	r2, r3
 80051a8:	4b19      	ldr	r3, [pc, #100]	; (8005210 <prvAddNewTaskToReadyList+0xc8>)
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	4313      	orrs	r3, r2
 80051ae:	4a18      	ldr	r2, [pc, #96]	; (8005210 <prvAddNewTaskToReadyList+0xc8>)
 80051b0:	6013      	str	r3, [r2, #0]
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80051b6:	4613      	mov	r3, r2
 80051b8:	009b      	lsls	r3, r3, #2
 80051ba:	4413      	add	r3, r2
 80051bc:	009b      	lsls	r3, r3, #2
 80051be:	4a15      	ldr	r2, [pc, #84]	; (8005214 <prvAddNewTaskToReadyList+0xcc>)
 80051c0:	441a      	add	r2, r3
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	3304      	adds	r3, #4
 80051c6:	4619      	mov	r1, r3
 80051c8:	4610      	mov	r0, r2
 80051ca:	f7fe ff26 	bl	800401a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80051ce:	f001 fb79 	bl	80068c4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80051d2:	4b0d      	ldr	r3, [pc, #52]	; (8005208 <prvAddNewTaskToReadyList+0xc0>)
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d00e      	beq.n	80051f8 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80051da:	4b0a      	ldr	r3, [pc, #40]	; (8005204 <prvAddNewTaskToReadyList+0xbc>)
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051e4:	429a      	cmp	r2, r3
 80051e6:	d207      	bcs.n	80051f8 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80051e8:	4b0b      	ldr	r3, [pc, #44]	; (8005218 <prvAddNewTaskToReadyList+0xd0>)
 80051ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80051ee:	601a      	str	r2, [r3, #0]
 80051f0:	f3bf 8f4f 	dsb	sy
 80051f4:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80051f8:	bf00      	nop
 80051fa:	3708      	adds	r7, #8
 80051fc:	46bd      	mov	sp, r7
 80051fe:	bd80      	pop	{r7, pc}
 8005200:	20000648 	.word	0x20000648
 8005204:	20000548 	.word	0x20000548
 8005208:	20000654 	.word	0x20000654
 800520c:	20000664 	.word	0x20000664
 8005210:	20000650 	.word	0x20000650
 8005214:	2000054c 	.word	0x2000054c
 8005218:	e000ed04 	.word	0xe000ed04

0800521c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800521c:	b580      	push	{r7, lr}
 800521e:	b084      	sub	sp, #16
 8005220:	af00      	add	r7, sp, #0
 8005222:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005224:	2300      	movs	r3, #0
 8005226:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	2b00      	cmp	r3, #0
 800522c:	d016      	beq.n	800525c <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800522e:	4b13      	ldr	r3, [pc, #76]	; (800527c <vTaskDelay+0x60>)
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	2b00      	cmp	r3, #0
 8005234:	d009      	beq.n	800524a <vTaskDelay+0x2e>
 8005236:	f04f 0350 	mov.w	r3, #80	; 0x50
 800523a:	f383 8811 	msr	BASEPRI, r3
 800523e:	f3bf 8f6f 	isb	sy
 8005242:	f3bf 8f4f 	dsb	sy
 8005246:	60bb      	str	r3, [r7, #8]
 8005248:	e7fe      	b.n	8005248 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 800524a:	f000 f87f 	bl	800534c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800524e:	2100      	movs	r1, #0
 8005250:	6878      	ldr	r0, [r7, #4]
 8005252:	f000 fe3b 	bl	8005ecc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005256:	f000 f887 	bl	8005368 <xTaskResumeAll>
 800525a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	2b00      	cmp	r3, #0
 8005260:	d107      	bne.n	8005272 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8005262:	4b07      	ldr	r3, [pc, #28]	; (8005280 <vTaskDelay+0x64>)
 8005264:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005268:	601a      	str	r2, [r3, #0]
 800526a:	f3bf 8f4f 	dsb	sy
 800526e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005272:	bf00      	nop
 8005274:	3710      	adds	r7, #16
 8005276:	46bd      	mov	sp, r7
 8005278:	bd80      	pop	{r7, pc}
 800527a:	bf00      	nop
 800527c:	20000670 	.word	0x20000670
 8005280:	e000ed04 	.word	0xe000ed04

08005284 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005284:	b580      	push	{r7, lr}
 8005286:	b08a      	sub	sp, #40	; 0x28
 8005288:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800528a:	2300      	movs	r3, #0
 800528c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800528e:	2300      	movs	r3, #0
 8005290:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005292:	463a      	mov	r2, r7
 8005294:	1d39      	adds	r1, r7, #4
 8005296:	f107 0308 	add.w	r3, r7, #8
 800529a:	4618      	mov	r0, r3
 800529c:	f7fa ff70 	bl	8000180 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80052a0:	6839      	ldr	r1, [r7, #0]
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	68ba      	ldr	r2, [r7, #8]
 80052a6:	9202      	str	r2, [sp, #8]
 80052a8:	9301      	str	r3, [sp, #4]
 80052aa:	2300      	movs	r3, #0
 80052ac:	9300      	str	r3, [sp, #0]
 80052ae:	2300      	movs	r3, #0
 80052b0:	460a      	mov	r2, r1
 80052b2:	4920      	ldr	r1, [pc, #128]	; (8005334 <vTaskStartScheduler+0xb0>)
 80052b4:	4820      	ldr	r0, [pc, #128]	; (8005338 <vTaskStartScheduler+0xb4>)
 80052b6:	f7ff fe2b 	bl	8004f10 <xTaskCreateStatic>
 80052ba:	4602      	mov	r2, r0
 80052bc:	4b1f      	ldr	r3, [pc, #124]	; (800533c <vTaskStartScheduler+0xb8>)
 80052be:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80052c0:	4b1e      	ldr	r3, [pc, #120]	; (800533c <vTaskStartScheduler+0xb8>)
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d002      	beq.n	80052ce <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80052c8:	2301      	movs	r3, #1
 80052ca:	617b      	str	r3, [r7, #20]
 80052cc:	e001      	b.n	80052d2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80052ce:	2300      	movs	r3, #0
 80052d0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80052d2:	697b      	ldr	r3, [r7, #20]
 80052d4:	2b01      	cmp	r3, #1
 80052d6:	d102      	bne.n	80052de <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80052d8:	f000 fe5e 	bl	8005f98 <xTimerCreateTimerTask>
 80052dc:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80052de:	697b      	ldr	r3, [r7, #20]
 80052e0:	2b01      	cmp	r3, #1
 80052e2:	d115      	bne.n	8005310 <vTaskStartScheduler+0x8c>
 80052e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052e8:	f383 8811 	msr	BASEPRI, r3
 80052ec:	f3bf 8f6f 	isb	sy
 80052f0:	f3bf 8f4f 	dsb	sy
 80052f4:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80052f6:	4b12      	ldr	r3, [pc, #72]	; (8005340 <vTaskStartScheduler+0xbc>)
 80052f8:	f04f 32ff 	mov.w	r2, #4294967295
 80052fc:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80052fe:	4b11      	ldr	r3, [pc, #68]	; (8005344 <vTaskStartScheduler+0xc0>)
 8005300:	2201      	movs	r2, #1
 8005302:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8005304:	4b10      	ldr	r3, [pc, #64]	; (8005348 <vTaskStartScheduler+0xc4>)
 8005306:	2200      	movs	r2, #0
 8005308:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800530a:	f001 fa3d 	bl	8006788 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800530e:	e00d      	b.n	800532c <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005310:	697b      	ldr	r3, [r7, #20]
 8005312:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005316:	d109      	bne.n	800532c <vTaskStartScheduler+0xa8>
 8005318:	f04f 0350 	mov.w	r3, #80	; 0x50
 800531c:	f383 8811 	msr	BASEPRI, r3
 8005320:	f3bf 8f6f 	isb	sy
 8005324:	f3bf 8f4f 	dsb	sy
 8005328:	60fb      	str	r3, [r7, #12]
 800532a:	e7fe      	b.n	800532a <vTaskStartScheduler+0xa6>
}
 800532c:	bf00      	nop
 800532e:	3718      	adds	r7, #24
 8005330:	46bd      	mov	sp, r7
 8005332:	bd80      	pop	{r7, pc}
 8005334:	08007884 	.word	0x08007884
 8005338:	0800596d 	.word	0x0800596d
 800533c:	2000066c 	.word	0x2000066c
 8005340:	20000668 	.word	0x20000668
 8005344:	20000654 	.word	0x20000654
 8005348:	2000064c 	.word	0x2000064c

0800534c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800534c:	b480      	push	{r7}
 800534e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8005350:	4b04      	ldr	r3, [pc, #16]	; (8005364 <vTaskSuspendAll+0x18>)
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	3301      	adds	r3, #1
 8005356:	4a03      	ldr	r2, [pc, #12]	; (8005364 <vTaskSuspendAll+0x18>)
 8005358:	6013      	str	r3, [r2, #0]
}
 800535a:	bf00      	nop
 800535c:	46bd      	mov	sp, r7
 800535e:	bc80      	pop	{r7}
 8005360:	4770      	bx	lr
 8005362:	bf00      	nop
 8005364:	20000670 	.word	0x20000670

08005368 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005368:	b580      	push	{r7, lr}
 800536a:	b084      	sub	sp, #16
 800536c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800536e:	2300      	movs	r3, #0
 8005370:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005372:	2300      	movs	r3, #0
 8005374:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005376:	4b41      	ldr	r3, [pc, #260]	; (800547c <xTaskResumeAll+0x114>)
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	2b00      	cmp	r3, #0
 800537c:	d109      	bne.n	8005392 <xTaskResumeAll+0x2a>
 800537e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005382:	f383 8811 	msr	BASEPRI, r3
 8005386:	f3bf 8f6f 	isb	sy
 800538a:	f3bf 8f4f 	dsb	sy
 800538e:	603b      	str	r3, [r7, #0]
 8005390:	e7fe      	b.n	8005390 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005392:	f001 fa69 	bl	8006868 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005396:	4b39      	ldr	r3, [pc, #228]	; (800547c <xTaskResumeAll+0x114>)
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	3b01      	subs	r3, #1
 800539c:	4a37      	ldr	r2, [pc, #220]	; (800547c <xTaskResumeAll+0x114>)
 800539e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80053a0:	4b36      	ldr	r3, [pc, #216]	; (800547c <xTaskResumeAll+0x114>)
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d161      	bne.n	800546c <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80053a8:	4b35      	ldr	r3, [pc, #212]	; (8005480 <xTaskResumeAll+0x118>)
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d05d      	beq.n	800546c <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80053b0:	e02e      	b.n	8005410 <xTaskResumeAll+0xa8>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80053b2:	4b34      	ldr	r3, [pc, #208]	; (8005484 <xTaskResumeAll+0x11c>)
 80053b4:	68db      	ldr	r3, [r3, #12]
 80053b6:	68db      	ldr	r3, [r3, #12]
 80053b8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	3318      	adds	r3, #24
 80053be:	4618      	mov	r0, r3
 80053c0:	f7fe fe86 	bl	80040d0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	3304      	adds	r3, #4
 80053c8:	4618      	mov	r0, r3
 80053ca:	f7fe fe81 	bl	80040d0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053d2:	2201      	movs	r2, #1
 80053d4:	409a      	lsls	r2, r3
 80053d6:	4b2c      	ldr	r3, [pc, #176]	; (8005488 <xTaskResumeAll+0x120>)
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	4313      	orrs	r3, r2
 80053dc:	4a2a      	ldr	r2, [pc, #168]	; (8005488 <xTaskResumeAll+0x120>)
 80053de:	6013      	str	r3, [r2, #0]
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80053e4:	4613      	mov	r3, r2
 80053e6:	009b      	lsls	r3, r3, #2
 80053e8:	4413      	add	r3, r2
 80053ea:	009b      	lsls	r3, r3, #2
 80053ec:	4a27      	ldr	r2, [pc, #156]	; (800548c <xTaskResumeAll+0x124>)
 80053ee:	441a      	add	r2, r3
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	3304      	adds	r3, #4
 80053f4:	4619      	mov	r1, r3
 80053f6:	4610      	mov	r0, r2
 80053f8:	f7fe fe0f 	bl	800401a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005400:	4b23      	ldr	r3, [pc, #140]	; (8005490 <xTaskResumeAll+0x128>)
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005406:	429a      	cmp	r2, r3
 8005408:	d302      	bcc.n	8005410 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 800540a:	4b22      	ldr	r3, [pc, #136]	; (8005494 <xTaskResumeAll+0x12c>)
 800540c:	2201      	movs	r2, #1
 800540e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005410:	4b1c      	ldr	r3, [pc, #112]	; (8005484 <xTaskResumeAll+0x11c>)
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	2b00      	cmp	r3, #0
 8005416:	d1cc      	bne.n	80053b2 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	2b00      	cmp	r3, #0
 800541c:	d001      	beq.n	8005422 <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800541e:	f000 fb57 	bl	8005ad0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8005422:	4b1d      	ldr	r3, [pc, #116]	; (8005498 <xTaskResumeAll+0x130>)
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	2b00      	cmp	r3, #0
 800542c:	d010      	beq.n	8005450 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800542e:	f000 f845 	bl	80054bc <xTaskIncrementTick>
 8005432:	4603      	mov	r3, r0
 8005434:	2b00      	cmp	r3, #0
 8005436:	d002      	beq.n	800543e <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 8005438:	4b16      	ldr	r3, [pc, #88]	; (8005494 <xTaskResumeAll+0x12c>)
 800543a:	2201      	movs	r2, #1
 800543c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	3b01      	subs	r3, #1
 8005442:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	2b00      	cmp	r3, #0
 8005448:	d1f1      	bne.n	800542e <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 800544a:	4b13      	ldr	r3, [pc, #76]	; (8005498 <xTaskResumeAll+0x130>)
 800544c:	2200      	movs	r2, #0
 800544e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005450:	4b10      	ldr	r3, [pc, #64]	; (8005494 <xTaskResumeAll+0x12c>)
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	2b00      	cmp	r3, #0
 8005456:	d009      	beq.n	800546c <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005458:	2301      	movs	r3, #1
 800545a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800545c:	4b0f      	ldr	r3, [pc, #60]	; (800549c <xTaskResumeAll+0x134>)
 800545e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005462:	601a      	str	r2, [r3, #0]
 8005464:	f3bf 8f4f 	dsb	sy
 8005468:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800546c:	f001 fa2a 	bl	80068c4 <vPortExitCritical>

	return xAlreadyYielded;
 8005470:	68bb      	ldr	r3, [r7, #8]
}
 8005472:	4618      	mov	r0, r3
 8005474:	3710      	adds	r7, #16
 8005476:	46bd      	mov	sp, r7
 8005478:	bd80      	pop	{r7, pc}
 800547a:	bf00      	nop
 800547c:	20000670 	.word	0x20000670
 8005480:	20000648 	.word	0x20000648
 8005484:	20000608 	.word	0x20000608
 8005488:	20000650 	.word	0x20000650
 800548c:	2000054c 	.word	0x2000054c
 8005490:	20000548 	.word	0x20000548
 8005494:	2000065c 	.word	0x2000065c
 8005498:	20000658 	.word	0x20000658
 800549c:	e000ed04 	.word	0xe000ed04

080054a0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80054a0:	b480      	push	{r7}
 80054a2:	b083      	sub	sp, #12
 80054a4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80054a6:	4b04      	ldr	r3, [pc, #16]	; (80054b8 <xTaskGetTickCount+0x18>)
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80054ac:	687b      	ldr	r3, [r7, #4]
}
 80054ae:	4618      	mov	r0, r3
 80054b0:	370c      	adds	r7, #12
 80054b2:	46bd      	mov	sp, r7
 80054b4:	bc80      	pop	{r7}
 80054b6:	4770      	bx	lr
 80054b8:	2000064c 	.word	0x2000064c

080054bc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80054bc:	b580      	push	{r7, lr}
 80054be:	b086      	sub	sp, #24
 80054c0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80054c2:	2300      	movs	r3, #0
 80054c4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80054c6:	4b50      	ldr	r3, [pc, #320]	; (8005608 <xTaskIncrementTick+0x14c>)
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	f040 808c 	bne.w	80055e8 <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80054d0:	4b4e      	ldr	r3, [pc, #312]	; (800560c <xTaskIncrementTick+0x150>)
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	3301      	adds	r3, #1
 80054d6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80054d8:	4a4c      	ldr	r2, [pc, #304]	; (800560c <xTaskIncrementTick+0x150>)
 80054da:	693b      	ldr	r3, [r7, #16]
 80054dc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80054de:	693b      	ldr	r3, [r7, #16]
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d11f      	bne.n	8005524 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 80054e4:	4b4a      	ldr	r3, [pc, #296]	; (8005610 <xTaskIncrementTick+0x154>)
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d009      	beq.n	8005502 <xTaskIncrementTick+0x46>
 80054ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054f2:	f383 8811 	msr	BASEPRI, r3
 80054f6:	f3bf 8f6f 	isb	sy
 80054fa:	f3bf 8f4f 	dsb	sy
 80054fe:	603b      	str	r3, [r7, #0]
 8005500:	e7fe      	b.n	8005500 <xTaskIncrementTick+0x44>
 8005502:	4b43      	ldr	r3, [pc, #268]	; (8005610 <xTaskIncrementTick+0x154>)
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	60fb      	str	r3, [r7, #12]
 8005508:	4b42      	ldr	r3, [pc, #264]	; (8005614 <xTaskIncrementTick+0x158>)
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	4a40      	ldr	r2, [pc, #256]	; (8005610 <xTaskIncrementTick+0x154>)
 800550e:	6013      	str	r3, [r2, #0]
 8005510:	4a40      	ldr	r2, [pc, #256]	; (8005614 <xTaskIncrementTick+0x158>)
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	6013      	str	r3, [r2, #0]
 8005516:	4b40      	ldr	r3, [pc, #256]	; (8005618 <xTaskIncrementTick+0x15c>)
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	3301      	adds	r3, #1
 800551c:	4a3e      	ldr	r2, [pc, #248]	; (8005618 <xTaskIncrementTick+0x15c>)
 800551e:	6013      	str	r3, [r2, #0]
 8005520:	f000 fad6 	bl	8005ad0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005524:	4b3d      	ldr	r3, [pc, #244]	; (800561c <xTaskIncrementTick+0x160>)
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	693a      	ldr	r2, [r7, #16]
 800552a:	429a      	cmp	r2, r3
 800552c:	d34d      	bcc.n	80055ca <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800552e:	4b38      	ldr	r3, [pc, #224]	; (8005610 <xTaskIncrementTick+0x154>)
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	2b00      	cmp	r3, #0
 8005536:	d101      	bne.n	800553c <xTaskIncrementTick+0x80>
 8005538:	2301      	movs	r3, #1
 800553a:	e000      	b.n	800553e <xTaskIncrementTick+0x82>
 800553c:	2300      	movs	r3, #0
 800553e:	2b00      	cmp	r3, #0
 8005540:	d004      	beq.n	800554c <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005542:	4b36      	ldr	r3, [pc, #216]	; (800561c <xTaskIncrementTick+0x160>)
 8005544:	f04f 32ff 	mov.w	r2, #4294967295
 8005548:	601a      	str	r2, [r3, #0]
					break;
 800554a:	e03e      	b.n	80055ca <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800554c:	4b30      	ldr	r3, [pc, #192]	; (8005610 <xTaskIncrementTick+0x154>)
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	68db      	ldr	r3, [r3, #12]
 8005552:	68db      	ldr	r3, [r3, #12]
 8005554:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005556:	68bb      	ldr	r3, [r7, #8]
 8005558:	685b      	ldr	r3, [r3, #4]
 800555a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800555c:	693a      	ldr	r2, [r7, #16]
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	429a      	cmp	r2, r3
 8005562:	d203      	bcs.n	800556c <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005564:	4a2d      	ldr	r2, [pc, #180]	; (800561c <xTaskIncrementTick+0x160>)
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	6013      	str	r3, [r2, #0]
						break;
 800556a:	e02e      	b.n	80055ca <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800556c:	68bb      	ldr	r3, [r7, #8]
 800556e:	3304      	adds	r3, #4
 8005570:	4618      	mov	r0, r3
 8005572:	f7fe fdad 	bl	80040d0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005576:	68bb      	ldr	r3, [r7, #8]
 8005578:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800557a:	2b00      	cmp	r3, #0
 800557c:	d004      	beq.n	8005588 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800557e:	68bb      	ldr	r3, [r7, #8]
 8005580:	3318      	adds	r3, #24
 8005582:	4618      	mov	r0, r3
 8005584:	f7fe fda4 	bl	80040d0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005588:	68bb      	ldr	r3, [r7, #8]
 800558a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800558c:	2201      	movs	r2, #1
 800558e:	409a      	lsls	r2, r3
 8005590:	4b23      	ldr	r3, [pc, #140]	; (8005620 <xTaskIncrementTick+0x164>)
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	4313      	orrs	r3, r2
 8005596:	4a22      	ldr	r2, [pc, #136]	; (8005620 <xTaskIncrementTick+0x164>)
 8005598:	6013      	str	r3, [r2, #0]
 800559a:	68bb      	ldr	r3, [r7, #8]
 800559c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800559e:	4613      	mov	r3, r2
 80055a0:	009b      	lsls	r3, r3, #2
 80055a2:	4413      	add	r3, r2
 80055a4:	009b      	lsls	r3, r3, #2
 80055a6:	4a1f      	ldr	r2, [pc, #124]	; (8005624 <xTaskIncrementTick+0x168>)
 80055a8:	441a      	add	r2, r3
 80055aa:	68bb      	ldr	r3, [r7, #8]
 80055ac:	3304      	adds	r3, #4
 80055ae:	4619      	mov	r1, r3
 80055b0:	4610      	mov	r0, r2
 80055b2:	f7fe fd32 	bl	800401a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80055b6:	68bb      	ldr	r3, [r7, #8]
 80055b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80055ba:	4b1b      	ldr	r3, [pc, #108]	; (8005628 <xTaskIncrementTick+0x16c>)
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055c0:	429a      	cmp	r2, r3
 80055c2:	d3b4      	bcc.n	800552e <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 80055c4:	2301      	movs	r3, #1
 80055c6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80055c8:	e7b1      	b.n	800552e <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80055ca:	4b17      	ldr	r3, [pc, #92]	; (8005628 <xTaskIncrementTick+0x16c>)
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80055d0:	4914      	ldr	r1, [pc, #80]	; (8005624 <xTaskIncrementTick+0x168>)
 80055d2:	4613      	mov	r3, r2
 80055d4:	009b      	lsls	r3, r3, #2
 80055d6:	4413      	add	r3, r2
 80055d8:	009b      	lsls	r3, r3, #2
 80055da:	440b      	add	r3, r1
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	2b01      	cmp	r3, #1
 80055e0:	d907      	bls.n	80055f2 <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 80055e2:	2301      	movs	r3, #1
 80055e4:	617b      	str	r3, [r7, #20]
 80055e6:	e004      	b.n	80055f2 <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80055e8:	4b10      	ldr	r3, [pc, #64]	; (800562c <xTaskIncrementTick+0x170>)
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	3301      	adds	r3, #1
 80055ee:	4a0f      	ldr	r2, [pc, #60]	; (800562c <xTaskIncrementTick+0x170>)
 80055f0:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80055f2:	4b0f      	ldr	r3, [pc, #60]	; (8005630 <xTaskIncrementTick+0x174>)
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d001      	beq.n	80055fe <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 80055fa:	2301      	movs	r3, #1
 80055fc:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80055fe:	697b      	ldr	r3, [r7, #20]
}
 8005600:	4618      	mov	r0, r3
 8005602:	3718      	adds	r7, #24
 8005604:	46bd      	mov	sp, r7
 8005606:	bd80      	pop	{r7, pc}
 8005608:	20000670 	.word	0x20000670
 800560c:	2000064c 	.word	0x2000064c
 8005610:	20000600 	.word	0x20000600
 8005614:	20000604 	.word	0x20000604
 8005618:	20000660 	.word	0x20000660
 800561c:	20000668 	.word	0x20000668
 8005620:	20000650 	.word	0x20000650
 8005624:	2000054c 	.word	0x2000054c
 8005628:	20000548 	.word	0x20000548
 800562c:	20000658 	.word	0x20000658
 8005630:	2000065c 	.word	0x2000065c

08005634 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005634:	b580      	push	{r7, lr}
 8005636:	b086      	sub	sp, #24
 8005638:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800563a:	4b2e      	ldr	r3, [pc, #184]	; (80056f4 <vTaskSwitchContext+0xc0>)
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	2b00      	cmp	r3, #0
 8005640:	d003      	beq.n	800564a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005642:	4b2d      	ldr	r3, [pc, #180]	; (80056f8 <vTaskSwitchContext+0xc4>)
 8005644:	2201      	movs	r2, #1
 8005646:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005648:	e04f      	b.n	80056ea <vTaskSwitchContext+0xb6>
		xYieldPending = pdFALSE;
 800564a:	4b2b      	ldr	r3, [pc, #172]	; (80056f8 <vTaskSwitchContext+0xc4>)
 800564c:	2200      	movs	r2, #0
 800564e:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 8005650:	4b2a      	ldr	r3, [pc, #168]	; (80056fc <vTaskSwitchContext+0xc8>)
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	681a      	ldr	r2, [r3, #0]
 8005656:	4b29      	ldr	r3, [pc, #164]	; (80056fc <vTaskSwitchContext+0xc8>)
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800565c:	429a      	cmp	r2, r3
 800565e:	d808      	bhi.n	8005672 <vTaskSwitchContext+0x3e>
 8005660:	4b26      	ldr	r3, [pc, #152]	; (80056fc <vTaskSwitchContext+0xc8>)
 8005662:	681a      	ldr	r2, [r3, #0]
 8005664:	4b25      	ldr	r3, [pc, #148]	; (80056fc <vTaskSwitchContext+0xc8>)
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	3334      	adds	r3, #52	; 0x34
 800566a:	4619      	mov	r1, r3
 800566c:	4610      	mov	r0, r2
 800566e:	f7fa fd77 	bl	8000160 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8005672:	4b23      	ldr	r3, [pc, #140]	; (8005700 <vTaskSwitchContext+0xcc>)
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	fab3 f383 	clz	r3, r3
 800567e:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8005680:	7afb      	ldrb	r3, [r7, #11]
 8005682:	f1c3 031f 	rsb	r3, r3, #31
 8005686:	617b      	str	r3, [r7, #20]
 8005688:	491e      	ldr	r1, [pc, #120]	; (8005704 <vTaskSwitchContext+0xd0>)
 800568a:	697a      	ldr	r2, [r7, #20]
 800568c:	4613      	mov	r3, r2
 800568e:	009b      	lsls	r3, r3, #2
 8005690:	4413      	add	r3, r2
 8005692:	009b      	lsls	r3, r3, #2
 8005694:	440b      	add	r3, r1
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	2b00      	cmp	r3, #0
 800569a:	d109      	bne.n	80056b0 <vTaskSwitchContext+0x7c>
	__asm volatile
 800569c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056a0:	f383 8811 	msr	BASEPRI, r3
 80056a4:	f3bf 8f6f 	isb	sy
 80056a8:	f3bf 8f4f 	dsb	sy
 80056ac:	607b      	str	r3, [r7, #4]
 80056ae:	e7fe      	b.n	80056ae <vTaskSwitchContext+0x7a>
 80056b0:	697a      	ldr	r2, [r7, #20]
 80056b2:	4613      	mov	r3, r2
 80056b4:	009b      	lsls	r3, r3, #2
 80056b6:	4413      	add	r3, r2
 80056b8:	009b      	lsls	r3, r3, #2
 80056ba:	4a12      	ldr	r2, [pc, #72]	; (8005704 <vTaskSwitchContext+0xd0>)
 80056bc:	4413      	add	r3, r2
 80056be:	613b      	str	r3, [r7, #16]
 80056c0:	693b      	ldr	r3, [r7, #16]
 80056c2:	685b      	ldr	r3, [r3, #4]
 80056c4:	685a      	ldr	r2, [r3, #4]
 80056c6:	693b      	ldr	r3, [r7, #16]
 80056c8:	605a      	str	r2, [r3, #4]
 80056ca:	693b      	ldr	r3, [r7, #16]
 80056cc:	685a      	ldr	r2, [r3, #4]
 80056ce:	693b      	ldr	r3, [r7, #16]
 80056d0:	3308      	adds	r3, #8
 80056d2:	429a      	cmp	r2, r3
 80056d4:	d104      	bne.n	80056e0 <vTaskSwitchContext+0xac>
 80056d6:	693b      	ldr	r3, [r7, #16]
 80056d8:	685b      	ldr	r3, [r3, #4]
 80056da:	685a      	ldr	r2, [r3, #4]
 80056dc:	693b      	ldr	r3, [r7, #16]
 80056de:	605a      	str	r2, [r3, #4]
 80056e0:	693b      	ldr	r3, [r7, #16]
 80056e2:	685b      	ldr	r3, [r3, #4]
 80056e4:	68db      	ldr	r3, [r3, #12]
 80056e6:	4a05      	ldr	r2, [pc, #20]	; (80056fc <vTaskSwitchContext+0xc8>)
 80056e8:	6013      	str	r3, [r2, #0]
}
 80056ea:	bf00      	nop
 80056ec:	3718      	adds	r7, #24
 80056ee:	46bd      	mov	sp, r7
 80056f0:	bd80      	pop	{r7, pc}
 80056f2:	bf00      	nop
 80056f4:	20000670 	.word	0x20000670
 80056f8:	2000065c 	.word	0x2000065c
 80056fc:	20000548 	.word	0x20000548
 8005700:	20000650 	.word	0x20000650
 8005704:	2000054c 	.word	0x2000054c

08005708 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005708:	b580      	push	{r7, lr}
 800570a:	b084      	sub	sp, #16
 800570c:	af00      	add	r7, sp, #0
 800570e:	6078      	str	r0, [r7, #4]
 8005710:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	2b00      	cmp	r3, #0
 8005716:	d109      	bne.n	800572c <vTaskPlaceOnEventList+0x24>
 8005718:	f04f 0350 	mov.w	r3, #80	; 0x50
 800571c:	f383 8811 	msr	BASEPRI, r3
 8005720:	f3bf 8f6f 	isb	sy
 8005724:	f3bf 8f4f 	dsb	sy
 8005728:	60fb      	str	r3, [r7, #12]
 800572a:	e7fe      	b.n	800572a <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800572c:	4b07      	ldr	r3, [pc, #28]	; (800574c <vTaskPlaceOnEventList+0x44>)
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	3318      	adds	r3, #24
 8005732:	4619      	mov	r1, r3
 8005734:	6878      	ldr	r0, [r7, #4]
 8005736:	f7fe fc93 	bl	8004060 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800573a:	2101      	movs	r1, #1
 800573c:	6838      	ldr	r0, [r7, #0]
 800573e:	f000 fbc5 	bl	8005ecc <prvAddCurrentTaskToDelayedList>
}
 8005742:	bf00      	nop
 8005744:	3710      	adds	r7, #16
 8005746:	46bd      	mov	sp, r7
 8005748:	bd80      	pop	{r7, pc}
 800574a:	bf00      	nop
 800574c:	20000548 	.word	0x20000548

08005750 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005750:	b580      	push	{r7, lr}
 8005752:	b086      	sub	sp, #24
 8005754:	af00      	add	r7, sp, #0
 8005756:	60f8      	str	r0, [r7, #12]
 8005758:	60b9      	str	r1, [r7, #8]
 800575a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	2b00      	cmp	r3, #0
 8005760:	d109      	bne.n	8005776 <vTaskPlaceOnEventListRestricted+0x26>
 8005762:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005766:	f383 8811 	msr	BASEPRI, r3
 800576a:	f3bf 8f6f 	isb	sy
 800576e:	f3bf 8f4f 	dsb	sy
 8005772:	617b      	str	r3, [r7, #20]
 8005774:	e7fe      	b.n	8005774 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005776:	4b0a      	ldr	r3, [pc, #40]	; (80057a0 <vTaskPlaceOnEventListRestricted+0x50>)
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	3318      	adds	r3, #24
 800577c:	4619      	mov	r1, r3
 800577e:	68f8      	ldr	r0, [r7, #12]
 8005780:	f7fe fc4b 	bl	800401a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	2b00      	cmp	r3, #0
 8005788:	d002      	beq.n	8005790 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 800578a:	f04f 33ff 	mov.w	r3, #4294967295
 800578e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005790:	6879      	ldr	r1, [r7, #4]
 8005792:	68b8      	ldr	r0, [r7, #8]
 8005794:	f000 fb9a 	bl	8005ecc <prvAddCurrentTaskToDelayedList>
	}
 8005798:	bf00      	nop
 800579a:	3718      	adds	r7, #24
 800579c:	46bd      	mov	sp, r7
 800579e:	bd80      	pop	{r7, pc}
 80057a0:	20000548 	.word	0x20000548

080057a4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80057a4:	b580      	push	{r7, lr}
 80057a6:	b086      	sub	sp, #24
 80057a8:	af00      	add	r7, sp, #0
 80057aa:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	68db      	ldr	r3, [r3, #12]
 80057b0:	68db      	ldr	r3, [r3, #12]
 80057b2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80057b4:	693b      	ldr	r3, [r7, #16]
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d109      	bne.n	80057ce <xTaskRemoveFromEventList+0x2a>
 80057ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057be:	f383 8811 	msr	BASEPRI, r3
 80057c2:	f3bf 8f6f 	isb	sy
 80057c6:	f3bf 8f4f 	dsb	sy
 80057ca:	60fb      	str	r3, [r7, #12]
 80057cc:	e7fe      	b.n	80057cc <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80057ce:	693b      	ldr	r3, [r7, #16]
 80057d0:	3318      	adds	r3, #24
 80057d2:	4618      	mov	r0, r3
 80057d4:	f7fe fc7c 	bl	80040d0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80057d8:	4b1d      	ldr	r3, [pc, #116]	; (8005850 <xTaskRemoveFromEventList+0xac>)
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d11c      	bne.n	800581a <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80057e0:	693b      	ldr	r3, [r7, #16]
 80057e2:	3304      	adds	r3, #4
 80057e4:	4618      	mov	r0, r3
 80057e6:	f7fe fc73 	bl	80040d0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80057ea:	693b      	ldr	r3, [r7, #16]
 80057ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057ee:	2201      	movs	r2, #1
 80057f0:	409a      	lsls	r2, r3
 80057f2:	4b18      	ldr	r3, [pc, #96]	; (8005854 <xTaskRemoveFromEventList+0xb0>)
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	4313      	orrs	r3, r2
 80057f8:	4a16      	ldr	r2, [pc, #88]	; (8005854 <xTaskRemoveFromEventList+0xb0>)
 80057fa:	6013      	str	r3, [r2, #0]
 80057fc:	693b      	ldr	r3, [r7, #16]
 80057fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005800:	4613      	mov	r3, r2
 8005802:	009b      	lsls	r3, r3, #2
 8005804:	4413      	add	r3, r2
 8005806:	009b      	lsls	r3, r3, #2
 8005808:	4a13      	ldr	r2, [pc, #76]	; (8005858 <xTaskRemoveFromEventList+0xb4>)
 800580a:	441a      	add	r2, r3
 800580c:	693b      	ldr	r3, [r7, #16]
 800580e:	3304      	adds	r3, #4
 8005810:	4619      	mov	r1, r3
 8005812:	4610      	mov	r0, r2
 8005814:	f7fe fc01 	bl	800401a <vListInsertEnd>
 8005818:	e005      	b.n	8005826 <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800581a:	693b      	ldr	r3, [r7, #16]
 800581c:	3318      	adds	r3, #24
 800581e:	4619      	mov	r1, r3
 8005820:	480e      	ldr	r0, [pc, #56]	; (800585c <xTaskRemoveFromEventList+0xb8>)
 8005822:	f7fe fbfa 	bl	800401a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005826:	693b      	ldr	r3, [r7, #16]
 8005828:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800582a:	4b0d      	ldr	r3, [pc, #52]	; (8005860 <xTaskRemoveFromEventList+0xbc>)
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005830:	429a      	cmp	r2, r3
 8005832:	d905      	bls.n	8005840 <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005834:	2301      	movs	r3, #1
 8005836:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005838:	4b0a      	ldr	r3, [pc, #40]	; (8005864 <xTaskRemoveFromEventList+0xc0>)
 800583a:	2201      	movs	r2, #1
 800583c:	601a      	str	r2, [r3, #0]
 800583e:	e001      	b.n	8005844 <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 8005840:	2300      	movs	r3, #0
 8005842:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8005844:	697b      	ldr	r3, [r7, #20]
}
 8005846:	4618      	mov	r0, r3
 8005848:	3718      	adds	r7, #24
 800584a:	46bd      	mov	sp, r7
 800584c:	bd80      	pop	{r7, pc}
 800584e:	bf00      	nop
 8005850:	20000670 	.word	0x20000670
 8005854:	20000650 	.word	0x20000650
 8005858:	2000054c 	.word	0x2000054c
 800585c:	20000608 	.word	0x20000608
 8005860:	20000548 	.word	0x20000548
 8005864:	2000065c 	.word	0x2000065c

08005868 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005868:	b480      	push	{r7}
 800586a:	b083      	sub	sp, #12
 800586c:	af00      	add	r7, sp, #0
 800586e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005870:	4b06      	ldr	r3, [pc, #24]	; (800588c <vTaskInternalSetTimeOutState+0x24>)
 8005872:	681a      	ldr	r2, [r3, #0]
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005878:	4b05      	ldr	r3, [pc, #20]	; (8005890 <vTaskInternalSetTimeOutState+0x28>)
 800587a:	681a      	ldr	r2, [r3, #0]
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	605a      	str	r2, [r3, #4]
}
 8005880:	bf00      	nop
 8005882:	370c      	adds	r7, #12
 8005884:	46bd      	mov	sp, r7
 8005886:	bc80      	pop	{r7}
 8005888:	4770      	bx	lr
 800588a:	bf00      	nop
 800588c:	20000660 	.word	0x20000660
 8005890:	2000064c 	.word	0x2000064c

08005894 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005894:	b580      	push	{r7, lr}
 8005896:	b088      	sub	sp, #32
 8005898:	af00      	add	r7, sp, #0
 800589a:	6078      	str	r0, [r7, #4]
 800589c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d109      	bne.n	80058b8 <xTaskCheckForTimeOut+0x24>
 80058a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058a8:	f383 8811 	msr	BASEPRI, r3
 80058ac:	f3bf 8f6f 	isb	sy
 80058b0:	f3bf 8f4f 	dsb	sy
 80058b4:	613b      	str	r3, [r7, #16]
 80058b6:	e7fe      	b.n	80058b6 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 80058b8:	683b      	ldr	r3, [r7, #0]
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d109      	bne.n	80058d2 <xTaskCheckForTimeOut+0x3e>
 80058be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058c2:	f383 8811 	msr	BASEPRI, r3
 80058c6:	f3bf 8f6f 	isb	sy
 80058ca:	f3bf 8f4f 	dsb	sy
 80058ce:	60fb      	str	r3, [r7, #12]
 80058d0:	e7fe      	b.n	80058d0 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 80058d2:	f000 ffc9 	bl	8006868 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80058d6:	4b1d      	ldr	r3, [pc, #116]	; (800594c <xTaskCheckForTimeOut+0xb8>)
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	685b      	ldr	r3, [r3, #4]
 80058e0:	69ba      	ldr	r2, [r7, #24]
 80058e2:	1ad3      	subs	r3, r2, r3
 80058e4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80058e6:	683b      	ldr	r3, [r7, #0]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058ee:	d102      	bne.n	80058f6 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80058f0:	2300      	movs	r3, #0
 80058f2:	61fb      	str	r3, [r7, #28]
 80058f4:	e023      	b.n	800593e <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681a      	ldr	r2, [r3, #0]
 80058fa:	4b15      	ldr	r3, [pc, #84]	; (8005950 <xTaskCheckForTimeOut+0xbc>)
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	429a      	cmp	r2, r3
 8005900:	d007      	beq.n	8005912 <xTaskCheckForTimeOut+0x7e>
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	685b      	ldr	r3, [r3, #4]
 8005906:	69ba      	ldr	r2, [r7, #24]
 8005908:	429a      	cmp	r2, r3
 800590a:	d302      	bcc.n	8005912 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800590c:	2301      	movs	r3, #1
 800590e:	61fb      	str	r3, [r7, #28]
 8005910:	e015      	b.n	800593e <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005912:	683b      	ldr	r3, [r7, #0]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	697a      	ldr	r2, [r7, #20]
 8005918:	429a      	cmp	r2, r3
 800591a:	d20b      	bcs.n	8005934 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800591c:	683b      	ldr	r3, [r7, #0]
 800591e:	681a      	ldr	r2, [r3, #0]
 8005920:	697b      	ldr	r3, [r7, #20]
 8005922:	1ad2      	subs	r2, r2, r3
 8005924:	683b      	ldr	r3, [r7, #0]
 8005926:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005928:	6878      	ldr	r0, [r7, #4]
 800592a:	f7ff ff9d 	bl	8005868 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800592e:	2300      	movs	r3, #0
 8005930:	61fb      	str	r3, [r7, #28]
 8005932:	e004      	b.n	800593e <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8005934:	683b      	ldr	r3, [r7, #0]
 8005936:	2200      	movs	r2, #0
 8005938:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800593a:	2301      	movs	r3, #1
 800593c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800593e:	f000 ffc1 	bl	80068c4 <vPortExitCritical>

	return xReturn;
 8005942:	69fb      	ldr	r3, [r7, #28]
}
 8005944:	4618      	mov	r0, r3
 8005946:	3720      	adds	r7, #32
 8005948:	46bd      	mov	sp, r7
 800594a:	bd80      	pop	{r7, pc}
 800594c:	2000064c 	.word	0x2000064c
 8005950:	20000660 	.word	0x20000660

08005954 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005954:	b480      	push	{r7}
 8005956:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005958:	4b03      	ldr	r3, [pc, #12]	; (8005968 <vTaskMissedYield+0x14>)
 800595a:	2201      	movs	r2, #1
 800595c:	601a      	str	r2, [r3, #0]
}
 800595e:	bf00      	nop
 8005960:	46bd      	mov	sp, r7
 8005962:	bc80      	pop	{r7}
 8005964:	4770      	bx	lr
 8005966:	bf00      	nop
 8005968:	2000065c 	.word	0x2000065c

0800596c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800596c:	b580      	push	{r7, lr}
 800596e:	b082      	sub	sp, #8
 8005970:	af00      	add	r7, sp, #0
 8005972:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005974:	f000 f852 	bl	8005a1c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005978:	4b06      	ldr	r3, [pc, #24]	; (8005994 <prvIdleTask+0x28>)
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	2b01      	cmp	r3, #1
 800597e:	d9f9      	bls.n	8005974 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005980:	4b05      	ldr	r3, [pc, #20]	; (8005998 <prvIdleTask+0x2c>)
 8005982:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005986:	601a      	str	r2, [r3, #0]
 8005988:	f3bf 8f4f 	dsb	sy
 800598c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005990:	e7f0      	b.n	8005974 <prvIdleTask+0x8>
 8005992:	bf00      	nop
 8005994:	2000054c 	.word	0x2000054c
 8005998:	e000ed04 	.word	0xe000ed04

0800599c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800599c:	b580      	push	{r7, lr}
 800599e:	b082      	sub	sp, #8
 80059a0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80059a2:	2300      	movs	r3, #0
 80059a4:	607b      	str	r3, [r7, #4]
 80059a6:	e00c      	b.n	80059c2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80059a8:	687a      	ldr	r2, [r7, #4]
 80059aa:	4613      	mov	r3, r2
 80059ac:	009b      	lsls	r3, r3, #2
 80059ae:	4413      	add	r3, r2
 80059b0:	009b      	lsls	r3, r3, #2
 80059b2:	4a12      	ldr	r2, [pc, #72]	; (80059fc <prvInitialiseTaskLists+0x60>)
 80059b4:	4413      	add	r3, r2
 80059b6:	4618      	mov	r0, r3
 80059b8:	f7fe fb04 	bl	8003fc4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	3301      	adds	r3, #1
 80059c0:	607b      	str	r3, [r7, #4]
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	2b06      	cmp	r3, #6
 80059c6:	d9ef      	bls.n	80059a8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80059c8:	480d      	ldr	r0, [pc, #52]	; (8005a00 <prvInitialiseTaskLists+0x64>)
 80059ca:	f7fe fafb 	bl	8003fc4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80059ce:	480d      	ldr	r0, [pc, #52]	; (8005a04 <prvInitialiseTaskLists+0x68>)
 80059d0:	f7fe faf8 	bl	8003fc4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80059d4:	480c      	ldr	r0, [pc, #48]	; (8005a08 <prvInitialiseTaskLists+0x6c>)
 80059d6:	f7fe faf5 	bl	8003fc4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80059da:	480c      	ldr	r0, [pc, #48]	; (8005a0c <prvInitialiseTaskLists+0x70>)
 80059dc:	f7fe faf2 	bl	8003fc4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80059e0:	480b      	ldr	r0, [pc, #44]	; (8005a10 <prvInitialiseTaskLists+0x74>)
 80059e2:	f7fe faef 	bl	8003fc4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80059e6:	4b0b      	ldr	r3, [pc, #44]	; (8005a14 <prvInitialiseTaskLists+0x78>)
 80059e8:	4a05      	ldr	r2, [pc, #20]	; (8005a00 <prvInitialiseTaskLists+0x64>)
 80059ea:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80059ec:	4b0a      	ldr	r3, [pc, #40]	; (8005a18 <prvInitialiseTaskLists+0x7c>)
 80059ee:	4a05      	ldr	r2, [pc, #20]	; (8005a04 <prvInitialiseTaskLists+0x68>)
 80059f0:	601a      	str	r2, [r3, #0]
}
 80059f2:	bf00      	nop
 80059f4:	3708      	adds	r7, #8
 80059f6:	46bd      	mov	sp, r7
 80059f8:	bd80      	pop	{r7, pc}
 80059fa:	bf00      	nop
 80059fc:	2000054c 	.word	0x2000054c
 8005a00:	200005d8 	.word	0x200005d8
 8005a04:	200005ec 	.word	0x200005ec
 8005a08:	20000608 	.word	0x20000608
 8005a0c:	2000061c 	.word	0x2000061c
 8005a10:	20000634 	.word	0x20000634
 8005a14:	20000600 	.word	0x20000600
 8005a18:	20000604 	.word	0x20000604

08005a1c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005a1c:	b580      	push	{r7, lr}
 8005a1e:	b082      	sub	sp, #8
 8005a20:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005a22:	e019      	b.n	8005a58 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005a24:	f000 ff20 	bl	8006868 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8005a28:	4b0f      	ldr	r3, [pc, #60]	; (8005a68 <prvCheckTasksWaitingTermination+0x4c>)
 8005a2a:	68db      	ldr	r3, [r3, #12]
 8005a2c:	68db      	ldr	r3, [r3, #12]
 8005a2e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	3304      	adds	r3, #4
 8005a34:	4618      	mov	r0, r3
 8005a36:	f7fe fb4b 	bl	80040d0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005a3a:	4b0c      	ldr	r3, [pc, #48]	; (8005a6c <prvCheckTasksWaitingTermination+0x50>)
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	3b01      	subs	r3, #1
 8005a40:	4a0a      	ldr	r2, [pc, #40]	; (8005a6c <prvCheckTasksWaitingTermination+0x50>)
 8005a42:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005a44:	4b0a      	ldr	r3, [pc, #40]	; (8005a70 <prvCheckTasksWaitingTermination+0x54>)
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	3b01      	subs	r3, #1
 8005a4a:	4a09      	ldr	r2, [pc, #36]	; (8005a70 <prvCheckTasksWaitingTermination+0x54>)
 8005a4c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005a4e:	f000 ff39 	bl	80068c4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005a52:	6878      	ldr	r0, [r7, #4]
 8005a54:	f000 f80e 	bl	8005a74 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005a58:	4b05      	ldr	r3, [pc, #20]	; (8005a70 <prvCheckTasksWaitingTermination+0x54>)
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d1e1      	bne.n	8005a24 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005a60:	bf00      	nop
 8005a62:	3708      	adds	r7, #8
 8005a64:	46bd      	mov	sp, r7
 8005a66:	bd80      	pop	{r7, pc}
 8005a68:	2000061c 	.word	0x2000061c
 8005a6c:	20000648 	.word	0x20000648
 8005a70:	20000630 	.word	0x20000630

08005a74 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005a74:	b580      	push	{r7, lr}
 8005a76:	b084      	sub	sp, #16
 8005a78:	af00      	add	r7, sp, #0
 8005a7a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d108      	bne.n	8005a98 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a8a:	4618      	mov	r0, r3
 8005a8c:	f001 f8a8 	bl	8006be0 <vPortFree>
				vPortFree( pxTCB );
 8005a90:	6878      	ldr	r0, [r7, #4]
 8005a92:	f001 f8a5 	bl	8006be0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005a96:	e017      	b.n	8005ac8 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005a9e:	2b01      	cmp	r3, #1
 8005aa0:	d103      	bne.n	8005aaa <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8005aa2:	6878      	ldr	r0, [r7, #4]
 8005aa4:	f001 f89c 	bl	8006be0 <vPortFree>
	}
 8005aa8:	e00e      	b.n	8005ac8 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005ab0:	2b02      	cmp	r3, #2
 8005ab2:	d009      	beq.n	8005ac8 <prvDeleteTCB+0x54>
 8005ab4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ab8:	f383 8811 	msr	BASEPRI, r3
 8005abc:	f3bf 8f6f 	isb	sy
 8005ac0:	f3bf 8f4f 	dsb	sy
 8005ac4:	60fb      	str	r3, [r7, #12]
 8005ac6:	e7fe      	b.n	8005ac6 <prvDeleteTCB+0x52>
	}
 8005ac8:	bf00      	nop
 8005aca:	3710      	adds	r7, #16
 8005acc:	46bd      	mov	sp, r7
 8005ace:	bd80      	pop	{r7, pc}

08005ad0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005ad0:	b480      	push	{r7}
 8005ad2:	b083      	sub	sp, #12
 8005ad4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005ad6:	4b0e      	ldr	r3, [pc, #56]	; (8005b10 <prvResetNextTaskUnblockTime+0x40>)
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d101      	bne.n	8005ae4 <prvResetNextTaskUnblockTime+0x14>
 8005ae0:	2301      	movs	r3, #1
 8005ae2:	e000      	b.n	8005ae6 <prvResetNextTaskUnblockTime+0x16>
 8005ae4:	2300      	movs	r3, #0
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d004      	beq.n	8005af4 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005aea:	4b0a      	ldr	r3, [pc, #40]	; (8005b14 <prvResetNextTaskUnblockTime+0x44>)
 8005aec:	f04f 32ff 	mov.w	r2, #4294967295
 8005af0:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005af2:	e008      	b.n	8005b06 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8005af4:	4b06      	ldr	r3, [pc, #24]	; (8005b10 <prvResetNextTaskUnblockTime+0x40>)
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	68db      	ldr	r3, [r3, #12]
 8005afa:	68db      	ldr	r3, [r3, #12]
 8005afc:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	685b      	ldr	r3, [r3, #4]
 8005b02:	4a04      	ldr	r2, [pc, #16]	; (8005b14 <prvResetNextTaskUnblockTime+0x44>)
 8005b04:	6013      	str	r3, [r2, #0]
}
 8005b06:	bf00      	nop
 8005b08:	370c      	adds	r7, #12
 8005b0a:	46bd      	mov	sp, r7
 8005b0c:	bc80      	pop	{r7}
 8005b0e:	4770      	bx	lr
 8005b10:	20000600 	.word	0x20000600
 8005b14:	20000668 	.word	0x20000668

08005b18 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005b18:	b480      	push	{r7}
 8005b1a:	b083      	sub	sp, #12
 8005b1c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005b1e:	4b0b      	ldr	r3, [pc, #44]	; (8005b4c <xTaskGetSchedulerState+0x34>)
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d102      	bne.n	8005b2c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005b26:	2301      	movs	r3, #1
 8005b28:	607b      	str	r3, [r7, #4]
 8005b2a:	e008      	b.n	8005b3e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005b2c:	4b08      	ldr	r3, [pc, #32]	; (8005b50 <xTaskGetSchedulerState+0x38>)
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d102      	bne.n	8005b3a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005b34:	2302      	movs	r3, #2
 8005b36:	607b      	str	r3, [r7, #4]
 8005b38:	e001      	b.n	8005b3e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005b3a:	2300      	movs	r3, #0
 8005b3c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005b3e:	687b      	ldr	r3, [r7, #4]
	}
 8005b40:	4618      	mov	r0, r3
 8005b42:	370c      	adds	r7, #12
 8005b44:	46bd      	mov	sp, r7
 8005b46:	bc80      	pop	{r7}
 8005b48:	4770      	bx	lr
 8005b4a:	bf00      	nop
 8005b4c:	20000654 	.word	0x20000654
 8005b50:	20000670 	.word	0x20000670

08005b54 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8005b54:	b580      	push	{r7, lr}
 8005b56:	b084      	sub	sp, #16
 8005b58:	af00      	add	r7, sp, #0
 8005b5a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8005b60:	2300      	movs	r3, #0
 8005b62:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d06e      	beq.n	8005c48 <xTaskPriorityInherit+0xf4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8005b6a:	68bb      	ldr	r3, [r7, #8]
 8005b6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b6e:	4b39      	ldr	r3, [pc, #228]	; (8005c54 <xTaskPriorityInherit+0x100>)
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b74:	429a      	cmp	r2, r3
 8005b76:	d25e      	bcs.n	8005c36 <xTaskPriorityInherit+0xe2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005b78:	68bb      	ldr	r3, [r7, #8]
 8005b7a:	699b      	ldr	r3, [r3, #24]
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	db06      	blt.n	8005b8e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005b80:	4b34      	ldr	r3, [pc, #208]	; (8005c54 <xTaskPriorityInherit+0x100>)
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b86:	f1c3 0207 	rsb	r2, r3, #7
 8005b8a:	68bb      	ldr	r3, [r7, #8]
 8005b8c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8005b8e:	68bb      	ldr	r3, [r7, #8]
 8005b90:	6959      	ldr	r1, [r3, #20]
 8005b92:	68bb      	ldr	r3, [r7, #8]
 8005b94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b96:	4613      	mov	r3, r2
 8005b98:	009b      	lsls	r3, r3, #2
 8005b9a:	4413      	add	r3, r2
 8005b9c:	009b      	lsls	r3, r3, #2
 8005b9e:	4a2e      	ldr	r2, [pc, #184]	; (8005c58 <xTaskPriorityInherit+0x104>)
 8005ba0:	4413      	add	r3, r2
 8005ba2:	4299      	cmp	r1, r3
 8005ba4:	d101      	bne.n	8005baa <xTaskPriorityInherit+0x56>
 8005ba6:	2301      	movs	r3, #1
 8005ba8:	e000      	b.n	8005bac <xTaskPriorityInherit+0x58>
 8005baa:	2300      	movs	r3, #0
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d03a      	beq.n	8005c26 <xTaskPriorityInherit+0xd2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005bb0:	68bb      	ldr	r3, [r7, #8]
 8005bb2:	3304      	adds	r3, #4
 8005bb4:	4618      	mov	r0, r3
 8005bb6:	f7fe fa8b 	bl	80040d0 <uxListRemove>
 8005bba:	4603      	mov	r3, r0
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d115      	bne.n	8005bec <xTaskPriorityInherit+0x98>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 8005bc0:	68bb      	ldr	r3, [r7, #8]
 8005bc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005bc4:	4924      	ldr	r1, [pc, #144]	; (8005c58 <xTaskPriorityInherit+0x104>)
 8005bc6:	4613      	mov	r3, r2
 8005bc8:	009b      	lsls	r3, r3, #2
 8005bca:	4413      	add	r3, r2
 8005bcc:	009b      	lsls	r3, r3, #2
 8005bce:	440b      	add	r3, r1
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d10a      	bne.n	8005bec <xTaskPriorityInherit+0x98>
 8005bd6:	68bb      	ldr	r3, [r7, #8]
 8005bd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bda:	2201      	movs	r2, #1
 8005bdc:	fa02 f303 	lsl.w	r3, r2, r3
 8005be0:	43da      	mvns	r2, r3
 8005be2:	4b1e      	ldr	r3, [pc, #120]	; (8005c5c <xTaskPriorityInherit+0x108>)
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	4013      	ands	r3, r2
 8005be8:	4a1c      	ldr	r2, [pc, #112]	; (8005c5c <xTaskPriorityInherit+0x108>)
 8005bea:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005bec:	4b19      	ldr	r3, [pc, #100]	; (8005c54 <xTaskPriorityInherit+0x100>)
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005bf2:	68bb      	ldr	r3, [r7, #8]
 8005bf4:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8005bf6:	68bb      	ldr	r3, [r7, #8]
 8005bf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bfa:	2201      	movs	r2, #1
 8005bfc:	409a      	lsls	r2, r3
 8005bfe:	4b17      	ldr	r3, [pc, #92]	; (8005c5c <xTaskPriorityInherit+0x108>)
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	4313      	orrs	r3, r2
 8005c04:	4a15      	ldr	r2, [pc, #84]	; (8005c5c <xTaskPriorityInherit+0x108>)
 8005c06:	6013      	str	r3, [r2, #0]
 8005c08:	68bb      	ldr	r3, [r7, #8]
 8005c0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c0c:	4613      	mov	r3, r2
 8005c0e:	009b      	lsls	r3, r3, #2
 8005c10:	4413      	add	r3, r2
 8005c12:	009b      	lsls	r3, r3, #2
 8005c14:	4a10      	ldr	r2, [pc, #64]	; (8005c58 <xTaskPriorityInherit+0x104>)
 8005c16:	441a      	add	r2, r3
 8005c18:	68bb      	ldr	r3, [r7, #8]
 8005c1a:	3304      	adds	r3, #4
 8005c1c:	4619      	mov	r1, r3
 8005c1e:	4610      	mov	r0, r2
 8005c20:	f7fe f9fb 	bl	800401a <vListInsertEnd>
 8005c24:	e004      	b.n	8005c30 <xTaskPriorityInherit+0xdc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005c26:	4b0b      	ldr	r3, [pc, #44]	; (8005c54 <xTaskPriorityInherit+0x100>)
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c2c:	68bb      	ldr	r3, [r7, #8]
 8005c2e:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8005c30:	2301      	movs	r3, #1
 8005c32:	60fb      	str	r3, [r7, #12]
 8005c34:	e008      	b.n	8005c48 <xTaskPriorityInherit+0xf4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8005c36:	68bb      	ldr	r3, [r7, #8]
 8005c38:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005c3a:	4b06      	ldr	r3, [pc, #24]	; (8005c54 <xTaskPriorityInherit+0x100>)
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c40:	429a      	cmp	r2, r3
 8005c42:	d201      	bcs.n	8005c48 <xTaskPriorityInherit+0xf4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8005c44:	2301      	movs	r3, #1
 8005c46:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005c48:	68fb      	ldr	r3, [r7, #12]
	}
 8005c4a:	4618      	mov	r0, r3
 8005c4c:	3710      	adds	r7, #16
 8005c4e:	46bd      	mov	sp, r7
 8005c50:	bd80      	pop	{r7, pc}
 8005c52:	bf00      	nop
 8005c54:	20000548 	.word	0x20000548
 8005c58:	2000054c 	.word	0x2000054c
 8005c5c:	20000650 	.word	0x20000650

08005c60 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005c60:	b580      	push	{r7, lr}
 8005c62:	b086      	sub	sp, #24
 8005c64:	af00      	add	r7, sp, #0
 8005c66:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005c6c:	2300      	movs	r3, #0
 8005c6e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d06c      	beq.n	8005d50 <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005c76:	4b39      	ldr	r3, [pc, #228]	; (8005d5c <xTaskPriorityDisinherit+0xfc>)
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	693a      	ldr	r2, [r7, #16]
 8005c7c:	429a      	cmp	r2, r3
 8005c7e:	d009      	beq.n	8005c94 <xTaskPriorityDisinherit+0x34>
 8005c80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c84:	f383 8811 	msr	BASEPRI, r3
 8005c88:	f3bf 8f6f 	isb	sy
 8005c8c:	f3bf 8f4f 	dsb	sy
 8005c90:	60fb      	str	r3, [r7, #12]
 8005c92:	e7fe      	b.n	8005c92 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8005c94:	693b      	ldr	r3, [r7, #16]
 8005c96:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d109      	bne.n	8005cb0 <xTaskPriorityDisinherit+0x50>
 8005c9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ca0:	f383 8811 	msr	BASEPRI, r3
 8005ca4:	f3bf 8f6f 	isb	sy
 8005ca8:	f3bf 8f4f 	dsb	sy
 8005cac:	60bb      	str	r3, [r7, #8]
 8005cae:	e7fe      	b.n	8005cae <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8005cb0:	693b      	ldr	r3, [r7, #16]
 8005cb2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005cb4:	1e5a      	subs	r2, r3, #1
 8005cb6:	693b      	ldr	r3, [r7, #16]
 8005cb8:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005cba:	693b      	ldr	r3, [r7, #16]
 8005cbc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005cbe:	693b      	ldr	r3, [r7, #16]
 8005cc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005cc2:	429a      	cmp	r2, r3
 8005cc4:	d044      	beq.n	8005d50 <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005cc6:	693b      	ldr	r3, [r7, #16]
 8005cc8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d140      	bne.n	8005d50 <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005cce:	693b      	ldr	r3, [r7, #16]
 8005cd0:	3304      	adds	r3, #4
 8005cd2:	4618      	mov	r0, r3
 8005cd4:	f7fe f9fc 	bl	80040d0 <uxListRemove>
 8005cd8:	4603      	mov	r3, r0
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d115      	bne.n	8005d0a <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8005cde:	693b      	ldr	r3, [r7, #16]
 8005ce0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ce2:	491f      	ldr	r1, [pc, #124]	; (8005d60 <xTaskPriorityDisinherit+0x100>)
 8005ce4:	4613      	mov	r3, r2
 8005ce6:	009b      	lsls	r3, r3, #2
 8005ce8:	4413      	add	r3, r2
 8005cea:	009b      	lsls	r3, r3, #2
 8005cec:	440b      	add	r3, r1
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d10a      	bne.n	8005d0a <xTaskPriorityDisinherit+0xaa>
 8005cf4:	693b      	ldr	r3, [r7, #16]
 8005cf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cf8:	2201      	movs	r2, #1
 8005cfa:	fa02 f303 	lsl.w	r3, r2, r3
 8005cfe:	43da      	mvns	r2, r3
 8005d00:	4b18      	ldr	r3, [pc, #96]	; (8005d64 <xTaskPriorityDisinherit+0x104>)
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	4013      	ands	r3, r2
 8005d06:	4a17      	ldr	r2, [pc, #92]	; (8005d64 <xTaskPriorityDisinherit+0x104>)
 8005d08:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005d0a:	693b      	ldr	r3, [r7, #16]
 8005d0c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005d0e:	693b      	ldr	r3, [r7, #16]
 8005d10:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005d12:	693b      	ldr	r3, [r7, #16]
 8005d14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d16:	f1c3 0207 	rsb	r2, r3, #7
 8005d1a:	693b      	ldr	r3, [r7, #16]
 8005d1c:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005d1e:	693b      	ldr	r3, [r7, #16]
 8005d20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d22:	2201      	movs	r2, #1
 8005d24:	409a      	lsls	r2, r3
 8005d26:	4b0f      	ldr	r3, [pc, #60]	; (8005d64 <xTaskPriorityDisinherit+0x104>)
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	4313      	orrs	r3, r2
 8005d2c:	4a0d      	ldr	r2, [pc, #52]	; (8005d64 <xTaskPriorityDisinherit+0x104>)
 8005d2e:	6013      	str	r3, [r2, #0]
 8005d30:	693b      	ldr	r3, [r7, #16]
 8005d32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d34:	4613      	mov	r3, r2
 8005d36:	009b      	lsls	r3, r3, #2
 8005d38:	4413      	add	r3, r2
 8005d3a:	009b      	lsls	r3, r3, #2
 8005d3c:	4a08      	ldr	r2, [pc, #32]	; (8005d60 <xTaskPriorityDisinherit+0x100>)
 8005d3e:	441a      	add	r2, r3
 8005d40:	693b      	ldr	r3, [r7, #16]
 8005d42:	3304      	adds	r3, #4
 8005d44:	4619      	mov	r1, r3
 8005d46:	4610      	mov	r0, r2
 8005d48:	f7fe f967 	bl	800401a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005d4c:	2301      	movs	r3, #1
 8005d4e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005d50:	697b      	ldr	r3, [r7, #20]
	}
 8005d52:	4618      	mov	r0, r3
 8005d54:	3718      	adds	r7, #24
 8005d56:	46bd      	mov	sp, r7
 8005d58:	bd80      	pop	{r7, pc}
 8005d5a:	bf00      	nop
 8005d5c:	20000548 	.word	0x20000548
 8005d60:	2000054c 	.word	0x2000054c
 8005d64:	20000650 	.word	0x20000650

08005d68 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8005d68:	b580      	push	{r7, lr}
 8005d6a:	b088      	sub	sp, #32
 8005d6c:	af00      	add	r7, sp, #0
 8005d6e:	6078      	str	r0, [r7, #4]
 8005d70:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8005d76:	2301      	movs	r3, #1
 8005d78:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	f000 8086 	beq.w	8005e8e <vTaskPriorityDisinheritAfterTimeout+0x126>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8005d82:	69bb      	ldr	r3, [r7, #24]
 8005d84:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d109      	bne.n	8005d9e <vTaskPriorityDisinheritAfterTimeout+0x36>
 8005d8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d8e:	f383 8811 	msr	BASEPRI, r3
 8005d92:	f3bf 8f6f 	isb	sy
 8005d96:	f3bf 8f4f 	dsb	sy
 8005d9a:	60fb      	str	r3, [r7, #12]
 8005d9c:	e7fe      	b.n	8005d9c <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8005d9e:	69bb      	ldr	r3, [r7, #24]
 8005da0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005da2:	683a      	ldr	r2, [r7, #0]
 8005da4:	429a      	cmp	r2, r3
 8005da6:	d902      	bls.n	8005dae <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8005da8:	683b      	ldr	r3, [r7, #0]
 8005daa:	61fb      	str	r3, [r7, #28]
 8005dac:	e002      	b.n	8005db4 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8005dae:	69bb      	ldr	r3, [r7, #24]
 8005db0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005db2:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8005db4:	69bb      	ldr	r3, [r7, #24]
 8005db6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005db8:	69fa      	ldr	r2, [r7, #28]
 8005dba:	429a      	cmp	r2, r3
 8005dbc:	d067      	beq.n	8005e8e <vTaskPriorityDisinheritAfterTimeout+0x126>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8005dbe:	69bb      	ldr	r3, [r7, #24]
 8005dc0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005dc2:	697a      	ldr	r2, [r7, #20]
 8005dc4:	429a      	cmp	r2, r3
 8005dc6:	d162      	bne.n	8005e8e <vTaskPriorityDisinheritAfterTimeout+0x126>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8005dc8:	4b33      	ldr	r3, [pc, #204]	; (8005e98 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	69ba      	ldr	r2, [r7, #24]
 8005dce:	429a      	cmp	r2, r3
 8005dd0:	d109      	bne.n	8005de6 <vTaskPriorityDisinheritAfterTimeout+0x7e>
 8005dd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dd6:	f383 8811 	msr	BASEPRI, r3
 8005dda:	f3bf 8f6f 	isb	sy
 8005dde:	f3bf 8f4f 	dsb	sy
 8005de2:	60bb      	str	r3, [r7, #8]
 8005de4:	e7fe      	b.n	8005de4 <vTaskPriorityDisinheritAfterTimeout+0x7c>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8005de6:	69bb      	ldr	r3, [r7, #24]
 8005de8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dea:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8005dec:	69bb      	ldr	r3, [r7, #24]
 8005dee:	69fa      	ldr	r2, [r7, #28]
 8005df0:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005df2:	69bb      	ldr	r3, [r7, #24]
 8005df4:	699b      	ldr	r3, [r3, #24]
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	db04      	blt.n	8005e04 <vTaskPriorityDisinheritAfterTimeout+0x9c>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005dfa:	69fb      	ldr	r3, [r7, #28]
 8005dfc:	f1c3 0207 	rsb	r2, r3, #7
 8005e00:	69bb      	ldr	r3, [r7, #24]
 8005e02:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8005e04:	69bb      	ldr	r3, [r7, #24]
 8005e06:	6959      	ldr	r1, [r3, #20]
 8005e08:	693a      	ldr	r2, [r7, #16]
 8005e0a:	4613      	mov	r3, r2
 8005e0c:	009b      	lsls	r3, r3, #2
 8005e0e:	4413      	add	r3, r2
 8005e10:	009b      	lsls	r3, r3, #2
 8005e12:	4a22      	ldr	r2, [pc, #136]	; (8005e9c <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8005e14:	4413      	add	r3, r2
 8005e16:	4299      	cmp	r1, r3
 8005e18:	d101      	bne.n	8005e1e <vTaskPriorityDisinheritAfterTimeout+0xb6>
 8005e1a:	2301      	movs	r3, #1
 8005e1c:	e000      	b.n	8005e20 <vTaskPriorityDisinheritAfterTimeout+0xb8>
 8005e1e:	2300      	movs	r3, #0
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d034      	beq.n	8005e8e <vTaskPriorityDisinheritAfterTimeout+0x126>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005e24:	69bb      	ldr	r3, [r7, #24]
 8005e26:	3304      	adds	r3, #4
 8005e28:	4618      	mov	r0, r3
 8005e2a:	f7fe f951 	bl	80040d0 <uxListRemove>
 8005e2e:	4603      	mov	r3, r0
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d115      	bne.n	8005e60 <vTaskPriorityDisinheritAfterTimeout+0xf8>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8005e34:	69bb      	ldr	r3, [r7, #24]
 8005e36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e38:	4918      	ldr	r1, [pc, #96]	; (8005e9c <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8005e3a:	4613      	mov	r3, r2
 8005e3c:	009b      	lsls	r3, r3, #2
 8005e3e:	4413      	add	r3, r2
 8005e40:	009b      	lsls	r3, r3, #2
 8005e42:	440b      	add	r3, r1
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d10a      	bne.n	8005e60 <vTaskPriorityDisinheritAfterTimeout+0xf8>
 8005e4a:	69bb      	ldr	r3, [r7, #24]
 8005e4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e4e:	2201      	movs	r2, #1
 8005e50:	fa02 f303 	lsl.w	r3, r2, r3
 8005e54:	43da      	mvns	r2, r3
 8005e56:	4b12      	ldr	r3, [pc, #72]	; (8005ea0 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	4013      	ands	r3, r2
 8005e5c:	4a10      	ldr	r2, [pc, #64]	; (8005ea0 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8005e5e:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8005e60:	69bb      	ldr	r3, [r7, #24]
 8005e62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e64:	2201      	movs	r2, #1
 8005e66:	409a      	lsls	r2, r3
 8005e68:	4b0d      	ldr	r3, [pc, #52]	; (8005ea0 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	4313      	orrs	r3, r2
 8005e6e:	4a0c      	ldr	r2, [pc, #48]	; (8005ea0 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8005e70:	6013      	str	r3, [r2, #0]
 8005e72:	69bb      	ldr	r3, [r7, #24]
 8005e74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e76:	4613      	mov	r3, r2
 8005e78:	009b      	lsls	r3, r3, #2
 8005e7a:	4413      	add	r3, r2
 8005e7c:	009b      	lsls	r3, r3, #2
 8005e7e:	4a07      	ldr	r2, [pc, #28]	; (8005e9c <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8005e80:	441a      	add	r2, r3
 8005e82:	69bb      	ldr	r3, [r7, #24]
 8005e84:	3304      	adds	r3, #4
 8005e86:	4619      	mov	r1, r3
 8005e88:	4610      	mov	r0, r2
 8005e8a:	f7fe f8c6 	bl	800401a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005e8e:	bf00      	nop
 8005e90:	3720      	adds	r7, #32
 8005e92:	46bd      	mov	sp, r7
 8005e94:	bd80      	pop	{r7, pc}
 8005e96:	bf00      	nop
 8005e98:	20000548 	.word	0x20000548
 8005e9c:	2000054c 	.word	0x2000054c
 8005ea0:	20000650 	.word	0x20000650

08005ea4 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 8005ea4:	b480      	push	{r7}
 8005ea6:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8005ea8:	4b07      	ldr	r3, [pc, #28]	; (8005ec8 <pvTaskIncrementMutexHeldCount+0x24>)
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d004      	beq.n	8005eba <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8005eb0:	4b05      	ldr	r3, [pc, #20]	; (8005ec8 <pvTaskIncrementMutexHeldCount+0x24>)
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005eb6:	3201      	adds	r2, #1
 8005eb8:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 8005eba:	4b03      	ldr	r3, [pc, #12]	; (8005ec8 <pvTaskIncrementMutexHeldCount+0x24>)
 8005ebc:	681b      	ldr	r3, [r3, #0]
	}
 8005ebe:	4618      	mov	r0, r3
 8005ec0:	46bd      	mov	sp, r7
 8005ec2:	bc80      	pop	{r7}
 8005ec4:	4770      	bx	lr
 8005ec6:	bf00      	nop
 8005ec8:	20000548 	.word	0x20000548

08005ecc <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005ecc:	b580      	push	{r7, lr}
 8005ece:	b084      	sub	sp, #16
 8005ed0:	af00      	add	r7, sp, #0
 8005ed2:	6078      	str	r0, [r7, #4]
 8005ed4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005ed6:	4b29      	ldr	r3, [pc, #164]	; (8005f7c <prvAddCurrentTaskToDelayedList+0xb0>)
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005edc:	4b28      	ldr	r3, [pc, #160]	; (8005f80 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	3304      	adds	r3, #4
 8005ee2:	4618      	mov	r0, r3
 8005ee4:	f7fe f8f4 	bl	80040d0 <uxListRemove>
 8005ee8:	4603      	mov	r3, r0
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d10b      	bne.n	8005f06 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8005eee:	4b24      	ldr	r3, [pc, #144]	; (8005f80 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ef4:	2201      	movs	r2, #1
 8005ef6:	fa02 f303 	lsl.w	r3, r2, r3
 8005efa:	43da      	mvns	r2, r3
 8005efc:	4b21      	ldr	r3, [pc, #132]	; (8005f84 <prvAddCurrentTaskToDelayedList+0xb8>)
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	4013      	ands	r3, r2
 8005f02:	4a20      	ldr	r2, [pc, #128]	; (8005f84 <prvAddCurrentTaskToDelayedList+0xb8>)
 8005f04:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f0c:	d10a      	bne.n	8005f24 <prvAddCurrentTaskToDelayedList+0x58>
 8005f0e:	683b      	ldr	r3, [r7, #0]
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d007      	beq.n	8005f24 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005f14:	4b1a      	ldr	r3, [pc, #104]	; (8005f80 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	3304      	adds	r3, #4
 8005f1a:	4619      	mov	r1, r3
 8005f1c:	481a      	ldr	r0, [pc, #104]	; (8005f88 <prvAddCurrentTaskToDelayedList+0xbc>)
 8005f1e:	f7fe f87c 	bl	800401a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005f22:	e026      	b.n	8005f72 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005f24:	68fa      	ldr	r2, [r7, #12]
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	4413      	add	r3, r2
 8005f2a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005f2c:	4b14      	ldr	r3, [pc, #80]	; (8005f80 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	68ba      	ldr	r2, [r7, #8]
 8005f32:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005f34:	68ba      	ldr	r2, [r7, #8]
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	429a      	cmp	r2, r3
 8005f3a:	d209      	bcs.n	8005f50 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005f3c:	4b13      	ldr	r3, [pc, #76]	; (8005f8c <prvAddCurrentTaskToDelayedList+0xc0>)
 8005f3e:	681a      	ldr	r2, [r3, #0]
 8005f40:	4b0f      	ldr	r3, [pc, #60]	; (8005f80 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	3304      	adds	r3, #4
 8005f46:	4619      	mov	r1, r3
 8005f48:	4610      	mov	r0, r2
 8005f4a:	f7fe f889 	bl	8004060 <vListInsert>
}
 8005f4e:	e010      	b.n	8005f72 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005f50:	4b0f      	ldr	r3, [pc, #60]	; (8005f90 <prvAddCurrentTaskToDelayedList+0xc4>)
 8005f52:	681a      	ldr	r2, [r3, #0]
 8005f54:	4b0a      	ldr	r3, [pc, #40]	; (8005f80 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	3304      	adds	r3, #4
 8005f5a:	4619      	mov	r1, r3
 8005f5c:	4610      	mov	r0, r2
 8005f5e:	f7fe f87f 	bl	8004060 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005f62:	4b0c      	ldr	r3, [pc, #48]	; (8005f94 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	68ba      	ldr	r2, [r7, #8]
 8005f68:	429a      	cmp	r2, r3
 8005f6a:	d202      	bcs.n	8005f72 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8005f6c:	4a09      	ldr	r2, [pc, #36]	; (8005f94 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005f6e:	68bb      	ldr	r3, [r7, #8]
 8005f70:	6013      	str	r3, [r2, #0]
}
 8005f72:	bf00      	nop
 8005f74:	3710      	adds	r7, #16
 8005f76:	46bd      	mov	sp, r7
 8005f78:	bd80      	pop	{r7, pc}
 8005f7a:	bf00      	nop
 8005f7c:	2000064c 	.word	0x2000064c
 8005f80:	20000548 	.word	0x20000548
 8005f84:	20000650 	.word	0x20000650
 8005f88:	20000634 	.word	0x20000634
 8005f8c:	20000604 	.word	0x20000604
 8005f90:	20000600 	.word	0x20000600
 8005f94:	20000668 	.word	0x20000668

08005f98 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8005f98:	b580      	push	{r7, lr}
 8005f9a:	b08a      	sub	sp, #40	; 0x28
 8005f9c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8005f9e:	2300      	movs	r3, #0
 8005fa0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8005fa2:	f000 fb37 	bl	8006614 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8005fa6:	4b1c      	ldr	r3, [pc, #112]	; (8006018 <xTimerCreateTimerTask+0x80>)
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d021      	beq.n	8005ff2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8005fae:	2300      	movs	r3, #0
 8005fb0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8005fb2:	2300      	movs	r3, #0
 8005fb4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8005fb6:	1d3a      	adds	r2, r7, #4
 8005fb8:	f107 0108 	add.w	r1, r7, #8
 8005fbc:	f107 030c 	add.w	r3, r7, #12
 8005fc0:	4618      	mov	r0, r3
 8005fc2:	f7fa f8f5 	bl	80001b0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8005fc6:	6879      	ldr	r1, [r7, #4]
 8005fc8:	68bb      	ldr	r3, [r7, #8]
 8005fca:	68fa      	ldr	r2, [r7, #12]
 8005fcc:	9202      	str	r2, [sp, #8]
 8005fce:	9301      	str	r3, [sp, #4]
 8005fd0:	2302      	movs	r3, #2
 8005fd2:	9300      	str	r3, [sp, #0]
 8005fd4:	2300      	movs	r3, #0
 8005fd6:	460a      	mov	r2, r1
 8005fd8:	4910      	ldr	r1, [pc, #64]	; (800601c <xTimerCreateTimerTask+0x84>)
 8005fda:	4811      	ldr	r0, [pc, #68]	; (8006020 <xTimerCreateTimerTask+0x88>)
 8005fdc:	f7fe ff98 	bl	8004f10 <xTaskCreateStatic>
 8005fe0:	4602      	mov	r2, r0
 8005fe2:	4b10      	ldr	r3, [pc, #64]	; (8006024 <xTimerCreateTimerTask+0x8c>)
 8005fe4:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8005fe6:	4b0f      	ldr	r3, [pc, #60]	; (8006024 <xTimerCreateTimerTask+0x8c>)
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d001      	beq.n	8005ff2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8005fee:	2301      	movs	r3, #1
 8005ff0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8005ff2:	697b      	ldr	r3, [r7, #20]
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d109      	bne.n	800600c <xTimerCreateTimerTask+0x74>
 8005ff8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ffc:	f383 8811 	msr	BASEPRI, r3
 8006000:	f3bf 8f6f 	isb	sy
 8006004:	f3bf 8f4f 	dsb	sy
 8006008:	613b      	str	r3, [r7, #16]
 800600a:	e7fe      	b.n	800600a <xTimerCreateTimerTask+0x72>
	return xReturn;
 800600c:	697b      	ldr	r3, [r7, #20]
}
 800600e:	4618      	mov	r0, r3
 8006010:	3718      	adds	r7, #24
 8006012:	46bd      	mov	sp, r7
 8006014:	bd80      	pop	{r7, pc}
 8006016:	bf00      	nop
 8006018:	200006a4 	.word	0x200006a4
 800601c:	0800788c 	.word	0x0800788c
 8006020:	0800625d 	.word	0x0800625d
 8006024:	200006a8 	.word	0x200006a8

08006028 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 8006028:	b580      	push	{r7, lr}
 800602a:	b088      	sub	sp, #32
 800602c:	af02      	add	r7, sp, #8
 800602e:	60f8      	str	r0, [r7, #12]
 8006030:	60b9      	str	r1, [r7, #8]
 8006032:	607a      	str	r2, [r7, #4]
 8006034:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) );
 8006036:	202c      	movs	r0, #44	; 0x2c
 8006038:	f000 fd0c 	bl	8006a54 <pvPortMalloc>
 800603c:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 800603e:	697b      	ldr	r3, [r7, #20]
 8006040:	2b00      	cmp	r3, #0
 8006042:	d00d      	beq.n	8006060 <xTimerCreate+0x38>
		{
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8006044:	697b      	ldr	r3, [r7, #20]
 8006046:	9301      	str	r3, [sp, #4]
 8006048:	6a3b      	ldr	r3, [r7, #32]
 800604a:	9300      	str	r3, [sp, #0]
 800604c:	683b      	ldr	r3, [r7, #0]
 800604e:	687a      	ldr	r2, [r7, #4]
 8006050:	68b9      	ldr	r1, [r7, #8]
 8006052:	68f8      	ldr	r0, [r7, #12]
 8006054:	f000 f844 	bl	80060e0 <prvInitialiseNewTimer>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Timers can be created statically or dynamically, so note this
				timer was created dynamically in case the timer is later
				deleted. */
				pxNewTimer->ucStaticallyAllocated = pdFALSE;
 8006058:	697b      	ldr	r3, [r7, #20]
 800605a:	2200      	movs	r2, #0
 800605c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */
		}

		return pxNewTimer;
 8006060:	697b      	ldr	r3, [r7, #20]
	}
 8006062:	4618      	mov	r0, r3
 8006064:	3718      	adds	r7, #24
 8006066:	46bd      	mov	sp, r7
 8006068:	bd80      	pop	{r7, pc}

0800606a <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 800606a:	b580      	push	{r7, lr}
 800606c:	b08a      	sub	sp, #40	; 0x28
 800606e:	af02      	add	r7, sp, #8
 8006070:	60f8      	str	r0, [r7, #12]
 8006072:	60b9      	str	r1, [r7, #8]
 8006074:	607a      	str	r2, [r7, #4]
 8006076:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 8006078:	232c      	movs	r3, #44	; 0x2c
 800607a:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 800607c:	693b      	ldr	r3, [r7, #16]
 800607e:	2b2c      	cmp	r3, #44	; 0x2c
 8006080:	d009      	beq.n	8006096 <xTimerCreateStatic+0x2c>
 8006082:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006086:	f383 8811 	msr	BASEPRI, r3
 800608a:	f3bf 8f6f 	isb	sy
 800608e:	f3bf 8f4f 	dsb	sy
 8006092:	61bb      	str	r3, [r7, #24]
 8006094:	e7fe      	b.n	8006094 <xTimerCreateStatic+0x2a>
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 8006096:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006098:	2b00      	cmp	r3, #0
 800609a:	d109      	bne.n	80060b0 <xTimerCreateStatic+0x46>
 800609c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060a0:	f383 8811 	msr	BASEPRI, r3
 80060a4:	f3bf 8f6f 	isb	sy
 80060a8:	f3bf 8f4f 	dsb	sy
 80060ac:	617b      	str	r3, [r7, #20]
 80060ae:	e7fe      	b.n	80060ae <xTimerCreateStatic+0x44>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80060b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060b2:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 80060b4:	69fb      	ldr	r3, [r7, #28]
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d00d      	beq.n	80060d6 <xTimerCreateStatic+0x6c>
		{
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 80060ba:	69fb      	ldr	r3, [r7, #28]
 80060bc:	9301      	str	r3, [sp, #4]
 80060be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060c0:	9300      	str	r3, [sp, #0]
 80060c2:	683b      	ldr	r3, [r7, #0]
 80060c4:	687a      	ldr	r2, [r7, #4]
 80060c6:	68b9      	ldr	r1, [r7, #8]
 80060c8:	68f8      	ldr	r0, [r7, #12]
 80060ca:	f000 f809 	bl	80060e0 <prvInitialiseNewTimer>

			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Timers can be created statically or dynamically so note this
				timer was created statically in case it is later deleted. */
				pxNewTimer->ucStaticallyAllocated = pdTRUE;
 80060ce:	69fb      	ldr	r3, [r7, #28]
 80060d0:	2201      	movs	r2, #1
 80060d2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
		}

		return pxNewTimer;
 80060d6:	69fb      	ldr	r3, [r7, #28]
	}
 80060d8:	4618      	mov	r0, r3
 80060da:	3720      	adds	r7, #32
 80060dc:	46bd      	mov	sp, r7
 80060de:	bd80      	pop	{r7, pc}

080060e0 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 80060e0:	b580      	push	{r7, lr}
 80060e2:	b086      	sub	sp, #24
 80060e4:	af00      	add	r7, sp, #0
 80060e6:	60f8      	str	r0, [r7, #12]
 80060e8:	60b9      	str	r1, [r7, #8]
 80060ea:	607a      	str	r2, [r7, #4]
 80060ec:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 80060ee:	68bb      	ldr	r3, [r7, #8]
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d109      	bne.n	8006108 <prvInitialiseNewTimer+0x28>
 80060f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060f8:	f383 8811 	msr	BASEPRI, r3
 80060fc:	f3bf 8f6f 	isb	sy
 8006100:	f3bf 8f4f 	dsb	sy
 8006104:	617b      	str	r3, [r7, #20]
 8006106:	e7fe      	b.n	8006106 <prvInitialiseNewTimer+0x26>

	if( pxNewTimer != NULL )
 8006108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800610a:	2b00      	cmp	r3, #0
 800610c:	d015      	beq.n	800613a <prvInitialiseNewTimer+0x5a>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 800610e:	f000 fa81 	bl	8006614 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 8006112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006114:	68fa      	ldr	r2, [r7, #12]
 8006116:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8006118:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800611a:	68ba      	ldr	r2, [r7, #8]
 800611c:	619a      	str	r2, [r3, #24]
		pxNewTimer->uxAutoReload = uxAutoReload;
 800611e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006120:	687a      	ldr	r2, [r7, #4]
 8006122:	61da      	str	r2, [r3, #28]
		pxNewTimer->pvTimerID = pvTimerID;
 8006124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006126:	683a      	ldr	r2, [r7, #0]
 8006128:	621a      	str	r2, [r3, #32]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800612a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800612c:	6a3a      	ldr	r2, [r7, #32]
 800612e:	625a      	str	r2, [r3, #36]	; 0x24
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8006130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006132:	3304      	adds	r3, #4
 8006134:	4618      	mov	r0, r3
 8006136:	f7fd ff64 	bl	8004002 <vListInitialiseItem>
		traceTIMER_CREATE( pxNewTimer );
	}
}
 800613a:	bf00      	nop
 800613c:	3718      	adds	r7, #24
 800613e:	46bd      	mov	sp, r7
 8006140:	bd80      	pop	{r7, pc}
	...

08006144 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8006144:	b580      	push	{r7, lr}
 8006146:	b08a      	sub	sp, #40	; 0x28
 8006148:	af00      	add	r7, sp, #0
 800614a:	60f8      	str	r0, [r7, #12]
 800614c:	60b9      	str	r1, [r7, #8]
 800614e:	607a      	str	r2, [r7, #4]
 8006150:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8006152:	2300      	movs	r3, #0
 8006154:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	2b00      	cmp	r3, #0
 800615a:	d109      	bne.n	8006170 <xTimerGenericCommand+0x2c>
 800615c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006160:	f383 8811 	msr	BASEPRI, r3
 8006164:	f3bf 8f6f 	isb	sy
 8006168:	f3bf 8f4f 	dsb	sy
 800616c:	623b      	str	r3, [r7, #32]
 800616e:	e7fe      	b.n	800616e <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8006170:	4b19      	ldr	r3, [pc, #100]	; (80061d8 <xTimerGenericCommand+0x94>)
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	2b00      	cmp	r3, #0
 8006176:	d02a      	beq.n	80061ce <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8006178:	68bb      	ldr	r3, [r7, #8]
 800617a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8006184:	68bb      	ldr	r3, [r7, #8]
 8006186:	2b05      	cmp	r3, #5
 8006188:	dc18      	bgt.n	80061bc <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800618a:	f7ff fcc5 	bl	8005b18 <xTaskGetSchedulerState>
 800618e:	4603      	mov	r3, r0
 8006190:	2b02      	cmp	r3, #2
 8006192:	d109      	bne.n	80061a8 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006194:	4b10      	ldr	r3, [pc, #64]	; (80061d8 <xTimerGenericCommand+0x94>)
 8006196:	6818      	ldr	r0, [r3, #0]
 8006198:	f107 0114 	add.w	r1, r7, #20
 800619c:	2300      	movs	r3, #0
 800619e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80061a0:	f7fe f944 	bl	800442c <xQueueGenericSend>
 80061a4:	6278      	str	r0, [r7, #36]	; 0x24
 80061a6:	e012      	b.n	80061ce <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80061a8:	4b0b      	ldr	r3, [pc, #44]	; (80061d8 <xTimerGenericCommand+0x94>)
 80061aa:	6818      	ldr	r0, [r3, #0]
 80061ac:	f107 0114 	add.w	r1, r7, #20
 80061b0:	2300      	movs	r3, #0
 80061b2:	2200      	movs	r2, #0
 80061b4:	f7fe f93a 	bl	800442c <xQueueGenericSend>
 80061b8:	6278      	str	r0, [r7, #36]	; 0x24
 80061ba:	e008      	b.n	80061ce <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80061bc:	4b06      	ldr	r3, [pc, #24]	; (80061d8 <xTimerGenericCommand+0x94>)
 80061be:	6818      	ldr	r0, [r3, #0]
 80061c0:	f107 0114 	add.w	r1, r7, #20
 80061c4:	2300      	movs	r3, #0
 80061c6:	683a      	ldr	r2, [r7, #0]
 80061c8:	f7fe fa2a 	bl	8004620 <xQueueGenericSendFromISR>
 80061cc:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80061ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80061d0:	4618      	mov	r0, r3
 80061d2:	3728      	adds	r7, #40	; 0x28
 80061d4:	46bd      	mov	sp, r7
 80061d6:	bd80      	pop	{r7, pc}
 80061d8:	200006a4 	.word	0x200006a4

080061dc <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80061dc:	b580      	push	{r7, lr}
 80061de:	b088      	sub	sp, #32
 80061e0:	af02      	add	r7, sp, #8
 80061e2:	6078      	str	r0, [r7, #4]
 80061e4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80061e6:	4b1c      	ldr	r3, [pc, #112]	; (8006258 <prvProcessExpiredTimer+0x7c>)
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	68db      	ldr	r3, [r3, #12]
 80061ec:	68db      	ldr	r3, [r3, #12]
 80061ee:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80061f0:	697b      	ldr	r3, [r7, #20]
 80061f2:	3304      	adds	r3, #4
 80061f4:	4618      	mov	r0, r3
 80061f6:	f7fd ff6b 	bl	80040d0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80061fa:	697b      	ldr	r3, [r7, #20]
 80061fc:	69db      	ldr	r3, [r3, #28]
 80061fe:	2b01      	cmp	r3, #1
 8006200:	d121      	bne.n	8006246 <prvProcessExpiredTimer+0x6a>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006202:	697b      	ldr	r3, [r7, #20]
 8006204:	699a      	ldr	r2, [r3, #24]
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	18d1      	adds	r1, r2, r3
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	683a      	ldr	r2, [r7, #0]
 800620e:	6978      	ldr	r0, [r7, #20]
 8006210:	f000 f8c8 	bl	80063a4 <prvInsertTimerInActiveList>
 8006214:	4603      	mov	r3, r0
 8006216:	2b00      	cmp	r3, #0
 8006218:	d015      	beq.n	8006246 <prvProcessExpiredTimer+0x6a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800621a:	2300      	movs	r3, #0
 800621c:	9300      	str	r3, [sp, #0]
 800621e:	2300      	movs	r3, #0
 8006220:	687a      	ldr	r2, [r7, #4]
 8006222:	2100      	movs	r1, #0
 8006224:	6978      	ldr	r0, [r7, #20]
 8006226:	f7ff ff8d 	bl	8006144 <xTimerGenericCommand>
 800622a:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800622c:	693b      	ldr	r3, [r7, #16]
 800622e:	2b00      	cmp	r3, #0
 8006230:	d109      	bne.n	8006246 <prvProcessExpiredTimer+0x6a>
 8006232:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006236:	f383 8811 	msr	BASEPRI, r3
 800623a:	f3bf 8f6f 	isb	sy
 800623e:	f3bf 8f4f 	dsb	sy
 8006242:	60fb      	str	r3, [r7, #12]
 8006244:	e7fe      	b.n	8006244 <prvProcessExpiredTimer+0x68>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006246:	697b      	ldr	r3, [r7, #20]
 8006248:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800624a:	6978      	ldr	r0, [r7, #20]
 800624c:	4798      	blx	r3
}
 800624e:	bf00      	nop
 8006250:	3718      	adds	r7, #24
 8006252:	46bd      	mov	sp, r7
 8006254:	bd80      	pop	{r7, pc}
 8006256:	bf00      	nop
 8006258:	2000069c 	.word	0x2000069c

0800625c <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 800625c:	b580      	push	{r7, lr}
 800625e:	b084      	sub	sp, #16
 8006260:	af00      	add	r7, sp, #0
 8006262:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006264:	f107 0308 	add.w	r3, r7, #8
 8006268:	4618      	mov	r0, r3
 800626a:	f000 f857 	bl	800631c <prvGetNextExpireTime>
 800626e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006270:	68bb      	ldr	r3, [r7, #8]
 8006272:	4619      	mov	r1, r3
 8006274:	68f8      	ldr	r0, [r7, #12]
 8006276:	f000 f803 	bl	8006280 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800627a:	f000 f8d5 	bl	8006428 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800627e:	e7f1      	b.n	8006264 <prvTimerTask+0x8>

08006280 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006280:	b580      	push	{r7, lr}
 8006282:	b084      	sub	sp, #16
 8006284:	af00      	add	r7, sp, #0
 8006286:	6078      	str	r0, [r7, #4]
 8006288:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800628a:	f7ff f85f 	bl	800534c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800628e:	f107 0308 	add.w	r3, r7, #8
 8006292:	4618      	mov	r0, r3
 8006294:	f000 f866 	bl	8006364 <prvSampleTimeNow>
 8006298:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800629a:	68bb      	ldr	r3, [r7, #8]
 800629c:	2b00      	cmp	r3, #0
 800629e:	d130      	bne.n	8006302 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80062a0:	683b      	ldr	r3, [r7, #0]
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d10a      	bne.n	80062bc <prvProcessTimerOrBlockTask+0x3c>
 80062a6:	687a      	ldr	r2, [r7, #4]
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	429a      	cmp	r2, r3
 80062ac:	d806      	bhi.n	80062bc <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80062ae:	f7ff f85b 	bl	8005368 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80062b2:	68f9      	ldr	r1, [r7, #12]
 80062b4:	6878      	ldr	r0, [r7, #4]
 80062b6:	f7ff ff91 	bl	80061dc <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80062ba:	e024      	b.n	8006306 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80062bc:	683b      	ldr	r3, [r7, #0]
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d008      	beq.n	80062d4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80062c2:	4b13      	ldr	r3, [pc, #76]	; (8006310 <prvProcessTimerOrBlockTask+0x90>)
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	bf0c      	ite	eq
 80062cc:	2301      	moveq	r3, #1
 80062ce:	2300      	movne	r3, #0
 80062d0:	b2db      	uxtb	r3, r3
 80062d2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80062d4:	4b0f      	ldr	r3, [pc, #60]	; (8006314 <prvProcessTimerOrBlockTask+0x94>)
 80062d6:	6818      	ldr	r0, [r3, #0]
 80062d8:	687a      	ldr	r2, [r7, #4]
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	1ad3      	subs	r3, r2, r3
 80062de:	683a      	ldr	r2, [r7, #0]
 80062e0:	4619      	mov	r1, r3
 80062e2:	f7fe fde1 	bl	8004ea8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80062e6:	f7ff f83f 	bl	8005368 <xTaskResumeAll>
 80062ea:	4603      	mov	r3, r0
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d10a      	bne.n	8006306 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80062f0:	4b09      	ldr	r3, [pc, #36]	; (8006318 <prvProcessTimerOrBlockTask+0x98>)
 80062f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80062f6:	601a      	str	r2, [r3, #0]
 80062f8:	f3bf 8f4f 	dsb	sy
 80062fc:	f3bf 8f6f 	isb	sy
}
 8006300:	e001      	b.n	8006306 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8006302:	f7ff f831 	bl	8005368 <xTaskResumeAll>
}
 8006306:	bf00      	nop
 8006308:	3710      	adds	r7, #16
 800630a:	46bd      	mov	sp, r7
 800630c:	bd80      	pop	{r7, pc}
 800630e:	bf00      	nop
 8006310:	200006a0 	.word	0x200006a0
 8006314:	200006a4 	.word	0x200006a4
 8006318:	e000ed04 	.word	0xe000ed04

0800631c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800631c:	b480      	push	{r7}
 800631e:	b085      	sub	sp, #20
 8006320:	af00      	add	r7, sp, #0
 8006322:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006324:	4b0e      	ldr	r3, [pc, #56]	; (8006360 <prvGetNextExpireTime+0x44>)
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	2b00      	cmp	r3, #0
 800632c:	bf0c      	ite	eq
 800632e:	2301      	moveq	r3, #1
 8006330:	2300      	movne	r3, #0
 8006332:	b2db      	uxtb	r3, r3
 8006334:	461a      	mov	r2, r3
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	2b00      	cmp	r3, #0
 8006340:	d105      	bne.n	800634e <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006342:	4b07      	ldr	r3, [pc, #28]	; (8006360 <prvGetNextExpireTime+0x44>)
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	68db      	ldr	r3, [r3, #12]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	60fb      	str	r3, [r7, #12]
 800634c:	e001      	b.n	8006352 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800634e:	2300      	movs	r3, #0
 8006350:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006352:	68fb      	ldr	r3, [r7, #12]
}
 8006354:	4618      	mov	r0, r3
 8006356:	3714      	adds	r7, #20
 8006358:	46bd      	mov	sp, r7
 800635a:	bc80      	pop	{r7}
 800635c:	4770      	bx	lr
 800635e:	bf00      	nop
 8006360:	2000069c 	.word	0x2000069c

08006364 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006364:	b580      	push	{r7, lr}
 8006366:	b084      	sub	sp, #16
 8006368:	af00      	add	r7, sp, #0
 800636a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800636c:	f7ff f898 	bl	80054a0 <xTaskGetTickCount>
 8006370:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8006372:	4b0b      	ldr	r3, [pc, #44]	; (80063a0 <prvSampleTimeNow+0x3c>)
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	68fa      	ldr	r2, [r7, #12]
 8006378:	429a      	cmp	r2, r3
 800637a:	d205      	bcs.n	8006388 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800637c:	f000 f8ea 	bl	8006554 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	2201      	movs	r2, #1
 8006384:	601a      	str	r2, [r3, #0]
 8006386:	e002      	b.n	800638e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	2200      	movs	r2, #0
 800638c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800638e:	4a04      	ldr	r2, [pc, #16]	; (80063a0 <prvSampleTimeNow+0x3c>)
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8006394:	68fb      	ldr	r3, [r7, #12]
}
 8006396:	4618      	mov	r0, r3
 8006398:	3710      	adds	r7, #16
 800639a:	46bd      	mov	sp, r7
 800639c:	bd80      	pop	{r7, pc}
 800639e:	bf00      	nop
 80063a0:	200006ac 	.word	0x200006ac

080063a4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80063a4:	b580      	push	{r7, lr}
 80063a6:	b086      	sub	sp, #24
 80063a8:	af00      	add	r7, sp, #0
 80063aa:	60f8      	str	r0, [r7, #12]
 80063ac:	60b9      	str	r1, [r7, #8]
 80063ae:	607a      	str	r2, [r7, #4]
 80063b0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80063b2:	2300      	movs	r3, #0
 80063b4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	68ba      	ldr	r2, [r7, #8]
 80063ba:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	68fa      	ldr	r2, [r7, #12]
 80063c0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80063c2:	68ba      	ldr	r2, [r7, #8]
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	429a      	cmp	r2, r3
 80063c8:	d812      	bhi.n	80063f0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80063ca:	687a      	ldr	r2, [r7, #4]
 80063cc:	683b      	ldr	r3, [r7, #0]
 80063ce:	1ad2      	subs	r2, r2, r3
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	699b      	ldr	r3, [r3, #24]
 80063d4:	429a      	cmp	r2, r3
 80063d6:	d302      	bcc.n	80063de <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80063d8:	2301      	movs	r3, #1
 80063da:	617b      	str	r3, [r7, #20]
 80063dc:	e01b      	b.n	8006416 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80063de:	4b10      	ldr	r3, [pc, #64]	; (8006420 <prvInsertTimerInActiveList+0x7c>)
 80063e0:	681a      	ldr	r2, [r3, #0]
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	3304      	adds	r3, #4
 80063e6:	4619      	mov	r1, r3
 80063e8:	4610      	mov	r0, r2
 80063ea:	f7fd fe39 	bl	8004060 <vListInsert>
 80063ee:	e012      	b.n	8006416 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80063f0:	687a      	ldr	r2, [r7, #4]
 80063f2:	683b      	ldr	r3, [r7, #0]
 80063f4:	429a      	cmp	r2, r3
 80063f6:	d206      	bcs.n	8006406 <prvInsertTimerInActiveList+0x62>
 80063f8:	68ba      	ldr	r2, [r7, #8]
 80063fa:	683b      	ldr	r3, [r7, #0]
 80063fc:	429a      	cmp	r2, r3
 80063fe:	d302      	bcc.n	8006406 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8006400:	2301      	movs	r3, #1
 8006402:	617b      	str	r3, [r7, #20]
 8006404:	e007      	b.n	8006416 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006406:	4b07      	ldr	r3, [pc, #28]	; (8006424 <prvInsertTimerInActiveList+0x80>)
 8006408:	681a      	ldr	r2, [r3, #0]
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	3304      	adds	r3, #4
 800640e:	4619      	mov	r1, r3
 8006410:	4610      	mov	r0, r2
 8006412:	f7fd fe25 	bl	8004060 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8006416:	697b      	ldr	r3, [r7, #20]
}
 8006418:	4618      	mov	r0, r3
 800641a:	3718      	adds	r7, #24
 800641c:	46bd      	mov	sp, r7
 800641e:	bd80      	pop	{r7, pc}
 8006420:	200006a0 	.word	0x200006a0
 8006424:	2000069c 	.word	0x2000069c

08006428 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8006428:	b580      	push	{r7, lr}
 800642a:	b08c      	sub	sp, #48	; 0x30
 800642c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800642e:	e07f      	b.n	8006530 <prvProcessReceivedCommands+0x108>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006430:	68bb      	ldr	r3, [r7, #8]
 8006432:	2b00      	cmp	r3, #0
 8006434:	db7b      	blt.n	800652e <prvProcessReceivedCommands+0x106>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006436:	693b      	ldr	r3, [r7, #16]
 8006438:	627b      	str	r3, [r7, #36]	; 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800643a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800643c:	695b      	ldr	r3, [r3, #20]
 800643e:	2b00      	cmp	r3, #0
 8006440:	d004      	beq.n	800644c <prvProcessReceivedCommands+0x24>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006444:	3304      	adds	r3, #4
 8006446:	4618      	mov	r0, r3
 8006448:	f7fd fe42 	bl	80040d0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800644c:	1d3b      	adds	r3, r7, #4
 800644e:	4618      	mov	r0, r3
 8006450:	f7ff ff88 	bl	8006364 <prvSampleTimeNow>
 8006454:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 8006456:	68bb      	ldr	r3, [r7, #8]
 8006458:	2b09      	cmp	r3, #9
 800645a:	d869      	bhi.n	8006530 <prvProcessReceivedCommands+0x108>
 800645c:	a201      	add	r2, pc, #4	; (adr r2, 8006464 <prvProcessReceivedCommands+0x3c>)
 800645e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006462:	bf00      	nop
 8006464:	0800648d 	.word	0x0800648d
 8006468:	0800648d 	.word	0x0800648d
 800646c:	0800648d 	.word	0x0800648d
 8006470:	08006531 	.word	0x08006531
 8006474:	080064e7 	.word	0x080064e7
 8006478:	0800651d 	.word	0x0800651d
 800647c:	0800648d 	.word	0x0800648d
 8006480:	0800648d 	.word	0x0800648d
 8006484:	08006531 	.word	0x08006531
 8006488:	080064e7 	.word	0x080064e7
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800648c:	68fa      	ldr	r2, [r7, #12]
 800648e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006490:	699b      	ldr	r3, [r3, #24]
 8006492:	18d1      	adds	r1, r2, r3
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	6a3a      	ldr	r2, [r7, #32]
 8006498:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800649a:	f7ff ff83 	bl	80063a4 <prvInsertTimerInActiveList>
 800649e:	4603      	mov	r3, r0
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d045      	beq.n	8006530 <prvProcessReceivedCommands+0x108>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80064a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064a8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80064aa:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80064ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064ae:	69db      	ldr	r3, [r3, #28]
 80064b0:	2b01      	cmp	r3, #1
 80064b2:	d13d      	bne.n	8006530 <prvProcessReceivedCommands+0x108>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80064b4:	68fa      	ldr	r2, [r7, #12]
 80064b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064b8:	699b      	ldr	r3, [r3, #24]
 80064ba:	441a      	add	r2, r3
 80064bc:	2300      	movs	r3, #0
 80064be:	9300      	str	r3, [sp, #0]
 80064c0:	2300      	movs	r3, #0
 80064c2:	2100      	movs	r1, #0
 80064c4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80064c6:	f7ff fe3d 	bl	8006144 <xTimerGenericCommand>
 80064ca:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 80064cc:	69fb      	ldr	r3, [r7, #28]
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d12e      	bne.n	8006530 <prvProcessReceivedCommands+0x108>
 80064d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064d6:	f383 8811 	msr	BASEPRI, r3
 80064da:	f3bf 8f6f 	isb	sy
 80064de:	f3bf 8f4f 	dsb	sy
 80064e2:	61bb      	str	r3, [r7, #24]
 80064e4:	e7fe      	b.n	80064e4 <prvProcessReceivedCommands+0xbc>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80064e6:	68fa      	ldr	r2, [r7, #12]
 80064e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064ea:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80064ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064ee:	699b      	ldr	r3, [r3, #24]
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d109      	bne.n	8006508 <prvProcessReceivedCommands+0xe0>
 80064f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064f8:	f383 8811 	msr	BASEPRI, r3
 80064fc:	f3bf 8f6f 	isb	sy
 8006500:	f3bf 8f4f 	dsb	sy
 8006504:	617b      	str	r3, [r7, #20]
 8006506:	e7fe      	b.n	8006506 <prvProcessReceivedCommands+0xde>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006508:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800650a:	699a      	ldr	r2, [r3, #24]
 800650c:	6a3b      	ldr	r3, [r7, #32]
 800650e:	18d1      	adds	r1, r2, r3
 8006510:	6a3b      	ldr	r3, [r7, #32]
 8006512:	6a3a      	ldr	r2, [r7, #32]
 8006514:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006516:	f7ff ff45 	bl	80063a4 <prvInsertTimerInActiveList>
					break;
 800651a:	e009      	b.n	8006530 <prvProcessReceivedCommands+0x108>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800651c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800651e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006522:	2b00      	cmp	r3, #0
 8006524:	d104      	bne.n	8006530 <prvProcessReceivedCommands+0x108>
						{
							vPortFree( pxTimer );
 8006526:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006528:	f000 fb5a 	bl	8006be0 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800652c:	e000      	b.n	8006530 <prvProcessReceivedCommands+0x108>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800652e:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006530:	4b07      	ldr	r3, [pc, #28]	; (8006550 <prvProcessReceivedCommands+0x128>)
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	f107 0108 	add.w	r1, r7, #8
 8006538:	2200      	movs	r2, #0
 800653a:	4618      	mov	r0, r3
 800653c:	f7fe f904 	bl	8004748 <xQueueReceive>
 8006540:	4603      	mov	r3, r0
 8006542:	2b00      	cmp	r3, #0
 8006544:	f47f af74 	bne.w	8006430 <prvProcessReceivedCommands+0x8>
	}
}
 8006548:	bf00      	nop
 800654a:	3728      	adds	r7, #40	; 0x28
 800654c:	46bd      	mov	sp, r7
 800654e:	bd80      	pop	{r7, pc}
 8006550:	200006a4 	.word	0x200006a4

08006554 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8006554:	b580      	push	{r7, lr}
 8006556:	b088      	sub	sp, #32
 8006558:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800655a:	e044      	b.n	80065e6 <prvSwitchTimerLists+0x92>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800655c:	4b2b      	ldr	r3, [pc, #172]	; (800660c <prvSwitchTimerLists+0xb8>)
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	68db      	ldr	r3, [r3, #12]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006566:	4b29      	ldr	r3, [pc, #164]	; (800660c <prvSwitchTimerLists+0xb8>)
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	68db      	ldr	r3, [r3, #12]
 800656c:	68db      	ldr	r3, [r3, #12]
 800656e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	3304      	adds	r3, #4
 8006574:	4618      	mov	r0, r3
 8006576:	f7fd fdab 	bl	80040d0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800657e:	68f8      	ldr	r0, [r7, #12]
 8006580:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	69db      	ldr	r3, [r3, #28]
 8006586:	2b01      	cmp	r3, #1
 8006588:	d12d      	bne.n	80065e6 <prvSwitchTimerLists+0x92>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	699b      	ldr	r3, [r3, #24]
 800658e:	693a      	ldr	r2, [r7, #16]
 8006590:	4413      	add	r3, r2
 8006592:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8006594:	68ba      	ldr	r2, [r7, #8]
 8006596:	693b      	ldr	r3, [r7, #16]
 8006598:	429a      	cmp	r2, r3
 800659a:	d90e      	bls.n	80065ba <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	68ba      	ldr	r2, [r7, #8]
 80065a0:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	68fa      	ldr	r2, [r7, #12]
 80065a6:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80065a8:	4b18      	ldr	r3, [pc, #96]	; (800660c <prvSwitchTimerLists+0xb8>)
 80065aa:	681a      	ldr	r2, [r3, #0]
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	3304      	adds	r3, #4
 80065b0:	4619      	mov	r1, r3
 80065b2:	4610      	mov	r0, r2
 80065b4:	f7fd fd54 	bl	8004060 <vListInsert>
 80065b8:	e015      	b.n	80065e6 <prvSwitchTimerLists+0x92>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80065ba:	2300      	movs	r3, #0
 80065bc:	9300      	str	r3, [sp, #0]
 80065be:	2300      	movs	r3, #0
 80065c0:	693a      	ldr	r2, [r7, #16]
 80065c2:	2100      	movs	r1, #0
 80065c4:	68f8      	ldr	r0, [r7, #12]
 80065c6:	f7ff fdbd 	bl	8006144 <xTimerGenericCommand>
 80065ca:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d109      	bne.n	80065e6 <prvSwitchTimerLists+0x92>
 80065d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065d6:	f383 8811 	msr	BASEPRI, r3
 80065da:	f3bf 8f6f 	isb	sy
 80065de:	f3bf 8f4f 	dsb	sy
 80065e2:	603b      	str	r3, [r7, #0]
 80065e4:	e7fe      	b.n	80065e4 <prvSwitchTimerLists+0x90>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80065e6:	4b09      	ldr	r3, [pc, #36]	; (800660c <prvSwitchTimerLists+0xb8>)
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d1b5      	bne.n	800655c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80065f0:	4b06      	ldr	r3, [pc, #24]	; (800660c <prvSwitchTimerLists+0xb8>)
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80065f6:	4b06      	ldr	r3, [pc, #24]	; (8006610 <prvSwitchTimerLists+0xbc>)
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	4a04      	ldr	r2, [pc, #16]	; (800660c <prvSwitchTimerLists+0xb8>)
 80065fc:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80065fe:	4a04      	ldr	r2, [pc, #16]	; (8006610 <prvSwitchTimerLists+0xbc>)
 8006600:	697b      	ldr	r3, [r7, #20]
 8006602:	6013      	str	r3, [r2, #0]
}
 8006604:	bf00      	nop
 8006606:	3718      	adds	r7, #24
 8006608:	46bd      	mov	sp, r7
 800660a:	bd80      	pop	{r7, pc}
 800660c:	2000069c 	.word	0x2000069c
 8006610:	200006a0 	.word	0x200006a0

08006614 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006614:	b580      	push	{r7, lr}
 8006616:	b082      	sub	sp, #8
 8006618:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800661a:	f000 f925 	bl	8006868 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800661e:	4b15      	ldr	r3, [pc, #84]	; (8006674 <prvCheckForValidListAndQueue+0x60>)
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	2b00      	cmp	r3, #0
 8006624:	d120      	bne.n	8006668 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8006626:	4814      	ldr	r0, [pc, #80]	; (8006678 <prvCheckForValidListAndQueue+0x64>)
 8006628:	f7fd fccc 	bl	8003fc4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800662c:	4813      	ldr	r0, [pc, #76]	; (800667c <prvCheckForValidListAndQueue+0x68>)
 800662e:	f7fd fcc9 	bl	8003fc4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8006632:	4b13      	ldr	r3, [pc, #76]	; (8006680 <prvCheckForValidListAndQueue+0x6c>)
 8006634:	4a10      	ldr	r2, [pc, #64]	; (8006678 <prvCheckForValidListAndQueue+0x64>)
 8006636:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8006638:	4b12      	ldr	r3, [pc, #72]	; (8006684 <prvCheckForValidListAndQueue+0x70>)
 800663a:	4a10      	ldr	r2, [pc, #64]	; (800667c <prvCheckForValidListAndQueue+0x68>)
 800663c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800663e:	2300      	movs	r3, #0
 8006640:	9300      	str	r3, [sp, #0]
 8006642:	4b11      	ldr	r3, [pc, #68]	; (8006688 <prvCheckForValidListAndQueue+0x74>)
 8006644:	4a11      	ldr	r2, [pc, #68]	; (800668c <prvCheckForValidListAndQueue+0x78>)
 8006646:	210c      	movs	r1, #12
 8006648:	200a      	movs	r0, #10
 800664a:	f7fd fdd3 	bl	80041f4 <xQueueGenericCreateStatic>
 800664e:	4602      	mov	r2, r0
 8006650:	4b08      	ldr	r3, [pc, #32]	; (8006674 <prvCheckForValidListAndQueue+0x60>)
 8006652:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8006654:	4b07      	ldr	r3, [pc, #28]	; (8006674 <prvCheckForValidListAndQueue+0x60>)
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	2b00      	cmp	r3, #0
 800665a:	d005      	beq.n	8006668 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800665c:	4b05      	ldr	r3, [pc, #20]	; (8006674 <prvCheckForValidListAndQueue+0x60>)
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	490b      	ldr	r1, [pc, #44]	; (8006690 <prvCheckForValidListAndQueue+0x7c>)
 8006662:	4618      	mov	r0, r3
 8006664:	f7fe fbf8 	bl	8004e58 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006668:	f000 f92c 	bl	80068c4 <vPortExitCritical>
}
 800666c:	bf00      	nop
 800666e:	46bd      	mov	sp, r7
 8006670:	bd80      	pop	{r7, pc}
 8006672:	bf00      	nop
 8006674:	200006a4 	.word	0x200006a4
 8006678:	20000674 	.word	0x20000674
 800667c:	20000688 	.word	0x20000688
 8006680:	2000069c 	.word	0x2000069c
 8006684:	200006a0 	.word	0x200006a0
 8006688:	20000728 	.word	0x20000728
 800668c:	200006b0 	.word	0x200006b0
 8006690:	08007894 	.word	0x08007894

08006694 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006694:	b480      	push	{r7}
 8006696:	b085      	sub	sp, #20
 8006698:	af00      	add	r7, sp, #0
 800669a:	60f8      	str	r0, [r7, #12]
 800669c:	60b9      	str	r1, [r7, #8]
 800669e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	3b04      	subs	r3, #4
 80066a4:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80066ac:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	3b04      	subs	r3, #4
 80066b2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80066b4:	68bb      	ldr	r3, [r7, #8]
 80066b6:	f023 0201 	bic.w	r2, r3, #1
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	3b04      	subs	r3, #4
 80066c2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80066c4:	4a08      	ldr	r2, [pc, #32]	; (80066e8 <pxPortInitialiseStack+0x54>)
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	3b14      	subs	r3, #20
 80066ce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80066d0:	687a      	ldr	r2, [r7, #4]
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	3b20      	subs	r3, #32
 80066da:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80066dc:	68fb      	ldr	r3, [r7, #12]
}
 80066de:	4618      	mov	r0, r3
 80066e0:	3714      	adds	r7, #20
 80066e2:	46bd      	mov	sp, r7
 80066e4:	bc80      	pop	{r7}
 80066e6:	4770      	bx	lr
 80066e8:	080066ed 	.word	0x080066ed

080066ec <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80066ec:	b480      	push	{r7}
 80066ee:	b085      	sub	sp, #20
 80066f0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 80066f2:	2300      	movs	r3, #0
 80066f4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80066f6:	4b10      	ldr	r3, [pc, #64]	; (8006738 <prvTaskExitError+0x4c>)
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066fe:	d009      	beq.n	8006714 <prvTaskExitError+0x28>
 8006700:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006704:	f383 8811 	msr	BASEPRI, r3
 8006708:	f3bf 8f6f 	isb	sy
 800670c:	f3bf 8f4f 	dsb	sy
 8006710:	60fb      	str	r3, [r7, #12]
 8006712:	e7fe      	b.n	8006712 <prvTaskExitError+0x26>
 8006714:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006718:	f383 8811 	msr	BASEPRI, r3
 800671c:	f3bf 8f6f 	isb	sy
 8006720:	f3bf 8f4f 	dsb	sy
 8006724:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006726:	bf00      	nop
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	2b00      	cmp	r3, #0
 800672c:	d0fc      	beq.n	8006728 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800672e:	bf00      	nop
 8006730:	3714      	adds	r7, #20
 8006732:	46bd      	mov	sp, r7
 8006734:	bc80      	pop	{r7}
 8006736:	4770      	bx	lr
 8006738:	2000000c 	.word	0x2000000c
 800673c:	00000000 	.word	0x00000000

08006740 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006740:	4b07      	ldr	r3, [pc, #28]	; (8006760 <pxCurrentTCBConst2>)
 8006742:	6819      	ldr	r1, [r3, #0]
 8006744:	6808      	ldr	r0, [r1, #0]
 8006746:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800674a:	f380 8809 	msr	PSP, r0
 800674e:	f3bf 8f6f 	isb	sy
 8006752:	f04f 0000 	mov.w	r0, #0
 8006756:	f380 8811 	msr	BASEPRI, r0
 800675a:	f04e 0e0d 	orr.w	lr, lr, #13
 800675e:	4770      	bx	lr

08006760 <pxCurrentTCBConst2>:
 8006760:	20000548 	.word	0x20000548
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006764:	bf00      	nop
 8006766:	bf00      	nop

08006768 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8006768:	4806      	ldr	r0, [pc, #24]	; (8006784 <prvPortStartFirstTask+0x1c>)
 800676a:	6800      	ldr	r0, [r0, #0]
 800676c:	6800      	ldr	r0, [r0, #0]
 800676e:	f380 8808 	msr	MSP, r0
 8006772:	b662      	cpsie	i
 8006774:	b661      	cpsie	f
 8006776:	f3bf 8f4f 	dsb	sy
 800677a:	f3bf 8f6f 	isb	sy
 800677e:	df00      	svc	0
 8006780:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8006782:	bf00      	nop
 8006784:	e000ed08 	.word	0xe000ed08

08006788 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006788:	b580      	push	{r7, lr}
 800678a:	b084      	sub	sp, #16
 800678c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800678e:	4b31      	ldr	r3, [pc, #196]	; (8006854 <xPortStartScheduler+0xcc>)
 8006790:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	781b      	ldrb	r3, [r3, #0]
 8006796:	b2db      	uxtb	r3, r3
 8006798:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	22ff      	movs	r2, #255	; 0xff
 800679e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	781b      	ldrb	r3, [r3, #0]
 80067a4:	b2db      	uxtb	r3, r3
 80067a6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80067a8:	78fb      	ldrb	r3, [r7, #3]
 80067aa:	b2db      	uxtb	r3, r3
 80067ac:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80067b0:	b2da      	uxtb	r2, r3
 80067b2:	4b29      	ldr	r3, [pc, #164]	; (8006858 <xPortStartScheduler+0xd0>)
 80067b4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80067b6:	4b29      	ldr	r3, [pc, #164]	; (800685c <xPortStartScheduler+0xd4>)
 80067b8:	2207      	movs	r2, #7
 80067ba:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80067bc:	e009      	b.n	80067d2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80067be:	4b27      	ldr	r3, [pc, #156]	; (800685c <xPortStartScheduler+0xd4>)
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	3b01      	subs	r3, #1
 80067c4:	4a25      	ldr	r2, [pc, #148]	; (800685c <xPortStartScheduler+0xd4>)
 80067c6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80067c8:	78fb      	ldrb	r3, [r7, #3]
 80067ca:	b2db      	uxtb	r3, r3
 80067cc:	005b      	lsls	r3, r3, #1
 80067ce:	b2db      	uxtb	r3, r3
 80067d0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80067d2:	78fb      	ldrb	r3, [r7, #3]
 80067d4:	b2db      	uxtb	r3, r3
 80067d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80067da:	2b80      	cmp	r3, #128	; 0x80
 80067dc:	d0ef      	beq.n	80067be <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80067de:	4b1f      	ldr	r3, [pc, #124]	; (800685c <xPortStartScheduler+0xd4>)
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	f1c3 0307 	rsb	r3, r3, #7
 80067e6:	2b04      	cmp	r3, #4
 80067e8:	d009      	beq.n	80067fe <xPortStartScheduler+0x76>
 80067ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067ee:	f383 8811 	msr	BASEPRI, r3
 80067f2:	f3bf 8f6f 	isb	sy
 80067f6:	f3bf 8f4f 	dsb	sy
 80067fa:	60bb      	str	r3, [r7, #8]
 80067fc:	e7fe      	b.n	80067fc <xPortStartScheduler+0x74>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80067fe:	4b17      	ldr	r3, [pc, #92]	; (800685c <xPortStartScheduler+0xd4>)
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	021b      	lsls	r3, r3, #8
 8006804:	4a15      	ldr	r2, [pc, #84]	; (800685c <xPortStartScheduler+0xd4>)
 8006806:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006808:	4b14      	ldr	r3, [pc, #80]	; (800685c <xPortStartScheduler+0xd4>)
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006810:	4a12      	ldr	r2, [pc, #72]	; (800685c <xPortStartScheduler+0xd4>)
 8006812:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	b2da      	uxtb	r2, r3
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800681c:	4b10      	ldr	r3, [pc, #64]	; (8006860 <xPortStartScheduler+0xd8>)
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	4a0f      	ldr	r2, [pc, #60]	; (8006860 <xPortStartScheduler+0xd8>)
 8006822:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006826:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006828:	4b0d      	ldr	r3, [pc, #52]	; (8006860 <xPortStartScheduler+0xd8>)
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	4a0c      	ldr	r2, [pc, #48]	; (8006860 <xPortStartScheduler+0xd8>)
 800682e:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8006832:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006834:	f000 f8b0 	bl	8006998 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006838:	4b0a      	ldr	r3, [pc, #40]	; (8006864 <xPortStartScheduler+0xdc>)
 800683a:	2200      	movs	r2, #0
 800683c:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800683e:	f7ff ff93 	bl	8006768 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006842:	f7fe fef7 	bl	8005634 <vTaskSwitchContext>
	prvTaskExitError();
 8006846:	f7ff ff51 	bl	80066ec <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800684a:	2300      	movs	r3, #0
}
 800684c:	4618      	mov	r0, r3
 800684e:	3710      	adds	r7, #16
 8006850:	46bd      	mov	sp, r7
 8006852:	bd80      	pop	{r7, pc}
 8006854:	e000e400 	.word	0xe000e400
 8006858:	20000770 	.word	0x20000770
 800685c:	20000774 	.word	0x20000774
 8006860:	e000ed20 	.word	0xe000ed20
 8006864:	2000000c 	.word	0x2000000c

08006868 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006868:	b480      	push	{r7}
 800686a:	b083      	sub	sp, #12
 800686c:	af00      	add	r7, sp, #0
 800686e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006872:	f383 8811 	msr	BASEPRI, r3
 8006876:	f3bf 8f6f 	isb	sy
 800687a:	f3bf 8f4f 	dsb	sy
 800687e:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006880:	4b0e      	ldr	r3, [pc, #56]	; (80068bc <vPortEnterCritical+0x54>)
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	3301      	adds	r3, #1
 8006886:	4a0d      	ldr	r2, [pc, #52]	; (80068bc <vPortEnterCritical+0x54>)
 8006888:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800688a:	4b0c      	ldr	r3, [pc, #48]	; (80068bc <vPortEnterCritical+0x54>)
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	2b01      	cmp	r3, #1
 8006890:	d10e      	bne.n	80068b0 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006892:	4b0b      	ldr	r3, [pc, #44]	; (80068c0 <vPortEnterCritical+0x58>)
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	b2db      	uxtb	r3, r3
 8006898:	2b00      	cmp	r3, #0
 800689a:	d009      	beq.n	80068b0 <vPortEnterCritical+0x48>
 800689c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068a0:	f383 8811 	msr	BASEPRI, r3
 80068a4:	f3bf 8f6f 	isb	sy
 80068a8:	f3bf 8f4f 	dsb	sy
 80068ac:	603b      	str	r3, [r7, #0]
 80068ae:	e7fe      	b.n	80068ae <vPortEnterCritical+0x46>
	}
}
 80068b0:	bf00      	nop
 80068b2:	370c      	adds	r7, #12
 80068b4:	46bd      	mov	sp, r7
 80068b6:	bc80      	pop	{r7}
 80068b8:	4770      	bx	lr
 80068ba:	bf00      	nop
 80068bc:	2000000c 	.word	0x2000000c
 80068c0:	e000ed04 	.word	0xe000ed04

080068c4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80068c4:	b480      	push	{r7}
 80068c6:	b083      	sub	sp, #12
 80068c8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80068ca:	4b10      	ldr	r3, [pc, #64]	; (800690c <vPortExitCritical+0x48>)
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d109      	bne.n	80068e6 <vPortExitCritical+0x22>
 80068d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068d6:	f383 8811 	msr	BASEPRI, r3
 80068da:	f3bf 8f6f 	isb	sy
 80068de:	f3bf 8f4f 	dsb	sy
 80068e2:	607b      	str	r3, [r7, #4]
 80068e4:	e7fe      	b.n	80068e4 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 80068e6:	4b09      	ldr	r3, [pc, #36]	; (800690c <vPortExitCritical+0x48>)
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	3b01      	subs	r3, #1
 80068ec:	4a07      	ldr	r2, [pc, #28]	; (800690c <vPortExitCritical+0x48>)
 80068ee:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80068f0:	4b06      	ldr	r3, [pc, #24]	; (800690c <vPortExitCritical+0x48>)
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d104      	bne.n	8006902 <vPortExitCritical+0x3e>
 80068f8:	2300      	movs	r3, #0
 80068fa:	603b      	str	r3, [r7, #0]
	__asm volatile
 80068fc:	683b      	ldr	r3, [r7, #0]
 80068fe:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8006902:	bf00      	nop
 8006904:	370c      	adds	r7, #12
 8006906:	46bd      	mov	sp, r7
 8006908:	bc80      	pop	{r7}
 800690a:	4770      	bx	lr
 800690c:	2000000c 	.word	0x2000000c

08006910 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006910:	f3ef 8009 	mrs	r0, PSP
 8006914:	f3bf 8f6f 	isb	sy
 8006918:	4b0d      	ldr	r3, [pc, #52]	; (8006950 <pxCurrentTCBConst>)
 800691a:	681a      	ldr	r2, [r3, #0]
 800691c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8006920:	6010      	str	r0, [r2, #0]
 8006922:	e92d 4008 	stmdb	sp!, {r3, lr}
 8006926:	f04f 0050 	mov.w	r0, #80	; 0x50
 800692a:	f380 8811 	msr	BASEPRI, r0
 800692e:	f7fe fe81 	bl	8005634 <vTaskSwitchContext>
 8006932:	f04f 0000 	mov.w	r0, #0
 8006936:	f380 8811 	msr	BASEPRI, r0
 800693a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800693e:	6819      	ldr	r1, [r3, #0]
 8006940:	6808      	ldr	r0, [r1, #0]
 8006942:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8006946:	f380 8809 	msr	PSP, r0
 800694a:	f3bf 8f6f 	isb	sy
 800694e:	4770      	bx	lr

08006950 <pxCurrentTCBConst>:
 8006950:	20000548 	.word	0x20000548
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006954:	bf00      	nop
 8006956:	bf00      	nop

08006958 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006958:	b580      	push	{r7, lr}
 800695a:	b082      	sub	sp, #8
 800695c:	af00      	add	r7, sp, #0
	__asm volatile
 800695e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006962:	f383 8811 	msr	BASEPRI, r3
 8006966:	f3bf 8f6f 	isb	sy
 800696a:	f3bf 8f4f 	dsb	sy
 800696e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006970:	f7fe fda4 	bl	80054bc <xTaskIncrementTick>
 8006974:	4603      	mov	r3, r0
 8006976:	2b00      	cmp	r3, #0
 8006978:	d003      	beq.n	8006982 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800697a:	4b06      	ldr	r3, [pc, #24]	; (8006994 <SysTick_Handler+0x3c>)
 800697c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006980:	601a      	str	r2, [r3, #0]
 8006982:	2300      	movs	r3, #0
 8006984:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006986:	683b      	ldr	r3, [r7, #0]
 8006988:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800698c:	bf00      	nop
 800698e:	3708      	adds	r7, #8
 8006990:	46bd      	mov	sp, r7
 8006992:	bd80      	pop	{r7, pc}
 8006994:	e000ed04 	.word	0xe000ed04

08006998 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006998:	b480      	push	{r7}
 800699a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800699c:	4b0a      	ldr	r3, [pc, #40]	; (80069c8 <vPortSetupTimerInterrupt+0x30>)
 800699e:	2200      	movs	r2, #0
 80069a0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80069a2:	4b0a      	ldr	r3, [pc, #40]	; (80069cc <vPortSetupTimerInterrupt+0x34>)
 80069a4:	2200      	movs	r2, #0
 80069a6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80069a8:	4b09      	ldr	r3, [pc, #36]	; (80069d0 <vPortSetupTimerInterrupt+0x38>)
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	4a09      	ldr	r2, [pc, #36]	; (80069d4 <vPortSetupTimerInterrupt+0x3c>)
 80069ae:	fba2 2303 	umull	r2, r3, r2, r3
 80069b2:	099b      	lsrs	r3, r3, #6
 80069b4:	4a08      	ldr	r2, [pc, #32]	; (80069d8 <vPortSetupTimerInterrupt+0x40>)
 80069b6:	3b01      	subs	r3, #1
 80069b8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80069ba:	4b03      	ldr	r3, [pc, #12]	; (80069c8 <vPortSetupTimerInterrupt+0x30>)
 80069bc:	2207      	movs	r2, #7
 80069be:	601a      	str	r2, [r3, #0]
}
 80069c0:	bf00      	nop
 80069c2:	46bd      	mov	sp, r7
 80069c4:	bc80      	pop	{r7}
 80069c6:	4770      	bx	lr
 80069c8:	e000e010 	.word	0xe000e010
 80069cc:	e000e018 	.word	0xe000e018
 80069d0:	20000000 	.word	0x20000000
 80069d4:	10624dd3 	.word	0x10624dd3
 80069d8:	e000e014 	.word	0xe000e014

080069dc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80069dc:	b480      	push	{r7}
 80069de:	b085      	sub	sp, #20
 80069e0:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80069e2:	f3ef 8305 	mrs	r3, IPSR
 80069e6:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	2b0f      	cmp	r3, #15
 80069ec:	d913      	bls.n	8006a16 <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80069ee:	4a15      	ldr	r2, [pc, #84]	; (8006a44 <vPortValidateInterruptPriority+0x68>)
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	4413      	add	r3, r2
 80069f4:	781b      	ldrb	r3, [r3, #0]
 80069f6:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80069f8:	4b13      	ldr	r3, [pc, #76]	; (8006a48 <vPortValidateInterruptPriority+0x6c>)
 80069fa:	781b      	ldrb	r3, [r3, #0]
 80069fc:	7afa      	ldrb	r2, [r7, #11]
 80069fe:	429a      	cmp	r2, r3
 8006a00:	d209      	bcs.n	8006a16 <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 8006a02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a06:	f383 8811 	msr	BASEPRI, r3
 8006a0a:	f3bf 8f6f 	isb	sy
 8006a0e:	f3bf 8f4f 	dsb	sy
 8006a12:	607b      	str	r3, [r7, #4]
 8006a14:	e7fe      	b.n	8006a14 <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006a16:	4b0d      	ldr	r3, [pc, #52]	; (8006a4c <vPortValidateInterruptPriority+0x70>)
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006a1e:	4b0c      	ldr	r3, [pc, #48]	; (8006a50 <vPortValidateInterruptPriority+0x74>)
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	429a      	cmp	r2, r3
 8006a24:	d909      	bls.n	8006a3a <vPortValidateInterruptPriority+0x5e>
 8006a26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a2a:	f383 8811 	msr	BASEPRI, r3
 8006a2e:	f3bf 8f6f 	isb	sy
 8006a32:	f3bf 8f4f 	dsb	sy
 8006a36:	603b      	str	r3, [r7, #0]
 8006a38:	e7fe      	b.n	8006a38 <vPortValidateInterruptPriority+0x5c>
	}
 8006a3a:	bf00      	nop
 8006a3c:	3714      	adds	r7, #20
 8006a3e:	46bd      	mov	sp, r7
 8006a40:	bc80      	pop	{r7}
 8006a42:	4770      	bx	lr
 8006a44:	e000e3f0 	.word	0xe000e3f0
 8006a48:	20000770 	.word	0x20000770
 8006a4c:	e000ed0c 	.word	0xe000ed0c
 8006a50:	20000774 	.word	0x20000774

08006a54 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006a54:	b580      	push	{r7, lr}
 8006a56:	b08a      	sub	sp, #40	; 0x28
 8006a58:	af00      	add	r7, sp, #0
 8006a5a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006a5c:	2300      	movs	r3, #0
 8006a5e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006a60:	f7fe fc74 	bl	800534c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006a64:	4b59      	ldr	r3, [pc, #356]	; (8006bcc <pvPortMalloc+0x178>)
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d101      	bne.n	8006a70 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006a6c:	f000 f910 	bl	8006c90 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006a70:	4b57      	ldr	r3, [pc, #348]	; (8006bd0 <pvPortMalloc+0x17c>)
 8006a72:	681a      	ldr	r2, [r3, #0]
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	4013      	ands	r3, r2
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	f040 808c 	bne.w	8006b96 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d01c      	beq.n	8006abe <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8006a84:	2208      	movs	r2, #8
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	4413      	add	r3, r2
 8006a8a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	f003 0307 	and.w	r3, r3, #7
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d013      	beq.n	8006abe <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	f023 0307 	bic.w	r3, r3, #7
 8006a9c:	3308      	adds	r3, #8
 8006a9e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	f003 0307 	and.w	r3, r3, #7
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d009      	beq.n	8006abe <pvPortMalloc+0x6a>
 8006aaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006aae:	f383 8811 	msr	BASEPRI, r3
 8006ab2:	f3bf 8f6f 	isb	sy
 8006ab6:	f3bf 8f4f 	dsb	sy
 8006aba:	617b      	str	r3, [r7, #20]
 8006abc:	e7fe      	b.n	8006abc <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d068      	beq.n	8006b96 <pvPortMalloc+0x142>
 8006ac4:	4b43      	ldr	r3, [pc, #268]	; (8006bd4 <pvPortMalloc+0x180>)
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	687a      	ldr	r2, [r7, #4]
 8006aca:	429a      	cmp	r2, r3
 8006acc:	d863      	bhi.n	8006b96 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006ace:	4b42      	ldr	r3, [pc, #264]	; (8006bd8 <pvPortMalloc+0x184>)
 8006ad0:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006ad2:	4b41      	ldr	r3, [pc, #260]	; (8006bd8 <pvPortMalloc+0x184>)
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006ad8:	e004      	b.n	8006ae4 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8006ada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006adc:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006ade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006ae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ae6:	685b      	ldr	r3, [r3, #4]
 8006ae8:	687a      	ldr	r2, [r7, #4]
 8006aea:	429a      	cmp	r2, r3
 8006aec:	d903      	bls.n	8006af6 <pvPortMalloc+0xa2>
 8006aee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d1f1      	bne.n	8006ada <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006af6:	4b35      	ldr	r3, [pc, #212]	; (8006bcc <pvPortMalloc+0x178>)
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006afc:	429a      	cmp	r2, r3
 8006afe:	d04a      	beq.n	8006b96 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006b00:	6a3b      	ldr	r3, [r7, #32]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	2208      	movs	r2, #8
 8006b06:	4413      	add	r3, r2
 8006b08:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b0c:	681a      	ldr	r2, [r3, #0]
 8006b0e:	6a3b      	ldr	r3, [r7, #32]
 8006b10:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006b12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b14:	685a      	ldr	r2, [r3, #4]
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	1ad2      	subs	r2, r2, r3
 8006b1a:	2308      	movs	r3, #8
 8006b1c:	005b      	lsls	r3, r3, #1
 8006b1e:	429a      	cmp	r2, r3
 8006b20:	d91e      	bls.n	8006b60 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006b22:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	4413      	add	r3, r2
 8006b28:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006b2a:	69bb      	ldr	r3, [r7, #24]
 8006b2c:	f003 0307 	and.w	r3, r3, #7
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d009      	beq.n	8006b48 <pvPortMalloc+0xf4>
 8006b34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b38:	f383 8811 	msr	BASEPRI, r3
 8006b3c:	f3bf 8f6f 	isb	sy
 8006b40:	f3bf 8f4f 	dsb	sy
 8006b44:	613b      	str	r3, [r7, #16]
 8006b46:	e7fe      	b.n	8006b46 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006b48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b4a:	685a      	ldr	r2, [r3, #4]
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	1ad2      	subs	r2, r2, r3
 8006b50:	69bb      	ldr	r3, [r7, #24]
 8006b52:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006b54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b56:	687a      	ldr	r2, [r7, #4]
 8006b58:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006b5a:	69b8      	ldr	r0, [r7, #24]
 8006b5c:	f000 f8fa 	bl	8006d54 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006b60:	4b1c      	ldr	r3, [pc, #112]	; (8006bd4 <pvPortMalloc+0x180>)
 8006b62:	681a      	ldr	r2, [r3, #0]
 8006b64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b66:	685b      	ldr	r3, [r3, #4]
 8006b68:	1ad3      	subs	r3, r2, r3
 8006b6a:	4a1a      	ldr	r2, [pc, #104]	; (8006bd4 <pvPortMalloc+0x180>)
 8006b6c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006b6e:	4b19      	ldr	r3, [pc, #100]	; (8006bd4 <pvPortMalloc+0x180>)
 8006b70:	681a      	ldr	r2, [r3, #0]
 8006b72:	4b1a      	ldr	r3, [pc, #104]	; (8006bdc <pvPortMalloc+0x188>)
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	429a      	cmp	r2, r3
 8006b78:	d203      	bcs.n	8006b82 <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006b7a:	4b16      	ldr	r3, [pc, #88]	; (8006bd4 <pvPortMalloc+0x180>)
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	4a17      	ldr	r2, [pc, #92]	; (8006bdc <pvPortMalloc+0x188>)
 8006b80:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006b82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b84:	685a      	ldr	r2, [r3, #4]
 8006b86:	4b12      	ldr	r3, [pc, #72]	; (8006bd0 <pvPortMalloc+0x17c>)
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	431a      	orrs	r2, r3
 8006b8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b8e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006b90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b92:	2200      	movs	r2, #0
 8006b94:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006b96:	f7fe fbe7 	bl	8005368 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 8006b9a:	69fb      	ldr	r3, [r7, #28]
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d101      	bne.n	8006ba4 <pvPortMalloc+0x150>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 8006ba0:	f7f9 fae8 	bl	8000174 <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006ba4:	69fb      	ldr	r3, [r7, #28]
 8006ba6:	f003 0307 	and.w	r3, r3, #7
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d009      	beq.n	8006bc2 <pvPortMalloc+0x16e>
 8006bae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bb2:	f383 8811 	msr	BASEPRI, r3
 8006bb6:	f3bf 8f6f 	isb	sy
 8006bba:	f3bf 8f4f 	dsb	sy
 8006bbe:	60fb      	str	r3, [r7, #12]
 8006bc0:	e7fe      	b.n	8006bc0 <pvPortMalloc+0x16c>
	return pvReturn;
 8006bc2:	69fb      	ldr	r3, [r7, #28]
}
 8006bc4:	4618      	mov	r0, r3
 8006bc6:	3728      	adds	r7, #40	; 0x28
 8006bc8:	46bd      	mov	sp, r7
 8006bca:	bd80      	pop	{r7, pc}
 8006bcc:	20001380 	.word	0x20001380
 8006bd0:	2000138c 	.word	0x2000138c
 8006bd4:	20001384 	.word	0x20001384
 8006bd8:	20001378 	.word	0x20001378
 8006bdc:	20001388 	.word	0x20001388

08006be0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006be0:	b580      	push	{r7, lr}
 8006be2:	b086      	sub	sp, #24
 8006be4:	af00      	add	r7, sp, #0
 8006be6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d046      	beq.n	8006c80 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006bf2:	2308      	movs	r3, #8
 8006bf4:	425b      	negs	r3, r3
 8006bf6:	697a      	ldr	r2, [r7, #20]
 8006bf8:	4413      	add	r3, r2
 8006bfa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006bfc:	697b      	ldr	r3, [r7, #20]
 8006bfe:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006c00:	693b      	ldr	r3, [r7, #16]
 8006c02:	685a      	ldr	r2, [r3, #4]
 8006c04:	4b20      	ldr	r3, [pc, #128]	; (8006c88 <vPortFree+0xa8>)
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	4013      	ands	r3, r2
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d109      	bne.n	8006c22 <vPortFree+0x42>
 8006c0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c12:	f383 8811 	msr	BASEPRI, r3
 8006c16:	f3bf 8f6f 	isb	sy
 8006c1a:	f3bf 8f4f 	dsb	sy
 8006c1e:	60fb      	str	r3, [r7, #12]
 8006c20:	e7fe      	b.n	8006c20 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006c22:	693b      	ldr	r3, [r7, #16]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d009      	beq.n	8006c3e <vPortFree+0x5e>
 8006c2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c2e:	f383 8811 	msr	BASEPRI, r3
 8006c32:	f3bf 8f6f 	isb	sy
 8006c36:	f3bf 8f4f 	dsb	sy
 8006c3a:	60bb      	str	r3, [r7, #8]
 8006c3c:	e7fe      	b.n	8006c3c <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006c3e:	693b      	ldr	r3, [r7, #16]
 8006c40:	685a      	ldr	r2, [r3, #4]
 8006c42:	4b11      	ldr	r3, [pc, #68]	; (8006c88 <vPortFree+0xa8>)
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	4013      	ands	r3, r2
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d019      	beq.n	8006c80 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006c4c:	693b      	ldr	r3, [r7, #16]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d115      	bne.n	8006c80 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006c54:	693b      	ldr	r3, [r7, #16]
 8006c56:	685a      	ldr	r2, [r3, #4]
 8006c58:	4b0b      	ldr	r3, [pc, #44]	; (8006c88 <vPortFree+0xa8>)
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	43db      	mvns	r3, r3
 8006c5e:	401a      	ands	r2, r3
 8006c60:	693b      	ldr	r3, [r7, #16]
 8006c62:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006c64:	f7fe fb72 	bl	800534c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006c68:	693b      	ldr	r3, [r7, #16]
 8006c6a:	685a      	ldr	r2, [r3, #4]
 8006c6c:	4b07      	ldr	r3, [pc, #28]	; (8006c8c <vPortFree+0xac>)
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	4413      	add	r3, r2
 8006c72:	4a06      	ldr	r2, [pc, #24]	; (8006c8c <vPortFree+0xac>)
 8006c74:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006c76:	6938      	ldr	r0, [r7, #16]
 8006c78:	f000 f86c 	bl	8006d54 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8006c7c:	f7fe fb74 	bl	8005368 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006c80:	bf00      	nop
 8006c82:	3718      	adds	r7, #24
 8006c84:	46bd      	mov	sp, r7
 8006c86:	bd80      	pop	{r7, pc}
 8006c88:	2000138c 	.word	0x2000138c
 8006c8c:	20001384 	.word	0x20001384

08006c90 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006c90:	b480      	push	{r7}
 8006c92:	b085      	sub	sp, #20
 8006c94:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006c96:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8006c9a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006c9c:	4b27      	ldr	r3, [pc, #156]	; (8006d3c <prvHeapInit+0xac>)
 8006c9e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	f003 0307 	and.w	r3, r3, #7
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d00c      	beq.n	8006cc4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	3307      	adds	r3, #7
 8006cae:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	f023 0307 	bic.w	r3, r3, #7
 8006cb6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006cb8:	68ba      	ldr	r2, [r7, #8]
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	1ad3      	subs	r3, r2, r3
 8006cbe:	4a1f      	ldr	r2, [pc, #124]	; (8006d3c <prvHeapInit+0xac>)
 8006cc0:	4413      	add	r3, r2
 8006cc2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006cc8:	4a1d      	ldr	r2, [pc, #116]	; (8006d40 <prvHeapInit+0xb0>)
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006cce:	4b1c      	ldr	r3, [pc, #112]	; (8006d40 <prvHeapInit+0xb0>)
 8006cd0:	2200      	movs	r2, #0
 8006cd2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	68ba      	ldr	r2, [r7, #8]
 8006cd8:	4413      	add	r3, r2
 8006cda:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006cdc:	2208      	movs	r2, #8
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	1a9b      	subs	r3, r3, r2
 8006ce2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	f023 0307 	bic.w	r3, r3, #7
 8006cea:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	4a15      	ldr	r2, [pc, #84]	; (8006d44 <prvHeapInit+0xb4>)
 8006cf0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006cf2:	4b14      	ldr	r3, [pc, #80]	; (8006d44 <prvHeapInit+0xb4>)
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	2200      	movs	r2, #0
 8006cf8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006cfa:	4b12      	ldr	r3, [pc, #72]	; (8006d44 <prvHeapInit+0xb4>)
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	2200      	movs	r2, #0
 8006d00:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006d06:	683b      	ldr	r3, [r7, #0]
 8006d08:	68fa      	ldr	r2, [r7, #12]
 8006d0a:	1ad2      	subs	r2, r2, r3
 8006d0c:	683b      	ldr	r3, [r7, #0]
 8006d0e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006d10:	4b0c      	ldr	r3, [pc, #48]	; (8006d44 <prvHeapInit+0xb4>)
 8006d12:	681a      	ldr	r2, [r3, #0]
 8006d14:	683b      	ldr	r3, [r7, #0]
 8006d16:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006d18:	683b      	ldr	r3, [r7, #0]
 8006d1a:	685b      	ldr	r3, [r3, #4]
 8006d1c:	4a0a      	ldr	r2, [pc, #40]	; (8006d48 <prvHeapInit+0xb8>)
 8006d1e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006d20:	683b      	ldr	r3, [r7, #0]
 8006d22:	685b      	ldr	r3, [r3, #4]
 8006d24:	4a09      	ldr	r2, [pc, #36]	; (8006d4c <prvHeapInit+0xbc>)
 8006d26:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006d28:	4b09      	ldr	r3, [pc, #36]	; (8006d50 <prvHeapInit+0xc0>)
 8006d2a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006d2e:	601a      	str	r2, [r3, #0]
}
 8006d30:	bf00      	nop
 8006d32:	3714      	adds	r7, #20
 8006d34:	46bd      	mov	sp, r7
 8006d36:	bc80      	pop	{r7}
 8006d38:	4770      	bx	lr
 8006d3a:	bf00      	nop
 8006d3c:	20000778 	.word	0x20000778
 8006d40:	20001378 	.word	0x20001378
 8006d44:	20001380 	.word	0x20001380
 8006d48:	20001388 	.word	0x20001388
 8006d4c:	20001384 	.word	0x20001384
 8006d50:	2000138c 	.word	0x2000138c

08006d54 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006d54:	b480      	push	{r7}
 8006d56:	b085      	sub	sp, #20
 8006d58:	af00      	add	r7, sp, #0
 8006d5a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006d5c:	4b27      	ldr	r3, [pc, #156]	; (8006dfc <prvInsertBlockIntoFreeList+0xa8>)
 8006d5e:	60fb      	str	r3, [r7, #12]
 8006d60:	e002      	b.n	8006d68 <prvInsertBlockIntoFreeList+0x14>
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	60fb      	str	r3, [r7, #12]
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	687a      	ldr	r2, [r7, #4]
 8006d6e:	429a      	cmp	r2, r3
 8006d70:	d8f7      	bhi.n	8006d62 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	685b      	ldr	r3, [r3, #4]
 8006d7a:	68ba      	ldr	r2, [r7, #8]
 8006d7c:	4413      	add	r3, r2
 8006d7e:	687a      	ldr	r2, [r7, #4]
 8006d80:	429a      	cmp	r2, r3
 8006d82:	d108      	bne.n	8006d96 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	685a      	ldr	r2, [r3, #4]
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	685b      	ldr	r3, [r3, #4]
 8006d8c:	441a      	add	r2, r3
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	685b      	ldr	r3, [r3, #4]
 8006d9e:	68ba      	ldr	r2, [r7, #8]
 8006da0:	441a      	add	r2, r3
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	429a      	cmp	r2, r3
 8006da8:	d118      	bne.n	8006ddc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	681a      	ldr	r2, [r3, #0]
 8006dae:	4b14      	ldr	r3, [pc, #80]	; (8006e00 <prvInsertBlockIntoFreeList+0xac>)
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	429a      	cmp	r2, r3
 8006db4:	d00d      	beq.n	8006dd2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	685a      	ldr	r2, [r3, #4]
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	685b      	ldr	r3, [r3, #4]
 8006dc0:	441a      	add	r2, r3
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	681a      	ldr	r2, [r3, #0]
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	601a      	str	r2, [r3, #0]
 8006dd0:	e008      	b.n	8006de4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006dd2:	4b0b      	ldr	r3, [pc, #44]	; (8006e00 <prvInsertBlockIntoFreeList+0xac>)
 8006dd4:	681a      	ldr	r2, [r3, #0]
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	601a      	str	r2, [r3, #0]
 8006dda:	e003      	b.n	8006de4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	681a      	ldr	r2, [r3, #0]
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006de4:	68fa      	ldr	r2, [r7, #12]
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	429a      	cmp	r2, r3
 8006dea:	d002      	beq.n	8006df2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	687a      	ldr	r2, [r7, #4]
 8006df0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006df2:	bf00      	nop
 8006df4:	3714      	adds	r7, #20
 8006df6:	46bd      	mov	sp, r7
 8006df8:	bc80      	pop	{r7}
 8006dfa:	4770      	bx	lr
 8006dfc:	20001378 	.word	0x20001378
 8006e00:	20001380 	.word	0x20001380

08006e04 <__errno>:
 8006e04:	4b01      	ldr	r3, [pc, #4]	; (8006e0c <__errno+0x8>)
 8006e06:	6818      	ldr	r0, [r3, #0]
 8006e08:	4770      	bx	lr
 8006e0a:	bf00      	nop
 8006e0c:	20000010 	.word	0x20000010

08006e10 <__libc_init_array>:
 8006e10:	b570      	push	{r4, r5, r6, lr}
 8006e12:	2500      	movs	r5, #0
 8006e14:	4e0c      	ldr	r6, [pc, #48]	; (8006e48 <__libc_init_array+0x38>)
 8006e16:	4c0d      	ldr	r4, [pc, #52]	; (8006e4c <__libc_init_array+0x3c>)
 8006e18:	1ba4      	subs	r4, r4, r6
 8006e1a:	10a4      	asrs	r4, r4, #2
 8006e1c:	42a5      	cmp	r5, r4
 8006e1e:	d109      	bne.n	8006e34 <__libc_init_array+0x24>
 8006e20:	f000 fc6a 	bl	80076f8 <_init>
 8006e24:	2500      	movs	r5, #0
 8006e26:	4e0a      	ldr	r6, [pc, #40]	; (8006e50 <__libc_init_array+0x40>)
 8006e28:	4c0a      	ldr	r4, [pc, #40]	; (8006e54 <__libc_init_array+0x44>)
 8006e2a:	1ba4      	subs	r4, r4, r6
 8006e2c:	10a4      	asrs	r4, r4, #2
 8006e2e:	42a5      	cmp	r5, r4
 8006e30:	d105      	bne.n	8006e3e <__libc_init_array+0x2e>
 8006e32:	bd70      	pop	{r4, r5, r6, pc}
 8006e34:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006e38:	4798      	blx	r3
 8006e3a:	3501      	adds	r5, #1
 8006e3c:	e7ee      	b.n	8006e1c <__libc_init_array+0xc>
 8006e3e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006e42:	4798      	blx	r3
 8006e44:	3501      	adds	r5, #1
 8006e46:	e7f2      	b.n	8006e2e <__libc_init_array+0x1e>
 8006e48:	0800790c 	.word	0x0800790c
 8006e4c:	0800790c 	.word	0x0800790c
 8006e50:	0800790c 	.word	0x0800790c
 8006e54:	08007910 	.word	0x08007910

08006e58 <memcpy>:
 8006e58:	b510      	push	{r4, lr}
 8006e5a:	1e43      	subs	r3, r0, #1
 8006e5c:	440a      	add	r2, r1
 8006e5e:	4291      	cmp	r1, r2
 8006e60:	d100      	bne.n	8006e64 <memcpy+0xc>
 8006e62:	bd10      	pop	{r4, pc}
 8006e64:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006e68:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006e6c:	e7f7      	b.n	8006e5e <memcpy+0x6>

08006e6e <memset>:
 8006e6e:	4603      	mov	r3, r0
 8006e70:	4402      	add	r2, r0
 8006e72:	4293      	cmp	r3, r2
 8006e74:	d100      	bne.n	8006e78 <memset+0xa>
 8006e76:	4770      	bx	lr
 8006e78:	f803 1b01 	strb.w	r1, [r3], #1
 8006e7c:	e7f9      	b.n	8006e72 <memset+0x4>
	...

08006e80 <sniprintf>:
 8006e80:	b40c      	push	{r2, r3}
 8006e82:	b530      	push	{r4, r5, lr}
 8006e84:	4b17      	ldr	r3, [pc, #92]	; (8006ee4 <sniprintf+0x64>)
 8006e86:	1e0c      	subs	r4, r1, #0
 8006e88:	b09d      	sub	sp, #116	; 0x74
 8006e8a:	681d      	ldr	r5, [r3, #0]
 8006e8c:	da08      	bge.n	8006ea0 <sniprintf+0x20>
 8006e8e:	238b      	movs	r3, #139	; 0x8b
 8006e90:	f04f 30ff 	mov.w	r0, #4294967295
 8006e94:	602b      	str	r3, [r5, #0]
 8006e96:	b01d      	add	sp, #116	; 0x74
 8006e98:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006e9c:	b002      	add	sp, #8
 8006e9e:	4770      	bx	lr
 8006ea0:	f44f 7302 	mov.w	r3, #520	; 0x208
 8006ea4:	f8ad 3014 	strh.w	r3, [sp, #20]
 8006ea8:	bf0c      	ite	eq
 8006eaa:	4623      	moveq	r3, r4
 8006eac:	f104 33ff 	addne.w	r3, r4, #4294967295
 8006eb0:	9304      	str	r3, [sp, #16]
 8006eb2:	9307      	str	r3, [sp, #28]
 8006eb4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006eb8:	9002      	str	r0, [sp, #8]
 8006eba:	9006      	str	r0, [sp, #24]
 8006ebc:	f8ad 3016 	strh.w	r3, [sp, #22]
 8006ec0:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8006ec2:	ab21      	add	r3, sp, #132	; 0x84
 8006ec4:	a902      	add	r1, sp, #8
 8006ec6:	4628      	mov	r0, r5
 8006ec8:	9301      	str	r3, [sp, #4]
 8006eca:	f000 f887 	bl	8006fdc <_svfiprintf_r>
 8006ece:	1c43      	adds	r3, r0, #1
 8006ed0:	bfbc      	itt	lt
 8006ed2:	238b      	movlt	r3, #139	; 0x8b
 8006ed4:	602b      	strlt	r3, [r5, #0]
 8006ed6:	2c00      	cmp	r4, #0
 8006ed8:	d0dd      	beq.n	8006e96 <sniprintf+0x16>
 8006eda:	2200      	movs	r2, #0
 8006edc:	9b02      	ldr	r3, [sp, #8]
 8006ede:	701a      	strb	r2, [r3, #0]
 8006ee0:	e7d9      	b.n	8006e96 <sniprintf+0x16>
 8006ee2:	bf00      	nop
 8006ee4:	20000010 	.word	0x20000010

08006ee8 <siprintf>:
 8006ee8:	b40e      	push	{r1, r2, r3}
 8006eea:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006eee:	b500      	push	{lr}
 8006ef0:	b09c      	sub	sp, #112	; 0x70
 8006ef2:	ab1d      	add	r3, sp, #116	; 0x74
 8006ef4:	9002      	str	r0, [sp, #8]
 8006ef6:	9006      	str	r0, [sp, #24]
 8006ef8:	9107      	str	r1, [sp, #28]
 8006efa:	9104      	str	r1, [sp, #16]
 8006efc:	4808      	ldr	r0, [pc, #32]	; (8006f20 <siprintf+0x38>)
 8006efe:	4909      	ldr	r1, [pc, #36]	; (8006f24 <siprintf+0x3c>)
 8006f00:	f853 2b04 	ldr.w	r2, [r3], #4
 8006f04:	9105      	str	r1, [sp, #20]
 8006f06:	6800      	ldr	r0, [r0, #0]
 8006f08:	a902      	add	r1, sp, #8
 8006f0a:	9301      	str	r3, [sp, #4]
 8006f0c:	f000 f866 	bl	8006fdc <_svfiprintf_r>
 8006f10:	2200      	movs	r2, #0
 8006f12:	9b02      	ldr	r3, [sp, #8]
 8006f14:	701a      	strb	r2, [r3, #0]
 8006f16:	b01c      	add	sp, #112	; 0x70
 8006f18:	f85d eb04 	ldr.w	lr, [sp], #4
 8006f1c:	b003      	add	sp, #12
 8006f1e:	4770      	bx	lr
 8006f20:	20000010 	.word	0x20000010
 8006f24:	ffff0208 	.word	0xffff0208

08006f28 <__ssputs_r>:
 8006f28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006f2c:	688e      	ldr	r6, [r1, #8]
 8006f2e:	4682      	mov	sl, r0
 8006f30:	429e      	cmp	r6, r3
 8006f32:	460c      	mov	r4, r1
 8006f34:	4690      	mov	r8, r2
 8006f36:	4699      	mov	r9, r3
 8006f38:	d837      	bhi.n	8006faa <__ssputs_r+0x82>
 8006f3a:	898a      	ldrh	r2, [r1, #12]
 8006f3c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006f40:	d031      	beq.n	8006fa6 <__ssputs_r+0x7e>
 8006f42:	2302      	movs	r3, #2
 8006f44:	6825      	ldr	r5, [r4, #0]
 8006f46:	6909      	ldr	r1, [r1, #16]
 8006f48:	1a6f      	subs	r7, r5, r1
 8006f4a:	6965      	ldr	r5, [r4, #20]
 8006f4c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006f50:	fb95 f5f3 	sdiv	r5, r5, r3
 8006f54:	f109 0301 	add.w	r3, r9, #1
 8006f58:	443b      	add	r3, r7
 8006f5a:	429d      	cmp	r5, r3
 8006f5c:	bf38      	it	cc
 8006f5e:	461d      	movcc	r5, r3
 8006f60:	0553      	lsls	r3, r2, #21
 8006f62:	d530      	bpl.n	8006fc6 <__ssputs_r+0x9e>
 8006f64:	4629      	mov	r1, r5
 8006f66:	f000 fb2d 	bl	80075c4 <_malloc_r>
 8006f6a:	4606      	mov	r6, r0
 8006f6c:	b950      	cbnz	r0, 8006f84 <__ssputs_r+0x5c>
 8006f6e:	230c      	movs	r3, #12
 8006f70:	f04f 30ff 	mov.w	r0, #4294967295
 8006f74:	f8ca 3000 	str.w	r3, [sl]
 8006f78:	89a3      	ldrh	r3, [r4, #12]
 8006f7a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006f7e:	81a3      	strh	r3, [r4, #12]
 8006f80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006f84:	463a      	mov	r2, r7
 8006f86:	6921      	ldr	r1, [r4, #16]
 8006f88:	f7ff ff66 	bl	8006e58 <memcpy>
 8006f8c:	89a3      	ldrh	r3, [r4, #12]
 8006f8e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006f92:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006f96:	81a3      	strh	r3, [r4, #12]
 8006f98:	6126      	str	r6, [r4, #16]
 8006f9a:	443e      	add	r6, r7
 8006f9c:	6026      	str	r6, [r4, #0]
 8006f9e:	464e      	mov	r6, r9
 8006fa0:	6165      	str	r5, [r4, #20]
 8006fa2:	1bed      	subs	r5, r5, r7
 8006fa4:	60a5      	str	r5, [r4, #8]
 8006fa6:	454e      	cmp	r6, r9
 8006fa8:	d900      	bls.n	8006fac <__ssputs_r+0x84>
 8006faa:	464e      	mov	r6, r9
 8006fac:	4632      	mov	r2, r6
 8006fae:	4641      	mov	r1, r8
 8006fb0:	6820      	ldr	r0, [r4, #0]
 8006fb2:	f000 faa1 	bl	80074f8 <memmove>
 8006fb6:	68a3      	ldr	r3, [r4, #8]
 8006fb8:	2000      	movs	r0, #0
 8006fba:	1b9b      	subs	r3, r3, r6
 8006fbc:	60a3      	str	r3, [r4, #8]
 8006fbe:	6823      	ldr	r3, [r4, #0]
 8006fc0:	441e      	add	r6, r3
 8006fc2:	6026      	str	r6, [r4, #0]
 8006fc4:	e7dc      	b.n	8006f80 <__ssputs_r+0x58>
 8006fc6:	462a      	mov	r2, r5
 8006fc8:	f000 fb56 	bl	8007678 <_realloc_r>
 8006fcc:	4606      	mov	r6, r0
 8006fce:	2800      	cmp	r0, #0
 8006fd0:	d1e2      	bne.n	8006f98 <__ssputs_r+0x70>
 8006fd2:	6921      	ldr	r1, [r4, #16]
 8006fd4:	4650      	mov	r0, sl
 8006fd6:	f000 faa9 	bl	800752c <_free_r>
 8006fda:	e7c8      	b.n	8006f6e <__ssputs_r+0x46>

08006fdc <_svfiprintf_r>:
 8006fdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006fe0:	461d      	mov	r5, r3
 8006fe2:	898b      	ldrh	r3, [r1, #12]
 8006fe4:	b09d      	sub	sp, #116	; 0x74
 8006fe6:	061f      	lsls	r7, r3, #24
 8006fe8:	4680      	mov	r8, r0
 8006fea:	460c      	mov	r4, r1
 8006fec:	4616      	mov	r6, r2
 8006fee:	d50f      	bpl.n	8007010 <_svfiprintf_r+0x34>
 8006ff0:	690b      	ldr	r3, [r1, #16]
 8006ff2:	b96b      	cbnz	r3, 8007010 <_svfiprintf_r+0x34>
 8006ff4:	2140      	movs	r1, #64	; 0x40
 8006ff6:	f000 fae5 	bl	80075c4 <_malloc_r>
 8006ffa:	6020      	str	r0, [r4, #0]
 8006ffc:	6120      	str	r0, [r4, #16]
 8006ffe:	b928      	cbnz	r0, 800700c <_svfiprintf_r+0x30>
 8007000:	230c      	movs	r3, #12
 8007002:	f8c8 3000 	str.w	r3, [r8]
 8007006:	f04f 30ff 	mov.w	r0, #4294967295
 800700a:	e0c8      	b.n	800719e <_svfiprintf_r+0x1c2>
 800700c:	2340      	movs	r3, #64	; 0x40
 800700e:	6163      	str	r3, [r4, #20]
 8007010:	2300      	movs	r3, #0
 8007012:	9309      	str	r3, [sp, #36]	; 0x24
 8007014:	2320      	movs	r3, #32
 8007016:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800701a:	2330      	movs	r3, #48	; 0x30
 800701c:	f04f 0b01 	mov.w	fp, #1
 8007020:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007024:	9503      	str	r5, [sp, #12]
 8007026:	4637      	mov	r7, r6
 8007028:	463d      	mov	r5, r7
 800702a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800702e:	b10b      	cbz	r3, 8007034 <_svfiprintf_r+0x58>
 8007030:	2b25      	cmp	r3, #37	; 0x25
 8007032:	d13e      	bne.n	80070b2 <_svfiprintf_r+0xd6>
 8007034:	ebb7 0a06 	subs.w	sl, r7, r6
 8007038:	d00b      	beq.n	8007052 <_svfiprintf_r+0x76>
 800703a:	4653      	mov	r3, sl
 800703c:	4632      	mov	r2, r6
 800703e:	4621      	mov	r1, r4
 8007040:	4640      	mov	r0, r8
 8007042:	f7ff ff71 	bl	8006f28 <__ssputs_r>
 8007046:	3001      	adds	r0, #1
 8007048:	f000 80a4 	beq.w	8007194 <_svfiprintf_r+0x1b8>
 800704c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800704e:	4453      	add	r3, sl
 8007050:	9309      	str	r3, [sp, #36]	; 0x24
 8007052:	783b      	ldrb	r3, [r7, #0]
 8007054:	2b00      	cmp	r3, #0
 8007056:	f000 809d 	beq.w	8007194 <_svfiprintf_r+0x1b8>
 800705a:	2300      	movs	r3, #0
 800705c:	f04f 32ff 	mov.w	r2, #4294967295
 8007060:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007064:	9304      	str	r3, [sp, #16]
 8007066:	9307      	str	r3, [sp, #28]
 8007068:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800706c:	931a      	str	r3, [sp, #104]	; 0x68
 800706e:	462f      	mov	r7, r5
 8007070:	2205      	movs	r2, #5
 8007072:	f817 1b01 	ldrb.w	r1, [r7], #1
 8007076:	4850      	ldr	r0, [pc, #320]	; (80071b8 <_svfiprintf_r+0x1dc>)
 8007078:	f000 fa30 	bl	80074dc <memchr>
 800707c:	9b04      	ldr	r3, [sp, #16]
 800707e:	b9d0      	cbnz	r0, 80070b6 <_svfiprintf_r+0xda>
 8007080:	06d9      	lsls	r1, r3, #27
 8007082:	bf44      	itt	mi
 8007084:	2220      	movmi	r2, #32
 8007086:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800708a:	071a      	lsls	r2, r3, #28
 800708c:	bf44      	itt	mi
 800708e:	222b      	movmi	r2, #43	; 0x2b
 8007090:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007094:	782a      	ldrb	r2, [r5, #0]
 8007096:	2a2a      	cmp	r2, #42	; 0x2a
 8007098:	d015      	beq.n	80070c6 <_svfiprintf_r+0xea>
 800709a:	462f      	mov	r7, r5
 800709c:	2000      	movs	r0, #0
 800709e:	250a      	movs	r5, #10
 80070a0:	9a07      	ldr	r2, [sp, #28]
 80070a2:	4639      	mov	r1, r7
 80070a4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80070a8:	3b30      	subs	r3, #48	; 0x30
 80070aa:	2b09      	cmp	r3, #9
 80070ac:	d94d      	bls.n	800714a <_svfiprintf_r+0x16e>
 80070ae:	b1b8      	cbz	r0, 80070e0 <_svfiprintf_r+0x104>
 80070b0:	e00f      	b.n	80070d2 <_svfiprintf_r+0xf6>
 80070b2:	462f      	mov	r7, r5
 80070b4:	e7b8      	b.n	8007028 <_svfiprintf_r+0x4c>
 80070b6:	4a40      	ldr	r2, [pc, #256]	; (80071b8 <_svfiprintf_r+0x1dc>)
 80070b8:	463d      	mov	r5, r7
 80070ba:	1a80      	subs	r0, r0, r2
 80070bc:	fa0b f000 	lsl.w	r0, fp, r0
 80070c0:	4318      	orrs	r0, r3
 80070c2:	9004      	str	r0, [sp, #16]
 80070c4:	e7d3      	b.n	800706e <_svfiprintf_r+0x92>
 80070c6:	9a03      	ldr	r2, [sp, #12]
 80070c8:	1d11      	adds	r1, r2, #4
 80070ca:	6812      	ldr	r2, [r2, #0]
 80070cc:	9103      	str	r1, [sp, #12]
 80070ce:	2a00      	cmp	r2, #0
 80070d0:	db01      	blt.n	80070d6 <_svfiprintf_r+0xfa>
 80070d2:	9207      	str	r2, [sp, #28]
 80070d4:	e004      	b.n	80070e0 <_svfiprintf_r+0x104>
 80070d6:	4252      	negs	r2, r2
 80070d8:	f043 0302 	orr.w	r3, r3, #2
 80070dc:	9207      	str	r2, [sp, #28]
 80070de:	9304      	str	r3, [sp, #16]
 80070e0:	783b      	ldrb	r3, [r7, #0]
 80070e2:	2b2e      	cmp	r3, #46	; 0x2e
 80070e4:	d10c      	bne.n	8007100 <_svfiprintf_r+0x124>
 80070e6:	787b      	ldrb	r3, [r7, #1]
 80070e8:	2b2a      	cmp	r3, #42	; 0x2a
 80070ea:	d133      	bne.n	8007154 <_svfiprintf_r+0x178>
 80070ec:	9b03      	ldr	r3, [sp, #12]
 80070ee:	3702      	adds	r7, #2
 80070f0:	1d1a      	adds	r2, r3, #4
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	9203      	str	r2, [sp, #12]
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	bfb8      	it	lt
 80070fa:	f04f 33ff 	movlt.w	r3, #4294967295
 80070fe:	9305      	str	r3, [sp, #20]
 8007100:	4d2e      	ldr	r5, [pc, #184]	; (80071bc <_svfiprintf_r+0x1e0>)
 8007102:	2203      	movs	r2, #3
 8007104:	7839      	ldrb	r1, [r7, #0]
 8007106:	4628      	mov	r0, r5
 8007108:	f000 f9e8 	bl	80074dc <memchr>
 800710c:	b138      	cbz	r0, 800711e <_svfiprintf_r+0x142>
 800710e:	2340      	movs	r3, #64	; 0x40
 8007110:	1b40      	subs	r0, r0, r5
 8007112:	fa03 f000 	lsl.w	r0, r3, r0
 8007116:	9b04      	ldr	r3, [sp, #16]
 8007118:	3701      	adds	r7, #1
 800711a:	4303      	orrs	r3, r0
 800711c:	9304      	str	r3, [sp, #16]
 800711e:	7839      	ldrb	r1, [r7, #0]
 8007120:	2206      	movs	r2, #6
 8007122:	4827      	ldr	r0, [pc, #156]	; (80071c0 <_svfiprintf_r+0x1e4>)
 8007124:	1c7e      	adds	r6, r7, #1
 8007126:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800712a:	f000 f9d7 	bl	80074dc <memchr>
 800712e:	2800      	cmp	r0, #0
 8007130:	d038      	beq.n	80071a4 <_svfiprintf_r+0x1c8>
 8007132:	4b24      	ldr	r3, [pc, #144]	; (80071c4 <_svfiprintf_r+0x1e8>)
 8007134:	bb13      	cbnz	r3, 800717c <_svfiprintf_r+0x1a0>
 8007136:	9b03      	ldr	r3, [sp, #12]
 8007138:	3307      	adds	r3, #7
 800713a:	f023 0307 	bic.w	r3, r3, #7
 800713e:	3308      	adds	r3, #8
 8007140:	9303      	str	r3, [sp, #12]
 8007142:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007144:	444b      	add	r3, r9
 8007146:	9309      	str	r3, [sp, #36]	; 0x24
 8007148:	e76d      	b.n	8007026 <_svfiprintf_r+0x4a>
 800714a:	fb05 3202 	mla	r2, r5, r2, r3
 800714e:	2001      	movs	r0, #1
 8007150:	460f      	mov	r7, r1
 8007152:	e7a6      	b.n	80070a2 <_svfiprintf_r+0xc6>
 8007154:	2300      	movs	r3, #0
 8007156:	250a      	movs	r5, #10
 8007158:	4619      	mov	r1, r3
 800715a:	3701      	adds	r7, #1
 800715c:	9305      	str	r3, [sp, #20]
 800715e:	4638      	mov	r0, r7
 8007160:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007164:	3a30      	subs	r2, #48	; 0x30
 8007166:	2a09      	cmp	r2, #9
 8007168:	d903      	bls.n	8007172 <_svfiprintf_r+0x196>
 800716a:	2b00      	cmp	r3, #0
 800716c:	d0c8      	beq.n	8007100 <_svfiprintf_r+0x124>
 800716e:	9105      	str	r1, [sp, #20]
 8007170:	e7c6      	b.n	8007100 <_svfiprintf_r+0x124>
 8007172:	fb05 2101 	mla	r1, r5, r1, r2
 8007176:	2301      	movs	r3, #1
 8007178:	4607      	mov	r7, r0
 800717a:	e7f0      	b.n	800715e <_svfiprintf_r+0x182>
 800717c:	ab03      	add	r3, sp, #12
 800717e:	9300      	str	r3, [sp, #0]
 8007180:	4622      	mov	r2, r4
 8007182:	4b11      	ldr	r3, [pc, #68]	; (80071c8 <_svfiprintf_r+0x1ec>)
 8007184:	a904      	add	r1, sp, #16
 8007186:	4640      	mov	r0, r8
 8007188:	f3af 8000 	nop.w
 800718c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8007190:	4681      	mov	r9, r0
 8007192:	d1d6      	bne.n	8007142 <_svfiprintf_r+0x166>
 8007194:	89a3      	ldrh	r3, [r4, #12]
 8007196:	065b      	lsls	r3, r3, #25
 8007198:	f53f af35 	bmi.w	8007006 <_svfiprintf_r+0x2a>
 800719c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800719e:	b01d      	add	sp, #116	; 0x74
 80071a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80071a4:	ab03      	add	r3, sp, #12
 80071a6:	9300      	str	r3, [sp, #0]
 80071a8:	4622      	mov	r2, r4
 80071aa:	4b07      	ldr	r3, [pc, #28]	; (80071c8 <_svfiprintf_r+0x1ec>)
 80071ac:	a904      	add	r1, sp, #16
 80071ae:	4640      	mov	r0, r8
 80071b0:	f000 f882 	bl	80072b8 <_printf_i>
 80071b4:	e7ea      	b.n	800718c <_svfiprintf_r+0x1b0>
 80071b6:	bf00      	nop
 80071b8:	080078d8 	.word	0x080078d8
 80071bc:	080078de 	.word	0x080078de
 80071c0:	080078e2 	.word	0x080078e2
 80071c4:	00000000 	.word	0x00000000
 80071c8:	08006f29 	.word	0x08006f29

080071cc <_printf_common>:
 80071cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80071d0:	4691      	mov	r9, r2
 80071d2:	461f      	mov	r7, r3
 80071d4:	688a      	ldr	r2, [r1, #8]
 80071d6:	690b      	ldr	r3, [r1, #16]
 80071d8:	4606      	mov	r6, r0
 80071da:	4293      	cmp	r3, r2
 80071dc:	bfb8      	it	lt
 80071de:	4613      	movlt	r3, r2
 80071e0:	f8c9 3000 	str.w	r3, [r9]
 80071e4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80071e8:	460c      	mov	r4, r1
 80071ea:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80071ee:	b112      	cbz	r2, 80071f6 <_printf_common+0x2a>
 80071f0:	3301      	adds	r3, #1
 80071f2:	f8c9 3000 	str.w	r3, [r9]
 80071f6:	6823      	ldr	r3, [r4, #0]
 80071f8:	0699      	lsls	r1, r3, #26
 80071fa:	bf42      	ittt	mi
 80071fc:	f8d9 3000 	ldrmi.w	r3, [r9]
 8007200:	3302      	addmi	r3, #2
 8007202:	f8c9 3000 	strmi.w	r3, [r9]
 8007206:	6825      	ldr	r5, [r4, #0]
 8007208:	f015 0506 	ands.w	r5, r5, #6
 800720c:	d107      	bne.n	800721e <_printf_common+0x52>
 800720e:	f104 0a19 	add.w	sl, r4, #25
 8007212:	68e3      	ldr	r3, [r4, #12]
 8007214:	f8d9 2000 	ldr.w	r2, [r9]
 8007218:	1a9b      	subs	r3, r3, r2
 800721a:	42ab      	cmp	r3, r5
 800721c:	dc29      	bgt.n	8007272 <_printf_common+0xa6>
 800721e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8007222:	6822      	ldr	r2, [r4, #0]
 8007224:	3300      	adds	r3, #0
 8007226:	bf18      	it	ne
 8007228:	2301      	movne	r3, #1
 800722a:	0692      	lsls	r2, r2, #26
 800722c:	d42e      	bmi.n	800728c <_printf_common+0xc0>
 800722e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007232:	4639      	mov	r1, r7
 8007234:	4630      	mov	r0, r6
 8007236:	47c0      	blx	r8
 8007238:	3001      	adds	r0, #1
 800723a:	d021      	beq.n	8007280 <_printf_common+0xb4>
 800723c:	6823      	ldr	r3, [r4, #0]
 800723e:	68e5      	ldr	r5, [r4, #12]
 8007240:	f003 0306 	and.w	r3, r3, #6
 8007244:	2b04      	cmp	r3, #4
 8007246:	bf18      	it	ne
 8007248:	2500      	movne	r5, #0
 800724a:	f8d9 2000 	ldr.w	r2, [r9]
 800724e:	f04f 0900 	mov.w	r9, #0
 8007252:	bf08      	it	eq
 8007254:	1aad      	subeq	r5, r5, r2
 8007256:	68a3      	ldr	r3, [r4, #8]
 8007258:	6922      	ldr	r2, [r4, #16]
 800725a:	bf08      	it	eq
 800725c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007260:	4293      	cmp	r3, r2
 8007262:	bfc4      	itt	gt
 8007264:	1a9b      	subgt	r3, r3, r2
 8007266:	18ed      	addgt	r5, r5, r3
 8007268:	341a      	adds	r4, #26
 800726a:	454d      	cmp	r5, r9
 800726c:	d11a      	bne.n	80072a4 <_printf_common+0xd8>
 800726e:	2000      	movs	r0, #0
 8007270:	e008      	b.n	8007284 <_printf_common+0xb8>
 8007272:	2301      	movs	r3, #1
 8007274:	4652      	mov	r2, sl
 8007276:	4639      	mov	r1, r7
 8007278:	4630      	mov	r0, r6
 800727a:	47c0      	blx	r8
 800727c:	3001      	adds	r0, #1
 800727e:	d103      	bne.n	8007288 <_printf_common+0xbc>
 8007280:	f04f 30ff 	mov.w	r0, #4294967295
 8007284:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007288:	3501      	adds	r5, #1
 800728a:	e7c2      	b.n	8007212 <_printf_common+0x46>
 800728c:	2030      	movs	r0, #48	; 0x30
 800728e:	18e1      	adds	r1, r4, r3
 8007290:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007294:	1c5a      	adds	r2, r3, #1
 8007296:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800729a:	4422      	add	r2, r4
 800729c:	3302      	adds	r3, #2
 800729e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80072a2:	e7c4      	b.n	800722e <_printf_common+0x62>
 80072a4:	2301      	movs	r3, #1
 80072a6:	4622      	mov	r2, r4
 80072a8:	4639      	mov	r1, r7
 80072aa:	4630      	mov	r0, r6
 80072ac:	47c0      	blx	r8
 80072ae:	3001      	adds	r0, #1
 80072b0:	d0e6      	beq.n	8007280 <_printf_common+0xb4>
 80072b2:	f109 0901 	add.w	r9, r9, #1
 80072b6:	e7d8      	b.n	800726a <_printf_common+0x9e>

080072b8 <_printf_i>:
 80072b8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80072bc:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80072c0:	460c      	mov	r4, r1
 80072c2:	7e09      	ldrb	r1, [r1, #24]
 80072c4:	b085      	sub	sp, #20
 80072c6:	296e      	cmp	r1, #110	; 0x6e
 80072c8:	4617      	mov	r7, r2
 80072ca:	4606      	mov	r6, r0
 80072cc:	4698      	mov	r8, r3
 80072ce:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80072d0:	f000 80b3 	beq.w	800743a <_printf_i+0x182>
 80072d4:	d822      	bhi.n	800731c <_printf_i+0x64>
 80072d6:	2963      	cmp	r1, #99	; 0x63
 80072d8:	d036      	beq.n	8007348 <_printf_i+0x90>
 80072da:	d80a      	bhi.n	80072f2 <_printf_i+0x3a>
 80072dc:	2900      	cmp	r1, #0
 80072de:	f000 80b9 	beq.w	8007454 <_printf_i+0x19c>
 80072e2:	2958      	cmp	r1, #88	; 0x58
 80072e4:	f000 8083 	beq.w	80073ee <_printf_i+0x136>
 80072e8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80072ec:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80072f0:	e032      	b.n	8007358 <_printf_i+0xa0>
 80072f2:	2964      	cmp	r1, #100	; 0x64
 80072f4:	d001      	beq.n	80072fa <_printf_i+0x42>
 80072f6:	2969      	cmp	r1, #105	; 0x69
 80072f8:	d1f6      	bne.n	80072e8 <_printf_i+0x30>
 80072fa:	6820      	ldr	r0, [r4, #0]
 80072fc:	6813      	ldr	r3, [r2, #0]
 80072fe:	0605      	lsls	r5, r0, #24
 8007300:	f103 0104 	add.w	r1, r3, #4
 8007304:	d52a      	bpl.n	800735c <_printf_i+0xa4>
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	6011      	str	r1, [r2, #0]
 800730a:	2b00      	cmp	r3, #0
 800730c:	da03      	bge.n	8007316 <_printf_i+0x5e>
 800730e:	222d      	movs	r2, #45	; 0x2d
 8007310:	425b      	negs	r3, r3
 8007312:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8007316:	486f      	ldr	r0, [pc, #444]	; (80074d4 <_printf_i+0x21c>)
 8007318:	220a      	movs	r2, #10
 800731a:	e039      	b.n	8007390 <_printf_i+0xd8>
 800731c:	2973      	cmp	r1, #115	; 0x73
 800731e:	f000 809d 	beq.w	800745c <_printf_i+0x1a4>
 8007322:	d808      	bhi.n	8007336 <_printf_i+0x7e>
 8007324:	296f      	cmp	r1, #111	; 0x6f
 8007326:	d020      	beq.n	800736a <_printf_i+0xb2>
 8007328:	2970      	cmp	r1, #112	; 0x70
 800732a:	d1dd      	bne.n	80072e8 <_printf_i+0x30>
 800732c:	6823      	ldr	r3, [r4, #0]
 800732e:	f043 0320 	orr.w	r3, r3, #32
 8007332:	6023      	str	r3, [r4, #0]
 8007334:	e003      	b.n	800733e <_printf_i+0x86>
 8007336:	2975      	cmp	r1, #117	; 0x75
 8007338:	d017      	beq.n	800736a <_printf_i+0xb2>
 800733a:	2978      	cmp	r1, #120	; 0x78
 800733c:	d1d4      	bne.n	80072e8 <_printf_i+0x30>
 800733e:	2378      	movs	r3, #120	; 0x78
 8007340:	4865      	ldr	r0, [pc, #404]	; (80074d8 <_printf_i+0x220>)
 8007342:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007346:	e055      	b.n	80073f4 <_printf_i+0x13c>
 8007348:	6813      	ldr	r3, [r2, #0]
 800734a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800734e:	1d19      	adds	r1, r3, #4
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	6011      	str	r1, [r2, #0]
 8007354:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007358:	2301      	movs	r3, #1
 800735a:	e08c      	b.n	8007476 <_printf_i+0x1be>
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007362:	6011      	str	r1, [r2, #0]
 8007364:	bf18      	it	ne
 8007366:	b21b      	sxthne	r3, r3
 8007368:	e7cf      	b.n	800730a <_printf_i+0x52>
 800736a:	6813      	ldr	r3, [r2, #0]
 800736c:	6825      	ldr	r5, [r4, #0]
 800736e:	1d18      	adds	r0, r3, #4
 8007370:	6010      	str	r0, [r2, #0]
 8007372:	0628      	lsls	r0, r5, #24
 8007374:	d501      	bpl.n	800737a <_printf_i+0xc2>
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	e002      	b.n	8007380 <_printf_i+0xc8>
 800737a:	0668      	lsls	r0, r5, #25
 800737c:	d5fb      	bpl.n	8007376 <_printf_i+0xbe>
 800737e:	881b      	ldrh	r3, [r3, #0]
 8007380:	296f      	cmp	r1, #111	; 0x6f
 8007382:	bf14      	ite	ne
 8007384:	220a      	movne	r2, #10
 8007386:	2208      	moveq	r2, #8
 8007388:	4852      	ldr	r0, [pc, #328]	; (80074d4 <_printf_i+0x21c>)
 800738a:	2100      	movs	r1, #0
 800738c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007390:	6865      	ldr	r5, [r4, #4]
 8007392:	2d00      	cmp	r5, #0
 8007394:	60a5      	str	r5, [r4, #8]
 8007396:	f2c0 8095 	blt.w	80074c4 <_printf_i+0x20c>
 800739a:	6821      	ldr	r1, [r4, #0]
 800739c:	f021 0104 	bic.w	r1, r1, #4
 80073a0:	6021      	str	r1, [r4, #0]
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d13d      	bne.n	8007422 <_printf_i+0x16a>
 80073a6:	2d00      	cmp	r5, #0
 80073a8:	f040 808e 	bne.w	80074c8 <_printf_i+0x210>
 80073ac:	4665      	mov	r5, ip
 80073ae:	2a08      	cmp	r2, #8
 80073b0:	d10b      	bne.n	80073ca <_printf_i+0x112>
 80073b2:	6823      	ldr	r3, [r4, #0]
 80073b4:	07db      	lsls	r3, r3, #31
 80073b6:	d508      	bpl.n	80073ca <_printf_i+0x112>
 80073b8:	6923      	ldr	r3, [r4, #16]
 80073ba:	6862      	ldr	r2, [r4, #4]
 80073bc:	429a      	cmp	r2, r3
 80073be:	bfde      	ittt	le
 80073c0:	2330      	movle	r3, #48	; 0x30
 80073c2:	f805 3c01 	strble.w	r3, [r5, #-1]
 80073c6:	f105 35ff 	addle.w	r5, r5, #4294967295
 80073ca:	ebac 0305 	sub.w	r3, ip, r5
 80073ce:	6123      	str	r3, [r4, #16]
 80073d0:	f8cd 8000 	str.w	r8, [sp]
 80073d4:	463b      	mov	r3, r7
 80073d6:	aa03      	add	r2, sp, #12
 80073d8:	4621      	mov	r1, r4
 80073da:	4630      	mov	r0, r6
 80073dc:	f7ff fef6 	bl	80071cc <_printf_common>
 80073e0:	3001      	adds	r0, #1
 80073e2:	d14d      	bne.n	8007480 <_printf_i+0x1c8>
 80073e4:	f04f 30ff 	mov.w	r0, #4294967295
 80073e8:	b005      	add	sp, #20
 80073ea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80073ee:	4839      	ldr	r0, [pc, #228]	; (80074d4 <_printf_i+0x21c>)
 80073f0:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80073f4:	6813      	ldr	r3, [r2, #0]
 80073f6:	6821      	ldr	r1, [r4, #0]
 80073f8:	1d1d      	adds	r5, r3, #4
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	6015      	str	r5, [r2, #0]
 80073fe:	060a      	lsls	r2, r1, #24
 8007400:	d50b      	bpl.n	800741a <_printf_i+0x162>
 8007402:	07ca      	lsls	r2, r1, #31
 8007404:	bf44      	itt	mi
 8007406:	f041 0120 	orrmi.w	r1, r1, #32
 800740a:	6021      	strmi	r1, [r4, #0]
 800740c:	b91b      	cbnz	r3, 8007416 <_printf_i+0x15e>
 800740e:	6822      	ldr	r2, [r4, #0]
 8007410:	f022 0220 	bic.w	r2, r2, #32
 8007414:	6022      	str	r2, [r4, #0]
 8007416:	2210      	movs	r2, #16
 8007418:	e7b7      	b.n	800738a <_printf_i+0xd2>
 800741a:	064d      	lsls	r5, r1, #25
 800741c:	bf48      	it	mi
 800741e:	b29b      	uxthmi	r3, r3
 8007420:	e7ef      	b.n	8007402 <_printf_i+0x14a>
 8007422:	4665      	mov	r5, ip
 8007424:	fbb3 f1f2 	udiv	r1, r3, r2
 8007428:	fb02 3311 	mls	r3, r2, r1, r3
 800742c:	5cc3      	ldrb	r3, [r0, r3]
 800742e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8007432:	460b      	mov	r3, r1
 8007434:	2900      	cmp	r1, #0
 8007436:	d1f5      	bne.n	8007424 <_printf_i+0x16c>
 8007438:	e7b9      	b.n	80073ae <_printf_i+0xf6>
 800743a:	6813      	ldr	r3, [r2, #0]
 800743c:	6825      	ldr	r5, [r4, #0]
 800743e:	1d18      	adds	r0, r3, #4
 8007440:	6961      	ldr	r1, [r4, #20]
 8007442:	6010      	str	r0, [r2, #0]
 8007444:	0628      	lsls	r0, r5, #24
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	d501      	bpl.n	800744e <_printf_i+0x196>
 800744a:	6019      	str	r1, [r3, #0]
 800744c:	e002      	b.n	8007454 <_printf_i+0x19c>
 800744e:	066a      	lsls	r2, r5, #25
 8007450:	d5fb      	bpl.n	800744a <_printf_i+0x192>
 8007452:	8019      	strh	r1, [r3, #0]
 8007454:	2300      	movs	r3, #0
 8007456:	4665      	mov	r5, ip
 8007458:	6123      	str	r3, [r4, #16]
 800745a:	e7b9      	b.n	80073d0 <_printf_i+0x118>
 800745c:	6813      	ldr	r3, [r2, #0]
 800745e:	1d19      	adds	r1, r3, #4
 8007460:	6011      	str	r1, [r2, #0]
 8007462:	681d      	ldr	r5, [r3, #0]
 8007464:	6862      	ldr	r2, [r4, #4]
 8007466:	2100      	movs	r1, #0
 8007468:	4628      	mov	r0, r5
 800746a:	f000 f837 	bl	80074dc <memchr>
 800746e:	b108      	cbz	r0, 8007474 <_printf_i+0x1bc>
 8007470:	1b40      	subs	r0, r0, r5
 8007472:	6060      	str	r0, [r4, #4]
 8007474:	6863      	ldr	r3, [r4, #4]
 8007476:	6123      	str	r3, [r4, #16]
 8007478:	2300      	movs	r3, #0
 800747a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800747e:	e7a7      	b.n	80073d0 <_printf_i+0x118>
 8007480:	6923      	ldr	r3, [r4, #16]
 8007482:	462a      	mov	r2, r5
 8007484:	4639      	mov	r1, r7
 8007486:	4630      	mov	r0, r6
 8007488:	47c0      	blx	r8
 800748a:	3001      	adds	r0, #1
 800748c:	d0aa      	beq.n	80073e4 <_printf_i+0x12c>
 800748e:	6823      	ldr	r3, [r4, #0]
 8007490:	079b      	lsls	r3, r3, #30
 8007492:	d413      	bmi.n	80074bc <_printf_i+0x204>
 8007494:	68e0      	ldr	r0, [r4, #12]
 8007496:	9b03      	ldr	r3, [sp, #12]
 8007498:	4298      	cmp	r0, r3
 800749a:	bfb8      	it	lt
 800749c:	4618      	movlt	r0, r3
 800749e:	e7a3      	b.n	80073e8 <_printf_i+0x130>
 80074a0:	2301      	movs	r3, #1
 80074a2:	464a      	mov	r2, r9
 80074a4:	4639      	mov	r1, r7
 80074a6:	4630      	mov	r0, r6
 80074a8:	47c0      	blx	r8
 80074aa:	3001      	adds	r0, #1
 80074ac:	d09a      	beq.n	80073e4 <_printf_i+0x12c>
 80074ae:	3501      	adds	r5, #1
 80074b0:	68e3      	ldr	r3, [r4, #12]
 80074b2:	9a03      	ldr	r2, [sp, #12]
 80074b4:	1a9b      	subs	r3, r3, r2
 80074b6:	42ab      	cmp	r3, r5
 80074b8:	dcf2      	bgt.n	80074a0 <_printf_i+0x1e8>
 80074ba:	e7eb      	b.n	8007494 <_printf_i+0x1dc>
 80074bc:	2500      	movs	r5, #0
 80074be:	f104 0919 	add.w	r9, r4, #25
 80074c2:	e7f5      	b.n	80074b0 <_printf_i+0x1f8>
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d1ac      	bne.n	8007422 <_printf_i+0x16a>
 80074c8:	7803      	ldrb	r3, [r0, #0]
 80074ca:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80074ce:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80074d2:	e76c      	b.n	80073ae <_printf_i+0xf6>
 80074d4:	080078e9 	.word	0x080078e9
 80074d8:	080078fa 	.word	0x080078fa

080074dc <memchr>:
 80074dc:	b510      	push	{r4, lr}
 80074de:	b2c9      	uxtb	r1, r1
 80074e0:	4402      	add	r2, r0
 80074e2:	4290      	cmp	r0, r2
 80074e4:	4603      	mov	r3, r0
 80074e6:	d101      	bne.n	80074ec <memchr+0x10>
 80074e8:	2300      	movs	r3, #0
 80074ea:	e003      	b.n	80074f4 <memchr+0x18>
 80074ec:	781c      	ldrb	r4, [r3, #0]
 80074ee:	3001      	adds	r0, #1
 80074f0:	428c      	cmp	r4, r1
 80074f2:	d1f6      	bne.n	80074e2 <memchr+0x6>
 80074f4:	4618      	mov	r0, r3
 80074f6:	bd10      	pop	{r4, pc}

080074f8 <memmove>:
 80074f8:	4288      	cmp	r0, r1
 80074fa:	b510      	push	{r4, lr}
 80074fc:	eb01 0302 	add.w	r3, r1, r2
 8007500:	d807      	bhi.n	8007512 <memmove+0x1a>
 8007502:	1e42      	subs	r2, r0, #1
 8007504:	4299      	cmp	r1, r3
 8007506:	d00a      	beq.n	800751e <memmove+0x26>
 8007508:	f811 4b01 	ldrb.w	r4, [r1], #1
 800750c:	f802 4f01 	strb.w	r4, [r2, #1]!
 8007510:	e7f8      	b.n	8007504 <memmove+0xc>
 8007512:	4283      	cmp	r3, r0
 8007514:	d9f5      	bls.n	8007502 <memmove+0xa>
 8007516:	1881      	adds	r1, r0, r2
 8007518:	1ad2      	subs	r2, r2, r3
 800751a:	42d3      	cmn	r3, r2
 800751c:	d100      	bne.n	8007520 <memmove+0x28>
 800751e:	bd10      	pop	{r4, pc}
 8007520:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007524:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8007528:	e7f7      	b.n	800751a <memmove+0x22>
	...

0800752c <_free_r>:
 800752c:	b538      	push	{r3, r4, r5, lr}
 800752e:	4605      	mov	r5, r0
 8007530:	2900      	cmp	r1, #0
 8007532:	d043      	beq.n	80075bc <_free_r+0x90>
 8007534:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007538:	1f0c      	subs	r4, r1, #4
 800753a:	2b00      	cmp	r3, #0
 800753c:	bfb8      	it	lt
 800753e:	18e4      	addlt	r4, r4, r3
 8007540:	f000 f8d0 	bl	80076e4 <__malloc_lock>
 8007544:	4a1e      	ldr	r2, [pc, #120]	; (80075c0 <_free_r+0x94>)
 8007546:	6813      	ldr	r3, [r2, #0]
 8007548:	4610      	mov	r0, r2
 800754a:	b933      	cbnz	r3, 800755a <_free_r+0x2e>
 800754c:	6063      	str	r3, [r4, #4]
 800754e:	6014      	str	r4, [r2, #0]
 8007550:	4628      	mov	r0, r5
 8007552:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007556:	f000 b8c6 	b.w	80076e6 <__malloc_unlock>
 800755a:	42a3      	cmp	r3, r4
 800755c:	d90b      	bls.n	8007576 <_free_r+0x4a>
 800755e:	6821      	ldr	r1, [r4, #0]
 8007560:	1862      	adds	r2, r4, r1
 8007562:	4293      	cmp	r3, r2
 8007564:	bf01      	itttt	eq
 8007566:	681a      	ldreq	r2, [r3, #0]
 8007568:	685b      	ldreq	r3, [r3, #4]
 800756a:	1852      	addeq	r2, r2, r1
 800756c:	6022      	streq	r2, [r4, #0]
 800756e:	6063      	str	r3, [r4, #4]
 8007570:	6004      	str	r4, [r0, #0]
 8007572:	e7ed      	b.n	8007550 <_free_r+0x24>
 8007574:	4613      	mov	r3, r2
 8007576:	685a      	ldr	r2, [r3, #4]
 8007578:	b10a      	cbz	r2, 800757e <_free_r+0x52>
 800757a:	42a2      	cmp	r2, r4
 800757c:	d9fa      	bls.n	8007574 <_free_r+0x48>
 800757e:	6819      	ldr	r1, [r3, #0]
 8007580:	1858      	adds	r0, r3, r1
 8007582:	42a0      	cmp	r0, r4
 8007584:	d10b      	bne.n	800759e <_free_r+0x72>
 8007586:	6820      	ldr	r0, [r4, #0]
 8007588:	4401      	add	r1, r0
 800758a:	1858      	adds	r0, r3, r1
 800758c:	4282      	cmp	r2, r0
 800758e:	6019      	str	r1, [r3, #0]
 8007590:	d1de      	bne.n	8007550 <_free_r+0x24>
 8007592:	6810      	ldr	r0, [r2, #0]
 8007594:	6852      	ldr	r2, [r2, #4]
 8007596:	4401      	add	r1, r0
 8007598:	6019      	str	r1, [r3, #0]
 800759a:	605a      	str	r2, [r3, #4]
 800759c:	e7d8      	b.n	8007550 <_free_r+0x24>
 800759e:	d902      	bls.n	80075a6 <_free_r+0x7a>
 80075a0:	230c      	movs	r3, #12
 80075a2:	602b      	str	r3, [r5, #0]
 80075a4:	e7d4      	b.n	8007550 <_free_r+0x24>
 80075a6:	6820      	ldr	r0, [r4, #0]
 80075a8:	1821      	adds	r1, r4, r0
 80075aa:	428a      	cmp	r2, r1
 80075ac:	bf01      	itttt	eq
 80075ae:	6811      	ldreq	r1, [r2, #0]
 80075b0:	6852      	ldreq	r2, [r2, #4]
 80075b2:	1809      	addeq	r1, r1, r0
 80075b4:	6021      	streq	r1, [r4, #0]
 80075b6:	6062      	str	r2, [r4, #4]
 80075b8:	605c      	str	r4, [r3, #4]
 80075ba:	e7c9      	b.n	8007550 <_free_r+0x24>
 80075bc:	bd38      	pop	{r3, r4, r5, pc}
 80075be:	bf00      	nop
 80075c0:	20001390 	.word	0x20001390

080075c4 <_malloc_r>:
 80075c4:	b570      	push	{r4, r5, r6, lr}
 80075c6:	1ccd      	adds	r5, r1, #3
 80075c8:	f025 0503 	bic.w	r5, r5, #3
 80075cc:	3508      	adds	r5, #8
 80075ce:	2d0c      	cmp	r5, #12
 80075d0:	bf38      	it	cc
 80075d2:	250c      	movcc	r5, #12
 80075d4:	2d00      	cmp	r5, #0
 80075d6:	4606      	mov	r6, r0
 80075d8:	db01      	blt.n	80075de <_malloc_r+0x1a>
 80075da:	42a9      	cmp	r1, r5
 80075dc:	d903      	bls.n	80075e6 <_malloc_r+0x22>
 80075de:	230c      	movs	r3, #12
 80075e0:	6033      	str	r3, [r6, #0]
 80075e2:	2000      	movs	r0, #0
 80075e4:	bd70      	pop	{r4, r5, r6, pc}
 80075e6:	f000 f87d 	bl	80076e4 <__malloc_lock>
 80075ea:	4a21      	ldr	r2, [pc, #132]	; (8007670 <_malloc_r+0xac>)
 80075ec:	6814      	ldr	r4, [r2, #0]
 80075ee:	4621      	mov	r1, r4
 80075f0:	b991      	cbnz	r1, 8007618 <_malloc_r+0x54>
 80075f2:	4c20      	ldr	r4, [pc, #128]	; (8007674 <_malloc_r+0xb0>)
 80075f4:	6823      	ldr	r3, [r4, #0]
 80075f6:	b91b      	cbnz	r3, 8007600 <_malloc_r+0x3c>
 80075f8:	4630      	mov	r0, r6
 80075fa:	f000 f863 	bl	80076c4 <_sbrk_r>
 80075fe:	6020      	str	r0, [r4, #0]
 8007600:	4629      	mov	r1, r5
 8007602:	4630      	mov	r0, r6
 8007604:	f000 f85e 	bl	80076c4 <_sbrk_r>
 8007608:	1c43      	adds	r3, r0, #1
 800760a:	d124      	bne.n	8007656 <_malloc_r+0x92>
 800760c:	230c      	movs	r3, #12
 800760e:	4630      	mov	r0, r6
 8007610:	6033      	str	r3, [r6, #0]
 8007612:	f000 f868 	bl	80076e6 <__malloc_unlock>
 8007616:	e7e4      	b.n	80075e2 <_malloc_r+0x1e>
 8007618:	680b      	ldr	r3, [r1, #0]
 800761a:	1b5b      	subs	r3, r3, r5
 800761c:	d418      	bmi.n	8007650 <_malloc_r+0x8c>
 800761e:	2b0b      	cmp	r3, #11
 8007620:	d90f      	bls.n	8007642 <_malloc_r+0x7e>
 8007622:	600b      	str	r3, [r1, #0]
 8007624:	18cc      	adds	r4, r1, r3
 8007626:	50cd      	str	r5, [r1, r3]
 8007628:	4630      	mov	r0, r6
 800762a:	f000 f85c 	bl	80076e6 <__malloc_unlock>
 800762e:	f104 000b 	add.w	r0, r4, #11
 8007632:	1d23      	adds	r3, r4, #4
 8007634:	f020 0007 	bic.w	r0, r0, #7
 8007638:	1ac3      	subs	r3, r0, r3
 800763a:	d0d3      	beq.n	80075e4 <_malloc_r+0x20>
 800763c:	425a      	negs	r2, r3
 800763e:	50e2      	str	r2, [r4, r3]
 8007640:	e7d0      	b.n	80075e4 <_malloc_r+0x20>
 8007642:	684b      	ldr	r3, [r1, #4]
 8007644:	428c      	cmp	r4, r1
 8007646:	bf16      	itet	ne
 8007648:	6063      	strne	r3, [r4, #4]
 800764a:	6013      	streq	r3, [r2, #0]
 800764c:	460c      	movne	r4, r1
 800764e:	e7eb      	b.n	8007628 <_malloc_r+0x64>
 8007650:	460c      	mov	r4, r1
 8007652:	6849      	ldr	r1, [r1, #4]
 8007654:	e7cc      	b.n	80075f0 <_malloc_r+0x2c>
 8007656:	1cc4      	adds	r4, r0, #3
 8007658:	f024 0403 	bic.w	r4, r4, #3
 800765c:	42a0      	cmp	r0, r4
 800765e:	d005      	beq.n	800766c <_malloc_r+0xa8>
 8007660:	1a21      	subs	r1, r4, r0
 8007662:	4630      	mov	r0, r6
 8007664:	f000 f82e 	bl	80076c4 <_sbrk_r>
 8007668:	3001      	adds	r0, #1
 800766a:	d0cf      	beq.n	800760c <_malloc_r+0x48>
 800766c:	6025      	str	r5, [r4, #0]
 800766e:	e7db      	b.n	8007628 <_malloc_r+0x64>
 8007670:	20001390 	.word	0x20001390
 8007674:	20001394 	.word	0x20001394

08007678 <_realloc_r>:
 8007678:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800767a:	4607      	mov	r7, r0
 800767c:	4614      	mov	r4, r2
 800767e:	460e      	mov	r6, r1
 8007680:	b921      	cbnz	r1, 800768c <_realloc_r+0x14>
 8007682:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8007686:	4611      	mov	r1, r2
 8007688:	f7ff bf9c 	b.w	80075c4 <_malloc_r>
 800768c:	b922      	cbnz	r2, 8007698 <_realloc_r+0x20>
 800768e:	f7ff ff4d 	bl	800752c <_free_r>
 8007692:	4625      	mov	r5, r4
 8007694:	4628      	mov	r0, r5
 8007696:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007698:	f000 f826 	bl	80076e8 <_malloc_usable_size_r>
 800769c:	42a0      	cmp	r0, r4
 800769e:	d20f      	bcs.n	80076c0 <_realloc_r+0x48>
 80076a0:	4621      	mov	r1, r4
 80076a2:	4638      	mov	r0, r7
 80076a4:	f7ff ff8e 	bl	80075c4 <_malloc_r>
 80076a8:	4605      	mov	r5, r0
 80076aa:	2800      	cmp	r0, #0
 80076ac:	d0f2      	beq.n	8007694 <_realloc_r+0x1c>
 80076ae:	4631      	mov	r1, r6
 80076b0:	4622      	mov	r2, r4
 80076b2:	f7ff fbd1 	bl	8006e58 <memcpy>
 80076b6:	4631      	mov	r1, r6
 80076b8:	4638      	mov	r0, r7
 80076ba:	f7ff ff37 	bl	800752c <_free_r>
 80076be:	e7e9      	b.n	8007694 <_realloc_r+0x1c>
 80076c0:	4635      	mov	r5, r6
 80076c2:	e7e7      	b.n	8007694 <_realloc_r+0x1c>

080076c4 <_sbrk_r>:
 80076c4:	b538      	push	{r3, r4, r5, lr}
 80076c6:	2300      	movs	r3, #0
 80076c8:	4c05      	ldr	r4, [pc, #20]	; (80076e0 <_sbrk_r+0x1c>)
 80076ca:	4605      	mov	r5, r0
 80076cc:	4608      	mov	r0, r1
 80076ce:	6023      	str	r3, [r4, #0]
 80076d0:	f7fa f8b6 	bl	8001840 <_sbrk>
 80076d4:	1c43      	adds	r3, r0, #1
 80076d6:	d102      	bne.n	80076de <_sbrk_r+0x1a>
 80076d8:	6823      	ldr	r3, [r4, #0]
 80076da:	b103      	cbz	r3, 80076de <_sbrk_r+0x1a>
 80076dc:	602b      	str	r3, [r5, #0]
 80076de:	bd38      	pop	{r3, r4, r5, pc}
 80076e0:	20001688 	.word	0x20001688

080076e4 <__malloc_lock>:
 80076e4:	4770      	bx	lr

080076e6 <__malloc_unlock>:
 80076e6:	4770      	bx	lr

080076e8 <_malloc_usable_size_r>:
 80076e8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80076ec:	1f18      	subs	r0, r3, #4
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	bfbc      	itt	lt
 80076f2:	580b      	ldrlt	r3, [r1, r0]
 80076f4:	18c0      	addlt	r0, r0, r3
 80076f6:	4770      	bx	lr

080076f8 <_init>:
 80076f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80076fa:	bf00      	nop
 80076fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80076fe:	bc08      	pop	{r3}
 8007700:	469e      	mov	lr, r3
 8007702:	4770      	bx	lr

08007704 <_fini>:
 8007704:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007706:	bf00      	nop
 8007708:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800770a:	bc08      	pop	{r3}
 800770c:	469e      	mov	lr, r3
 800770e:	4770      	bx	lr
